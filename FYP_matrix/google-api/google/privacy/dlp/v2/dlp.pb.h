// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2/dlp.proto

#ifndef PROTOBUF_INCLUDED_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto
#define PROTOBUF_INCLUDED_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/privacy/dlp/v2/storage.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
#include "google/type/date.pb.h"
#include "google/type/dayofweek.pb.h"
#include "google/type/timeofday.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto 

namespace protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[146];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto
namespace google {
namespace privacy {
namespace dlp {
namespace v2 {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class Action_PublishSummaryToCscc;
class Action_PublishSummaryToCsccDefaultTypeInternal;
extern Action_PublishSummaryToCsccDefaultTypeInternal _Action_PublishSummaryToCscc_default_instance_;
class Action_PublishToPubSub;
class Action_PublishToPubSubDefaultTypeInternal;
extern Action_PublishToPubSubDefaultTypeInternal _Action_PublishToPubSub_default_instance_;
class Action_SaveFindings;
class Action_SaveFindingsDefaultTypeInternal;
extern Action_SaveFindingsDefaultTypeInternal _Action_SaveFindings_default_instance_;
class AnalyzeDataSourceRiskDetails;
class AnalyzeDataSourceRiskDetailsDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetailsDefaultTypeInternal _AnalyzeDataSourceRiskDetails_default_instance_;
class AnalyzeDataSourceRiskDetails_CategoricalStatsResult;
class AnalyzeDataSourceRiskDetails_CategoricalStatsResultDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_CategoricalStatsResultDefaultTypeInternal _AnalyzeDataSourceRiskDetails_CategoricalStatsResult_default_instance_;
class AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket;
class AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucketDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucketDefaultTypeInternal _AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_default_instance_;
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult;
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResultDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResultDefaultTypeInternal _AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_default_instance_;
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket;
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucketDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucketDefaultTypeInternal _AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_default_instance_;
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues;
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValuesDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValuesDefaultTypeInternal _AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_default_instance_;
class AnalyzeDataSourceRiskDetails_KAnonymityResult;
class AnalyzeDataSourceRiskDetails_KAnonymityResultDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_KAnonymityResultDefaultTypeInternal _AnalyzeDataSourceRiskDetails_KAnonymityResult_default_instance_;
class AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass;
class AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClassDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClassDefaultTypeInternal _AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_default_instance_;
class AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket;
class AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucketDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucketDefaultTypeInternal _AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_default_instance_;
class AnalyzeDataSourceRiskDetails_KMapEstimationResult;
class AnalyzeDataSourceRiskDetails_KMapEstimationResultDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_KMapEstimationResultDefaultTypeInternal _AnalyzeDataSourceRiskDetails_KMapEstimationResult_default_instance_;
class AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket;
class AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucketDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucketDefaultTypeInternal _AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_default_instance_;
class AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues;
class AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValuesDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValuesDefaultTypeInternal _AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_default_instance_;
class AnalyzeDataSourceRiskDetails_LDiversityResult;
class AnalyzeDataSourceRiskDetails_LDiversityResultDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_LDiversityResultDefaultTypeInternal _AnalyzeDataSourceRiskDetails_LDiversityResult_default_instance_;
class AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass;
class AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClassDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClassDefaultTypeInternal _AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_default_instance_;
class AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket;
class AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucketDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucketDefaultTypeInternal _AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_default_instance_;
class AnalyzeDataSourceRiskDetails_NumericalStatsResult;
class AnalyzeDataSourceRiskDetails_NumericalStatsResultDefaultTypeInternal;
extern AnalyzeDataSourceRiskDetails_NumericalStatsResultDefaultTypeInternal _AnalyzeDataSourceRiskDetails_NumericalStatsResult_default_instance_;
class BoundingBox;
class BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class BucketingConfig;
class BucketingConfigDefaultTypeInternal;
extern BucketingConfigDefaultTypeInternal _BucketingConfig_default_instance_;
class BucketingConfig_Bucket;
class BucketingConfig_BucketDefaultTypeInternal;
extern BucketingConfig_BucketDefaultTypeInternal _BucketingConfig_Bucket_default_instance_;
class ByteContentItem;
class ByteContentItemDefaultTypeInternal;
extern ByteContentItemDefaultTypeInternal _ByteContentItem_default_instance_;
class CancelDlpJobRequest;
class CancelDlpJobRequestDefaultTypeInternal;
extern CancelDlpJobRequestDefaultTypeInternal _CancelDlpJobRequest_default_instance_;
class CharacterMaskConfig;
class CharacterMaskConfigDefaultTypeInternal;
extern CharacterMaskConfigDefaultTypeInternal _CharacterMaskConfig_default_instance_;
class CharsToIgnore;
class CharsToIgnoreDefaultTypeInternal;
extern CharsToIgnoreDefaultTypeInternal _CharsToIgnore_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class ContentItem;
class ContentItemDefaultTypeInternal;
extern ContentItemDefaultTypeInternal _ContentItem_default_instance_;
class ContentLocation;
class ContentLocationDefaultTypeInternal;
extern ContentLocationDefaultTypeInternal _ContentLocation_default_instance_;
class CreateDeidentifyTemplateRequest;
class CreateDeidentifyTemplateRequestDefaultTypeInternal;
extern CreateDeidentifyTemplateRequestDefaultTypeInternal _CreateDeidentifyTemplateRequest_default_instance_;
class CreateDlpJobRequest;
class CreateDlpJobRequestDefaultTypeInternal;
extern CreateDlpJobRequestDefaultTypeInternal _CreateDlpJobRequest_default_instance_;
class CreateInspectTemplateRequest;
class CreateInspectTemplateRequestDefaultTypeInternal;
extern CreateInspectTemplateRequestDefaultTypeInternal _CreateInspectTemplateRequest_default_instance_;
class CreateJobTriggerRequest;
class CreateJobTriggerRequestDefaultTypeInternal;
extern CreateJobTriggerRequestDefaultTypeInternal _CreateJobTriggerRequest_default_instance_;
class CreateStoredInfoTypeRequest;
class CreateStoredInfoTypeRequestDefaultTypeInternal;
extern CreateStoredInfoTypeRequestDefaultTypeInternal _CreateStoredInfoTypeRequest_default_instance_;
class CryptoHashConfig;
class CryptoHashConfigDefaultTypeInternal;
extern CryptoHashConfigDefaultTypeInternal _CryptoHashConfig_default_instance_;
class CryptoKey;
class CryptoKeyDefaultTypeInternal;
extern CryptoKeyDefaultTypeInternal _CryptoKey_default_instance_;
class CryptoReplaceFfxFpeConfig;
class CryptoReplaceFfxFpeConfigDefaultTypeInternal;
extern CryptoReplaceFfxFpeConfigDefaultTypeInternal _CryptoReplaceFfxFpeConfig_default_instance_;
class DateShiftConfig;
class DateShiftConfigDefaultTypeInternal;
extern DateShiftConfigDefaultTypeInternal _DateShiftConfig_default_instance_;
class DateTime;
class DateTimeDefaultTypeInternal;
extern DateTimeDefaultTypeInternal _DateTime_default_instance_;
class DateTime_TimeZone;
class DateTime_TimeZoneDefaultTypeInternal;
extern DateTime_TimeZoneDefaultTypeInternal _DateTime_TimeZone_default_instance_;
class DeidentifyConfig;
class DeidentifyConfigDefaultTypeInternal;
extern DeidentifyConfigDefaultTypeInternal _DeidentifyConfig_default_instance_;
class DeidentifyContentRequest;
class DeidentifyContentRequestDefaultTypeInternal;
extern DeidentifyContentRequestDefaultTypeInternal _DeidentifyContentRequest_default_instance_;
class DeidentifyContentResponse;
class DeidentifyContentResponseDefaultTypeInternal;
extern DeidentifyContentResponseDefaultTypeInternal _DeidentifyContentResponse_default_instance_;
class DeidentifyTemplate;
class DeidentifyTemplateDefaultTypeInternal;
extern DeidentifyTemplateDefaultTypeInternal _DeidentifyTemplate_default_instance_;
class DeleteDeidentifyTemplateRequest;
class DeleteDeidentifyTemplateRequestDefaultTypeInternal;
extern DeleteDeidentifyTemplateRequestDefaultTypeInternal _DeleteDeidentifyTemplateRequest_default_instance_;
class DeleteDlpJobRequest;
class DeleteDlpJobRequestDefaultTypeInternal;
extern DeleteDlpJobRequestDefaultTypeInternal _DeleteDlpJobRequest_default_instance_;
class DeleteInspectTemplateRequest;
class DeleteInspectTemplateRequestDefaultTypeInternal;
extern DeleteInspectTemplateRequestDefaultTypeInternal _DeleteInspectTemplateRequest_default_instance_;
class DeleteJobTriggerRequest;
class DeleteJobTriggerRequestDefaultTypeInternal;
extern DeleteJobTriggerRequestDefaultTypeInternal _DeleteJobTriggerRequest_default_instance_;
class DeleteStoredInfoTypeRequest;
class DeleteStoredInfoTypeRequestDefaultTypeInternal;
extern DeleteStoredInfoTypeRequestDefaultTypeInternal _DeleteStoredInfoTypeRequest_default_instance_;
class DlpJob;
class DlpJobDefaultTypeInternal;
extern DlpJobDefaultTypeInternal _DlpJob_default_instance_;
class DocumentLocation;
class DocumentLocationDefaultTypeInternal;
extern DocumentLocationDefaultTypeInternal _DocumentLocation_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class FieldTransformation;
class FieldTransformationDefaultTypeInternal;
extern FieldTransformationDefaultTypeInternal _FieldTransformation_default_instance_;
class Finding;
class FindingDefaultTypeInternal;
extern FindingDefaultTypeInternal _Finding_default_instance_;
class FixedSizeBucketingConfig;
class FixedSizeBucketingConfigDefaultTypeInternal;
extern FixedSizeBucketingConfigDefaultTypeInternal _FixedSizeBucketingConfig_default_instance_;
class GetDeidentifyTemplateRequest;
class GetDeidentifyTemplateRequestDefaultTypeInternal;
extern GetDeidentifyTemplateRequestDefaultTypeInternal _GetDeidentifyTemplateRequest_default_instance_;
class GetDlpJobRequest;
class GetDlpJobRequestDefaultTypeInternal;
extern GetDlpJobRequestDefaultTypeInternal _GetDlpJobRequest_default_instance_;
class GetInspectTemplateRequest;
class GetInspectTemplateRequestDefaultTypeInternal;
extern GetInspectTemplateRequestDefaultTypeInternal _GetInspectTemplateRequest_default_instance_;
class GetJobTriggerRequest;
class GetJobTriggerRequestDefaultTypeInternal;
extern GetJobTriggerRequestDefaultTypeInternal _GetJobTriggerRequest_default_instance_;
class GetStoredInfoTypeRequest;
class GetStoredInfoTypeRequestDefaultTypeInternal;
extern GetStoredInfoTypeRequestDefaultTypeInternal _GetStoredInfoTypeRequest_default_instance_;
class ImageLocation;
class ImageLocationDefaultTypeInternal;
extern ImageLocationDefaultTypeInternal _ImageLocation_default_instance_;
class InfoTypeDescription;
class InfoTypeDescriptionDefaultTypeInternal;
extern InfoTypeDescriptionDefaultTypeInternal _InfoTypeDescription_default_instance_;
class InfoTypeStats;
class InfoTypeStatsDefaultTypeInternal;
extern InfoTypeStatsDefaultTypeInternal _InfoTypeStats_default_instance_;
class InfoTypeTransformations;
class InfoTypeTransformationsDefaultTypeInternal;
extern InfoTypeTransformationsDefaultTypeInternal _InfoTypeTransformations_default_instance_;
class InfoTypeTransformations_InfoTypeTransformation;
class InfoTypeTransformations_InfoTypeTransformationDefaultTypeInternal;
extern InfoTypeTransformations_InfoTypeTransformationDefaultTypeInternal _InfoTypeTransformations_InfoTypeTransformation_default_instance_;
class InspectConfig;
class InspectConfigDefaultTypeInternal;
extern InspectConfigDefaultTypeInternal _InspectConfig_default_instance_;
class InspectConfig_FindingLimits;
class InspectConfig_FindingLimitsDefaultTypeInternal;
extern InspectConfig_FindingLimitsDefaultTypeInternal _InspectConfig_FindingLimits_default_instance_;
class InspectConfig_FindingLimits_InfoTypeLimit;
class InspectConfig_FindingLimits_InfoTypeLimitDefaultTypeInternal;
extern InspectConfig_FindingLimits_InfoTypeLimitDefaultTypeInternal _InspectConfig_FindingLimits_InfoTypeLimit_default_instance_;
class InspectContentRequest;
class InspectContentRequestDefaultTypeInternal;
extern InspectContentRequestDefaultTypeInternal _InspectContentRequest_default_instance_;
class InspectContentResponse;
class InspectContentResponseDefaultTypeInternal;
extern InspectContentResponseDefaultTypeInternal _InspectContentResponse_default_instance_;
class InspectDataSourceDetails;
class InspectDataSourceDetailsDefaultTypeInternal;
extern InspectDataSourceDetailsDefaultTypeInternal _InspectDataSourceDetails_default_instance_;
class InspectDataSourceDetails_RequestedOptions;
class InspectDataSourceDetails_RequestedOptionsDefaultTypeInternal;
extern InspectDataSourceDetails_RequestedOptionsDefaultTypeInternal _InspectDataSourceDetails_RequestedOptions_default_instance_;
class InspectDataSourceDetails_Result;
class InspectDataSourceDetails_ResultDefaultTypeInternal;
extern InspectDataSourceDetails_ResultDefaultTypeInternal _InspectDataSourceDetails_Result_default_instance_;
class InspectJobConfig;
class InspectJobConfigDefaultTypeInternal;
extern InspectJobConfigDefaultTypeInternal _InspectJobConfig_default_instance_;
class InspectResult;
class InspectResultDefaultTypeInternal;
extern InspectResultDefaultTypeInternal _InspectResult_default_instance_;
class InspectTemplate;
class InspectTemplateDefaultTypeInternal;
extern InspectTemplateDefaultTypeInternal _InspectTemplate_default_instance_;
class JobTrigger;
class JobTriggerDefaultTypeInternal;
extern JobTriggerDefaultTypeInternal _JobTrigger_default_instance_;
class JobTrigger_Trigger;
class JobTrigger_TriggerDefaultTypeInternal;
extern JobTrigger_TriggerDefaultTypeInternal _JobTrigger_Trigger_default_instance_;
class KmsWrappedCryptoKey;
class KmsWrappedCryptoKeyDefaultTypeInternal;
extern KmsWrappedCryptoKeyDefaultTypeInternal _KmsWrappedCryptoKey_default_instance_;
class LargeCustomDictionaryConfig;
class LargeCustomDictionaryConfigDefaultTypeInternal;
extern LargeCustomDictionaryConfigDefaultTypeInternal _LargeCustomDictionaryConfig_default_instance_;
class ListDeidentifyTemplatesRequest;
class ListDeidentifyTemplatesRequestDefaultTypeInternal;
extern ListDeidentifyTemplatesRequestDefaultTypeInternal _ListDeidentifyTemplatesRequest_default_instance_;
class ListDeidentifyTemplatesResponse;
class ListDeidentifyTemplatesResponseDefaultTypeInternal;
extern ListDeidentifyTemplatesResponseDefaultTypeInternal _ListDeidentifyTemplatesResponse_default_instance_;
class ListDlpJobsRequest;
class ListDlpJobsRequestDefaultTypeInternal;
extern ListDlpJobsRequestDefaultTypeInternal _ListDlpJobsRequest_default_instance_;
class ListDlpJobsResponse;
class ListDlpJobsResponseDefaultTypeInternal;
extern ListDlpJobsResponseDefaultTypeInternal _ListDlpJobsResponse_default_instance_;
class ListInfoTypesRequest;
class ListInfoTypesRequestDefaultTypeInternal;
extern ListInfoTypesRequestDefaultTypeInternal _ListInfoTypesRequest_default_instance_;
class ListInfoTypesResponse;
class ListInfoTypesResponseDefaultTypeInternal;
extern ListInfoTypesResponseDefaultTypeInternal _ListInfoTypesResponse_default_instance_;
class ListInspectTemplatesRequest;
class ListInspectTemplatesRequestDefaultTypeInternal;
extern ListInspectTemplatesRequestDefaultTypeInternal _ListInspectTemplatesRequest_default_instance_;
class ListInspectTemplatesResponse;
class ListInspectTemplatesResponseDefaultTypeInternal;
extern ListInspectTemplatesResponseDefaultTypeInternal _ListInspectTemplatesResponse_default_instance_;
class ListJobTriggersRequest;
class ListJobTriggersRequestDefaultTypeInternal;
extern ListJobTriggersRequestDefaultTypeInternal _ListJobTriggersRequest_default_instance_;
class ListJobTriggersResponse;
class ListJobTriggersResponseDefaultTypeInternal;
extern ListJobTriggersResponseDefaultTypeInternal _ListJobTriggersResponse_default_instance_;
class ListStoredInfoTypesRequest;
class ListStoredInfoTypesRequestDefaultTypeInternal;
extern ListStoredInfoTypesRequestDefaultTypeInternal _ListStoredInfoTypesRequest_default_instance_;
class ListStoredInfoTypesResponse;
class ListStoredInfoTypesResponseDefaultTypeInternal;
extern ListStoredInfoTypesResponseDefaultTypeInternal _ListStoredInfoTypesResponse_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class OutputStorageConfig;
class OutputStorageConfigDefaultTypeInternal;
extern OutputStorageConfigDefaultTypeInternal _OutputStorageConfig_default_instance_;
class PrimitiveTransformation;
class PrimitiveTransformationDefaultTypeInternal;
extern PrimitiveTransformationDefaultTypeInternal _PrimitiveTransformation_default_instance_;
class PrivacyMetric;
class PrivacyMetricDefaultTypeInternal;
extern PrivacyMetricDefaultTypeInternal _PrivacyMetric_default_instance_;
class PrivacyMetric_CategoricalStatsConfig;
class PrivacyMetric_CategoricalStatsConfigDefaultTypeInternal;
extern PrivacyMetric_CategoricalStatsConfigDefaultTypeInternal _PrivacyMetric_CategoricalStatsConfig_default_instance_;
class PrivacyMetric_DeltaPresenceEstimationConfig;
class PrivacyMetric_DeltaPresenceEstimationConfigDefaultTypeInternal;
extern PrivacyMetric_DeltaPresenceEstimationConfigDefaultTypeInternal _PrivacyMetric_DeltaPresenceEstimationConfig_default_instance_;
class PrivacyMetric_KAnonymityConfig;
class PrivacyMetric_KAnonymityConfigDefaultTypeInternal;
extern PrivacyMetric_KAnonymityConfigDefaultTypeInternal _PrivacyMetric_KAnonymityConfig_default_instance_;
class PrivacyMetric_KMapEstimationConfig;
class PrivacyMetric_KMapEstimationConfigDefaultTypeInternal;
extern PrivacyMetric_KMapEstimationConfigDefaultTypeInternal _PrivacyMetric_KMapEstimationConfig_default_instance_;
class PrivacyMetric_KMapEstimationConfig_AuxiliaryTable;
class PrivacyMetric_KMapEstimationConfig_AuxiliaryTableDefaultTypeInternal;
extern PrivacyMetric_KMapEstimationConfig_AuxiliaryTableDefaultTypeInternal _PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_default_instance_;
class PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField;
class PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdFieldDefaultTypeInternal;
extern PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdFieldDefaultTypeInternal _PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_default_instance_;
class PrivacyMetric_KMapEstimationConfig_TaggedField;
class PrivacyMetric_KMapEstimationConfig_TaggedFieldDefaultTypeInternal;
extern PrivacyMetric_KMapEstimationConfig_TaggedFieldDefaultTypeInternal _PrivacyMetric_KMapEstimationConfig_TaggedField_default_instance_;
class PrivacyMetric_LDiversityConfig;
class PrivacyMetric_LDiversityConfigDefaultTypeInternal;
extern PrivacyMetric_LDiversityConfigDefaultTypeInternal _PrivacyMetric_LDiversityConfig_default_instance_;
class PrivacyMetric_NumericalStatsConfig;
class PrivacyMetric_NumericalStatsConfigDefaultTypeInternal;
extern PrivacyMetric_NumericalStatsConfigDefaultTypeInternal _PrivacyMetric_NumericalStatsConfig_default_instance_;
class QuasiId;
class QuasiIdDefaultTypeInternal;
extern QuasiIdDefaultTypeInternal _QuasiId_default_instance_;
class QuoteInfo;
class QuoteInfoDefaultTypeInternal;
extern QuoteInfoDefaultTypeInternal _QuoteInfo_default_instance_;
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class RecordCondition;
class RecordConditionDefaultTypeInternal;
extern RecordConditionDefaultTypeInternal _RecordCondition_default_instance_;
class RecordCondition_Condition;
class RecordCondition_ConditionDefaultTypeInternal;
extern RecordCondition_ConditionDefaultTypeInternal _RecordCondition_Condition_default_instance_;
class RecordCondition_Conditions;
class RecordCondition_ConditionsDefaultTypeInternal;
extern RecordCondition_ConditionsDefaultTypeInternal _RecordCondition_Conditions_default_instance_;
class RecordCondition_Expressions;
class RecordCondition_ExpressionsDefaultTypeInternal;
extern RecordCondition_ExpressionsDefaultTypeInternal _RecordCondition_Expressions_default_instance_;
class RecordLocation;
class RecordLocationDefaultTypeInternal;
extern RecordLocationDefaultTypeInternal _RecordLocation_default_instance_;
class RecordSuppression;
class RecordSuppressionDefaultTypeInternal;
extern RecordSuppressionDefaultTypeInternal _RecordSuppression_default_instance_;
class RecordTransformations;
class RecordTransformationsDefaultTypeInternal;
extern RecordTransformationsDefaultTypeInternal _RecordTransformations_default_instance_;
class RedactConfig;
class RedactConfigDefaultTypeInternal;
extern RedactConfigDefaultTypeInternal _RedactConfig_default_instance_;
class RedactImageRequest;
class RedactImageRequestDefaultTypeInternal;
extern RedactImageRequestDefaultTypeInternal _RedactImageRequest_default_instance_;
class RedactImageRequest_ImageRedactionConfig;
class RedactImageRequest_ImageRedactionConfigDefaultTypeInternal;
extern RedactImageRequest_ImageRedactionConfigDefaultTypeInternal _RedactImageRequest_ImageRedactionConfig_default_instance_;
class RedactImageResponse;
class RedactImageResponseDefaultTypeInternal;
extern RedactImageResponseDefaultTypeInternal _RedactImageResponse_default_instance_;
class ReidentifyContentRequest;
class ReidentifyContentRequestDefaultTypeInternal;
extern ReidentifyContentRequestDefaultTypeInternal _ReidentifyContentRequest_default_instance_;
class ReidentifyContentResponse;
class ReidentifyContentResponseDefaultTypeInternal;
extern ReidentifyContentResponseDefaultTypeInternal _ReidentifyContentResponse_default_instance_;
class ReplaceValueConfig;
class ReplaceValueConfigDefaultTypeInternal;
extern ReplaceValueConfigDefaultTypeInternal _ReplaceValueConfig_default_instance_;
class ReplaceWithInfoTypeConfig;
class ReplaceWithInfoTypeConfigDefaultTypeInternal;
extern ReplaceWithInfoTypeConfigDefaultTypeInternal _ReplaceWithInfoTypeConfig_default_instance_;
class RiskAnalysisJobConfig;
class RiskAnalysisJobConfigDefaultTypeInternal;
extern RiskAnalysisJobConfigDefaultTypeInternal _RiskAnalysisJobConfig_default_instance_;
class Schedule;
class ScheduleDefaultTypeInternal;
extern ScheduleDefaultTypeInternal _Schedule_default_instance_;
class StatisticalTable;
class StatisticalTableDefaultTypeInternal;
extern StatisticalTableDefaultTypeInternal _StatisticalTable_default_instance_;
class StatisticalTable_QuasiIdentifierField;
class StatisticalTable_QuasiIdentifierFieldDefaultTypeInternal;
extern StatisticalTable_QuasiIdentifierFieldDefaultTypeInternal _StatisticalTable_QuasiIdentifierField_default_instance_;
class StoredInfoType;
class StoredInfoTypeDefaultTypeInternal;
extern StoredInfoTypeDefaultTypeInternal _StoredInfoType_default_instance_;
class StoredInfoTypeConfig;
class StoredInfoTypeConfigDefaultTypeInternal;
extern StoredInfoTypeConfigDefaultTypeInternal _StoredInfoTypeConfig_default_instance_;
class StoredInfoTypeVersion;
class StoredInfoTypeVersionDefaultTypeInternal;
extern StoredInfoTypeVersionDefaultTypeInternal _StoredInfoTypeVersion_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableLocation;
class TableLocationDefaultTypeInternal;
extern TableLocationDefaultTypeInternal _TableLocation_default_instance_;
class Table_Row;
class Table_RowDefaultTypeInternal;
extern Table_RowDefaultTypeInternal _Table_Row_default_instance_;
class TimePartConfig;
class TimePartConfigDefaultTypeInternal;
extern TimePartConfigDefaultTypeInternal _TimePartConfig_default_instance_;
class TransformationOverview;
class TransformationOverviewDefaultTypeInternal;
extern TransformationOverviewDefaultTypeInternal _TransformationOverview_default_instance_;
class TransformationSummary;
class TransformationSummaryDefaultTypeInternal;
extern TransformationSummaryDefaultTypeInternal _TransformationSummary_default_instance_;
class TransformationSummary_SummaryResult;
class TransformationSummary_SummaryResultDefaultTypeInternal;
extern TransformationSummary_SummaryResultDefaultTypeInternal _TransformationSummary_SummaryResult_default_instance_;
class TransientCryptoKey;
class TransientCryptoKeyDefaultTypeInternal;
extern TransientCryptoKeyDefaultTypeInternal _TransientCryptoKey_default_instance_;
class UnwrappedCryptoKey;
class UnwrappedCryptoKeyDefaultTypeInternal;
extern UnwrappedCryptoKeyDefaultTypeInternal _UnwrappedCryptoKey_default_instance_;
class UpdateDeidentifyTemplateRequest;
class UpdateDeidentifyTemplateRequestDefaultTypeInternal;
extern UpdateDeidentifyTemplateRequestDefaultTypeInternal _UpdateDeidentifyTemplateRequest_default_instance_;
class UpdateInspectTemplateRequest;
class UpdateInspectTemplateRequestDefaultTypeInternal;
extern UpdateInspectTemplateRequestDefaultTypeInternal _UpdateInspectTemplateRequest_default_instance_;
class UpdateJobTriggerRequest;
class UpdateJobTriggerRequestDefaultTypeInternal;
extern UpdateJobTriggerRequestDefaultTypeInternal _UpdateJobTriggerRequest_default_instance_;
class UpdateStoredInfoTypeRequest;
class UpdateStoredInfoTypeRequestDefaultTypeInternal;
extern UpdateStoredInfoTypeRequestDefaultTypeInternal _UpdateStoredInfoTypeRequest_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class ValueFrequency;
class ValueFrequencyDefaultTypeInternal;
extern ValueFrequencyDefaultTypeInternal _ValueFrequency_default_instance_;
}  // namespace v2
}  // namespace dlp
}  // namespace privacy
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::privacy::dlp::v2::Action* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Action>(Arena*);
template<> ::google::privacy::dlp::v2::Action_PublishSummaryToCscc* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Action_PublishSummaryToCscc>(Arena*);
template<> ::google::privacy::dlp::v2::Action_PublishToPubSub* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Action_PublishToPubSub>(Arena*);
template<> ::google::privacy::dlp::v2::Action_SaveFindings* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Action_SaveFindings>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket>(Arena*);
template<> ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult>(Arena*);
template<> ::google::privacy::dlp::v2::BoundingBox* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::BoundingBox>(Arena*);
template<> ::google::privacy::dlp::v2::BucketingConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::BucketingConfig>(Arena*);
template<> ::google::privacy::dlp::v2::BucketingConfig_Bucket* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::BucketingConfig_Bucket>(Arena*);
template<> ::google::privacy::dlp::v2::ByteContentItem* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ByteContentItem>(Arena*);
template<> ::google::privacy::dlp::v2::CancelDlpJobRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::CancelDlpJobRequest>(Arena*);
template<> ::google::privacy::dlp::v2::CharacterMaskConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::CharacterMaskConfig>(Arena*);
template<> ::google::privacy::dlp::v2::CharsToIgnore* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::CharsToIgnore>(Arena*);
template<> ::google::privacy::dlp::v2::Color* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Color>(Arena*);
template<> ::google::privacy::dlp::v2::ContentItem* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ContentItem>(Arena*);
template<> ::google::privacy::dlp::v2::ContentLocation* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ContentLocation>(Arena*);
template<> ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest>(Arena*);
template<> ::google::privacy::dlp::v2::CreateDlpJobRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::CreateDlpJobRequest>(Arena*);
template<> ::google::privacy::dlp::v2::CreateInspectTemplateRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::CreateInspectTemplateRequest>(Arena*);
template<> ::google::privacy::dlp::v2::CreateJobTriggerRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::CreateJobTriggerRequest>(Arena*);
template<> ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::CreateStoredInfoTypeRequest>(Arena*);
template<> ::google::privacy::dlp::v2::CryptoHashConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::CryptoHashConfig>(Arena*);
template<> ::google::privacy::dlp::v2::CryptoKey* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::CryptoKey>(Arena*);
template<> ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig>(Arena*);
template<> ::google::privacy::dlp::v2::DateShiftConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DateShiftConfig>(Arena*);
template<> ::google::privacy::dlp::v2::DateTime* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DateTime>(Arena*);
template<> ::google::privacy::dlp::v2::DateTime_TimeZone* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DateTime_TimeZone>(Arena*);
template<> ::google::privacy::dlp::v2::DeidentifyConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DeidentifyConfig>(Arena*);
template<> ::google::privacy::dlp::v2::DeidentifyContentRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DeidentifyContentRequest>(Arena*);
template<> ::google::privacy::dlp::v2::DeidentifyContentResponse* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DeidentifyContentResponse>(Arena*);
template<> ::google::privacy::dlp::v2::DeidentifyTemplate* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DeidentifyTemplate>(Arena*);
template<> ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest>(Arena*);
template<> ::google::privacy::dlp::v2::DeleteDlpJobRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DeleteDlpJobRequest>(Arena*);
template<> ::google::privacy::dlp::v2::DeleteInspectTemplateRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DeleteInspectTemplateRequest>(Arena*);
template<> ::google::privacy::dlp::v2::DeleteJobTriggerRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DeleteJobTriggerRequest>(Arena*);
template<> ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest>(Arena*);
template<> ::google::privacy::dlp::v2::DlpJob* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DlpJob>(Arena*);
template<> ::google::privacy::dlp::v2::DocumentLocation* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::DocumentLocation>(Arena*);
template<> ::google::privacy::dlp::v2::Error* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Error>(Arena*);
template<> ::google::privacy::dlp::v2::FieldTransformation* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::FieldTransformation>(Arena*);
template<> ::google::privacy::dlp::v2::Finding* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Finding>(Arena*);
template<> ::google::privacy::dlp::v2::FixedSizeBucketingConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::FixedSizeBucketingConfig>(Arena*);
template<> ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::GetDeidentifyTemplateRequest>(Arena*);
template<> ::google::privacy::dlp::v2::GetDlpJobRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::GetDlpJobRequest>(Arena*);
template<> ::google::privacy::dlp::v2::GetInspectTemplateRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::GetInspectTemplateRequest>(Arena*);
template<> ::google::privacy::dlp::v2::GetJobTriggerRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::GetJobTriggerRequest>(Arena*);
template<> ::google::privacy::dlp::v2::GetStoredInfoTypeRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::GetStoredInfoTypeRequest>(Arena*);
template<> ::google::privacy::dlp::v2::ImageLocation* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ImageLocation>(Arena*);
template<> ::google::privacy::dlp::v2::InfoTypeDescription* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InfoTypeDescription>(Arena*);
template<> ::google::privacy::dlp::v2::InfoTypeStats* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InfoTypeStats>(Arena*);
template<> ::google::privacy::dlp::v2::InfoTypeTransformations* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InfoTypeTransformations>(Arena*);
template<> ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation>(Arena*);
template<> ::google::privacy::dlp::v2::InspectConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InspectConfig>(Arena*);
template<> ::google::privacy::dlp::v2::InspectConfig_FindingLimits* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InspectConfig_FindingLimits>(Arena*);
template<> ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit>(Arena*);
template<> ::google::privacy::dlp::v2::InspectContentRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InspectContentRequest>(Arena*);
template<> ::google::privacy::dlp::v2::InspectContentResponse* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InspectContentResponse>(Arena*);
template<> ::google::privacy::dlp::v2::InspectDataSourceDetails* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InspectDataSourceDetails>(Arena*);
template<> ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions>(Arena*);
template<> ::google::privacy::dlp::v2::InspectDataSourceDetails_Result* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InspectDataSourceDetails_Result>(Arena*);
template<> ::google::privacy::dlp::v2::InspectJobConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InspectJobConfig>(Arena*);
template<> ::google::privacy::dlp::v2::InspectResult* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InspectResult>(Arena*);
template<> ::google::privacy::dlp::v2::InspectTemplate* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::InspectTemplate>(Arena*);
template<> ::google::privacy::dlp::v2::JobTrigger* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::JobTrigger>(Arena*);
template<> ::google::privacy::dlp::v2::JobTrigger_Trigger* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::JobTrigger_Trigger>(Arena*);
template<> ::google::privacy::dlp::v2::KmsWrappedCryptoKey* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::KmsWrappedCryptoKey>(Arena*);
template<> ::google::privacy::dlp::v2::LargeCustomDictionaryConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::LargeCustomDictionaryConfig>(Arena*);
template<> ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest>(Arena*);
template<> ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse>(Arena*);
template<> ::google::privacy::dlp::v2::ListDlpJobsRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListDlpJobsRequest>(Arena*);
template<> ::google::privacy::dlp::v2::ListDlpJobsResponse* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListDlpJobsResponse>(Arena*);
template<> ::google::privacy::dlp::v2::ListInfoTypesRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListInfoTypesRequest>(Arena*);
template<> ::google::privacy::dlp::v2::ListInfoTypesResponse* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListInfoTypesResponse>(Arena*);
template<> ::google::privacy::dlp::v2::ListInspectTemplatesRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListInspectTemplatesRequest>(Arena*);
template<> ::google::privacy::dlp::v2::ListInspectTemplatesResponse* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListInspectTemplatesResponse>(Arena*);
template<> ::google::privacy::dlp::v2::ListJobTriggersRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListJobTriggersRequest>(Arena*);
template<> ::google::privacy::dlp::v2::ListJobTriggersResponse* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListJobTriggersResponse>(Arena*);
template<> ::google::privacy::dlp::v2::ListStoredInfoTypesRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListStoredInfoTypesRequest>(Arena*);
template<> ::google::privacy::dlp::v2::ListStoredInfoTypesResponse* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ListStoredInfoTypesResponse>(Arena*);
template<> ::google::privacy::dlp::v2::Location* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Location>(Arena*);
template<> ::google::privacy::dlp::v2::OutputStorageConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::OutputStorageConfig>(Arena*);
template<> ::google::privacy::dlp::v2::PrimitiveTransformation* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::PrimitiveTransformation>(Arena*);
template<> ::google::privacy::dlp::v2::PrivacyMetric* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric>(Arena*);
template<> ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig>(Arena*);
template<> ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig>(Arena*);
template<> ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig>(Arena*);
template<> ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig>(Arena*);
template<> ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable>(Arena*);
template<> ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField>(Arena*);
template<> ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField>(Arena*);
template<> ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig>(Arena*);
template<> ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig>(Arena*);
template<> ::google::privacy::dlp::v2::QuasiId* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::QuasiId>(Arena*);
template<> ::google::privacy::dlp::v2::QuoteInfo* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::QuoteInfo>(Arena*);
template<> ::google::privacy::dlp::v2::Range* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Range>(Arena*);
template<> ::google::privacy::dlp::v2::RecordCondition* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RecordCondition>(Arena*);
template<> ::google::privacy::dlp::v2::RecordCondition_Condition* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RecordCondition_Condition>(Arena*);
template<> ::google::privacy::dlp::v2::RecordCondition_Conditions* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RecordCondition_Conditions>(Arena*);
template<> ::google::privacy::dlp::v2::RecordCondition_Expressions* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RecordCondition_Expressions>(Arena*);
template<> ::google::privacy::dlp::v2::RecordLocation* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RecordLocation>(Arena*);
template<> ::google::privacy::dlp::v2::RecordSuppression* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RecordSuppression>(Arena*);
template<> ::google::privacy::dlp::v2::RecordTransformations* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RecordTransformations>(Arena*);
template<> ::google::privacy::dlp::v2::RedactConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RedactConfig>(Arena*);
template<> ::google::privacy::dlp::v2::RedactImageRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RedactImageRequest>(Arena*);
template<> ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig>(Arena*);
template<> ::google::privacy::dlp::v2::RedactImageResponse* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RedactImageResponse>(Arena*);
template<> ::google::privacy::dlp::v2::ReidentifyContentRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ReidentifyContentRequest>(Arena*);
template<> ::google::privacy::dlp::v2::ReidentifyContentResponse* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ReidentifyContentResponse>(Arena*);
template<> ::google::privacy::dlp::v2::ReplaceValueConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ReplaceValueConfig>(Arena*);
template<> ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig>(Arena*);
template<> ::google::privacy::dlp::v2::RiskAnalysisJobConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::RiskAnalysisJobConfig>(Arena*);
template<> ::google::privacy::dlp::v2::Schedule* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Schedule>(Arena*);
template<> ::google::privacy::dlp::v2::StatisticalTable* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::StatisticalTable>(Arena*);
template<> ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField>(Arena*);
template<> ::google::privacy::dlp::v2::StoredInfoType* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::StoredInfoType>(Arena*);
template<> ::google::privacy::dlp::v2::StoredInfoTypeConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::StoredInfoTypeConfig>(Arena*);
template<> ::google::privacy::dlp::v2::StoredInfoTypeVersion* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::StoredInfoTypeVersion>(Arena*);
template<> ::google::privacy::dlp::v2::Table* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Table>(Arena*);
template<> ::google::privacy::dlp::v2::TableLocation* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::TableLocation>(Arena*);
template<> ::google::privacy::dlp::v2::Table_Row* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Table_Row>(Arena*);
template<> ::google::privacy::dlp::v2::TimePartConfig* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::TimePartConfig>(Arena*);
template<> ::google::privacy::dlp::v2::TransformationOverview* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::TransformationOverview>(Arena*);
template<> ::google::privacy::dlp::v2::TransformationSummary* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::TransformationSummary>(Arena*);
template<> ::google::privacy::dlp::v2::TransformationSummary_SummaryResult* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::TransformationSummary_SummaryResult>(Arena*);
template<> ::google::privacy::dlp::v2::TransientCryptoKey* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::TransientCryptoKey>(Arena*);
template<> ::google::privacy::dlp::v2::UnwrappedCryptoKey* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::UnwrappedCryptoKey>(Arena*);
template<> ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest>(Arena*);
template<> ::google::privacy::dlp::v2::UpdateInspectTemplateRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::UpdateInspectTemplateRequest>(Arena*);
template<> ::google::privacy::dlp::v2::UpdateJobTriggerRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::UpdateJobTriggerRequest>(Arena*);
template<> ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest>(Arena*);
template<> ::google::privacy::dlp::v2::Value* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::Value>(Arena*);
template<> ::google::privacy::dlp::v2::ValueFrequency* Arena::CreateMaybeMessage<::google::privacy::dlp::v2::ValueFrequency>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace privacy {
namespace dlp {
namespace v2 {

enum ByteContentItem_BytesType {
  ByteContentItem_BytesType_BYTES_TYPE_UNSPECIFIED = 0,
  ByteContentItem_BytesType_IMAGE = 6,
  ByteContentItem_BytesType_IMAGE_JPEG = 1,
  ByteContentItem_BytesType_IMAGE_BMP = 2,
  ByteContentItem_BytesType_IMAGE_PNG = 3,
  ByteContentItem_BytesType_IMAGE_SVG = 4,
  ByteContentItem_BytesType_TEXT_UTF8 = 5,
  ByteContentItem_BytesType_ByteContentItem_BytesType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ByteContentItem_BytesType_ByteContentItem_BytesType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ByteContentItem_BytesType_IsValid(int value);
const ByteContentItem_BytesType ByteContentItem_BytesType_BytesType_MIN = ByteContentItem_BytesType_BYTES_TYPE_UNSPECIFIED;
const ByteContentItem_BytesType ByteContentItem_BytesType_BytesType_MAX = ByteContentItem_BytesType_IMAGE;
const int ByteContentItem_BytesType_BytesType_ARRAYSIZE = ByteContentItem_BytesType_BytesType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ByteContentItem_BytesType_descriptor();
inline const ::std::string& ByteContentItem_BytesType_Name(ByteContentItem_BytesType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ByteContentItem_BytesType_descriptor(), value);
}
inline bool ByteContentItem_BytesType_Parse(
    const ::std::string& name, ByteContentItem_BytesType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ByteContentItem_BytesType>(
    ByteContentItem_BytesType_descriptor(), name, value);
}
enum OutputStorageConfig_OutputSchema {
  OutputStorageConfig_OutputSchema_OUTPUT_SCHEMA_UNSPECIFIED = 0,
  OutputStorageConfig_OutputSchema_BASIC_COLUMNS = 1,
  OutputStorageConfig_OutputSchema_GCS_COLUMNS = 2,
  OutputStorageConfig_OutputSchema_DATASTORE_COLUMNS = 3,
  OutputStorageConfig_OutputSchema_BIG_QUERY_COLUMNS = 4,
  OutputStorageConfig_OutputSchema_ALL_COLUMNS = 5,
  OutputStorageConfig_OutputSchema_OutputStorageConfig_OutputSchema_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OutputStorageConfig_OutputSchema_OutputStorageConfig_OutputSchema_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OutputStorageConfig_OutputSchema_IsValid(int value);
const OutputStorageConfig_OutputSchema OutputStorageConfig_OutputSchema_OutputSchema_MIN = OutputStorageConfig_OutputSchema_OUTPUT_SCHEMA_UNSPECIFIED;
const OutputStorageConfig_OutputSchema OutputStorageConfig_OutputSchema_OutputSchema_MAX = OutputStorageConfig_OutputSchema_ALL_COLUMNS;
const int OutputStorageConfig_OutputSchema_OutputSchema_ARRAYSIZE = OutputStorageConfig_OutputSchema_OutputSchema_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutputStorageConfig_OutputSchema_descriptor();
inline const ::std::string& OutputStorageConfig_OutputSchema_Name(OutputStorageConfig_OutputSchema value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutputStorageConfig_OutputSchema_descriptor(), value);
}
inline bool OutputStorageConfig_OutputSchema_Parse(
    const ::std::string& name, OutputStorageConfig_OutputSchema* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutputStorageConfig_OutputSchema>(
    OutputStorageConfig_OutputSchema_descriptor(), name, value);
}
enum TimePartConfig_TimePart {
  TimePartConfig_TimePart_TIME_PART_UNSPECIFIED = 0,
  TimePartConfig_TimePart_YEAR = 1,
  TimePartConfig_TimePart_MONTH = 2,
  TimePartConfig_TimePart_DAY_OF_MONTH = 3,
  TimePartConfig_TimePart_DAY_OF_WEEK = 4,
  TimePartConfig_TimePart_WEEK_OF_YEAR = 5,
  TimePartConfig_TimePart_HOUR_OF_DAY = 6,
  TimePartConfig_TimePart_TimePartConfig_TimePart_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TimePartConfig_TimePart_TimePartConfig_TimePart_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TimePartConfig_TimePart_IsValid(int value);
const TimePartConfig_TimePart TimePartConfig_TimePart_TimePart_MIN = TimePartConfig_TimePart_TIME_PART_UNSPECIFIED;
const TimePartConfig_TimePart TimePartConfig_TimePart_TimePart_MAX = TimePartConfig_TimePart_HOUR_OF_DAY;
const int TimePartConfig_TimePart_TimePart_ARRAYSIZE = TimePartConfig_TimePart_TimePart_MAX + 1;

const ::google::protobuf::EnumDescriptor* TimePartConfig_TimePart_descriptor();
inline const ::std::string& TimePartConfig_TimePart_Name(TimePartConfig_TimePart value) {
  return ::google::protobuf::internal::NameOfEnum(
    TimePartConfig_TimePart_descriptor(), value);
}
inline bool TimePartConfig_TimePart_Parse(
    const ::std::string& name, TimePartConfig_TimePart* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TimePartConfig_TimePart>(
    TimePartConfig_TimePart_descriptor(), name, value);
}
enum CharsToIgnore_CommonCharsToIgnore {
  CharsToIgnore_CommonCharsToIgnore_COMMON_CHARS_TO_IGNORE_UNSPECIFIED = 0,
  CharsToIgnore_CommonCharsToIgnore_NUMERIC = 1,
  CharsToIgnore_CommonCharsToIgnore_ALPHA_UPPER_CASE = 2,
  CharsToIgnore_CommonCharsToIgnore_ALPHA_LOWER_CASE = 3,
  CharsToIgnore_CommonCharsToIgnore_PUNCTUATION = 4,
  CharsToIgnore_CommonCharsToIgnore_WHITESPACE = 5,
  CharsToIgnore_CommonCharsToIgnore_CharsToIgnore_CommonCharsToIgnore_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CharsToIgnore_CommonCharsToIgnore_CharsToIgnore_CommonCharsToIgnore_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CharsToIgnore_CommonCharsToIgnore_IsValid(int value);
const CharsToIgnore_CommonCharsToIgnore CharsToIgnore_CommonCharsToIgnore_CommonCharsToIgnore_MIN = CharsToIgnore_CommonCharsToIgnore_COMMON_CHARS_TO_IGNORE_UNSPECIFIED;
const CharsToIgnore_CommonCharsToIgnore CharsToIgnore_CommonCharsToIgnore_CommonCharsToIgnore_MAX = CharsToIgnore_CommonCharsToIgnore_WHITESPACE;
const int CharsToIgnore_CommonCharsToIgnore_CommonCharsToIgnore_ARRAYSIZE = CharsToIgnore_CommonCharsToIgnore_CommonCharsToIgnore_MAX + 1;

const ::google::protobuf::EnumDescriptor* CharsToIgnore_CommonCharsToIgnore_descriptor();
inline const ::std::string& CharsToIgnore_CommonCharsToIgnore_Name(CharsToIgnore_CommonCharsToIgnore value) {
  return ::google::protobuf::internal::NameOfEnum(
    CharsToIgnore_CommonCharsToIgnore_descriptor(), value);
}
inline bool CharsToIgnore_CommonCharsToIgnore_Parse(
    const ::std::string& name, CharsToIgnore_CommonCharsToIgnore* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharsToIgnore_CommonCharsToIgnore>(
    CharsToIgnore_CommonCharsToIgnore_descriptor(), name, value);
}
enum CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet {
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED = 0,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_NUMERIC = 1,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_HEXADECIMAL = 2,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_UPPER_CASE_ALPHA_NUMERIC = 3,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_ALPHA_NUMERIC = 4,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_IsValid(int value);
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_MIN = CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_MAX = CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_ALPHA_NUMERIC;
const int CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_ARRAYSIZE = CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_MAX + 1;

const ::google::protobuf::EnumDescriptor* CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor();
inline const ::std::string& CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_Name(CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet value) {
  return ::google::protobuf::internal::NameOfEnum(
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor(), value);
}
inline bool CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_Parse(
    const ::std::string& name, CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet>(
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor(), name, value);
}
enum RecordCondition_Expressions_LogicalOperator {
  RecordCondition_Expressions_LogicalOperator_LOGICAL_OPERATOR_UNSPECIFIED = 0,
  RecordCondition_Expressions_LogicalOperator_AND = 1,
  RecordCondition_Expressions_LogicalOperator_RecordCondition_Expressions_LogicalOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RecordCondition_Expressions_LogicalOperator_RecordCondition_Expressions_LogicalOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RecordCondition_Expressions_LogicalOperator_IsValid(int value);
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions_LogicalOperator_LogicalOperator_MIN = RecordCondition_Expressions_LogicalOperator_LOGICAL_OPERATOR_UNSPECIFIED;
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions_LogicalOperator_LogicalOperator_MAX = RecordCondition_Expressions_LogicalOperator_AND;
const int RecordCondition_Expressions_LogicalOperator_LogicalOperator_ARRAYSIZE = RecordCondition_Expressions_LogicalOperator_LogicalOperator_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordCondition_Expressions_LogicalOperator_descriptor();
inline const ::std::string& RecordCondition_Expressions_LogicalOperator_Name(RecordCondition_Expressions_LogicalOperator value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordCondition_Expressions_LogicalOperator_descriptor(), value);
}
inline bool RecordCondition_Expressions_LogicalOperator_Parse(
    const ::std::string& name, RecordCondition_Expressions_LogicalOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordCondition_Expressions_LogicalOperator>(
    RecordCondition_Expressions_LogicalOperator_descriptor(), name, value);
}
enum TransformationSummary_TransformationResultCode {
  TransformationSummary_TransformationResultCode_TRANSFORMATION_RESULT_CODE_UNSPECIFIED = 0,
  TransformationSummary_TransformationResultCode_SUCCESS = 1,
  TransformationSummary_TransformationResultCode_ERROR = 2,
  TransformationSummary_TransformationResultCode_TransformationSummary_TransformationResultCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TransformationSummary_TransformationResultCode_TransformationSummary_TransformationResultCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TransformationSummary_TransformationResultCode_IsValid(int value);
const TransformationSummary_TransformationResultCode TransformationSummary_TransformationResultCode_TransformationResultCode_MIN = TransformationSummary_TransformationResultCode_TRANSFORMATION_RESULT_CODE_UNSPECIFIED;
const TransformationSummary_TransformationResultCode TransformationSummary_TransformationResultCode_TransformationResultCode_MAX = TransformationSummary_TransformationResultCode_ERROR;
const int TransformationSummary_TransformationResultCode_TransformationResultCode_ARRAYSIZE = TransformationSummary_TransformationResultCode_TransformationResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransformationSummary_TransformationResultCode_descriptor();
inline const ::std::string& TransformationSummary_TransformationResultCode_Name(TransformationSummary_TransformationResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransformationSummary_TransformationResultCode_descriptor(), value);
}
inline bool TransformationSummary_TransformationResultCode_Parse(
    const ::std::string& name, TransformationSummary_TransformationResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransformationSummary_TransformationResultCode>(
    TransformationSummary_TransformationResultCode_descriptor(), name, value);
}
enum JobTrigger_Status {
  JobTrigger_Status_STATUS_UNSPECIFIED = 0,
  JobTrigger_Status_HEALTHY = 1,
  JobTrigger_Status_PAUSED = 2,
  JobTrigger_Status_CANCELLED = 3,
  JobTrigger_Status_JobTrigger_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  JobTrigger_Status_JobTrigger_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool JobTrigger_Status_IsValid(int value);
const JobTrigger_Status JobTrigger_Status_Status_MIN = JobTrigger_Status_STATUS_UNSPECIFIED;
const JobTrigger_Status JobTrigger_Status_Status_MAX = JobTrigger_Status_CANCELLED;
const int JobTrigger_Status_Status_ARRAYSIZE = JobTrigger_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* JobTrigger_Status_descriptor();
inline const ::std::string& JobTrigger_Status_Name(JobTrigger_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    JobTrigger_Status_descriptor(), value);
}
inline bool JobTrigger_Status_Parse(
    const ::std::string& name, JobTrigger_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JobTrigger_Status>(
    JobTrigger_Status_descriptor(), name, value);
}
enum DlpJob_JobState {
  DlpJob_JobState_JOB_STATE_UNSPECIFIED = 0,
  DlpJob_JobState_PENDING = 1,
  DlpJob_JobState_RUNNING = 2,
  DlpJob_JobState_DONE = 3,
  DlpJob_JobState_CANCELED = 4,
  DlpJob_JobState_FAILED = 5,
  DlpJob_JobState_DlpJob_JobState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DlpJob_JobState_DlpJob_JobState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DlpJob_JobState_IsValid(int value);
const DlpJob_JobState DlpJob_JobState_JobState_MIN = DlpJob_JobState_JOB_STATE_UNSPECIFIED;
const DlpJob_JobState DlpJob_JobState_JobState_MAX = DlpJob_JobState_FAILED;
const int DlpJob_JobState_JobState_ARRAYSIZE = DlpJob_JobState_JobState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DlpJob_JobState_descriptor();
inline const ::std::string& DlpJob_JobState_Name(DlpJob_JobState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DlpJob_JobState_descriptor(), value);
}
inline bool DlpJob_JobState_Parse(
    const ::std::string& name, DlpJob_JobState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DlpJob_JobState>(
    DlpJob_JobState_descriptor(), name, value);
}
enum ContentOption {
  CONTENT_UNSPECIFIED = 0,
  CONTENT_TEXT = 1,
  CONTENT_IMAGE = 2,
  ContentOption_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ContentOption_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ContentOption_IsValid(int value);
const ContentOption ContentOption_MIN = CONTENT_UNSPECIFIED;
const ContentOption ContentOption_MAX = CONTENT_IMAGE;
const int ContentOption_ARRAYSIZE = ContentOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContentOption_descriptor();
inline const ::std::string& ContentOption_Name(ContentOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContentOption_descriptor(), value);
}
inline bool ContentOption_Parse(
    const ::std::string& name, ContentOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContentOption>(
    ContentOption_descriptor(), name, value);
}
enum InfoTypeSupportedBy {
  ENUM_TYPE_UNSPECIFIED = 0,
  INSPECT = 1,
  RISK_ANALYSIS = 2,
  InfoTypeSupportedBy_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  InfoTypeSupportedBy_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool InfoTypeSupportedBy_IsValid(int value);
const InfoTypeSupportedBy InfoTypeSupportedBy_MIN = ENUM_TYPE_UNSPECIFIED;
const InfoTypeSupportedBy InfoTypeSupportedBy_MAX = RISK_ANALYSIS;
const int InfoTypeSupportedBy_ARRAYSIZE = InfoTypeSupportedBy_MAX + 1;

const ::google::protobuf::EnumDescriptor* InfoTypeSupportedBy_descriptor();
inline const ::std::string& InfoTypeSupportedBy_Name(InfoTypeSupportedBy value) {
  return ::google::protobuf::internal::NameOfEnum(
    InfoTypeSupportedBy_descriptor(), value);
}
inline bool InfoTypeSupportedBy_Parse(
    const ::std::string& name, InfoTypeSupportedBy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InfoTypeSupportedBy>(
    InfoTypeSupportedBy_descriptor(), name, value);
}
enum RelationalOperator {
  RELATIONAL_OPERATOR_UNSPECIFIED = 0,
  EQUAL_TO = 1,
  NOT_EQUAL_TO = 2,
  GREATER_THAN = 3,
  LESS_THAN = 4,
  GREATER_THAN_OR_EQUALS = 5,
  LESS_THAN_OR_EQUALS = 6,
  EXISTS = 7,
  RelationalOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RelationalOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RelationalOperator_IsValid(int value);
const RelationalOperator RelationalOperator_MIN = RELATIONAL_OPERATOR_UNSPECIFIED;
const RelationalOperator RelationalOperator_MAX = EXISTS;
const int RelationalOperator_ARRAYSIZE = RelationalOperator_MAX + 1;

const ::google::protobuf::EnumDescriptor* RelationalOperator_descriptor();
inline const ::std::string& RelationalOperator_Name(RelationalOperator value) {
  return ::google::protobuf::internal::NameOfEnum(
    RelationalOperator_descriptor(), value);
}
inline bool RelationalOperator_Parse(
    const ::std::string& name, RelationalOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RelationalOperator>(
    RelationalOperator_descriptor(), name, value);
}
enum DlpJobType {
  DLP_JOB_TYPE_UNSPECIFIED = 0,
  INSPECT_JOB = 1,
  RISK_ANALYSIS_JOB = 2,
  DlpJobType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DlpJobType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DlpJobType_IsValid(int value);
const DlpJobType DlpJobType_MIN = DLP_JOB_TYPE_UNSPECIFIED;
const DlpJobType DlpJobType_MAX = RISK_ANALYSIS_JOB;
const int DlpJobType_ARRAYSIZE = DlpJobType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DlpJobType_descriptor();
inline const ::std::string& DlpJobType_Name(DlpJobType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DlpJobType_descriptor(), value);
}
inline bool DlpJobType_Parse(
    const ::std::string& name, DlpJobType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DlpJobType>(
    DlpJobType_descriptor(), name, value);
}
enum StoredInfoTypeState {
  STORED_INFO_TYPE_STATE_UNSPECIFIED = 0,
  PENDING = 1,
  READY = 2,
  FAILED = 3,
  INVALID = 4,
  StoredInfoTypeState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StoredInfoTypeState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StoredInfoTypeState_IsValid(int value);
const StoredInfoTypeState StoredInfoTypeState_MIN = STORED_INFO_TYPE_STATE_UNSPECIFIED;
const StoredInfoTypeState StoredInfoTypeState_MAX = INVALID;
const int StoredInfoTypeState_ARRAYSIZE = StoredInfoTypeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* StoredInfoTypeState_descriptor();
inline const ::std::string& StoredInfoTypeState_Name(StoredInfoTypeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    StoredInfoTypeState_descriptor(), value);
}
inline bool StoredInfoTypeState_Parse(
    const ::std::string& name, StoredInfoTypeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StoredInfoTypeState>(
    StoredInfoTypeState_descriptor(), name, value);
}
// ===================================================================

class InspectConfig_FindingLimits_InfoTypeLimit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit) */ {
 public:
  InspectConfig_FindingLimits_InfoTypeLimit();
  virtual ~InspectConfig_FindingLimits_InfoTypeLimit();

  InspectConfig_FindingLimits_InfoTypeLimit(const InspectConfig_FindingLimits_InfoTypeLimit& from);

  inline InspectConfig_FindingLimits_InfoTypeLimit& operator=(const InspectConfig_FindingLimits_InfoTypeLimit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectConfig_FindingLimits_InfoTypeLimit(InspectConfig_FindingLimits_InfoTypeLimit&& from) noexcept
    : InspectConfig_FindingLimits_InfoTypeLimit() {
    *this = ::std::move(from);
  }

  inline InspectConfig_FindingLimits_InfoTypeLimit& operator=(InspectConfig_FindingLimits_InfoTypeLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectConfig_FindingLimits_InfoTypeLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectConfig_FindingLimits_InfoTypeLimit* internal_default_instance() {
    return reinterpret_cast<const InspectConfig_FindingLimits_InfoTypeLimit*>(
               &_InspectConfig_FindingLimits_InfoTypeLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InspectConfig_FindingLimits_InfoTypeLimit* other);
  friend void swap(InspectConfig_FindingLimits_InfoTypeLimit& a, InspectConfig_FindingLimits_InfoTypeLimit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectConfig_FindingLimits_InfoTypeLimit* New() const final {
    return CreateMaybeMessage<InspectConfig_FindingLimits_InfoTypeLimit>(NULL);
  }

  InspectConfig_FindingLimits_InfoTypeLimit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InspectConfig_FindingLimits_InfoTypeLimit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InspectConfig_FindingLimits_InfoTypeLimit& from);
  void MergeFrom(const InspectConfig_FindingLimits_InfoTypeLimit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectConfig_FindingLimits_InfoTypeLimit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::InfoType& _internal_info_type() const;
  public:
  const ::google::privacy::dlp::v2::InfoType& info_type() const;
  ::google::privacy::dlp::v2::InfoType* release_info_type();
  ::google::privacy::dlp::v2::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type);

  // int32 max_findings = 2;
  void clear_max_findings();
  static const int kMaxFindingsFieldNumber = 2;
  ::google::protobuf::int32 max_findings() const;
  void set_max_findings(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::InfoType* info_type_;
  ::google::protobuf::int32 max_findings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectConfig_FindingLimits : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InspectConfig.FindingLimits) */ {
 public:
  InspectConfig_FindingLimits();
  virtual ~InspectConfig_FindingLimits();

  InspectConfig_FindingLimits(const InspectConfig_FindingLimits& from);

  inline InspectConfig_FindingLimits& operator=(const InspectConfig_FindingLimits& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectConfig_FindingLimits(InspectConfig_FindingLimits&& from) noexcept
    : InspectConfig_FindingLimits() {
    *this = ::std::move(from);
  }

  inline InspectConfig_FindingLimits& operator=(InspectConfig_FindingLimits&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectConfig_FindingLimits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectConfig_FindingLimits* internal_default_instance() {
    return reinterpret_cast<const InspectConfig_FindingLimits*>(
               &_InspectConfig_FindingLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(InspectConfig_FindingLimits* other);
  friend void swap(InspectConfig_FindingLimits& a, InspectConfig_FindingLimits& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectConfig_FindingLimits* New() const final {
    return CreateMaybeMessage<InspectConfig_FindingLimits>(NULL);
  }

  InspectConfig_FindingLimits* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InspectConfig_FindingLimits>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InspectConfig_FindingLimits& from);
  void MergeFrom(const InspectConfig_FindingLimits& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectConfig_FindingLimits* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InspectConfig_FindingLimits_InfoTypeLimit InfoTypeLimit;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit max_findings_per_info_type = 3;
  int max_findings_per_info_type_size() const;
  void clear_max_findings_per_info_type();
  static const int kMaxFindingsPerInfoTypeFieldNumber = 3;
  ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit* mutable_max_findings_per_info_type(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit >*
      mutable_max_findings_per_info_type();
  const ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit& max_findings_per_info_type(int index) const;
  ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit* add_max_findings_per_info_type();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit >&
      max_findings_per_info_type() const;

  // int32 max_findings_per_item = 1;
  void clear_max_findings_per_item();
  static const int kMaxFindingsPerItemFieldNumber = 1;
  ::google::protobuf::int32 max_findings_per_item() const;
  void set_max_findings_per_item(::google::protobuf::int32 value);

  // int32 max_findings_per_request = 2;
  void clear_max_findings_per_request();
  static const int kMaxFindingsPerRequestFieldNumber = 2;
  ::google::protobuf::int32 max_findings_per_request() const;
  void set_max_findings_per_request(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InspectConfig.FindingLimits)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit > max_findings_per_info_type_;
  ::google::protobuf::int32 max_findings_per_item_;
  ::google::protobuf::int32 max_findings_per_request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InspectConfig) */ {
 public:
  InspectConfig();
  virtual ~InspectConfig();

  InspectConfig(const InspectConfig& from);

  inline InspectConfig& operator=(const InspectConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectConfig(InspectConfig&& from) noexcept
    : InspectConfig() {
    *this = ::std::move(from);
  }

  inline InspectConfig& operator=(InspectConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectConfig* internal_default_instance() {
    return reinterpret_cast<const InspectConfig*>(
               &_InspectConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(InspectConfig* other);
  friend void swap(InspectConfig& a, InspectConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectConfig* New() const final {
    return CreateMaybeMessage<InspectConfig>(NULL);
  }

  InspectConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InspectConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InspectConfig& from);
  void MergeFrom(const InspectConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InspectConfig_FindingLimits FindingLimits;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  int info_types_size() const;
  void clear_info_types();
  static const int kInfoTypesFieldNumber = 1;
  ::google::privacy::dlp::v2::InfoType* mutable_info_types(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoType >*
      mutable_info_types();
  const ::google::privacy::dlp::v2::InfoType& info_types(int index) const;
  ::google::privacy::dlp::v2::InfoType* add_info_types();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoType >&
      info_types() const;

  // repeated .google.privacy.dlp.v2.CustomInfoType custom_info_types = 6;
  int custom_info_types_size() const;
  void clear_custom_info_types();
  static const int kCustomInfoTypesFieldNumber = 6;
  ::google::privacy::dlp::v2::CustomInfoType* mutable_custom_info_types(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::CustomInfoType >*
      mutable_custom_info_types();
  const ::google::privacy::dlp::v2::CustomInfoType& custom_info_types(int index) const;
  ::google::privacy::dlp::v2::CustomInfoType* add_custom_info_types();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::CustomInfoType >&
      custom_info_types() const;

  // repeated .google.privacy.dlp.v2.ContentOption content_options = 8;
  int content_options_size() const;
  void clear_content_options();
  static const int kContentOptionsFieldNumber = 8;
  ::google::privacy::dlp::v2::ContentOption content_options(int index) const;
  void set_content_options(int index, ::google::privacy::dlp::v2::ContentOption value);
  void add_content_options(::google::privacy::dlp::v2::ContentOption value);
  const ::google::protobuf::RepeatedField<int>& content_options() const;
  ::google::protobuf::RepeatedField<int>* mutable_content_options();

  // .google.privacy.dlp.v2.InspectConfig.FindingLimits limits = 3;
  bool has_limits() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::InspectConfig_FindingLimits& _internal_limits() const;
  public:
  const ::google::privacy::dlp::v2::InspectConfig_FindingLimits& limits() const;
  ::google::privacy::dlp::v2::InspectConfig_FindingLimits* release_limits();
  ::google::privacy::dlp::v2::InspectConfig_FindingLimits* mutable_limits();
  void set_allocated_limits(::google::privacy::dlp::v2::InspectConfig_FindingLimits* limits);

  // .google.privacy.dlp.v2.Likelihood min_likelihood = 2;
  void clear_min_likelihood();
  static const int kMinLikelihoodFieldNumber = 2;
  ::google::privacy::dlp::v2::Likelihood min_likelihood() const;
  void set_min_likelihood(::google::privacy::dlp::v2::Likelihood value);

  // bool include_quote = 4;
  void clear_include_quote();
  static const int kIncludeQuoteFieldNumber = 4;
  bool include_quote() const;
  void set_include_quote(bool value);

  // bool exclude_info_types = 5;
  void clear_exclude_info_types();
  static const int kExcludeInfoTypesFieldNumber = 5;
  bool exclude_info_types() const;
  void set_exclude_info_types(bool value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InspectConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoType > info_types_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::CustomInfoType > custom_info_types_;
  ::google::protobuf::RepeatedField<int> content_options_;
  mutable int _content_options_cached_byte_size_;
  ::google::privacy::dlp::v2::InspectConfig_FindingLimits* limits_;
  int min_likelihood_;
  bool include_quote_;
  bool exclude_info_types_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ByteContentItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ByteContentItem) */ {
 public:
  ByteContentItem();
  virtual ~ByteContentItem();

  ByteContentItem(const ByteContentItem& from);

  inline ByteContentItem& operator=(const ByteContentItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ByteContentItem(ByteContentItem&& from) noexcept
    : ByteContentItem() {
    *this = ::std::move(from);
  }

  inline ByteContentItem& operator=(ByteContentItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ByteContentItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ByteContentItem* internal_default_instance() {
    return reinterpret_cast<const ByteContentItem*>(
               &_ByteContentItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ByteContentItem* other);
  friend void swap(ByteContentItem& a, ByteContentItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ByteContentItem* New() const final {
    return CreateMaybeMessage<ByteContentItem>(NULL);
  }

  ByteContentItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ByteContentItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ByteContentItem& from);
  void MergeFrom(const ByteContentItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ByteContentItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ByteContentItem_BytesType BytesType;
  static const BytesType BYTES_TYPE_UNSPECIFIED =
    ByteContentItem_BytesType_BYTES_TYPE_UNSPECIFIED;
  static const BytesType IMAGE =
    ByteContentItem_BytesType_IMAGE;
  static const BytesType IMAGE_JPEG =
    ByteContentItem_BytesType_IMAGE_JPEG;
  static const BytesType IMAGE_BMP =
    ByteContentItem_BytesType_IMAGE_BMP;
  static const BytesType IMAGE_PNG =
    ByteContentItem_BytesType_IMAGE_PNG;
  static const BytesType IMAGE_SVG =
    ByteContentItem_BytesType_IMAGE_SVG;
  static const BytesType TEXT_UTF8 =
    ByteContentItem_BytesType_TEXT_UTF8;
  static inline bool BytesType_IsValid(int value) {
    return ByteContentItem_BytesType_IsValid(value);
  }
  static const BytesType BytesType_MIN =
    ByteContentItem_BytesType_BytesType_MIN;
  static const BytesType BytesType_MAX =
    ByteContentItem_BytesType_BytesType_MAX;
  static const int BytesType_ARRAYSIZE =
    ByteContentItem_BytesType_BytesType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BytesType_descriptor() {
    return ByteContentItem_BytesType_descriptor();
  }
  static inline const ::std::string& BytesType_Name(BytesType value) {
    return ByteContentItem_BytesType_Name(value);
  }
  static inline bool BytesType_Parse(const ::std::string& name,
      BytesType* value) {
    return ByteContentItem_BytesType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .google.privacy.dlp.v2.ByteContentItem.BytesType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::privacy::dlp::v2::ByteContentItem_BytesType type() const;
  void set_type(::google::privacy::dlp::v2::ByteContentItem_BytesType value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ByteContentItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContentItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ContentItem) */ {
 public:
  ContentItem();
  virtual ~ContentItem();

  ContentItem(const ContentItem& from);

  inline ContentItem& operator=(const ContentItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentItem(ContentItem&& from) noexcept
    : ContentItem() {
    *this = ::std::move(from);
  }

  inline ContentItem& operator=(ContentItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentItem& default_instance();

  enum DataItemCase {
    kValue = 3,
    kTable = 4,
    kByteItem = 5,
    DATA_ITEM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentItem* internal_default_instance() {
    return reinterpret_cast<const ContentItem*>(
               &_ContentItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ContentItem* other);
  friend void swap(ContentItem& a, ContentItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentItem* New() const final {
    return CreateMaybeMessage<ContentItem>(NULL);
  }

  ContentItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContentItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContentItem& from);
  void MergeFrom(const ContentItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 3;
  private:
  bool has_value() const;
  public:
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.privacy.dlp.v2.Table table = 4;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::Table& _internal_table() const;
  public:
  const ::google::privacy::dlp::v2::Table& table() const;
  ::google::privacy::dlp::v2::Table* release_table();
  ::google::privacy::dlp::v2::Table* mutable_table();
  void set_allocated_table(::google::privacy::dlp::v2::Table* table);

  // .google.privacy.dlp.v2.ByteContentItem byte_item = 5;
  bool has_byte_item() const;
  void clear_byte_item();
  static const int kByteItemFieldNumber = 5;
  private:
  const ::google::privacy::dlp::v2::ByteContentItem& _internal_byte_item() const;
  public:
  const ::google::privacy::dlp::v2::ByteContentItem& byte_item() const;
  ::google::privacy::dlp::v2::ByteContentItem* release_byte_item();
  ::google::privacy::dlp::v2::ByteContentItem* mutable_byte_item();
  void set_allocated_byte_item(::google::privacy::dlp::v2::ByteContentItem* byte_item);

  void clear_data_item();
  DataItemCase data_item_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ContentItem)
 private:
  void set_has_value();
  void set_has_table();
  void set_has_byte_item();

  inline bool has_data_item() const;
  inline void clear_has_data_item();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataItemUnion {
    DataItemUnion() {}
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::privacy::dlp::v2::Table* table_;
    ::google::privacy::dlp::v2::ByteContentItem* byte_item_;
  } data_item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Table_Row : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Table.Row) */ {
 public:
  Table_Row();
  virtual ~Table_Row();

  Table_Row(const Table_Row& from);

  inline Table_Row& operator=(const Table_Row& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table_Row(Table_Row&& from) noexcept
    : Table_Row() {
    *this = ::std::move(from);
  }

  inline Table_Row& operator=(Table_Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table_Row* internal_default_instance() {
    return reinterpret_cast<const Table_Row*>(
               &_Table_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Table_Row* other);
  friend void swap(Table_Row& a, Table_Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table_Row* New() const final {
    return CreateMaybeMessage<Table_Row>(NULL);
  }

  Table_Row* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Table_Row>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Table_Row& from);
  void MergeFrom(const Table_Row& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table_Row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.Value values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  ::google::privacy::dlp::v2::Value* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
      mutable_values();
  const ::google::privacy::dlp::v2::Value& values(int index) const;
  ::google::privacy::dlp::v2::Value* add_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Table.Row)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Table* other);
  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const final {
    return CreateMaybeMessage<Table>(NULL);
  }

  Table* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Table_Row Row;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.FieldId headers = 1;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 1;
  ::google::privacy::dlp::v2::FieldId* mutable_headers(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >*
      mutable_headers();
  const ::google::privacy::dlp::v2::FieldId& headers(int index) const;
  ::google::privacy::dlp::v2::FieldId* add_headers();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >&
      headers() const;

  // repeated .google.privacy.dlp.v2.Table.Row rows = 2;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  ::google::privacy::dlp::v2::Table_Row* mutable_rows(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Table_Row >*
      mutable_rows();
  const ::google::privacy::dlp::v2::Table_Row& rows(int index) const;
  ::google::privacy::dlp::v2::Table_Row* add_rows();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Table_Row >&
      rows() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId > headers_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Table_Row > rows_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InspectResult) */ {
 public:
  InspectResult();
  virtual ~InspectResult();

  InspectResult(const InspectResult& from);

  inline InspectResult& operator=(const InspectResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectResult(InspectResult&& from) noexcept
    : InspectResult() {
    *this = ::std::move(from);
  }

  inline InspectResult& operator=(InspectResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectResult* internal_default_instance() {
    return reinterpret_cast<const InspectResult*>(
               &_InspectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(InspectResult* other);
  friend void swap(InspectResult& a, InspectResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectResult* New() const final {
    return CreateMaybeMessage<InspectResult>(NULL);
  }

  InspectResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InspectResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InspectResult& from);
  void MergeFrom(const InspectResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.Finding findings = 1;
  int findings_size() const;
  void clear_findings();
  static const int kFindingsFieldNumber = 1;
  ::google::privacy::dlp::v2::Finding* mutable_findings(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Finding >*
      mutable_findings();
  const ::google::privacy::dlp::v2::Finding& findings(int index) const;
  ::google::privacy::dlp::v2::Finding* add_findings();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Finding >&
      findings() const;

  // bool findings_truncated = 2;
  void clear_findings_truncated();
  static const int kFindingsTruncatedFieldNumber = 2;
  bool findings_truncated() const;
  void set_findings_truncated(bool value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InspectResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Finding > findings_;
  bool findings_truncated_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Finding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Finding) */ {
 public:
  Finding();
  virtual ~Finding();

  Finding(const Finding& from);

  inline Finding& operator=(const Finding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Finding(Finding&& from) noexcept
    : Finding() {
    *this = ::std::move(from);
  }

  inline Finding& operator=(Finding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Finding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Finding* internal_default_instance() {
    return reinterpret_cast<const Finding*>(
               &_Finding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Finding* other);
  friend void swap(Finding& a, Finding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Finding* New() const final {
    return CreateMaybeMessage<Finding>(NULL);
  }

  Finding* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Finding>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Finding& from);
  void MergeFrom(const Finding& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Finding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string quote = 1;
  void clear_quote();
  static const int kQuoteFieldNumber = 1;
  const ::std::string& quote() const;
  void set_quote(const ::std::string& value);
  #if LANG_CXX11
  void set_quote(::std::string&& value);
  #endif
  void set_quote(const char* value);
  void set_quote(const char* value, size_t size);
  ::std::string* mutable_quote();
  ::std::string* release_quote();
  void set_allocated_quote(::std::string* quote);

  // .google.privacy.dlp.v2.InfoType info_type = 2;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::InfoType& _internal_info_type() const;
  public:
  const ::google::privacy::dlp::v2::InfoType& info_type() const;
  ::google::privacy::dlp::v2::InfoType* release_info_type();
  ::google::privacy::dlp::v2::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type);

  // .google.privacy.dlp.v2.Location location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::Location& _internal_location() const;
  public:
  const ::google::privacy::dlp::v2::Location& location() const;
  ::google::privacy::dlp::v2::Location* release_location();
  ::google::privacy::dlp::v2::Location* mutable_location();
  void set_allocated_location(::google::privacy::dlp::v2::Location* location);

  // .google.protobuf.Timestamp create_time = 6;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.privacy.dlp.v2.QuoteInfo quote_info = 7;
  bool has_quote_info() const;
  void clear_quote_info();
  static const int kQuoteInfoFieldNumber = 7;
  private:
  const ::google::privacy::dlp::v2::QuoteInfo& _internal_quote_info() const;
  public:
  const ::google::privacy::dlp::v2::QuoteInfo& quote_info() const;
  ::google::privacy::dlp::v2::QuoteInfo* release_quote_info();
  ::google::privacy::dlp::v2::QuoteInfo* mutable_quote_info();
  void set_allocated_quote_info(::google::privacy::dlp::v2::QuoteInfo* quote_info);

  // .google.privacy.dlp.v2.Likelihood likelihood = 3;
  void clear_likelihood();
  static const int kLikelihoodFieldNumber = 3;
  ::google::privacy::dlp::v2::Likelihood likelihood() const;
  void set_likelihood(::google::privacy::dlp::v2::Likelihood value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Finding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr quote_;
  ::google::privacy::dlp::v2::InfoType* info_type_;
  ::google::privacy::dlp::v2::Location* location_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::privacy::dlp::v2::QuoteInfo* quote_info_;
  int likelihood_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Location* other);
  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(NULL);
  }

  Location* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.ContentLocation content_locations = 7;
  int content_locations_size() const;
  void clear_content_locations();
  static const int kContentLocationsFieldNumber = 7;
  ::google::privacy::dlp::v2::ContentLocation* mutable_content_locations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ContentLocation >*
      mutable_content_locations();
  const ::google::privacy::dlp::v2::ContentLocation& content_locations(int index) const;
  ::google::privacy::dlp::v2::ContentLocation* add_content_locations();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ContentLocation >&
      content_locations() const;

  // .google.privacy.dlp.v2.Range byte_range = 1;
  bool has_byte_range() const;
  void clear_byte_range();
  static const int kByteRangeFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::Range& _internal_byte_range() const;
  public:
  const ::google::privacy::dlp::v2::Range& byte_range() const;
  ::google::privacy::dlp::v2::Range* release_byte_range();
  ::google::privacy::dlp::v2::Range* mutable_byte_range();
  void set_allocated_byte_range(::google::privacy::dlp::v2::Range* byte_range);

  // .google.privacy.dlp.v2.Range codepoint_range = 2;
  bool has_codepoint_range() const;
  void clear_codepoint_range();
  static const int kCodepointRangeFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::Range& _internal_codepoint_range() const;
  public:
  const ::google::privacy::dlp::v2::Range& codepoint_range() const;
  ::google::privacy::dlp::v2::Range* release_codepoint_range();
  ::google::privacy::dlp::v2::Range* mutable_codepoint_range();
  void set_allocated_codepoint_range(::google::privacy::dlp::v2::Range* codepoint_range);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ContentLocation > content_locations_;
  ::google::privacy::dlp::v2::Range* byte_range_;
  ::google::privacy::dlp::v2::Range* codepoint_range_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContentLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ContentLocation) */ {
 public:
  ContentLocation();
  virtual ~ContentLocation();

  ContentLocation(const ContentLocation& from);

  inline ContentLocation& operator=(const ContentLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentLocation(ContentLocation&& from) noexcept
    : ContentLocation() {
    *this = ::std::move(from);
  }

  inline ContentLocation& operator=(ContentLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentLocation& default_instance();

  enum LocationCase {
    kRecordLocation = 2,
    kImageLocation = 3,
    kDocumentLocation = 5,
    LOCATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentLocation* internal_default_instance() {
    return reinterpret_cast<const ContentLocation*>(
               &_ContentLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ContentLocation* other);
  friend void swap(ContentLocation& a, ContentLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentLocation* New() const final {
    return CreateMaybeMessage<ContentLocation>(NULL);
  }

  ContentLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContentLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContentLocation& from);
  void MergeFrom(const ContentLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string container_name = 1;
  void clear_container_name();
  static const int kContainerNameFieldNumber = 1;
  const ::std::string& container_name() const;
  void set_container_name(const ::std::string& value);
  #if LANG_CXX11
  void set_container_name(::std::string&& value);
  #endif
  void set_container_name(const char* value);
  void set_container_name(const char* value, size_t size);
  ::std::string* mutable_container_name();
  ::std::string* release_container_name();
  void set_allocated_container_name(::std::string* container_name);

  // string container_version = 7;
  void clear_container_version();
  static const int kContainerVersionFieldNumber = 7;
  const ::std::string& container_version() const;
  void set_container_version(const ::std::string& value);
  #if LANG_CXX11
  void set_container_version(::std::string&& value);
  #endif
  void set_container_version(const char* value);
  void set_container_version(const char* value, size_t size);
  ::std::string* mutable_container_version();
  ::std::string* release_container_version();
  void set_allocated_container_version(::std::string* container_version);

  // .google.protobuf.Timestamp container_timestamp = 6;
  bool has_container_timestamp() const;
  void clear_container_timestamp();
  static const int kContainerTimestampFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_container_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& container_timestamp() const;
  ::google::protobuf::Timestamp* release_container_timestamp();
  ::google::protobuf::Timestamp* mutable_container_timestamp();
  void set_allocated_container_timestamp(::google::protobuf::Timestamp* container_timestamp);

  // .google.privacy.dlp.v2.RecordLocation record_location = 2;
  bool has_record_location() const;
  void clear_record_location();
  static const int kRecordLocationFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::RecordLocation& _internal_record_location() const;
  public:
  const ::google::privacy::dlp::v2::RecordLocation& record_location() const;
  ::google::privacy::dlp::v2::RecordLocation* release_record_location();
  ::google::privacy::dlp::v2::RecordLocation* mutable_record_location();
  void set_allocated_record_location(::google::privacy::dlp::v2::RecordLocation* record_location);

  // .google.privacy.dlp.v2.ImageLocation image_location = 3;
  bool has_image_location() const;
  void clear_image_location();
  static const int kImageLocationFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::ImageLocation& _internal_image_location() const;
  public:
  const ::google::privacy::dlp::v2::ImageLocation& image_location() const;
  ::google::privacy::dlp::v2::ImageLocation* release_image_location();
  ::google::privacy::dlp::v2::ImageLocation* mutable_image_location();
  void set_allocated_image_location(::google::privacy::dlp::v2::ImageLocation* image_location);

  // .google.privacy.dlp.v2.DocumentLocation document_location = 5;
  bool has_document_location() const;
  void clear_document_location();
  static const int kDocumentLocationFieldNumber = 5;
  private:
  const ::google::privacy::dlp::v2::DocumentLocation& _internal_document_location() const;
  public:
  const ::google::privacy::dlp::v2::DocumentLocation& document_location() const;
  ::google::privacy::dlp::v2::DocumentLocation* release_document_location();
  ::google::privacy::dlp::v2::DocumentLocation* mutable_document_location();
  void set_allocated_document_location(::google::privacy::dlp::v2::DocumentLocation* document_location);

  void clear_location();
  LocationCase location_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ContentLocation)
 private:
  void set_has_record_location();
  void set_has_image_location();
  void set_has_document_location();

  inline bool has_location() const;
  inline void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr container_name_;
  ::google::protobuf::internal::ArenaStringPtr container_version_;
  ::google::protobuf::Timestamp* container_timestamp_;
  union LocationUnion {
    LocationUnion() {}
    ::google::privacy::dlp::v2::RecordLocation* record_location_;
    ::google::privacy::dlp::v2::ImageLocation* image_location_;
    ::google::privacy::dlp::v2::DocumentLocation* document_location_;
  } location_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DocumentLocation) */ {
 public:
  DocumentLocation();
  virtual ~DocumentLocation();

  DocumentLocation(const DocumentLocation& from);

  inline DocumentLocation& operator=(const DocumentLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentLocation(DocumentLocation&& from) noexcept
    : DocumentLocation() {
    *this = ::std::move(from);
  }

  inline DocumentLocation& operator=(DocumentLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentLocation* internal_default_instance() {
    return reinterpret_cast<const DocumentLocation*>(
               &_DocumentLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DocumentLocation* other);
  friend void swap(DocumentLocation& a, DocumentLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentLocation* New() const final {
    return CreateMaybeMessage<DocumentLocation>(NULL);
  }

  DocumentLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DocumentLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DocumentLocation& from);
  void MergeFrom(const DocumentLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 file_offset = 1;
  void clear_file_offset();
  static const int kFileOffsetFieldNumber = 1;
  ::google::protobuf::int64 file_offset() const;
  void set_file_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DocumentLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 file_offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RecordLocation) */ {
 public:
  RecordLocation();
  virtual ~RecordLocation();

  RecordLocation(const RecordLocation& from);

  inline RecordLocation& operator=(const RecordLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordLocation(RecordLocation&& from) noexcept
    : RecordLocation() {
    *this = ::std::move(from);
  }

  inline RecordLocation& operator=(RecordLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordLocation* internal_default_instance() {
    return reinterpret_cast<const RecordLocation*>(
               &_RecordLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RecordLocation* other);
  friend void swap(RecordLocation& a, RecordLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordLocation* New() const final {
    return CreateMaybeMessage<RecordLocation>(NULL);
  }

  RecordLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordLocation& from);
  void MergeFrom(const RecordLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.RecordKey record_key = 1;
  bool has_record_key() const;
  void clear_record_key();
  static const int kRecordKeyFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::RecordKey& _internal_record_key() const;
  public:
  const ::google::privacy::dlp::v2::RecordKey& record_key() const;
  ::google::privacy::dlp::v2::RecordKey* release_record_key();
  ::google::privacy::dlp::v2::RecordKey* mutable_record_key();
  void set_allocated_record_key(::google::privacy::dlp::v2::RecordKey* record_key);

  // .google.privacy.dlp.v2.FieldId field_id = 2;
  bool has_field_id() const;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_field_id() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& field_id() const;
  ::google::privacy::dlp::v2::FieldId* release_field_id();
  ::google::privacy::dlp::v2::FieldId* mutable_field_id();
  void set_allocated_field_id(::google::privacy::dlp::v2::FieldId* field_id);

  // .google.privacy.dlp.v2.TableLocation table_location = 3;
  bool has_table_location() const;
  void clear_table_location();
  static const int kTableLocationFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::TableLocation& _internal_table_location() const;
  public:
  const ::google::privacy::dlp::v2::TableLocation& table_location() const;
  ::google::privacy::dlp::v2::TableLocation* release_table_location();
  ::google::privacy::dlp::v2::TableLocation* mutable_table_location();
  void set_allocated_table_location(::google::privacy::dlp::v2::TableLocation* table_location);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RecordLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::RecordKey* record_key_;
  ::google::privacy::dlp::v2::FieldId* field_id_;
  ::google::privacy::dlp::v2::TableLocation* table_location_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.TableLocation) */ {
 public:
  TableLocation();
  virtual ~TableLocation();

  TableLocation(const TableLocation& from);

  inline TableLocation& operator=(const TableLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableLocation(TableLocation&& from) noexcept
    : TableLocation() {
    *this = ::std::move(from);
  }

  inline TableLocation& operator=(TableLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableLocation* internal_default_instance() {
    return reinterpret_cast<const TableLocation*>(
               &_TableLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(TableLocation* other);
  friend void swap(TableLocation& a, TableLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableLocation* New() const final {
    return CreateMaybeMessage<TableLocation>(NULL);
  }

  TableLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TableLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TableLocation& from);
  void MergeFrom(const TableLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 row_index = 1;
  void clear_row_index();
  static const int kRowIndexFieldNumber = 1;
  ::google::protobuf::int64 row_index() const;
  void set_row_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.TableLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 row_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(Range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Range* other);
  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return CreateMaybeMessage<Range>(NULL);
  }

  Range* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // int64 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ImageLocation) */ {
 public:
  ImageLocation();
  virtual ~ImageLocation();

  ImageLocation(const ImageLocation& from);

  inline ImageLocation& operator=(const ImageLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageLocation(ImageLocation&& from) noexcept
    : ImageLocation() {
    *this = ::std::move(from);
  }

  inline ImageLocation& operator=(ImageLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageLocation* internal_default_instance() {
    return reinterpret_cast<const ImageLocation*>(
               &_ImageLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ImageLocation* other);
  friend void swap(ImageLocation& a, ImageLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageLocation* New() const final {
    return CreateMaybeMessage<ImageLocation>(NULL);
  }

  ImageLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageLocation& from);
  void MergeFrom(const ImageLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.BoundingBox bounding_boxes = 1;
  int bounding_boxes_size() const;
  void clear_bounding_boxes();
  static const int kBoundingBoxesFieldNumber = 1;
  ::google::privacy::dlp::v2::BoundingBox* mutable_bounding_boxes(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::BoundingBox >*
      mutable_bounding_boxes();
  const ::google::privacy::dlp::v2::BoundingBox& bounding_boxes(int index) const;
  ::google::privacy::dlp::v2::BoundingBox* add_bounding_boxes();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::BoundingBox >&
      bounding_boxes() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ImageLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::BoundingBox > bounding_boxes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BoundingBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.BoundingBox) */ {
 public:
  BoundingBox();
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BoundingBox(BoundingBox&& from) noexcept
    : BoundingBox() {
    *this = ::std::move(from);
  }

  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
               &_BoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(BoundingBox* other);
  friend void swap(BoundingBox& a, BoundingBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox* New() const final {
    return CreateMaybeMessage<BoundingBox>(NULL);
  }

  BoundingBox* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 top = 1;
  void clear_top();
  static const int kTopFieldNumber = 1;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // int32 left = 2;
  void clear_left();
  static const int kLeftFieldNumber = 2;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.BoundingBox)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedactImageRequest_ImageRedactionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig) */ {
 public:
  RedactImageRequest_ImageRedactionConfig();
  virtual ~RedactImageRequest_ImageRedactionConfig();

  RedactImageRequest_ImageRedactionConfig(const RedactImageRequest_ImageRedactionConfig& from);

  inline RedactImageRequest_ImageRedactionConfig& operator=(const RedactImageRequest_ImageRedactionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedactImageRequest_ImageRedactionConfig(RedactImageRequest_ImageRedactionConfig&& from) noexcept
    : RedactImageRequest_ImageRedactionConfig() {
    *this = ::std::move(from);
  }

  inline RedactImageRequest_ImageRedactionConfig& operator=(RedactImageRequest_ImageRedactionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactImageRequest_ImageRedactionConfig& default_instance();

  enum TargetCase {
    kInfoType = 1,
    kRedactAllText = 2,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedactImageRequest_ImageRedactionConfig* internal_default_instance() {
    return reinterpret_cast<const RedactImageRequest_ImageRedactionConfig*>(
               &_RedactImageRequest_ImageRedactionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(RedactImageRequest_ImageRedactionConfig* other);
  friend void swap(RedactImageRequest_ImageRedactionConfig& a, RedactImageRequest_ImageRedactionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedactImageRequest_ImageRedactionConfig* New() const final {
    return CreateMaybeMessage<RedactImageRequest_ImageRedactionConfig>(NULL);
  }

  RedactImageRequest_ImageRedactionConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RedactImageRequest_ImageRedactionConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RedactImageRequest_ImageRedactionConfig& from);
  void MergeFrom(const RedactImageRequest_ImageRedactionConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedactImageRequest_ImageRedactionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.Color redaction_color = 3;
  bool has_redaction_color() const;
  void clear_redaction_color();
  static const int kRedactionColorFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::Color& _internal_redaction_color() const;
  public:
  const ::google::privacy::dlp::v2::Color& redaction_color() const;
  ::google::privacy::dlp::v2::Color* release_redaction_color();
  ::google::privacy::dlp::v2::Color* mutable_redaction_color();
  void set_allocated_redaction_color(::google::privacy::dlp::v2::Color* redaction_color);

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::InfoType& _internal_info_type() const;
  public:
  const ::google::privacy::dlp::v2::InfoType& info_type() const;
  ::google::privacy::dlp::v2::InfoType* release_info_type();
  ::google::privacy::dlp::v2::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type);

  // bool redact_all_text = 2;
  private:
  bool has_redact_all_text() const;
  public:
  void clear_redact_all_text();
  static const int kRedactAllTextFieldNumber = 2;
  bool redact_all_text() const;
  void set_redact_all_text(bool value);

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
 private:
  void set_has_info_type();
  void set_has_redact_all_text();

  inline bool has_target() const;
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::Color* redaction_color_;
  union TargetUnion {
    TargetUnion() {}
    ::google::privacy::dlp::v2::InfoType* info_type_;
    bool redact_all_text_;
  } target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedactImageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RedactImageRequest) */ {
 public:
  RedactImageRequest();
  virtual ~RedactImageRequest();

  RedactImageRequest(const RedactImageRequest& from);

  inline RedactImageRequest& operator=(const RedactImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedactImageRequest(RedactImageRequest&& from) noexcept
    : RedactImageRequest() {
    *this = ::std::move(from);
  }

  inline RedactImageRequest& operator=(RedactImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedactImageRequest* internal_default_instance() {
    return reinterpret_cast<const RedactImageRequest*>(
               &_RedactImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(RedactImageRequest* other);
  friend void swap(RedactImageRequest& a, RedactImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedactImageRequest* New() const final {
    return CreateMaybeMessage<RedactImageRequest>(NULL);
  }

  RedactImageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RedactImageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RedactImageRequest& from);
  void MergeFrom(const RedactImageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedactImageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RedactImageRequest_ImageRedactionConfig ImageRedactionConfig;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig image_redaction_configs = 5;
  int image_redaction_configs_size() const;
  void clear_image_redaction_configs();
  static const int kImageRedactionConfigsFieldNumber = 5;
  ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig* mutable_image_redaction_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig >*
      mutable_image_redaction_configs();
  const ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig& image_redaction_configs(int index) const;
  ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig* add_image_redaction_configs();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig >&
      image_redaction_configs() const;

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::InspectConfig& _internal_inspect_config() const;
  public:
  const ::google::privacy::dlp::v2::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2::InspectConfig* release_inspect_config();
  ::google::privacy::dlp::v2::InspectConfig* mutable_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config);

  // .google.privacy.dlp.v2.ByteContentItem byte_item = 7;
  bool has_byte_item() const;
  void clear_byte_item();
  static const int kByteItemFieldNumber = 7;
  private:
  const ::google::privacy::dlp::v2::ByteContentItem& _internal_byte_item() const;
  public:
  const ::google::privacy::dlp::v2::ByteContentItem& byte_item() const;
  ::google::privacy::dlp::v2::ByteContentItem* release_byte_item();
  ::google::privacy::dlp::v2::ByteContentItem* mutable_byte_item();
  void set_allocated_byte_item(::google::privacy::dlp::v2::ByteContentItem* byte_item);

  // bool include_findings = 6;
  void clear_include_findings();
  static const int kIncludeFindingsFieldNumber = 6;
  bool include_findings() const;
  void set_include_findings(bool value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RedactImageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig > image_redaction_configs_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::privacy::dlp::v2::InspectConfig* inspect_config_;
  ::google::privacy::dlp::v2::ByteContentItem* byte_item_;
  bool include_findings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(NULL);
  }

  Color* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float red = 1;
  void clear_red();
  static const int kRedFieldNumber = 1;
  float red() const;
  void set_red(float value);

  // float green = 2;
  void clear_green();
  static const int kGreenFieldNumber = 2;
  float green() const;
  void set_green(float value);

  // float blue = 3;
  void clear_blue();
  static const int kBlueFieldNumber = 3;
  float blue() const;
  void set_blue(float value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float red_;
  float green_;
  float blue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedactImageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RedactImageResponse) */ {
 public:
  RedactImageResponse();
  virtual ~RedactImageResponse();

  RedactImageResponse(const RedactImageResponse& from);

  inline RedactImageResponse& operator=(const RedactImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedactImageResponse(RedactImageResponse&& from) noexcept
    : RedactImageResponse() {
    *this = ::std::move(from);
  }

  inline RedactImageResponse& operator=(RedactImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedactImageResponse* internal_default_instance() {
    return reinterpret_cast<const RedactImageResponse*>(
               &_RedactImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(RedactImageResponse* other);
  friend void swap(RedactImageResponse& a, RedactImageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedactImageResponse* New() const final {
    return CreateMaybeMessage<RedactImageResponse>(NULL);
  }

  RedactImageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RedactImageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RedactImageResponse& from);
  void MergeFrom(const RedactImageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedactImageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes redacted_image = 1;
  void clear_redacted_image();
  static const int kRedactedImageFieldNumber = 1;
  const ::std::string& redacted_image() const;
  void set_redacted_image(const ::std::string& value);
  #if LANG_CXX11
  void set_redacted_image(::std::string&& value);
  #endif
  void set_redacted_image(const char* value);
  void set_redacted_image(const void* value, size_t size);
  ::std::string* mutable_redacted_image();
  ::std::string* release_redacted_image();
  void set_allocated_redacted_image(::std::string* redacted_image);

  // string extracted_text = 2;
  void clear_extracted_text();
  static const int kExtractedTextFieldNumber = 2;
  const ::std::string& extracted_text() const;
  void set_extracted_text(const ::std::string& value);
  #if LANG_CXX11
  void set_extracted_text(::std::string&& value);
  #endif
  void set_extracted_text(const char* value);
  void set_extracted_text(const char* value, size_t size);
  ::std::string* mutable_extracted_text();
  ::std::string* release_extracted_text();
  void set_allocated_extracted_text(::std::string* extracted_text);

  // .google.privacy.dlp.v2.InspectResult inspect_result = 3;
  bool has_inspect_result() const;
  void clear_inspect_result();
  static const int kInspectResultFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::InspectResult& _internal_inspect_result() const;
  public:
  const ::google::privacy::dlp::v2::InspectResult& inspect_result() const;
  ::google::privacy::dlp::v2::InspectResult* release_inspect_result();
  ::google::privacy::dlp::v2::InspectResult* mutable_inspect_result();
  void set_allocated_inspect_result(::google::privacy::dlp::v2::InspectResult* inspect_result);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RedactImageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr redacted_image_;
  ::google::protobuf::internal::ArenaStringPtr extracted_text_;
  ::google::privacy::dlp::v2::InspectResult* inspect_result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeidentifyContentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DeidentifyContentRequest) */ {
 public:
  DeidentifyContentRequest();
  virtual ~DeidentifyContentRequest();

  DeidentifyContentRequest(const DeidentifyContentRequest& from);

  inline DeidentifyContentRequest& operator=(const DeidentifyContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeidentifyContentRequest(DeidentifyContentRequest&& from) noexcept
    : DeidentifyContentRequest() {
    *this = ::std::move(from);
  }

  inline DeidentifyContentRequest& operator=(DeidentifyContentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeidentifyContentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeidentifyContentRequest* internal_default_instance() {
    return reinterpret_cast<const DeidentifyContentRequest*>(
               &_DeidentifyContentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(DeidentifyContentRequest* other);
  friend void swap(DeidentifyContentRequest& a, DeidentifyContentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeidentifyContentRequest* New() const final {
    return CreateMaybeMessage<DeidentifyContentRequest>(NULL);
  }

  DeidentifyContentRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeidentifyContentRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeidentifyContentRequest& from);
  void MergeFrom(const DeidentifyContentRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeidentifyContentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string inspect_template_name = 5;
  void clear_inspect_template_name();
  static const int kInspectTemplateNameFieldNumber = 5;
  const ::std::string& inspect_template_name() const;
  void set_inspect_template_name(const ::std::string& value);
  #if LANG_CXX11
  void set_inspect_template_name(::std::string&& value);
  #endif
  void set_inspect_template_name(const char* value);
  void set_inspect_template_name(const char* value, size_t size);
  ::std::string* mutable_inspect_template_name();
  ::std::string* release_inspect_template_name();
  void set_allocated_inspect_template_name(::std::string* inspect_template_name);

  // string deidentify_template_name = 6;
  void clear_deidentify_template_name();
  static const int kDeidentifyTemplateNameFieldNumber = 6;
  const ::std::string& deidentify_template_name() const;
  void set_deidentify_template_name(const ::std::string& value);
  #if LANG_CXX11
  void set_deidentify_template_name(::std::string&& value);
  #endif
  void set_deidentify_template_name(const char* value);
  void set_deidentify_template_name(const char* value, size_t size);
  ::std::string* mutable_deidentify_template_name();
  ::std::string* release_deidentify_template_name();
  void set_allocated_deidentify_template_name(::std::string* deidentify_template_name);

  // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 2;
  bool has_deidentify_config() const;
  void clear_deidentify_config();
  static const int kDeidentifyConfigFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::DeidentifyConfig& _internal_deidentify_config() const;
  public:
  const ::google::privacy::dlp::v2::DeidentifyConfig& deidentify_config() const;
  ::google::privacy::dlp::v2::DeidentifyConfig* release_deidentify_config();
  ::google::privacy::dlp::v2::DeidentifyConfig* mutable_deidentify_config();
  void set_allocated_deidentify_config(::google::privacy::dlp::v2::DeidentifyConfig* deidentify_config);

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::InspectConfig& _internal_inspect_config() const;
  public:
  const ::google::privacy::dlp::v2::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2::InspectConfig* release_inspect_config();
  ::google::privacy::dlp::v2::InspectConfig* mutable_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config);

  // .google.privacy.dlp.v2.ContentItem item = 4;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::ContentItem& _internal_item() const;
  public:
  const ::google::privacy::dlp::v2::ContentItem& item() const;
  ::google::privacy::dlp::v2::ContentItem* release_item();
  ::google::privacy::dlp::v2::ContentItem* mutable_item();
  void set_allocated_item(::google::privacy::dlp::v2::ContentItem* item);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DeidentifyContentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr inspect_template_name_;
  ::google::protobuf::internal::ArenaStringPtr deidentify_template_name_;
  ::google::privacy::dlp::v2::DeidentifyConfig* deidentify_config_;
  ::google::privacy::dlp::v2::InspectConfig* inspect_config_;
  ::google::privacy::dlp::v2::ContentItem* item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeidentifyContentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DeidentifyContentResponse) */ {
 public:
  DeidentifyContentResponse();
  virtual ~DeidentifyContentResponse();

  DeidentifyContentResponse(const DeidentifyContentResponse& from);

  inline DeidentifyContentResponse& operator=(const DeidentifyContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeidentifyContentResponse(DeidentifyContentResponse&& from) noexcept
    : DeidentifyContentResponse() {
    *this = ::std::move(from);
  }

  inline DeidentifyContentResponse& operator=(DeidentifyContentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeidentifyContentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeidentifyContentResponse* internal_default_instance() {
    return reinterpret_cast<const DeidentifyContentResponse*>(
               &_DeidentifyContentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(DeidentifyContentResponse* other);
  friend void swap(DeidentifyContentResponse& a, DeidentifyContentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeidentifyContentResponse* New() const final {
    return CreateMaybeMessage<DeidentifyContentResponse>(NULL);
  }

  DeidentifyContentResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeidentifyContentResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeidentifyContentResponse& from);
  void MergeFrom(const DeidentifyContentResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeidentifyContentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.ContentItem item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::ContentItem& _internal_item() const;
  public:
  const ::google::privacy::dlp::v2::ContentItem& item() const;
  ::google::privacy::dlp::v2::ContentItem* release_item();
  ::google::privacy::dlp::v2::ContentItem* mutable_item();
  void set_allocated_item(::google::privacy::dlp::v2::ContentItem* item);

  // .google.privacy.dlp.v2.TransformationOverview overview = 2;
  bool has_overview() const;
  void clear_overview();
  static const int kOverviewFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::TransformationOverview& _internal_overview() const;
  public:
  const ::google::privacy::dlp::v2::TransformationOverview& overview() const;
  ::google::privacy::dlp::v2::TransformationOverview* release_overview();
  ::google::privacy::dlp::v2::TransformationOverview* mutable_overview();
  void set_allocated_overview(::google::privacy::dlp::v2::TransformationOverview* overview);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DeidentifyContentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::ContentItem* item_;
  ::google::privacy::dlp::v2::TransformationOverview* overview_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReidentifyContentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ReidentifyContentRequest) */ {
 public:
  ReidentifyContentRequest();
  virtual ~ReidentifyContentRequest();

  ReidentifyContentRequest(const ReidentifyContentRequest& from);

  inline ReidentifyContentRequest& operator=(const ReidentifyContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReidentifyContentRequest(ReidentifyContentRequest&& from) noexcept
    : ReidentifyContentRequest() {
    *this = ::std::move(from);
  }

  inline ReidentifyContentRequest& operator=(ReidentifyContentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReidentifyContentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReidentifyContentRequest* internal_default_instance() {
    return reinterpret_cast<const ReidentifyContentRequest*>(
               &_ReidentifyContentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ReidentifyContentRequest* other);
  friend void swap(ReidentifyContentRequest& a, ReidentifyContentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReidentifyContentRequest* New() const final {
    return CreateMaybeMessage<ReidentifyContentRequest>(NULL);
  }

  ReidentifyContentRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReidentifyContentRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReidentifyContentRequest& from);
  void MergeFrom(const ReidentifyContentRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReidentifyContentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string inspect_template_name = 5;
  void clear_inspect_template_name();
  static const int kInspectTemplateNameFieldNumber = 5;
  const ::std::string& inspect_template_name() const;
  void set_inspect_template_name(const ::std::string& value);
  #if LANG_CXX11
  void set_inspect_template_name(::std::string&& value);
  #endif
  void set_inspect_template_name(const char* value);
  void set_inspect_template_name(const char* value, size_t size);
  ::std::string* mutable_inspect_template_name();
  ::std::string* release_inspect_template_name();
  void set_allocated_inspect_template_name(::std::string* inspect_template_name);

  // string reidentify_template_name = 6;
  void clear_reidentify_template_name();
  static const int kReidentifyTemplateNameFieldNumber = 6;
  const ::std::string& reidentify_template_name() const;
  void set_reidentify_template_name(const ::std::string& value);
  #if LANG_CXX11
  void set_reidentify_template_name(::std::string&& value);
  #endif
  void set_reidentify_template_name(const char* value);
  void set_reidentify_template_name(const char* value, size_t size);
  ::std::string* mutable_reidentify_template_name();
  ::std::string* release_reidentify_template_name();
  void set_allocated_reidentify_template_name(::std::string* reidentify_template_name);

  // .google.privacy.dlp.v2.DeidentifyConfig reidentify_config = 2;
  bool has_reidentify_config() const;
  void clear_reidentify_config();
  static const int kReidentifyConfigFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::DeidentifyConfig& _internal_reidentify_config() const;
  public:
  const ::google::privacy::dlp::v2::DeidentifyConfig& reidentify_config() const;
  ::google::privacy::dlp::v2::DeidentifyConfig* release_reidentify_config();
  ::google::privacy::dlp::v2::DeidentifyConfig* mutable_reidentify_config();
  void set_allocated_reidentify_config(::google::privacy::dlp::v2::DeidentifyConfig* reidentify_config);

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::InspectConfig& _internal_inspect_config() const;
  public:
  const ::google::privacy::dlp::v2::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2::InspectConfig* release_inspect_config();
  ::google::privacy::dlp::v2::InspectConfig* mutable_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config);

  // .google.privacy.dlp.v2.ContentItem item = 4;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::ContentItem& _internal_item() const;
  public:
  const ::google::privacy::dlp::v2::ContentItem& item() const;
  ::google::privacy::dlp::v2::ContentItem* release_item();
  ::google::privacy::dlp::v2::ContentItem* mutable_item();
  void set_allocated_item(::google::privacy::dlp::v2::ContentItem* item);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ReidentifyContentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr inspect_template_name_;
  ::google::protobuf::internal::ArenaStringPtr reidentify_template_name_;
  ::google::privacy::dlp::v2::DeidentifyConfig* reidentify_config_;
  ::google::privacy::dlp::v2::InspectConfig* inspect_config_;
  ::google::privacy::dlp::v2::ContentItem* item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReidentifyContentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ReidentifyContentResponse) */ {
 public:
  ReidentifyContentResponse();
  virtual ~ReidentifyContentResponse();

  ReidentifyContentResponse(const ReidentifyContentResponse& from);

  inline ReidentifyContentResponse& operator=(const ReidentifyContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReidentifyContentResponse(ReidentifyContentResponse&& from) noexcept
    : ReidentifyContentResponse() {
    *this = ::std::move(from);
  }

  inline ReidentifyContentResponse& operator=(ReidentifyContentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReidentifyContentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReidentifyContentResponse* internal_default_instance() {
    return reinterpret_cast<const ReidentifyContentResponse*>(
               &_ReidentifyContentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ReidentifyContentResponse* other);
  friend void swap(ReidentifyContentResponse& a, ReidentifyContentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReidentifyContentResponse* New() const final {
    return CreateMaybeMessage<ReidentifyContentResponse>(NULL);
  }

  ReidentifyContentResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReidentifyContentResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReidentifyContentResponse& from);
  void MergeFrom(const ReidentifyContentResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReidentifyContentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.ContentItem item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::ContentItem& _internal_item() const;
  public:
  const ::google::privacy::dlp::v2::ContentItem& item() const;
  ::google::privacy::dlp::v2::ContentItem* release_item();
  ::google::privacy::dlp::v2::ContentItem* mutable_item();
  void set_allocated_item(::google::privacy::dlp::v2::ContentItem* item);

  // .google.privacy.dlp.v2.TransformationOverview overview = 2;
  bool has_overview() const;
  void clear_overview();
  static const int kOverviewFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::TransformationOverview& _internal_overview() const;
  public:
  const ::google::privacy::dlp::v2::TransformationOverview& overview() const;
  ::google::privacy::dlp::v2::TransformationOverview* release_overview();
  ::google::privacy::dlp::v2::TransformationOverview* mutable_overview();
  void set_allocated_overview(::google::privacy::dlp::v2::TransformationOverview* overview);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ReidentifyContentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::ContentItem* item_;
  ::google::privacy::dlp::v2::TransformationOverview* overview_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectContentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InspectContentRequest) */ {
 public:
  InspectContentRequest();
  virtual ~InspectContentRequest();

  InspectContentRequest(const InspectContentRequest& from);

  inline InspectContentRequest& operator=(const InspectContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectContentRequest(InspectContentRequest&& from) noexcept
    : InspectContentRequest() {
    *this = ::std::move(from);
  }

  inline InspectContentRequest& operator=(InspectContentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectContentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectContentRequest* internal_default_instance() {
    return reinterpret_cast<const InspectContentRequest*>(
               &_InspectContentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(InspectContentRequest* other);
  friend void swap(InspectContentRequest& a, InspectContentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectContentRequest* New() const final {
    return CreateMaybeMessage<InspectContentRequest>(NULL);
  }

  InspectContentRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InspectContentRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InspectContentRequest& from);
  void MergeFrom(const InspectContentRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectContentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string inspect_template_name = 4;
  void clear_inspect_template_name();
  static const int kInspectTemplateNameFieldNumber = 4;
  const ::std::string& inspect_template_name() const;
  void set_inspect_template_name(const ::std::string& value);
  #if LANG_CXX11
  void set_inspect_template_name(::std::string&& value);
  #endif
  void set_inspect_template_name(const char* value);
  void set_inspect_template_name(const char* value, size_t size);
  ::std::string* mutable_inspect_template_name();
  ::std::string* release_inspect_template_name();
  void set_allocated_inspect_template_name(::std::string* inspect_template_name);

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::InspectConfig& _internal_inspect_config() const;
  public:
  const ::google::privacy::dlp::v2::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2::InspectConfig* release_inspect_config();
  ::google::privacy::dlp::v2::InspectConfig* mutable_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config);

  // .google.privacy.dlp.v2.ContentItem item = 3;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::ContentItem& _internal_item() const;
  public:
  const ::google::privacy::dlp::v2::ContentItem& item() const;
  ::google::privacy::dlp::v2::ContentItem* release_item();
  ::google::privacy::dlp::v2::ContentItem* mutable_item();
  void set_allocated_item(::google::privacy::dlp::v2::ContentItem* item);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InspectContentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr inspect_template_name_;
  ::google::privacy::dlp::v2::InspectConfig* inspect_config_;
  ::google::privacy::dlp::v2::ContentItem* item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectContentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InspectContentResponse) */ {
 public:
  InspectContentResponse();
  virtual ~InspectContentResponse();

  InspectContentResponse(const InspectContentResponse& from);

  inline InspectContentResponse& operator=(const InspectContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectContentResponse(InspectContentResponse&& from) noexcept
    : InspectContentResponse() {
    *this = ::std::move(from);
  }

  inline InspectContentResponse& operator=(InspectContentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectContentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectContentResponse* internal_default_instance() {
    return reinterpret_cast<const InspectContentResponse*>(
               &_InspectContentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(InspectContentResponse* other);
  friend void swap(InspectContentResponse& a, InspectContentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectContentResponse* New() const final {
    return CreateMaybeMessage<InspectContentResponse>(NULL);
  }

  InspectContentResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InspectContentResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InspectContentResponse& from);
  void MergeFrom(const InspectContentResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectContentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.InspectResult result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::InspectResult& _internal_result() const;
  public:
  const ::google::privacy::dlp::v2::InspectResult& result() const;
  ::google::privacy::dlp::v2::InspectResult* release_result();
  ::google::privacy::dlp::v2::InspectResult* mutable_result();
  void set_allocated_result(::google::privacy::dlp::v2::InspectResult* result);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InspectContentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::InspectResult* result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OutputStorageConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.OutputStorageConfig) */ {
 public:
  OutputStorageConfig();
  virtual ~OutputStorageConfig();

  OutputStorageConfig(const OutputStorageConfig& from);

  inline OutputStorageConfig& operator=(const OutputStorageConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutputStorageConfig(OutputStorageConfig&& from) noexcept
    : OutputStorageConfig() {
    *this = ::std::move(from);
  }

  inline OutputStorageConfig& operator=(OutputStorageConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OutputStorageConfig& default_instance();

  enum TypeCase {
    kTable = 1,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputStorageConfig* internal_default_instance() {
    return reinterpret_cast<const OutputStorageConfig*>(
               &_OutputStorageConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(OutputStorageConfig* other);
  friend void swap(OutputStorageConfig& a, OutputStorageConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutputStorageConfig* New() const final {
    return CreateMaybeMessage<OutputStorageConfig>(NULL);
  }

  OutputStorageConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OutputStorageConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OutputStorageConfig& from);
  void MergeFrom(const OutputStorageConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputStorageConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OutputStorageConfig_OutputSchema OutputSchema;
  static const OutputSchema OUTPUT_SCHEMA_UNSPECIFIED =
    OutputStorageConfig_OutputSchema_OUTPUT_SCHEMA_UNSPECIFIED;
  static const OutputSchema BASIC_COLUMNS =
    OutputStorageConfig_OutputSchema_BASIC_COLUMNS;
  static const OutputSchema GCS_COLUMNS =
    OutputStorageConfig_OutputSchema_GCS_COLUMNS;
  static const OutputSchema DATASTORE_COLUMNS =
    OutputStorageConfig_OutputSchema_DATASTORE_COLUMNS;
  static const OutputSchema BIG_QUERY_COLUMNS =
    OutputStorageConfig_OutputSchema_BIG_QUERY_COLUMNS;
  static const OutputSchema ALL_COLUMNS =
    OutputStorageConfig_OutputSchema_ALL_COLUMNS;
  static inline bool OutputSchema_IsValid(int value) {
    return OutputStorageConfig_OutputSchema_IsValid(value);
  }
  static const OutputSchema OutputSchema_MIN =
    OutputStorageConfig_OutputSchema_OutputSchema_MIN;
  static const OutputSchema OutputSchema_MAX =
    OutputStorageConfig_OutputSchema_OutputSchema_MAX;
  static const int OutputSchema_ARRAYSIZE =
    OutputStorageConfig_OutputSchema_OutputSchema_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OutputSchema_descriptor() {
    return OutputStorageConfig_OutputSchema_descriptor();
  }
  static inline const ::std::string& OutputSchema_Name(OutputSchema value) {
    return OutputStorageConfig_OutputSchema_Name(value);
  }
  static inline bool OutputSchema_Parse(const ::std::string& name,
      OutputSchema* value) {
    return OutputStorageConfig_OutputSchema_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.OutputStorageConfig.OutputSchema output_schema = 3;
  void clear_output_schema();
  static const int kOutputSchemaFieldNumber = 3;
  ::google::privacy::dlp::v2::OutputStorageConfig_OutputSchema output_schema() const;
  void set_output_schema(::google::privacy::dlp::v2::OutputStorageConfig_OutputSchema value);

  // .google.privacy.dlp.v2.BigQueryTable table = 1;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::BigQueryTable& _internal_table() const;
  public:
  const ::google::privacy::dlp::v2::BigQueryTable& table() const;
  ::google::privacy::dlp::v2::BigQueryTable* release_table();
  ::google::privacy::dlp::v2::BigQueryTable* mutable_table();
  void set_allocated_table(::google::privacy::dlp::v2::BigQueryTable* table);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.OutputStorageConfig)
 private:
  void set_has_table();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int output_schema_;
  union TypeUnion {
    TypeUnion() {}
    ::google::privacy::dlp::v2::BigQueryTable* table_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoTypeStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InfoTypeStats) */ {
 public:
  InfoTypeStats();
  virtual ~InfoTypeStats();

  InfoTypeStats(const InfoTypeStats& from);

  inline InfoTypeStats& operator=(const InfoTypeStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoTypeStats(InfoTypeStats&& from) noexcept
    : InfoTypeStats() {
    *this = ::std::move(from);
  }

  inline InfoTypeStats& operator=(InfoTypeStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoTypeStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoTypeStats* internal_default_instance() {
    return reinterpret_cast<const InfoTypeStats*>(
               &_InfoTypeStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(InfoTypeStats* other);
  friend void swap(InfoTypeStats& a, InfoTypeStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoTypeStats* New() const final {
    return CreateMaybeMessage<InfoTypeStats>(NULL);
  }

  InfoTypeStats* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoTypeStats>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoTypeStats& from);
  void MergeFrom(const InfoTypeStats& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoTypeStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::InfoType& _internal_info_type() const;
  public:
  const ::google::privacy::dlp::v2::InfoType& info_type() const;
  ::google::privacy::dlp::v2::InfoType* release_info_type();
  ::google::privacy::dlp::v2::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type);

  // int64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InfoTypeStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::InfoType* info_type_;
  ::google::protobuf::int64 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectDataSourceDetails_RequestedOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions) */ {
 public:
  InspectDataSourceDetails_RequestedOptions();
  virtual ~InspectDataSourceDetails_RequestedOptions();

  InspectDataSourceDetails_RequestedOptions(const InspectDataSourceDetails_RequestedOptions& from);

  inline InspectDataSourceDetails_RequestedOptions& operator=(const InspectDataSourceDetails_RequestedOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectDataSourceDetails_RequestedOptions(InspectDataSourceDetails_RequestedOptions&& from) noexcept
    : InspectDataSourceDetails_RequestedOptions() {
    *this = ::std::move(from);
  }

  inline InspectDataSourceDetails_RequestedOptions& operator=(InspectDataSourceDetails_RequestedOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectDataSourceDetails_RequestedOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectDataSourceDetails_RequestedOptions* internal_default_instance() {
    return reinterpret_cast<const InspectDataSourceDetails_RequestedOptions*>(
               &_InspectDataSourceDetails_RequestedOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(InspectDataSourceDetails_RequestedOptions* other);
  friend void swap(InspectDataSourceDetails_RequestedOptions& a, InspectDataSourceDetails_RequestedOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectDataSourceDetails_RequestedOptions* New() const final {
    return CreateMaybeMessage<InspectDataSourceDetails_RequestedOptions>(NULL);
  }

  InspectDataSourceDetails_RequestedOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InspectDataSourceDetails_RequestedOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InspectDataSourceDetails_RequestedOptions& from);
  void MergeFrom(const InspectDataSourceDetails_RequestedOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectDataSourceDetails_RequestedOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.InspectTemplate snapshot_inspect_template = 1;
  bool has_snapshot_inspect_template() const;
  void clear_snapshot_inspect_template();
  static const int kSnapshotInspectTemplateFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::InspectTemplate& _internal_snapshot_inspect_template() const;
  public:
  const ::google::privacy::dlp::v2::InspectTemplate& snapshot_inspect_template() const;
  ::google::privacy::dlp::v2::InspectTemplate* release_snapshot_inspect_template();
  ::google::privacy::dlp::v2::InspectTemplate* mutable_snapshot_inspect_template();
  void set_allocated_snapshot_inspect_template(::google::privacy::dlp::v2::InspectTemplate* snapshot_inspect_template);

  // .google.privacy.dlp.v2.InspectJobConfig job_config = 3;
  bool has_job_config() const;
  void clear_job_config();
  static const int kJobConfigFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::InspectJobConfig& _internal_job_config() const;
  public:
  const ::google::privacy::dlp::v2::InspectJobConfig& job_config() const;
  ::google::privacy::dlp::v2::InspectJobConfig* release_job_config();
  ::google::privacy::dlp::v2::InspectJobConfig* mutable_job_config();
  void set_allocated_job_config(::google::privacy::dlp::v2::InspectJobConfig* job_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::InspectTemplate* snapshot_inspect_template_;
  ::google::privacy::dlp::v2::InspectJobConfig* job_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectDataSourceDetails_Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InspectDataSourceDetails.Result) */ {
 public:
  InspectDataSourceDetails_Result();
  virtual ~InspectDataSourceDetails_Result();

  InspectDataSourceDetails_Result(const InspectDataSourceDetails_Result& from);

  inline InspectDataSourceDetails_Result& operator=(const InspectDataSourceDetails_Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectDataSourceDetails_Result(InspectDataSourceDetails_Result&& from) noexcept
    : InspectDataSourceDetails_Result() {
    *this = ::std::move(from);
  }

  inline InspectDataSourceDetails_Result& operator=(InspectDataSourceDetails_Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectDataSourceDetails_Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectDataSourceDetails_Result* internal_default_instance() {
    return reinterpret_cast<const InspectDataSourceDetails_Result*>(
               &_InspectDataSourceDetails_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(InspectDataSourceDetails_Result* other);
  friend void swap(InspectDataSourceDetails_Result& a, InspectDataSourceDetails_Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectDataSourceDetails_Result* New() const final {
    return CreateMaybeMessage<InspectDataSourceDetails_Result>(NULL);
  }

  InspectDataSourceDetails_Result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InspectDataSourceDetails_Result>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InspectDataSourceDetails_Result& from);
  void MergeFrom(const InspectDataSourceDetails_Result& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectDataSourceDetails_Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.InfoTypeStats info_type_stats = 3;
  int info_type_stats_size() const;
  void clear_info_type_stats();
  static const int kInfoTypeStatsFieldNumber = 3;
  ::google::privacy::dlp::v2::InfoTypeStats* mutable_info_type_stats(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeStats >*
      mutable_info_type_stats();
  const ::google::privacy::dlp::v2::InfoTypeStats& info_type_stats(int index) const;
  ::google::privacy::dlp::v2::InfoTypeStats* add_info_type_stats();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeStats >&
      info_type_stats() const;

  // int64 processed_bytes = 1;
  void clear_processed_bytes();
  static const int kProcessedBytesFieldNumber = 1;
  ::google::protobuf::int64 processed_bytes() const;
  void set_processed_bytes(::google::protobuf::int64 value);

  // int64 total_estimated_bytes = 2;
  void clear_total_estimated_bytes();
  static const int kTotalEstimatedBytesFieldNumber = 2;
  ::google::protobuf::int64 total_estimated_bytes() const;
  void set_total_estimated_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeStats > info_type_stats_;
  ::google::protobuf::int64 processed_bytes_;
  ::google::protobuf::int64 total_estimated_bytes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectDataSourceDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InspectDataSourceDetails) */ {
 public:
  InspectDataSourceDetails();
  virtual ~InspectDataSourceDetails();

  InspectDataSourceDetails(const InspectDataSourceDetails& from);

  inline InspectDataSourceDetails& operator=(const InspectDataSourceDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectDataSourceDetails(InspectDataSourceDetails&& from) noexcept
    : InspectDataSourceDetails() {
    *this = ::std::move(from);
  }

  inline InspectDataSourceDetails& operator=(InspectDataSourceDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectDataSourceDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectDataSourceDetails* internal_default_instance() {
    return reinterpret_cast<const InspectDataSourceDetails*>(
               &_InspectDataSourceDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(InspectDataSourceDetails* other);
  friend void swap(InspectDataSourceDetails& a, InspectDataSourceDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectDataSourceDetails* New() const final {
    return CreateMaybeMessage<InspectDataSourceDetails>(NULL);
  }

  InspectDataSourceDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InspectDataSourceDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InspectDataSourceDetails& from);
  void MergeFrom(const InspectDataSourceDetails& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectDataSourceDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InspectDataSourceDetails_RequestedOptions RequestedOptions;
  typedef InspectDataSourceDetails_Result Result;

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions requested_options = 2;
  bool has_requested_options() const;
  void clear_requested_options();
  static const int kRequestedOptionsFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions& _internal_requested_options() const;
  public:
  const ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions& requested_options() const;
  ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions* release_requested_options();
  ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions* mutable_requested_options();
  void set_allocated_requested_options(::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions* requested_options);

  // .google.privacy.dlp.v2.InspectDataSourceDetails.Result result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::InspectDataSourceDetails_Result& _internal_result() const;
  public:
  const ::google::privacy::dlp::v2::InspectDataSourceDetails_Result& result() const;
  ::google::privacy::dlp::v2::InspectDataSourceDetails_Result* release_result();
  ::google::privacy::dlp::v2::InspectDataSourceDetails_Result* mutable_result();
  void set_allocated_result(::google::privacy::dlp::v2::InspectDataSourceDetails_Result* result);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InspectDataSourceDetails)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions* requested_options_;
  ::google::privacy::dlp::v2::InspectDataSourceDetails_Result* result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoTypeDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InfoTypeDescription) */ {
 public:
  InfoTypeDescription();
  virtual ~InfoTypeDescription();

  InfoTypeDescription(const InfoTypeDescription& from);

  inline InfoTypeDescription& operator=(const InfoTypeDescription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoTypeDescription(InfoTypeDescription&& from) noexcept
    : InfoTypeDescription() {
    *this = ::std::move(from);
  }

  inline InfoTypeDescription& operator=(InfoTypeDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoTypeDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoTypeDescription* internal_default_instance() {
    return reinterpret_cast<const InfoTypeDescription*>(
               &_InfoTypeDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(InfoTypeDescription* other);
  friend void swap(InfoTypeDescription& a, InfoTypeDescription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoTypeDescription* New() const final {
    return CreateMaybeMessage<InfoTypeDescription>(NULL);
  }

  InfoTypeDescription* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoTypeDescription>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoTypeDescription& from);
  void MergeFrom(const InfoTypeDescription& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoTypeDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.InfoTypeSupportedBy supported_by = 3;
  int supported_by_size() const;
  void clear_supported_by();
  static const int kSupportedByFieldNumber = 3;
  ::google::privacy::dlp::v2::InfoTypeSupportedBy supported_by(int index) const;
  void set_supported_by(int index, ::google::privacy::dlp::v2::InfoTypeSupportedBy value);
  void add_supported_by(::google::privacy::dlp::v2::InfoTypeSupportedBy value);
  const ::google::protobuf::RepeatedField<int>& supported_by() const;
  ::google::protobuf::RepeatedField<int>* mutable_supported_by();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InfoTypeDescription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> supported_by_;
  mutable int _supported_by_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListInfoTypesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListInfoTypesRequest) */ {
 public:
  ListInfoTypesRequest();
  virtual ~ListInfoTypesRequest();

  ListInfoTypesRequest(const ListInfoTypesRequest& from);

  inline ListInfoTypesRequest& operator=(const ListInfoTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListInfoTypesRequest(ListInfoTypesRequest&& from) noexcept
    : ListInfoTypesRequest() {
    *this = ::std::move(from);
  }

  inline ListInfoTypesRequest& operator=(ListInfoTypesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInfoTypesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInfoTypesRequest* internal_default_instance() {
    return reinterpret_cast<const ListInfoTypesRequest*>(
               &_ListInfoTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(ListInfoTypesRequest* other);
  friend void swap(ListInfoTypesRequest& a, ListInfoTypesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListInfoTypesRequest* New() const final {
    return CreateMaybeMessage<ListInfoTypesRequest>(NULL);
  }

  ListInfoTypesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListInfoTypesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListInfoTypesRequest& from);
  void MergeFrom(const ListInfoTypesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInfoTypesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string language_code = 1;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 1;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListInfoTypesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListInfoTypesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListInfoTypesResponse) */ {
 public:
  ListInfoTypesResponse();
  virtual ~ListInfoTypesResponse();

  ListInfoTypesResponse(const ListInfoTypesResponse& from);

  inline ListInfoTypesResponse& operator=(const ListInfoTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListInfoTypesResponse(ListInfoTypesResponse&& from) noexcept
    : ListInfoTypesResponse() {
    *this = ::std::move(from);
  }

  inline ListInfoTypesResponse& operator=(ListInfoTypesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInfoTypesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInfoTypesResponse* internal_default_instance() {
    return reinterpret_cast<const ListInfoTypesResponse*>(
               &_ListInfoTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(ListInfoTypesResponse* other);
  friend void swap(ListInfoTypesResponse& a, ListInfoTypesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListInfoTypesResponse* New() const final {
    return CreateMaybeMessage<ListInfoTypesResponse>(NULL);
  }

  ListInfoTypesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListInfoTypesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListInfoTypesResponse& from);
  void MergeFrom(const ListInfoTypesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInfoTypesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.InfoTypeDescription info_types = 1;
  int info_types_size() const;
  void clear_info_types();
  static const int kInfoTypesFieldNumber = 1;
  ::google::privacy::dlp::v2::InfoTypeDescription* mutable_info_types(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeDescription >*
      mutable_info_types();
  const ::google::privacy::dlp::v2::InfoTypeDescription& info_types(int index) const;
  ::google::privacy::dlp::v2::InfoTypeDescription* add_info_types();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeDescription >&
      info_types() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListInfoTypesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeDescription > info_types_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RiskAnalysisJobConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RiskAnalysisJobConfig) */ {
 public:
  RiskAnalysisJobConfig();
  virtual ~RiskAnalysisJobConfig();

  RiskAnalysisJobConfig(const RiskAnalysisJobConfig& from);

  inline RiskAnalysisJobConfig& operator=(const RiskAnalysisJobConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisJobConfig(RiskAnalysisJobConfig&& from) noexcept
    : RiskAnalysisJobConfig() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisJobConfig& operator=(RiskAnalysisJobConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisJobConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisJobConfig* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisJobConfig*>(
               &_RiskAnalysisJobConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(RiskAnalysisJobConfig* other);
  friend void swap(RiskAnalysisJobConfig& a, RiskAnalysisJobConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisJobConfig* New() const final {
    return CreateMaybeMessage<RiskAnalysisJobConfig>(NULL);
  }

  RiskAnalysisJobConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RiskAnalysisJobConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RiskAnalysisJobConfig& from);
  void MergeFrom(const RiskAnalysisJobConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RiskAnalysisJobConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.Action actions = 3;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 3;
  ::google::privacy::dlp::v2::Action* mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Action >*
      mutable_actions();
  const ::google::privacy::dlp::v2::Action& actions(int index) const;
  ::google::privacy::dlp::v2::Action* add_actions();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Action >&
      actions() const;

  // .google.privacy.dlp.v2.PrivacyMetric privacy_metric = 1;
  bool has_privacy_metric() const;
  void clear_privacy_metric();
  static const int kPrivacyMetricFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::PrivacyMetric& _internal_privacy_metric() const;
  public:
  const ::google::privacy::dlp::v2::PrivacyMetric& privacy_metric() const;
  ::google::privacy::dlp::v2::PrivacyMetric* release_privacy_metric();
  ::google::privacy::dlp::v2::PrivacyMetric* mutable_privacy_metric();
  void set_allocated_privacy_metric(::google::privacy::dlp::v2::PrivacyMetric* privacy_metric);

  // .google.privacy.dlp.v2.BigQueryTable source_table = 2;
  bool has_source_table() const;
  void clear_source_table();
  static const int kSourceTableFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::BigQueryTable& _internal_source_table() const;
  public:
  const ::google::privacy::dlp::v2::BigQueryTable& source_table() const;
  ::google::privacy::dlp::v2::BigQueryTable* release_source_table();
  ::google::privacy::dlp::v2::BigQueryTable* mutable_source_table();
  void set_allocated_source_table(::google::privacy::dlp::v2::BigQueryTable* source_table);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RiskAnalysisJobConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Action > actions_;
  ::google::privacy::dlp::v2::PrivacyMetric* privacy_metric_;
  ::google::privacy::dlp::v2::BigQueryTable* source_table_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuasiId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.QuasiId) */ {
 public:
  QuasiId();
  virtual ~QuasiId();

  QuasiId(const QuasiId& from);

  inline QuasiId& operator=(const QuasiId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuasiId(QuasiId&& from) noexcept
    : QuasiId() {
    *this = ::std::move(from);
  }

  inline QuasiId& operator=(QuasiId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuasiId& default_instance();

  enum TagCase {
    kInfoType = 2,
    kCustomTag = 3,
    kInferred = 4,
    TAG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuasiId* internal_default_instance() {
    return reinterpret_cast<const QuasiId*>(
               &_QuasiId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(QuasiId* other);
  friend void swap(QuasiId& a, QuasiId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuasiId* New() const final {
    return CreateMaybeMessage<QuasiId>(NULL);
  }

  QuasiId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuasiId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuasiId& from);
  void MergeFrom(const QuasiId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuasiId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.FieldId field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_field() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& field() const;
  ::google::privacy::dlp::v2::FieldId* release_field();
  ::google::privacy::dlp::v2::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2::FieldId* field);

  // .google.privacy.dlp.v2.InfoType info_type = 2;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::InfoType& _internal_info_type() const;
  public:
  const ::google::privacy::dlp::v2::InfoType& info_type() const;
  ::google::privacy::dlp::v2::InfoType* release_info_type();
  ::google::privacy::dlp::v2::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type);

  // string custom_tag = 3;
  private:
  bool has_custom_tag() const;
  public:
  void clear_custom_tag();
  static const int kCustomTagFieldNumber = 3;
  const ::std::string& custom_tag() const;
  void set_custom_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_tag(::std::string&& value);
  #endif
  void set_custom_tag(const char* value);
  void set_custom_tag(const char* value, size_t size);
  ::std::string* mutable_custom_tag();
  ::std::string* release_custom_tag();
  void set_allocated_custom_tag(::std::string* custom_tag);

  // .google.protobuf.Empty inferred = 4;
  bool has_inferred() const;
  void clear_inferred();
  static const int kInferredFieldNumber = 4;
  private:
  const ::google::protobuf::Empty& _internal_inferred() const;
  public:
  const ::google::protobuf::Empty& inferred() const;
  ::google::protobuf::Empty* release_inferred();
  ::google::protobuf::Empty* mutable_inferred();
  void set_allocated_inferred(::google::protobuf::Empty* inferred);

  void clear_tag();
  TagCase tag_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.QuasiId)
 private:
  void set_has_info_type();
  void set_has_custom_tag();
  void set_has_inferred();

  inline bool has_tag() const;
  inline void clear_has_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::FieldId* field_;
  union TagUnion {
    TagUnion() {}
    ::google::privacy::dlp::v2::InfoType* info_type_;
    ::google::protobuf::internal::ArenaStringPtr custom_tag_;
    ::google::protobuf::Empty* inferred_;
  } tag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatisticalTable_QuasiIdentifierField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField) */ {
 public:
  StatisticalTable_QuasiIdentifierField();
  virtual ~StatisticalTable_QuasiIdentifierField();

  StatisticalTable_QuasiIdentifierField(const StatisticalTable_QuasiIdentifierField& from);

  inline StatisticalTable_QuasiIdentifierField& operator=(const StatisticalTable_QuasiIdentifierField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatisticalTable_QuasiIdentifierField(StatisticalTable_QuasiIdentifierField&& from) noexcept
    : StatisticalTable_QuasiIdentifierField() {
    *this = ::std::move(from);
  }

  inline StatisticalTable_QuasiIdentifierField& operator=(StatisticalTable_QuasiIdentifierField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticalTable_QuasiIdentifierField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticalTable_QuasiIdentifierField* internal_default_instance() {
    return reinterpret_cast<const StatisticalTable_QuasiIdentifierField*>(
               &_StatisticalTable_QuasiIdentifierField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(StatisticalTable_QuasiIdentifierField* other);
  friend void swap(StatisticalTable_QuasiIdentifierField& a, StatisticalTable_QuasiIdentifierField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatisticalTable_QuasiIdentifierField* New() const final {
    return CreateMaybeMessage<StatisticalTable_QuasiIdentifierField>(NULL);
  }

  StatisticalTable_QuasiIdentifierField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatisticalTable_QuasiIdentifierField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatisticalTable_QuasiIdentifierField& from);
  void MergeFrom(const StatisticalTable_QuasiIdentifierField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticalTable_QuasiIdentifierField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string custom_tag = 2;
  void clear_custom_tag();
  static const int kCustomTagFieldNumber = 2;
  const ::std::string& custom_tag() const;
  void set_custom_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_tag(::std::string&& value);
  #endif
  void set_custom_tag(const char* value);
  void set_custom_tag(const char* value, size_t size);
  ::std::string* mutable_custom_tag();
  ::std::string* release_custom_tag();
  void set_allocated_custom_tag(::std::string* custom_tag);

  // .google.privacy.dlp.v2.FieldId field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_field() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& field() const;
  ::google::privacy::dlp::v2::FieldId* release_field();
  ::google::privacy::dlp::v2::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2::FieldId* field);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr custom_tag_;
  ::google::privacy::dlp::v2::FieldId* field_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatisticalTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.StatisticalTable) */ {
 public:
  StatisticalTable();
  virtual ~StatisticalTable();

  StatisticalTable(const StatisticalTable& from);

  inline StatisticalTable& operator=(const StatisticalTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatisticalTable(StatisticalTable&& from) noexcept
    : StatisticalTable() {
    *this = ::std::move(from);
  }

  inline StatisticalTable& operator=(StatisticalTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticalTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticalTable* internal_default_instance() {
    return reinterpret_cast<const StatisticalTable*>(
               &_StatisticalTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(StatisticalTable* other);
  friend void swap(StatisticalTable& a, StatisticalTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatisticalTable* New() const final {
    return CreateMaybeMessage<StatisticalTable>(NULL);
  }

  StatisticalTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatisticalTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatisticalTable& from);
  void MergeFrom(const StatisticalTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticalTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StatisticalTable_QuasiIdentifierField QuasiIdentifierField;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField quasi_ids = 1;
  int quasi_ids_size() const;
  void clear_quasi_ids();
  static const int kQuasiIdsFieldNumber = 1;
  ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField* mutable_quasi_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField >*
      mutable_quasi_ids();
  const ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField& quasi_ids(int index) const;
  ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField* add_quasi_ids();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField >&
      quasi_ids() const;

  // .google.privacy.dlp.v2.FieldId relative_frequency = 2;
  bool has_relative_frequency() const;
  void clear_relative_frequency();
  static const int kRelativeFrequencyFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_relative_frequency() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& relative_frequency() const;
  ::google::privacy::dlp::v2::FieldId* release_relative_frequency();
  ::google::privacy::dlp::v2::FieldId* mutable_relative_frequency();
  void set_allocated_relative_frequency(::google::privacy::dlp::v2::FieldId* relative_frequency);

  // .google.privacy.dlp.v2.BigQueryTable table = 3;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::BigQueryTable& _internal_table() const;
  public:
  const ::google::privacy::dlp::v2::BigQueryTable& table() const;
  ::google::privacy::dlp::v2::BigQueryTable* release_table();
  ::google::privacy::dlp::v2::BigQueryTable* mutable_table();
  void set_allocated_table(::google::privacy::dlp::v2::BigQueryTable* table);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.StatisticalTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField > quasi_ids_;
  ::google::privacy::dlp::v2::FieldId* relative_frequency_;
  ::google::privacy::dlp::v2::BigQueryTable* table_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrivacyMetric_NumericalStatsConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig) */ {
 public:
  PrivacyMetric_NumericalStatsConfig();
  virtual ~PrivacyMetric_NumericalStatsConfig();

  PrivacyMetric_NumericalStatsConfig(const PrivacyMetric_NumericalStatsConfig& from);

  inline PrivacyMetric_NumericalStatsConfig& operator=(const PrivacyMetric_NumericalStatsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_NumericalStatsConfig(PrivacyMetric_NumericalStatsConfig&& from) noexcept
    : PrivacyMetric_NumericalStatsConfig() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_NumericalStatsConfig& operator=(PrivacyMetric_NumericalStatsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_NumericalStatsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_NumericalStatsConfig* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_NumericalStatsConfig*>(
               &_PrivacyMetric_NumericalStatsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(PrivacyMetric_NumericalStatsConfig* other);
  friend void swap(PrivacyMetric_NumericalStatsConfig& a, PrivacyMetric_NumericalStatsConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_NumericalStatsConfig* New() const final {
    return CreateMaybeMessage<PrivacyMetric_NumericalStatsConfig>(NULL);
  }

  PrivacyMetric_NumericalStatsConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyMetric_NumericalStatsConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivacyMetric_NumericalStatsConfig& from);
  void MergeFrom(const PrivacyMetric_NumericalStatsConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyMetric_NumericalStatsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.FieldId field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_field() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& field() const;
  ::google::privacy::dlp::v2::FieldId* release_field();
  ::google::privacy::dlp::v2::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2::FieldId* field);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::FieldId* field_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrivacyMetric_CategoricalStatsConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig) */ {
 public:
  PrivacyMetric_CategoricalStatsConfig();
  virtual ~PrivacyMetric_CategoricalStatsConfig();

  PrivacyMetric_CategoricalStatsConfig(const PrivacyMetric_CategoricalStatsConfig& from);

  inline PrivacyMetric_CategoricalStatsConfig& operator=(const PrivacyMetric_CategoricalStatsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_CategoricalStatsConfig(PrivacyMetric_CategoricalStatsConfig&& from) noexcept
    : PrivacyMetric_CategoricalStatsConfig() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_CategoricalStatsConfig& operator=(PrivacyMetric_CategoricalStatsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_CategoricalStatsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_CategoricalStatsConfig* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_CategoricalStatsConfig*>(
               &_PrivacyMetric_CategoricalStatsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(PrivacyMetric_CategoricalStatsConfig* other);
  friend void swap(PrivacyMetric_CategoricalStatsConfig& a, PrivacyMetric_CategoricalStatsConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_CategoricalStatsConfig* New() const final {
    return CreateMaybeMessage<PrivacyMetric_CategoricalStatsConfig>(NULL);
  }

  PrivacyMetric_CategoricalStatsConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyMetric_CategoricalStatsConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivacyMetric_CategoricalStatsConfig& from);
  void MergeFrom(const PrivacyMetric_CategoricalStatsConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyMetric_CategoricalStatsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.FieldId field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_field() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& field() const;
  ::google::privacy::dlp::v2::FieldId* release_field();
  ::google::privacy::dlp::v2::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2::FieldId* field);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::FieldId* field_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrivacyMetric_KAnonymityConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig) */ {
 public:
  PrivacyMetric_KAnonymityConfig();
  virtual ~PrivacyMetric_KAnonymityConfig();

  PrivacyMetric_KAnonymityConfig(const PrivacyMetric_KAnonymityConfig& from);

  inline PrivacyMetric_KAnonymityConfig& operator=(const PrivacyMetric_KAnonymityConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_KAnonymityConfig(PrivacyMetric_KAnonymityConfig&& from) noexcept
    : PrivacyMetric_KAnonymityConfig() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_KAnonymityConfig& operator=(PrivacyMetric_KAnonymityConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_KAnonymityConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_KAnonymityConfig* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_KAnonymityConfig*>(
               &_PrivacyMetric_KAnonymityConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(PrivacyMetric_KAnonymityConfig* other);
  friend void swap(PrivacyMetric_KAnonymityConfig& a, PrivacyMetric_KAnonymityConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_KAnonymityConfig* New() const final {
    return CreateMaybeMessage<PrivacyMetric_KAnonymityConfig>(NULL);
  }

  PrivacyMetric_KAnonymityConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyMetric_KAnonymityConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivacyMetric_KAnonymityConfig& from);
  void MergeFrom(const PrivacyMetric_KAnonymityConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyMetric_KAnonymityConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
  int quasi_ids_size() const;
  void clear_quasi_ids();
  static const int kQuasiIdsFieldNumber = 1;
  ::google::privacy::dlp::v2::FieldId* mutable_quasi_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >*
      mutable_quasi_ids();
  const ::google::privacy::dlp::v2::FieldId& quasi_ids(int index) const;
  ::google::privacy::dlp::v2::FieldId* add_quasi_ids();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >&
      quasi_ids() const;

  // .google.privacy.dlp.v2.EntityId entity_id = 2;
  bool has_entity_id() const;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::EntityId& _internal_entity_id() const;
  public:
  const ::google::privacy::dlp::v2::EntityId& entity_id() const;
  ::google::privacy::dlp::v2::EntityId* release_entity_id();
  ::google::privacy::dlp::v2::EntityId* mutable_entity_id();
  void set_allocated_entity_id(::google::privacy::dlp::v2::EntityId* entity_id);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId > quasi_ids_;
  ::google::privacy::dlp::v2::EntityId* entity_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrivacyMetric_LDiversityConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig) */ {
 public:
  PrivacyMetric_LDiversityConfig();
  virtual ~PrivacyMetric_LDiversityConfig();

  PrivacyMetric_LDiversityConfig(const PrivacyMetric_LDiversityConfig& from);

  inline PrivacyMetric_LDiversityConfig& operator=(const PrivacyMetric_LDiversityConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_LDiversityConfig(PrivacyMetric_LDiversityConfig&& from) noexcept
    : PrivacyMetric_LDiversityConfig() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_LDiversityConfig& operator=(PrivacyMetric_LDiversityConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_LDiversityConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_LDiversityConfig* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_LDiversityConfig*>(
               &_PrivacyMetric_LDiversityConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(PrivacyMetric_LDiversityConfig* other);
  friend void swap(PrivacyMetric_LDiversityConfig& a, PrivacyMetric_LDiversityConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_LDiversityConfig* New() const final {
    return CreateMaybeMessage<PrivacyMetric_LDiversityConfig>(NULL);
  }

  PrivacyMetric_LDiversityConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyMetric_LDiversityConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivacyMetric_LDiversityConfig& from);
  void MergeFrom(const PrivacyMetric_LDiversityConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyMetric_LDiversityConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
  int quasi_ids_size() const;
  void clear_quasi_ids();
  static const int kQuasiIdsFieldNumber = 1;
  ::google::privacy::dlp::v2::FieldId* mutable_quasi_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >*
      mutable_quasi_ids();
  const ::google::privacy::dlp::v2::FieldId& quasi_ids(int index) const;
  ::google::privacy::dlp::v2::FieldId* add_quasi_ids();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >&
      quasi_ids() const;

  // .google.privacy.dlp.v2.FieldId sensitive_attribute = 2;
  bool has_sensitive_attribute() const;
  void clear_sensitive_attribute();
  static const int kSensitiveAttributeFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_sensitive_attribute() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& sensitive_attribute() const;
  ::google::privacy::dlp::v2::FieldId* release_sensitive_attribute();
  ::google::privacy::dlp::v2::FieldId* mutable_sensitive_attribute();
  void set_allocated_sensitive_attribute(::google::privacy::dlp::v2::FieldId* sensitive_attribute);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId > quasi_ids_;
  ::google::privacy::dlp::v2::FieldId* sensitive_attribute_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrivacyMetric_KMapEstimationConfig_TaggedField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField) */ {
 public:
  PrivacyMetric_KMapEstimationConfig_TaggedField();
  virtual ~PrivacyMetric_KMapEstimationConfig_TaggedField();

  PrivacyMetric_KMapEstimationConfig_TaggedField(const PrivacyMetric_KMapEstimationConfig_TaggedField& from);

  inline PrivacyMetric_KMapEstimationConfig_TaggedField& operator=(const PrivacyMetric_KMapEstimationConfig_TaggedField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_KMapEstimationConfig_TaggedField(PrivacyMetric_KMapEstimationConfig_TaggedField&& from) noexcept
    : PrivacyMetric_KMapEstimationConfig_TaggedField() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_KMapEstimationConfig_TaggedField& operator=(PrivacyMetric_KMapEstimationConfig_TaggedField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_KMapEstimationConfig_TaggedField& default_instance();

  enum TagCase {
    kInfoType = 2,
    kCustomTag = 3,
    kInferred = 4,
    TAG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_KMapEstimationConfig_TaggedField* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_KMapEstimationConfig_TaggedField*>(
               &_PrivacyMetric_KMapEstimationConfig_TaggedField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(PrivacyMetric_KMapEstimationConfig_TaggedField* other);
  friend void swap(PrivacyMetric_KMapEstimationConfig_TaggedField& a, PrivacyMetric_KMapEstimationConfig_TaggedField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_KMapEstimationConfig_TaggedField* New() const final {
    return CreateMaybeMessage<PrivacyMetric_KMapEstimationConfig_TaggedField>(NULL);
  }

  PrivacyMetric_KMapEstimationConfig_TaggedField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyMetric_KMapEstimationConfig_TaggedField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivacyMetric_KMapEstimationConfig_TaggedField& from);
  void MergeFrom(const PrivacyMetric_KMapEstimationConfig_TaggedField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyMetric_KMapEstimationConfig_TaggedField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.FieldId field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_field() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& field() const;
  ::google::privacy::dlp::v2::FieldId* release_field();
  ::google::privacy::dlp::v2::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2::FieldId* field);

  // .google.privacy.dlp.v2.InfoType info_type = 2;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::InfoType& _internal_info_type() const;
  public:
  const ::google::privacy::dlp::v2::InfoType& info_type() const;
  ::google::privacy::dlp::v2::InfoType* release_info_type();
  ::google::privacy::dlp::v2::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type);

  // string custom_tag = 3;
  private:
  bool has_custom_tag() const;
  public:
  void clear_custom_tag();
  static const int kCustomTagFieldNumber = 3;
  const ::std::string& custom_tag() const;
  void set_custom_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_tag(::std::string&& value);
  #endif
  void set_custom_tag(const char* value);
  void set_custom_tag(const char* value, size_t size);
  ::std::string* mutable_custom_tag();
  ::std::string* release_custom_tag();
  void set_allocated_custom_tag(::std::string* custom_tag);

  // .google.protobuf.Empty inferred = 4;
  bool has_inferred() const;
  void clear_inferred();
  static const int kInferredFieldNumber = 4;
  private:
  const ::google::protobuf::Empty& _internal_inferred() const;
  public:
  const ::google::protobuf::Empty& inferred() const;
  ::google::protobuf::Empty* release_inferred();
  ::google::protobuf::Empty* mutable_inferred();
  void set_allocated_inferred(::google::protobuf::Empty* inferred);

  void clear_tag();
  TagCase tag_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
 private:
  void set_has_info_type();
  void set_has_custom_tag();
  void set_has_inferred();

  inline bool has_tag() const;
  inline void clear_has_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::FieldId* field_;
  union TagUnion {
    TagUnion() {}
    ::google::privacy::dlp::v2::InfoType* info_type_;
    ::google::protobuf::internal::ArenaStringPtr custom_tag_;
    ::google::protobuf::Empty* inferred_;
  } tag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField) */ {
 public:
  PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField();
  virtual ~PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField();

  PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& from);

  inline PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& operator=(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField&& from) noexcept
    : PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& operator=(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField*>(
               &_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* other);
  friend void swap(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& a, PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* New() const final {
    return CreateMaybeMessage<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField>(NULL);
  }

  PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& from);
  void MergeFrom(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string custom_tag = 2;
  void clear_custom_tag();
  static const int kCustomTagFieldNumber = 2;
  const ::std::string& custom_tag() const;
  void set_custom_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_tag(::std::string&& value);
  #endif
  void set_custom_tag(const char* value);
  void set_custom_tag(const char* value, size_t size);
  ::std::string* mutable_custom_tag();
  ::std::string* release_custom_tag();
  void set_allocated_custom_tag(::std::string* custom_tag);

  // .google.privacy.dlp.v2.FieldId field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_field() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& field() const;
  ::google::privacy::dlp::v2::FieldId* release_field();
  ::google::privacy::dlp::v2::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2::FieldId* field);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr custom_tag_;
  ::google::privacy::dlp::v2::FieldId* field_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrivacyMetric_KMapEstimationConfig_AuxiliaryTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable) */ {
 public:
  PrivacyMetric_KMapEstimationConfig_AuxiliaryTable();
  virtual ~PrivacyMetric_KMapEstimationConfig_AuxiliaryTable();

  PrivacyMetric_KMapEstimationConfig_AuxiliaryTable(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& from);

  inline PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& operator=(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_KMapEstimationConfig_AuxiliaryTable(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable&& from) noexcept
    : PrivacyMetric_KMapEstimationConfig_AuxiliaryTable() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& operator=(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable*>(
               &_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* other);
  friend void swap(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& a, PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* New() const final {
    return CreateMaybeMessage<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable>(NULL);
  }

  PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& from);
  void MergeFrom(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField QuasiIdField;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField quasi_ids = 1;
  int quasi_ids_size() const;
  void clear_quasi_ids();
  static const int kQuasiIdsFieldNumber = 1;
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* mutable_quasi_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField >*
      mutable_quasi_ids();
  const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& quasi_ids(int index) const;
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* add_quasi_ids();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField >&
      quasi_ids() const;

  // .google.privacy.dlp.v2.FieldId relative_frequency = 2;
  bool has_relative_frequency() const;
  void clear_relative_frequency();
  static const int kRelativeFrequencyFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_relative_frequency() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& relative_frequency() const;
  ::google::privacy::dlp::v2::FieldId* release_relative_frequency();
  ::google::privacy::dlp::v2::FieldId* mutable_relative_frequency();
  void set_allocated_relative_frequency(::google::privacy::dlp::v2::FieldId* relative_frequency);

  // .google.privacy.dlp.v2.BigQueryTable table = 3;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::BigQueryTable& _internal_table() const;
  public:
  const ::google::privacy::dlp::v2::BigQueryTable& table() const;
  ::google::privacy::dlp::v2::BigQueryTable* release_table();
  ::google::privacy::dlp::v2::BigQueryTable* mutable_table();
  void set_allocated_table(::google::privacy::dlp::v2::BigQueryTable* table);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField > quasi_ids_;
  ::google::privacy::dlp::v2::FieldId* relative_frequency_;
  ::google::privacy::dlp::v2::BigQueryTable* table_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrivacyMetric_KMapEstimationConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig) */ {
 public:
  PrivacyMetric_KMapEstimationConfig();
  virtual ~PrivacyMetric_KMapEstimationConfig();

  PrivacyMetric_KMapEstimationConfig(const PrivacyMetric_KMapEstimationConfig& from);

  inline PrivacyMetric_KMapEstimationConfig& operator=(const PrivacyMetric_KMapEstimationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_KMapEstimationConfig(PrivacyMetric_KMapEstimationConfig&& from) noexcept
    : PrivacyMetric_KMapEstimationConfig() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_KMapEstimationConfig& operator=(PrivacyMetric_KMapEstimationConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_KMapEstimationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_KMapEstimationConfig* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_KMapEstimationConfig*>(
               &_PrivacyMetric_KMapEstimationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(PrivacyMetric_KMapEstimationConfig* other);
  friend void swap(PrivacyMetric_KMapEstimationConfig& a, PrivacyMetric_KMapEstimationConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_KMapEstimationConfig* New() const final {
    return CreateMaybeMessage<PrivacyMetric_KMapEstimationConfig>(NULL);
  }

  PrivacyMetric_KMapEstimationConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyMetric_KMapEstimationConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivacyMetric_KMapEstimationConfig& from);
  void MergeFrom(const PrivacyMetric_KMapEstimationConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyMetric_KMapEstimationConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PrivacyMetric_KMapEstimationConfig_TaggedField TaggedField;
  typedef PrivacyMetric_KMapEstimationConfig_AuxiliaryTable AuxiliaryTable;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField quasi_ids = 1;
  int quasi_ids_size() const;
  void clear_quasi_ids();
  static const int kQuasiIdsFieldNumber = 1;
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField* mutable_quasi_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField >*
      mutable_quasi_ids();
  const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField& quasi_ids(int index) const;
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField* add_quasi_ids();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField >&
      quasi_ids() const;

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable auxiliary_tables = 3;
  int auxiliary_tables_size() const;
  void clear_auxiliary_tables();
  static const int kAuxiliaryTablesFieldNumber = 3;
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* mutable_auxiliary_tables(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable >*
      mutable_auxiliary_tables();
  const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& auxiliary_tables(int index) const;
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* add_auxiliary_tables();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable >&
      auxiliary_tables() const;

  // string region_code = 2;
  void clear_region_code();
  static const int kRegionCodeFieldNumber = 2;
  const ::std::string& region_code() const;
  void set_region_code(const ::std::string& value);
  #if LANG_CXX11
  void set_region_code(::std::string&& value);
  #endif
  void set_region_code(const char* value);
  void set_region_code(const char* value, size_t size);
  ::std::string* mutable_region_code();
  ::std::string* release_region_code();
  void set_allocated_region_code(::std::string* region_code);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField > quasi_ids_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable > auxiliary_tables_;
  ::google::protobuf::internal::ArenaStringPtr region_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrivacyMetric_DeltaPresenceEstimationConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig) */ {
 public:
  PrivacyMetric_DeltaPresenceEstimationConfig();
  virtual ~PrivacyMetric_DeltaPresenceEstimationConfig();

  PrivacyMetric_DeltaPresenceEstimationConfig(const PrivacyMetric_DeltaPresenceEstimationConfig& from);

  inline PrivacyMetric_DeltaPresenceEstimationConfig& operator=(const PrivacyMetric_DeltaPresenceEstimationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_DeltaPresenceEstimationConfig(PrivacyMetric_DeltaPresenceEstimationConfig&& from) noexcept
    : PrivacyMetric_DeltaPresenceEstimationConfig() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_DeltaPresenceEstimationConfig& operator=(PrivacyMetric_DeltaPresenceEstimationConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_DeltaPresenceEstimationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_DeltaPresenceEstimationConfig* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_DeltaPresenceEstimationConfig*>(
               &_PrivacyMetric_DeltaPresenceEstimationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(PrivacyMetric_DeltaPresenceEstimationConfig* other);
  friend void swap(PrivacyMetric_DeltaPresenceEstimationConfig& a, PrivacyMetric_DeltaPresenceEstimationConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_DeltaPresenceEstimationConfig* New() const final {
    return CreateMaybeMessage<PrivacyMetric_DeltaPresenceEstimationConfig>(NULL);
  }

  PrivacyMetric_DeltaPresenceEstimationConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyMetric_DeltaPresenceEstimationConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivacyMetric_DeltaPresenceEstimationConfig& from);
  void MergeFrom(const PrivacyMetric_DeltaPresenceEstimationConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyMetric_DeltaPresenceEstimationConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.QuasiId quasi_ids = 1;
  int quasi_ids_size() const;
  void clear_quasi_ids();
  static const int kQuasiIdsFieldNumber = 1;
  ::google::privacy::dlp::v2::QuasiId* mutable_quasi_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::QuasiId >*
      mutable_quasi_ids();
  const ::google::privacy::dlp::v2::QuasiId& quasi_ids(int index) const;
  ::google::privacy::dlp::v2::QuasiId* add_quasi_ids();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::QuasiId >&
      quasi_ids() const;

  // repeated .google.privacy.dlp.v2.StatisticalTable auxiliary_tables = 3;
  int auxiliary_tables_size() const;
  void clear_auxiliary_tables();
  static const int kAuxiliaryTablesFieldNumber = 3;
  ::google::privacy::dlp::v2::StatisticalTable* mutable_auxiliary_tables(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StatisticalTable >*
      mutable_auxiliary_tables();
  const ::google::privacy::dlp::v2::StatisticalTable& auxiliary_tables(int index) const;
  ::google::privacy::dlp::v2::StatisticalTable* add_auxiliary_tables();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StatisticalTable >&
      auxiliary_tables() const;

  // string region_code = 2;
  void clear_region_code();
  static const int kRegionCodeFieldNumber = 2;
  const ::std::string& region_code() const;
  void set_region_code(const ::std::string& value);
  #if LANG_CXX11
  void set_region_code(::std::string&& value);
  #endif
  void set_region_code(const char* value);
  void set_region_code(const char* value, size_t size);
  ::std::string* mutable_region_code();
  ::std::string* release_region_code();
  void set_allocated_region_code(::std::string* region_code);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::QuasiId > quasi_ids_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StatisticalTable > auxiliary_tables_;
  ::google::protobuf::internal::ArenaStringPtr region_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrivacyMetric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.PrivacyMetric) */ {
 public:
  PrivacyMetric();
  virtual ~PrivacyMetric();

  PrivacyMetric(const PrivacyMetric& from);

  inline PrivacyMetric& operator=(const PrivacyMetric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric(PrivacyMetric&& from) noexcept
    : PrivacyMetric() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric& operator=(PrivacyMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric& default_instance();

  enum TypeCase {
    kNumericalStatsConfig = 1,
    kCategoricalStatsConfig = 2,
    kKAnonymityConfig = 3,
    kLDiversityConfig = 4,
    kKMapEstimationConfig = 5,
    kDeltaPresenceEstimationConfig = 6,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric*>(
               &_PrivacyMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(PrivacyMetric* other);
  friend void swap(PrivacyMetric& a, PrivacyMetric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric* New() const final {
    return CreateMaybeMessage<PrivacyMetric>(NULL);
  }

  PrivacyMetric* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivacyMetric>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivacyMetric& from);
  void MergeFrom(const PrivacyMetric& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivacyMetric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PrivacyMetric_NumericalStatsConfig NumericalStatsConfig;
  typedef PrivacyMetric_CategoricalStatsConfig CategoricalStatsConfig;
  typedef PrivacyMetric_KAnonymityConfig KAnonymityConfig;
  typedef PrivacyMetric_LDiversityConfig LDiversityConfig;
  typedef PrivacyMetric_KMapEstimationConfig KMapEstimationConfig;
  typedef PrivacyMetric_DeltaPresenceEstimationConfig DeltaPresenceEstimationConfig;

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
  bool has_numerical_stats_config() const;
  void clear_numerical_stats_config();
  static const int kNumericalStatsConfigFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig& _internal_numerical_stats_config() const;
  public:
  const ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig& numerical_stats_config() const;
  ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig* release_numerical_stats_config();
  ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig* mutable_numerical_stats_config();
  void set_allocated_numerical_stats_config(::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig* numerical_stats_config);

  // .google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
  bool has_categorical_stats_config() const;
  void clear_categorical_stats_config();
  static const int kCategoricalStatsConfigFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig& _internal_categorical_stats_config() const;
  public:
  const ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig& categorical_stats_config() const;
  ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig* release_categorical_stats_config();
  ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig* mutable_categorical_stats_config();
  void set_allocated_categorical_stats_config(::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig* categorical_stats_config);

  // .google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
  bool has_k_anonymity_config() const;
  void clear_k_anonymity_config();
  static const int kKAnonymityConfigFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig& _internal_k_anonymity_config() const;
  public:
  const ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig& k_anonymity_config() const;
  ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig* release_k_anonymity_config();
  ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig* mutable_k_anonymity_config();
  void set_allocated_k_anonymity_config(::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig* k_anonymity_config);

  // .google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
  bool has_l_diversity_config() const;
  void clear_l_diversity_config();
  static const int kLDiversityConfigFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig& _internal_l_diversity_config() const;
  public:
  const ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig& l_diversity_config() const;
  ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig* release_l_diversity_config();
  ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig* mutable_l_diversity_config();
  void set_allocated_l_diversity_config(::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig* l_diversity_config);

  // .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig k_map_estimation_config = 5;
  bool has_k_map_estimation_config() const;
  void clear_k_map_estimation_config();
  static const int kKMapEstimationConfigFieldNumber = 5;
  private:
  const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig& _internal_k_map_estimation_config() const;
  public:
  const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig& k_map_estimation_config() const;
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig* release_k_map_estimation_config();
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig* mutable_k_map_estimation_config();
  void set_allocated_k_map_estimation_config(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig* k_map_estimation_config);

  // .google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig delta_presence_estimation_config = 6;
  bool has_delta_presence_estimation_config() const;
  void clear_delta_presence_estimation_config();
  static const int kDeltaPresenceEstimationConfigFieldNumber = 6;
  private:
  const ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig& _internal_delta_presence_estimation_config() const;
  public:
  const ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig& delta_presence_estimation_config() const;
  ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig* release_delta_presence_estimation_config();
  ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig* mutable_delta_presence_estimation_config();
  void set_allocated_delta_presence_estimation_config(::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig* delta_presence_estimation_config);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.PrivacyMetric)
 private:
  void set_has_numerical_stats_config();
  void set_has_categorical_stats_config();
  void set_has_k_anonymity_config();
  void set_has_l_diversity_config();
  void set_has_k_map_estimation_config();
  void set_has_delta_presence_estimation_config();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig* numerical_stats_config_;
    ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig* categorical_stats_config_;
    ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig* k_anonymity_config_;
    ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig* l_diversity_config_;
    ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig* k_map_estimation_config_;
    ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig* delta_presence_estimation_config_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_NumericalStatsResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult) */ {
 public:
  AnalyzeDataSourceRiskDetails_NumericalStatsResult();
  virtual ~AnalyzeDataSourceRiskDetails_NumericalStatsResult();

  AnalyzeDataSourceRiskDetails_NumericalStatsResult(const AnalyzeDataSourceRiskDetails_NumericalStatsResult& from);

  inline AnalyzeDataSourceRiskDetails_NumericalStatsResult& operator=(const AnalyzeDataSourceRiskDetails_NumericalStatsResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_NumericalStatsResult(AnalyzeDataSourceRiskDetails_NumericalStatsResult&& from) noexcept
    : AnalyzeDataSourceRiskDetails_NumericalStatsResult() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_NumericalStatsResult& operator=(AnalyzeDataSourceRiskDetails_NumericalStatsResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_NumericalStatsResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_NumericalStatsResult* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_NumericalStatsResult*>(
               &_AnalyzeDataSourceRiskDetails_NumericalStatsResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(AnalyzeDataSourceRiskDetails_NumericalStatsResult* other);
  friend void swap(AnalyzeDataSourceRiskDetails_NumericalStatsResult& a, AnalyzeDataSourceRiskDetails_NumericalStatsResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_NumericalStatsResult* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_NumericalStatsResult>(NULL);
  }

  AnalyzeDataSourceRiskDetails_NumericalStatsResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_NumericalStatsResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_NumericalStatsResult& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_NumericalStatsResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_NumericalStatsResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.Value quantile_values = 4;
  int quantile_values_size() const;
  void clear_quantile_values();
  static const int kQuantileValuesFieldNumber = 4;
  ::google::privacy::dlp::v2::Value* mutable_quantile_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
      mutable_quantile_values();
  const ::google::privacy::dlp::v2::Value& quantile_values(int index) const;
  ::google::privacy::dlp::v2::Value* add_quantile_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
      quantile_values() const;

  // .google.privacy.dlp.v2.Value min_value = 1;
  bool has_min_value() const;
  void clear_min_value();
  static const int kMinValueFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::Value& _internal_min_value() const;
  public:
  const ::google::privacy::dlp::v2::Value& min_value() const;
  ::google::privacy::dlp::v2::Value* release_min_value();
  ::google::privacy::dlp::v2::Value* mutable_min_value();
  void set_allocated_min_value(::google::privacy::dlp::v2::Value* min_value);

  // .google.privacy.dlp.v2.Value max_value = 2;
  bool has_max_value() const;
  void clear_max_value();
  static const int kMaxValueFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::Value& _internal_max_value() const;
  public:
  const ::google::privacy::dlp::v2::Value& max_value() const;
  ::google::privacy::dlp::v2::Value* release_max_value();
  ::google::privacy::dlp::v2::Value* mutable_max_value();
  void set_allocated_max_value(::google::privacy::dlp::v2::Value* max_value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value > quantile_values_;
  ::google::privacy::dlp::v2::Value* min_value_;
  ::google::privacy::dlp::v2::Value* max_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket) */ {
 public:
  AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket();
  virtual ~AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket();

  AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& from);

  inline AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& operator=(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket(AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket&& from) noexcept
    : AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& operator=(AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket*>(
               &_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* other);
  friend void swap(AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& a, AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket>(NULL);
  }

  AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.ValueFrequency bucket_values = 4;
  int bucket_values_size() const;
  void clear_bucket_values();
  static const int kBucketValuesFieldNumber = 4;
  ::google::privacy::dlp::v2::ValueFrequency* mutable_bucket_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ValueFrequency >*
      mutable_bucket_values();
  const ::google::privacy::dlp::v2::ValueFrequency& bucket_values(int index) const;
  ::google::privacy::dlp::v2::ValueFrequency* add_bucket_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ValueFrequency >&
      bucket_values() const;

  // int64 value_frequency_lower_bound = 1;
  void clear_value_frequency_lower_bound();
  static const int kValueFrequencyLowerBoundFieldNumber = 1;
  ::google::protobuf::int64 value_frequency_lower_bound() const;
  void set_value_frequency_lower_bound(::google::protobuf::int64 value);

  // int64 value_frequency_upper_bound = 2;
  void clear_value_frequency_upper_bound();
  static const int kValueFrequencyUpperBoundFieldNumber = 2;
  ::google::protobuf::int64 value_frequency_upper_bound() const;
  void set_value_frequency_upper_bound(::google::protobuf::int64 value);

  // int64 bucket_size = 3;
  void clear_bucket_size();
  static const int kBucketSizeFieldNumber = 3;
  ::google::protobuf::int64 bucket_size() const;
  void set_bucket_size(::google::protobuf::int64 value);

  // int64 bucket_value_count = 5;
  void clear_bucket_value_count();
  static const int kBucketValueCountFieldNumber = 5;
  ::google::protobuf::int64 bucket_value_count() const;
  void set_bucket_value_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ValueFrequency > bucket_values_;
  ::google::protobuf::int64 value_frequency_lower_bound_;
  ::google::protobuf::int64 value_frequency_upper_bound_;
  ::google::protobuf::int64 bucket_size_;
  ::google::protobuf::int64 bucket_value_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_CategoricalStatsResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult) */ {
 public:
  AnalyzeDataSourceRiskDetails_CategoricalStatsResult();
  virtual ~AnalyzeDataSourceRiskDetails_CategoricalStatsResult();

  AnalyzeDataSourceRiskDetails_CategoricalStatsResult(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult& from);

  inline AnalyzeDataSourceRiskDetails_CategoricalStatsResult& operator=(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_CategoricalStatsResult(AnalyzeDataSourceRiskDetails_CategoricalStatsResult&& from) noexcept
    : AnalyzeDataSourceRiskDetails_CategoricalStatsResult() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_CategoricalStatsResult& operator=(AnalyzeDataSourceRiskDetails_CategoricalStatsResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_CategoricalStatsResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_CategoricalStatsResult* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_CategoricalStatsResult*>(
               &_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(AnalyzeDataSourceRiskDetails_CategoricalStatsResult* other);
  friend void swap(AnalyzeDataSourceRiskDetails_CategoricalStatsResult& a, AnalyzeDataSourceRiskDetails_CategoricalStatsResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_CategoricalStatsResult* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_CategoricalStatsResult>(NULL);
  }

  AnalyzeDataSourceRiskDetails_CategoricalStatsResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_CategoricalStatsResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_CategoricalStatsResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket CategoricalStatsHistogramBucket;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
  int value_frequency_histogram_buckets_size() const;
  void clear_value_frequency_histogram_buckets();
  static const int kValueFrequencyHistogramBucketsFieldNumber = 5;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* mutable_value_frequency_histogram_buckets(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket >*
      mutable_value_frequency_histogram_buckets();
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& value_frequency_histogram_buckets(int index) const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* add_value_frequency_histogram_buckets();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket >&
      value_frequency_histogram_buckets() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket > value_frequency_histogram_buckets_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass) */ {
 public:
  AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass();
  virtual ~AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass();

  AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& from);

  inline AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& operator=(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass&& from) noexcept
    : AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& operator=(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass*>(
               &_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* other);
  friend void swap(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& a, AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass>(NULL);
  }

  AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  int quasi_ids_values_size() const;
  void clear_quasi_ids_values();
  static const int kQuasiIdsValuesFieldNumber = 1;
  ::google::privacy::dlp::v2::Value* mutable_quasi_ids_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
      mutable_quasi_ids_values();
  const ::google::privacy::dlp::v2::Value& quasi_ids_values(int index) const;
  ::google::privacy::dlp::v2::Value* add_quasi_ids_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
      quasi_ids_values() const;

  // int64 equivalence_class_size = 2;
  void clear_equivalence_class_size();
  static const int kEquivalenceClassSizeFieldNumber = 2;
  ::google::protobuf::int64 equivalence_class_size() const;
  void set_equivalence_class_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value > quasi_ids_values_;
  ::google::protobuf::int64 equivalence_class_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket) */ {
 public:
  AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket();
  virtual ~AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket();

  AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& from);

  inline AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& operator=(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket&& from) noexcept
    : AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& operator=(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket*>(
               &_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* other);
  friend void swap(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& a, AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket>(NULL);
  }

  AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
  int bucket_values_size() const;
  void clear_bucket_values();
  static const int kBucketValuesFieldNumber = 4;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* mutable_bucket_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass >*
      mutable_bucket_values();
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& bucket_values(int index) const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* add_bucket_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass >&
      bucket_values() const;

  // int64 equivalence_class_size_lower_bound = 1;
  void clear_equivalence_class_size_lower_bound();
  static const int kEquivalenceClassSizeLowerBoundFieldNumber = 1;
  ::google::protobuf::int64 equivalence_class_size_lower_bound() const;
  void set_equivalence_class_size_lower_bound(::google::protobuf::int64 value);

  // int64 equivalence_class_size_upper_bound = 2;
  void clear_equivalence_class_size_upper_bound();
  static const int kEquivalenceClassSizeUpperBoundFieldNumber = 2;
  ::google::protobuf::int64 equivalence_class_size_upper_bound() const;
  void set_equivalence_class_size_upper_bound(::google::protobuf::int64 value);

  // int64 bucket_size = 3;
  void clear_bucket_size();
  static const int kBucketSizeFieldNumber = 3;
  ::google::protobuf::int64 bucket_size() const;
  void set_bucket_size(::google::protobuf::int64 value);

  // int64 bucket_value_count = 5;
  void clear_bucket_value_count();
  static const int kBucketValueCountFieldNumber = 5;
  ::google::protobuf::int64 bucket_value_count() const;
  void set_bucket_value_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass > bucket_values_;
  ::google::protobuf::int64 equivalence_class_size_lower_bound_;
  ::google::protobuf::int64 equivalence_class_size_upper_bound_;
  ::google::protobuf::int64 bucket_size_;
  ::google::protobuf::int64 bucket_value_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_KAnonymityResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult) */ {
 public:
  AnalyzeDataSourceRiskDetails_KAnonymityResult();
  virtual ~AnalyzeDataSourceRiskDetails_KAnonymityResult();

  AnalyzeDataSourceRiskDetails_KAnonymityResult(const AnalyzeDataSourceRiskDetails_KAnonymityResult& from);

  inline AnalyzeDataSourceRiskDetails_KAnonymityResult& operator=(const AnalyzeDataSourceRiskDetails_KAnonymityResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_KAnonymityResult(AnalyzeDataSourceRiskDetails_KAnonymityResult&& from) noexcept
    : AnalyzeDataSourceRiskDetails_KAnonymityResult() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_KAnonymityResult& operator=(AnalyzeDataSourceRiskDetails_KAnonymityResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_KAnonymityResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_KAnonymityResult* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_KAnonymityResult*>(
               &_AnalyzeDataSourceRiskDetails_KAnonymityResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(AnalyzeDataSourceRiskDetails_KAnonymityResult* other);
  friend void swap(AnalyzeDataSourceRiskDetails_KAnonymityResult& a, AnalyzeDataSourceRiskDetails_KAnonymityResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_KAnonymityResult* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KAnonymityResult>(NULL);
  }

  AnalyzeDataSourceRiskDetails_KAnonymityResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KAnonymityResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_KAnonymityResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass KAnonymityEquivalenceClass;
  typedef AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket KAnonymityHistogramBucket;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
  int equivalence_class_histogram_buckets_size() const;
  void clear_equivalence_class_histogram_buckets();
  static const int kEquivalenceClassHistogramBucketsFieldNumber = 5;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* mutable_equivalence_class_histogram_buckets(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket >*
      mutable_equivalence_class_histogram_buckets();
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& equivalence_class_histogram_buckets(int index) const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* add_equivalence_class_histogram_buckets();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket >&
      equivalence_class_histogram_buckets() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket > equivalence_class_histogram_buckets_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass) */ {
 public:
  AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass();
  virtual ~AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass();

  AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& from);

  inline AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& operator=(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass&& from) noexcept
    : AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& operator=(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass*>(
               &_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* other);
  friend void swap(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& a, AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass>(NULL);
  }

  AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  int quasi_ids_values_size() const;
  void clear_quasi_ids_values();
  static const int kQuasiIdsValuesFieldNumber = 1;
  ::google::privacy::dlp::v2::Value* mutable_quasi_ids_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
      mutable_quasi_ids_values();
  const ::google::privacy::dlp::v2::Value& quasi_ids_values(int index) const;
  ::google::privacy::dlp::v2::Value* add_quasi_ids_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
      quasi_ids_values() const;

  // repeated .google.privacy.dlp.v2.ValueFrequency top_sensitive_values = 4;
  int top_sensitive_values_size() const;
  void clear_top_sensitive_values();
  static const int kTopSensitiveValuesFieldNumber = 4;
  ::google::privacy::dlp::v2::ValueFrequency* mutable_top_sensitive_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ValueFrequency >*
      mutable_top_sensitive_values();
  const ::google::privacy::dlp::v2::ValueFrequency& top_sensitive_values(int index) const;
  ::google::privacy::dlp::v2::ValueFrequency* add_top_sensitive_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ValueFrequency >&
      top_sensitive_values() const;

  // int64 equivalence_class_size = 2;
  void clear_equivalence_class_size();
  static const int kEquivalenceClassSizeFieldNumber = 2;
  ::google::protobuf::int64 equivalence_class_size() const;
  void set_equivalence_class_size(::google::protobuf::int64 value);

  // int64 num_distinct_sensitive_values = 3;
  void clear_num_distinct_sensitive_values();
  static const int kNumDistinctSensitiveValuesFieldNumber = 3;
  ::google::protobuf::int64 num_distinct_sensitive_values() const;
  void set_num_distinct_sensitive_values(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value > quasi_ids_values_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ValueFrequency > top_sensitive_values_;
  ::google::protobuf::int64 equivalence_class_size_;
  ::google::protobuf::int64 num_distinct_sensitive_values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket) */ {
 public:
  AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket();
  virtual ~AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket();

  AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& from);

  inline AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& operator=(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket&& from) noexcept
    : AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& operator=(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket*>(
               &_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* other);
  friend void swap(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& a, AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket>(NULL);
  }

  AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
  int bucket_values_size() const;
  void clear_bucket_values();
  static const int kBucketValuesFieldNumber = 4;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* mutable_bucket_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass >*
      mutable_bucket_values();
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& bucket_values(int index) const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* add_bucket_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass >&
      bucket_values() const;

  // int64 sensitive_value_frequency_lower_bound = 1;
  void clear_sensitive_value_frequency_lower_bound();
  static const int kSensitiveValueFrequencyLowerBoundFieldNumber = 1;
  ::google::protobuf::int64 sensitive_value_frequency_lower_bound() const;
  void set_sensitive_value_frequency_lower_bound(::google::protobuf::int64 value);

  // int64 sensitive_value_frequency_upper_bound = 2;
  void clear_sensitive_value_frequency_upper_bound();
  static const int kSensitiveValueFrequencyUpperBoundFieldNumber = 2;
  ::google::protobuf::int64 sensitive_value_frequency_upper_bound() const;
  void set_sensitive_value_frequency_upper_bound(::google::protobuf::int64 value);

  // int64 bucket_size = 3;
  void clear_bucket_size();
  static const int kBucketSizeFieldNumber = 3;
  ::google::protobuf::int64 bucket_size() const;
  void set_bucket_size(::google::protobuf::int64 value);

  // int64 bucket_value_count = 5;
  void clear_bucket_value_count();
  static const int kBucketValueCountFieldNumber = 5;
  ::google::protobuf::int64 bucket_value_count() const;
  void set_bucket_value_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass > bucket_values_;
  ::google::protobuf::int64 sensitive_value_frequency_lower_bound_;
  ::google::protobuf::int64 sensitive_value_frequency_upper_bound_;
  ::google::protobuf::int64 bucket_size_;
  ::google::protobuf::int64 bucket_value_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_LDiversityResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult) */ {
 public:
  AnalyzeDataSourceRiskDetails_LDiversityResult();
  virtual ~AnalyzeDataSourceRiskDetails_LDiversityResult();

  AnalyzeDataSourceRiskDetails_LDiversityResult(const AnalyzeDataSourceRiskDetails_LDiversityResult& from);

  inline AnalyzeDataSourceRiskDetails_LDiversityResult& operator=(const AnalyzeDataSourceRiskDetails_LDiversityResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_LDiversityResult(AnalyzeDataSourceRiskDetails_LDiversityResult&& from) noexcept
    : AnalyzeDataSourceRiskDetails_LDiversityResult() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_LDiversityResult& operator=(AnalyzeDataSourceRiskDetails_LDiversityResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_LDiversityResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_LDiversityResult* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_LDiversityResult*>(
               &_AnalyzeDataSourceRiskDetails_LDiversityResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(AnalyzeDataSourceRiskDetails_LDiversityResult* other);
  friend void swap(AnalyzeDataSourceRiskDetails_LDiversityResult& a, AnalyzeDataSourceRiskDetails_LDiversityResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_LDiversityResult* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_LDiversityResult>(NULL);
  }

  AnalyzeDataSourceRiskDetails_LDiversityResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_LDiversityResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_LDiversityResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass LDiversityEquivalenceClass;
  typedef AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket LDiversityHistogramBucket;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
  int sensitive_value_frequency_histogram_buckets_size() const;
  void clear_sensitive_value_frequency_histogram_buckets();
  static const int kSensitiveValueFrequencyHistogramBucketsFieldNumber = 5;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* mutable_sensitive_value_frequency_histogram_buckets(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket >*
      mutable_sensitive_value_frequency_histogram_buckets();
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& sensitive_value_frequency_histogram_buckets(int index) const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* add_sensitive_value_frequency_histogram_buckets();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket >&
      sensitive_value_frequency_histogram_buckets() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket > sensitive_value_frequency_histogram_buckets_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues) */ {
 public:
  AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues();
  virtual ~AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues();

  AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& from);

  inline AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& operator=(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues&& from) noexcept
    : AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& operator=(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues*>(
               &_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* other);
  friend void swap(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& a, AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues>(NULL);
  }

  AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  int quasi_ids_values_size() const;
  void clear_quasi_ids_values();
  static const int kQuasiIdsValuesFieldNumber = 1;
  ::google::privacy::dlp::v2::Value* mutable_quasi_ids_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
      mutable_quasi_ids_values();
  const ::google::privacy::dlp::v2::Value& quasi_ids_values(int index) const;
  ::google::privacy::dlp::v2::Value* add_quasi_ids_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
      quasi_ids_values() const;

  // int64 estimated_anonymity = 2;
  void clear_estimated_anonymity();
  static const int kEstimatedAnonymityFieldNumber = 2;
  ::google::protobuf::int64 estimated_anonymity() const;
  void set_estimated_anonymity(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value > quasi_ids_values_;
  ::google::protobuf::int64 estimated_anonymity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket) */ {
 public:
  AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket();
  virtual ~AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket();

  AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& from);

  inline AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& operator=(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket&& from) noexcept
    : AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& operator=(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket*>(
               &_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* other);
  friend void swap(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& a, AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket>(NULL);
  }

  AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues bucket_values = 6;
  int bucket_values_size() const;
  void clear_bucket_values();
  static const int kBucketValuesFieldNumber = 6;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* mutable_bucket_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues >*
      mutable_bucket_values();
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& bucket_values(int index) const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* add_bucket_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues >&
      bucket_values() const;

  // int64 min_anonymity = 1;
  void clear_min_anonymity();
  static const int kMinAnonymityFieldNumber = 1;
  ::google::protobuf::int64 min_anonymity() const;
  void set_min_anonymity(::google::protobuf::int64 value);

  // int64 max_anonymity = 2;
  void clear_max_anonymity();
  static const int kMaxAnonymityFieldNumber = 2;
  ::google::protobuf::int64 max_anonymity() const;
  void set_max_anonymity(::google::protobuf::int64 value);

  // int64 bucket_size = 5;
  void clear_bucket_size();
  static const int kBucketSizeFieldNumber = 5;
  ::google::protobuf::int64 bucket_size() const;
  void set_bucket_size(::google::protobuf::int64 value);

  // int64 bucket_value_count = 7;
  void clear_bucket_value_count();
  static const int kBucketValueCountFieldNumber = 7;
  ::google::protobuf::int64 bucket_value_count() const;
  void set_bucket_value_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues > bucket_values_;
  ::google::protobuf::int64 min_anonymity_;
  ::google::protobuf::int64 max_anonymity_;
  ::google::protobuf::int64 bucket_size_;
  ::google::protobuf::int64 bucket_value_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_KMapEstimationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult) */ {
 public:
  AnalyzeDataSourceRiskDetails_KMapEstimationResult();
  virtual ~AnalyzeDataSourceRiskDetails_KMapEstimationResult();

  AnalyzeDataSourceRiskDetails_KMapEstimationResult(const AnalyzeDataSourceRiskDetails_KMapEstimationResult& from);

  inline AnalyzeDataSourceRiskDetails_KMapEstimationResult& operator=(const AnalyzeDataSourceRiskDetails_KMapEstimationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_KMapEstimationResult(AnalyzeDataSourceRiskDetails_KMapEstimationResult&& from) noexcept
    : AnalyzeDataSourceRiskDetails_KMapEstimationResult() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_KMapEstimationResult& operator=(AnalyzeDataSourceRiskDetails_KMapEstimationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_KMapEstimationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_KMapEstimationResult* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_KMapEstimationResult*>(
               &_AnalyzeDataSourceRiskDetails_KMapEstimationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(AnalyzeDataSourceRiskDetails_KMapEstimationResult* other);
  friend void swap(AnalyzeDataSourceRiskDetails_KMapEstimationResult& a, AnalyzeDataSourceRiskDetails_KMapEstimationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_KMapEstimationResult* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KMapEstimationResult>(NULL);
  }

  AnalyzeDataSourceRiskDetails_KMapEstimationResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_KMapEstimationResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_KMapEstimationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues KMapEstimationQuasiIdValues;
  typedef AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket KMapEstimationHistogramBucket;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket k_map_estimation_histogram = 1;
  int k_map_estimation_histogram_size() const;
  void clear_k_map_estimation_histogram();
  static const int kKMapEstimationHistogramFieldNumber = 1;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* mutable_k_map_estimation_histogram(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket >*
      mutable_k_map_estimation_histogram();
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& k_map_estimation_histogram(int index) const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* add_k_map_estimation_histogram();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket >&
      k_map_estimation_histogram() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket > k_map_estimation_histogram_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues) */ {
 public:
  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues();
  virtual ~AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues();

  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& from);

  inline AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& operator=(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues&& from) noexcept
    : AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& operator=(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues*>(
               &_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* other);
  friend void swap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& a, AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues>(NULL);
  }

  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  int quasi_ids_values_size() const;
  void clear_quasi_ids_values();
  static const int kQuasiIdsValuesFieldNumber = 1;
  ::google::privacy::dlp::v2::Value* mutable_quasi_ids_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
      mutable_quasi_ids_values();
  const ::google::privacy::dlp::v2::Value& quasi_ids_values(int index) const;
  ::google::privacy::dlp::v2::Value* add_quasi_ids_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
      quasi_ids_values() const;

  // double estimated_probability = 2;
  void clear_estimated_probability();
  static const int kEstimatedProbabilityFieldNumber = 2;
  double estimated_probability() const;
  void set_estimated_probability(double value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value > quasi_ids_values_;
  double estimated_probability_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket) */ {
 public:
  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket();
  virtual ~AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket();

  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& from);

  inline AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& operator=(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket&& from) noexcept
    : AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& operator=(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket*>(
               &_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* other);
  friend void swap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& a, AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket>(NULL);
  }

  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues bucket_values = 6;
  int bucket_values_size() const;
  void clear_bucket_values();
  static const int kBucketValuesFieldNumber = 6;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* mutable_bucket_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues >*
      mutable_bucket_values();
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& bucket_values(int index) const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* add_bucket_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues >&
      bucket_values() const;

  // double min_probability = 1;
  void clear_min_probability();
  static const int kMinProbabilityFieldNumber = 1;
  double min_probability() const;
  void set_min_probability(double value);

  // double max_probability = 2;
  void clear_max_probability();
  static const int kMaxProbabilityFieldNumber = 2;
  double max_probability() const;
  void set_max_probability(double value);

  // int64 bucket_size = 5;
  void clear_bucket_size();
  static const int kBucketSizeFieldNumber = 5;
  ::google::protobuf::int64 bucket_size() const;
  void set_bucket_size(::google::protobuf::int64 value);

  // int64 bucket_value_count = 7;
  void clear_bucket_value_count();
  static const int kBucketValueCountFieldNumber = 7;
  ::google::protobuf::int64 bucket_value_count() const;
  void set_bucket_value_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues > bucket_values_;
  double min_probability_;
  double max_probability_;
  ::google::protobuf::int64 bucket_size_;
  ::google::protobuf::int64 bucket_value_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult) */ {
 public:
  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult();
  virtual ~AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult();

  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& from);

  inline AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& operator=(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult&& from) noexcept
    : AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& operator=(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult*>(
               &_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* other);
  friend void swap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& a, AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult>(NULL);
  }

  AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues DeltaPresenceEstimationQuasiIdValues;
  typedef AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket DeltaPresenceEstimationHistogramBucket;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket delta_presence_estimation_histogram = 1;
  int delta_presence_estimation_histogram_size() const;
  void clear_delta_presence_estimation_histogram();
  static const int kDeltaPresenceEstimationHistogramFieldNumber = 1;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* mutable_delta_presence_estimation_histogram(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket >*
      mutable_delta_presence_estimation_histogram();
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& delta_presence_estimation_histogram(int index) const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* add_delta_presence_estimation_histogram();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket >&
      delta_presence_estimation_histogram() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket > delta_presence_estimation_histogram_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails) */ {
 public:
  AnalyzeDataSourceRiskDetails();
  virtual ~AnalyzeDataSourceRiskDetails();

  AnalyzeDataSourceRiskDetails(const AnalyzeDataSourceRiskDetails& from);

  inline AnalyzeDataSourceRiskDetails& operator=(const AnalyzeDataSourceRiskDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskDetails(AnalyzeDataSourceRiskDetails&& from) noexcept
    : AnalyzeDataSourceRiskDetails() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskDetails& operator=(AnalyzeDataSourceRiskDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskDetails& default_instance();

  enum ResultCase {
    kNumericalStatsResult = 3,
    kCategoricalStatsResult = 4,
    kKAnonymityResult = 5,
    kLDiversityResult = 6,
    kKMapEstimationResult = 7,
    kDeltaPresenceEstimationResult = 9,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskDetails* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskDetails*>(
               &_AnalyzeDataSourceRiskDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(AnalyzeDataSourceRiskDetails* other);
  friend void swap(AnalyzeDataSourceRiskDetails& a, AnalyzeDataSourceRiskDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskDetails* New() const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails>(NULL);
  }

  AnalyzeDataSourceRiskDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalyzeDataSourceRiskDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalyzeDataSourceRiskDetails& from);
  void MergeFrom(const AnalyzeDataSourceRiskDetails& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalyzeDataSourceRiskDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnalyzeDataSourceRiskDetails_NumericalStatsResult NumericalStatsResult;
  typedef AnalyzeDataSourceRiskDetails_CategoricalStatsResult CategoricalStatsResult;
  typedef AnalyzeDataSourceRiskDetails_KAnonymityResult KAnonymityResult;
  typedef AnalyzeDataSourceRiskDetails_LDiversityResult LDiversityResult;
  typedef AnalyzeDataSourceRiskDetails_KMapEstimationResult KMapEstimationResult;
  typedef AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult DeltaPresenceEstimationResult;

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.PrivacyMetric requested_privacy_metric = 1;
  bool has_requested_privacy_metric() const;
  void clear_requested_privacy_metric();
  static const int kRequestedPrivacyMetricFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::PrivacyMetric& _internal_requested_privacy_metric() const;
  public:
  const ::google::privacy::dlp::v2::PrivacyMetric& requested_privacy_metric() const;
  ::google::privacy::dlp::v2::PrivacyMetric* release_requested_privacy_metric();
  ::google::privacy::dlp::v2::PrivacyMetric* mutable_requested_privacy_metric();
  void set_allocated_requested_privacy_metric(::google::privacy::dlp::v2::PrivacyMetric* requested_privacy_metric);

  // .google.privacy.dlp.v2.BigQueryTable requested_source_table = 2;
  bool has_requested_source_table() const;
  void clear_requested_source_table();
  static const int kRequestedSourceTableFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::BigQueryTable& _internal_requested_source_table() const;
  public:
  const ::google::privacy::dlp::v2::BigQueryTable& requested_source_table() const;
  ::google::privacy::dlp::v2::BigQueryTable* release_requested_source_table();
  ::google::privacy::dlp::v2::BigQueryTable* mutable_requested_source_table();
  void set_allocated_requested_source_table(::google::privacy::dlp::v2::BigQueryTable* requested_source_table);

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult numerical_stats_result = 3;
  bool has_numerical_stats_result() const;
  void clear_numerical_stats_result();
  static const int kNumericalStatsResultFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult& _internal_numerical_stats_result() const;
  public:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult& numerical_stats_result() const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult* release_numerical_stats_result();
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult* mutable_numerical_stats_result();
  void set_allocated_numerical_stats_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult* numerical_stats_result);

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult categorical_stats_result = 4;
  bool has_categorical_stats_result() const;
  void clear_categorical_stats_result();
  static const int kCategoricalStatsResultFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult& _internal_categorical_stats_result() const;
  public:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult& categorical_stats_result() const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult* release_categorical_stats_result();
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult* mutable_categorical_stats_result();
  void set_allocated_categorical_stats_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult* categorical_stats_result);

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult k_anonymity_result = 5;
  bool has_k_anonymity_result() const;
  void clear_k_anonymity_result();
  static const int kKAnonymityResultFieldNumber = 5;
  private:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult& _internal_k_anonymity_result() const;
  public:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult& k_anonymity_result() const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult* release_k_anonymity_result();
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult* mutable_k_anonymity_result();
  void set_allocated_k_anonymity_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult* k_anonymity_result);

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult l_diversity_result = 6;
  bool has_l_diversity_result() const;
  void clear_l_diversity_result();
  static const int kLDiversityResultFieldNumber = 6;
  private:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult& _internal_l_diversity_result() const;
  public:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult& l_diversity_result() const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult* release_l_diversity_result();
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult* mutable_l_diversity_result();
  void set_allocated_l_diversity_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult* l_diversity_result);

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult k_map_estimation_result = 7;
  bool has_k_map_estimation_result() const;
  void clear_k_map_estimation_result();
  static const int kKMapEstimationResultFieldNumber = 7;
  private:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult& _internal_k_map_estimation_result() const;
  public:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult& k_map_estimation_result() const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult* release_k_map_estimation_result();
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult* mutable_k_map_estimation_result();
  void set_allocated_k_map_estimation_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult* k_map_estimation_result);

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult delta_presence_estimation_result = 9;
  bool has_delta_presence_estimation_result() const;
  void clear_delta_presence_estimation_result();
  static const int kDeltaPresenceEstimationResultFieldNumber = 9;
  private:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& _internal_delta_presence_estimation_result() const;
  public:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& delta_presence_estimation_result() const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* release_delta_presence_estimation_result();
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* mutable_delta_presence_estimation_result();
  void set_allocated_delta_presence_estimation_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* delta_presence_estimation_result);

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
 private:
  void set_has_numerical_stats_result();
  void set_has_categorical_stats_result();
  void set_has_k_anonymity_result();
  void set_has_l_diversity_result();
  void set_has_k_map_estimation_result();
  void set_has_delta_presence_estimation_result();

  inline bool has_result() const;
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::PrivacyMetric* requested_privacy_metric_;
  ::google::privacy::dlp::v2::BigQueryTable* requested_source_table_;
  union ResultUnion {
    ResultUnion() {}
    ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult* numerical_stats_result_;
    ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult* categorical_stats_result_;
    ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult* k_anonymity_result_;
    ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult* l_diversity_result_;
    ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult* k_map_estimation_result_;
    ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* delta_presence_estimation_result_;
  } result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueFrequency : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ValueFrequency) */ {
 public:
  ValueFrequency();
  virtual ~ValueFrequency();

  ValueFrequency(const ValueFrequency& from);

  inline ValueFrequency& operator=(const ValueFrequency& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueFrequency(ValueFrequency&& from) noexcept
    : ValueFrequency() {
    *this = ::std::move(from);
  }

  inline ValueFrequency& operator=(ValueFrequency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueFrequency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueFrequency* internal_default_instance() {
    return reinterpret_cast<const ValueFrequency*>(
               &_ValueFrequency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(ValueFrequency* other);
  friend void swap(ValueFrequency& a, ValueFrequency& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueFrequency* New() const final {
    return CreateMaybeMessage<ValueFrequency>(NULL);
  }

  ValueFrequency* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueFrequency>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueFrequency& from);
  void MergeFrom(const ValueFrequency& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueFrequency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.Value value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::Value& _internal_value() const;
  public:
  const ::google::privacy::dlp::v2::Value& value() const;
  ::google::privacy::dlp::v2::Value* release_value();
  ::google::privacy::dlp::v2::Value* mutable_value();
  void set_allocated_value(::google::privacy::dlp::v2::Value* value);

  // int64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ValueFrequency)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::Value* value_;
  ::google::protobuf::int64 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  enum TypeCase {
    kIntegerValue = 1,
    kFloatValue = 2,
    kStringValue = 3,
    kBooleanValue = 4,
    kTimestampValue = 5,
    kTimeValue = 6,
    kDateValue = 7,
    kDayOfWeekValue = 8,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(Value* other);
  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(NULL);
  }

  Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 integer_value = 1;
  private:
  bool has_integer_value() const;
  public:
  void clear_integer_value();
  static const int kIntegerValueFieldNumber = 1;
  ::google::protobuf::int64 integer_value() const;
  void set_integer_value(::google::protobuf::int64 value);

  // double float_value = 2;
  private:
  bool has_float_value() const;
  public:
  void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  double float_value() const;
  void set_float_value(double value);

  // string string_value = 3;
  private:
  bool has_string_value() const;
  public:
  void clear_string_value();
  static const int kStringValueFieldNumber = 3;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // bool boolean_value = 4;
  private:
  bool has_boolean_value() const;
  public:
  void clear_boolean_value();
  static const int kBooleanValueFieldNumber = 4;
  bool boolean_value() const;
  void set_boolean_value(bool value);

  // .google.protobuf.Timestamp timestamp_value = 5;
  bool has_timestamp_value() const;
  void clear_timestamp_value();
  static const int kTimestampValueFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp_value() const;
  public:
  const ::google::protobuf::Timestamp& timestamp_value() const;
  ::google::protobuf::Timestamp* release_timestamp_value();
  ::google::protobuf::Timestamp* mutable_timestamp_value();
  void set_allocated_timestamp_value(::google::protobuf::Timestamp* timestamp_value);

  // .google.type.TimeOfDay time_value = 6;
  bool has_time_value() const;
  void clear_time_value();
  static const int kTimeValueFieldNumber = 6;
  private:
  const ::google::type::TimeOfDay& _internal_time_value() const;
  public:
  const ::google::type::TimeOfDay& time_value() const;
  ::google::type::TimeOfDay* release_time_value();
  ::google::type::TimeOfDay* mutable_time_value();
  void set_allocated_time_value(::google::type::TimeOfDay* time_value);

  // .google.type.Date date_value = 7;
  bool has_date_value() const;
  void clear_date_value();
  static const int kDateValueFieldNumber = 7;
  private:
  const ::google::type::Date& _internal_date_value() const;
  public:
  const ::google::type::Date& date_value() const;
  ::google::type::Date* release_date_value();
  ::google::type::Date* mutable_date_value();
  void set_allocated_date_value(::google::type::Date* date_value);

  // .google.type.DayOfWeek day_of_week_value = 8;
  private:
  bool has_day_of_week_value() const;
  public:
  void clear_day_of_week_value();
  static const int kDayOfWeekValueFieldNumber = 8;
  ::google::type::DayOfWeek day_of_week_value() const;
  void set_day_of_week_value(::google::type::DayOfWeek value);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Value)
 private:
  void set_has_integer_value();
  void set_has_float_value();
  void set_has_string_value();
  void set_has_boolean_value();
  void set_has_timestamp_value();
  void set_has_time_value();
  void set_has_date_value();
  void set_has_day_of_week_value();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::google::protobuf::int64 integer_value_;
    double float_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    bool boolean_value_;
    ::google::protobuf::Timestamp* timestamp_value_;
    ::google::type::TimeOfDay* time_value_;
    ::google::type::Date* date_value_;
    int day_of_week_value_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuoteInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.QuoteInfo) */ {
 public:
  QuoteInfo();
  virtual ~QuoteInfo();

  QuoteInfo(const QuoteInfo& from);

  inline QuoteInfo& operator=(const QuoteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuoteInfo(QuoteInfo&& from) noexcept
    : QuoteInfo() {
    *this = ::std::move(from);
  }

  inline QuoteInfo& operator=(QuoteInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuoteInfo& default_instance();

  enum ParsedQuoteCase {
    kDateTime = 2,
    PARSED_QUOTE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuoteInfo* internal_default_instance() {
    return reinterpret_cast<const QuoteInfo*>(
               &_QuoteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(QuoteInfo* other);
  friend void swap(QuoteInfo& a, QuoteInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuoteInfo* New() const final {
    return CreateMaybeMessage<QuoteInfo>(NULL);
  }

  QuoteInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuoteInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuoteInfo& from);
  void MergeFrom(const QuoteInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuoteInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.DateTime date_time = 2;
  bool has_date_time() const;
  void clear_date_time();
  static const int kDateTimeFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::DateTime& _internal_date_time() const;
  public:
  const ::google::privacy::dlp::v2::DateTime& date_time() const;
  ::google::privacy::dlp::v2::DateTime* release_date_time();
  ::google::privacy::dlp::v2::DateTime* mutable_date_time();
  void set_allocated_date_time(::google::privacy::dlp::v2::DateTime* date_time);

  void clear_parsed_quote();
  ParsedQuoteCase parsed_quote_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.QuoteInfo)
 private:
  void set_has_date_time();

  inline bool has_parsed_quote() const;
  inline void clear_has_parsed_quote();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ParsedQuoteUnion {
    ParsedQuoteUnion() {}
    ::google::privacy::dlp::v2::DateTime* date_time_;
  } parsed_quote_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DateTime_TimeZone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DateTime.TimeZone) */ {
 public:
  DateTime_TimeZone();
  virtual ~DateTime_TimeZone();

  DateTime_TimeZone(const DateTime_TimeZone& from);

  inline DateTime_TimeZone& operator=(const DateTime_TimeZone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTime_TimeZone(DateTime_TimeZone&& from) noexcept
    : DateTime_TimeZone() {
    *this = ::std::move(from);
  }

  inline DateTime_TimeZone& operator=(DateTime_TimeZone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DateTime_TimeZone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTime_TimeZone* internal_default_instance() {
    return reinterpret_cast<const DateTime_TimeZone*>(
               &_DateTime_TimeZone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(DateTime_TimeZone* other);
  friend void swap(DateTime_TimeZone& a, DateTime_TimeZone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTime_TimeZone* New() const final {
    return CreateMaybeMessage<DateTime_TimeZone>(NULL);
  }

  DateTime_TimeZone* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTime_TimeZone>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTime_TimeZone& from);
  void MergeFrom(const DateTime_TimeZone& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTime_TimeZone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 offset_minutes = 1;
  void clear_offset_minutes();
  static const int kOffsetMinutesFieldNumber = 1;
  ::google::protobuf::int32 offset_minutes() const;
  void set_offset_minutes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DateTime.TimeZone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 offset_minutes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DateTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DateTime) */ {
 public:
  DateTime();
  virtual ~DateTime();

  DateTime(const DateTime& from);

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTime(DateTime&& from) noexcept
    : DateTime() {
    *this = ::std::move(from);
  }

  inline DateTime& operator=(DateTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DateTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTime* internal_default_instance() {
    return reinterpret_cast<const DateTime*>(
               &_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(DateTime* other);
  friend void swap(DateTime& a, DateTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTime* New() const final {
    return CreateMaybeMessage<DateTime>(NULL);
  }

  DateTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTime& from);
  void MergeFrom(const DateTime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DateTime_TimeZone TimeZone;

  // accessors -------------------------------------------------------

  // .google.type.Date date = 1;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 1;
  private:
  const ::google::type::Date& _internal_date() const;
  public:
  const ::google::type::Date& date() const;
  ::google::type::Date* release_date();
  ::google::type::Date* mutable_date();
  void set_allocated_date(::google::type::Date* date);

  // .google.type.TimeOfDay time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  private:
  const ::google::type::TimeOfDay& _internal_time() const;
  public:
  const ::google::type::TimeOfDay& time() const;
  ::google::type::TimeOfDay* release_time();
  ::google::type::TimeOfDay* mutable_time();
  void set_allocated_time(::google::type::TimeOfDay* time);

  // .google.privacy.dlp.v2.DateTime.TimeZone time_zone = 4;
  bool has_time_zone() const;
  void clear_time_zone();
  static const int kTimeZoneFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::DateTime_TimeZone& _internal_time_zone() const;
  public:
  const ::google::privacy::dlp::v2::DateTime_TimeZone& time_zone() const;
  ::google::privacy::dlp::v2::DateTime_TimeZone* release_time_zone();
  ::google::privacy::dlp::v2::DateTime_TimeZone* mutable_time_zone();
  void set_allocated_time_zone(::google::privacy::dlp::v2::DateTime_TimeZone* time_zone);

  // .google.type.DayOfWeek day_of_week = 2;
  void clear_day_of_week();
  static const int kDayOfWeekFieldNumber = 2;
  ::google::type::DayOfWeek day_of_week() const;
  void set_day_of_week(::google::type::DayOfWeek value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DateTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::type::Date* date_;
  ::google::type::TimeOfDay* time_;
  ::google::privacy::dlp::v2::DateTime_TimeZone* time_zone_;
  int day_of_week_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeidentifyConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DeidentifyConfig) */ {
 public:
  DeidentifyConfig();
  virtual ~DeidentifyConfig();

  DeidentifyConfig(const DeidentifyConfig& from);

  inline DeidentifyConfig& operator=(const DeidentifyConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeidentifyConfig(DeidentifyConfig&& from) noexcept
    : DeidentifyConfig() {
    *this = ::std::move(from);
  }

  inline DeidentifyConfig& operator=(DeidentifyConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeidentifyConfig& default_instance();

  enum TransformationCase {
    kInfoTypeTransformations = 1,
    kRecordTransformations = 2,
    TRANSFORMATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeidentifyConfig* internal_default_instance() {
    return reinterpret_cast<const DeidentifyConfig*>(
               &_DeidentifyConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(DeidentifyConfig* other);
  friend void swap(DeidentifyConfig& a, DeidentifyConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeidentifyConfig* New() const final {
    return CreateMaybeMessage<DeidentifyConfig>(NULL);
  }

  DeidentifyConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeidentifyConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeidentifyConfig& from);
  void MergeFrom(const DeidentifyConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeidentifyConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 1;
  bool has_info_type_transformations() const;
  void clear_info_type_transformations();
  static const int kInfoTypeTransformationsFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::InfoTypeTransformations& _internal_info_type_transformations() const;
  public:
  const ::google::privacy::dlp::v2::InfoTypeTransformations& info_type_transformations() const;
  ::google::privacy::dlp::v2::InfoTypeTransformations* release_info_type_transformations();
  ::google::privacy::dlp::v2::InfoTypeTransformations* mutable_info_type_transformations();
  void set_allocated_info_type_transformations(::google::privacy::dlp::v2::InfoTypeTransformations* info_type_transformations);

  // .google.privacy.dlp.v2.RecordTransformations record_transformations = 2;
  bool has_record_transformations() const;
  void clear_record_transformations();
  static const int kRecordTransformationsFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::RecordTransformations& _internal_record_transformations() const;
  public:
  const ::google::privacy::dlp::v2::RecordTransformations& record_transformations() const;
  ::google::privacy::dlp::v2::RecordTransformations* release_record_transformations();
  ::google::privacy::dlp::v2::RecordTransformations* mutable_record_transformations();
  void set_allocated_record_transformations(::google::privacy::dlp::v2::RecordTransformations* record_transformations);

  void clear_transformation();
  TransformationCase transformation_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DeidentifyConfig)
 private:
  void set_has_info_type_transformations();
  void set_has_record_transformations();

  inline bool has_transformation() const;
  inline void clear_has_transformation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TransformationUnion {
    TransformationUnion() {}
    ::google::privacy::dlp::v2::InfoTypeTransformations* info_type_transformations_;
    ::google::privacy::dlp::v2::RecordTransformations* record_transformations_;
  } transformation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrimitiveTransformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.PrimitiveTransformation) */ {
 public:
  PrimitiveTransformation();
  virtual ~PrimitiveTransformation();

  PrimitiveTransformation(const PrimitiveTransformation& from);

  inline PrimitiveTransformation& operator=(const PrimitiveTransformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrimitiveTransformation(PrimitiveTransformation&& from) noexcept
    : PrimitiveTransformation() {
    *this = ::std::move(from);
  }

  inline PrimitiveTransformation& operator=(PrimitiveTransformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrimitiveTransformation& default_instance();

  enum TransformationCase {
    kReplaceConfig = 1,
    kRedactConfig = 2,
    kCharacterMaskConfig = 3,
    kCryptoReplaceFfxFpeConfig = 4,
    kFixedSizeBucketingConfig = 5,
    kBucketingConfig = 6,
    kReplaceWithInfoTypeConfig = 7,
    kTimePartConfig = 8,
    kCryptoHashConfig = 9,
    kDateShiftConfig = 11,
    TRANSFORMATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrimitiveTransformation* internal_default_instance() {
    return reinterpret_cast<const PrimitiveTransformation*>(
               &_PrimitiveTransformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(PrimitiveTransformation* other);
  friend void swap(PrimitiveTransformation& a, PrimitiveTransformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrimitiveTransformation* New() const final {
    return CreateMaybeMessage<PrimitiveTransformation>(NULL);
  }

  PrimitiveTransformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrimitiveTransformation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrimitiveTransformation& from);
  void MergeFrom(const PrimitiveTransformation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimitiveTransformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.ReplaceValueConfig replace_config = 1;
  bool has_replace_config() const;
  void clear_replace_config();
  static const int kReplaceConfigFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::ReplaceValueConfig& _internal_replace_config() const;
  public:
  const ::google::privacy::dlp::v2::ReplaceValueConfig& replace_config() const;
  ::google::privacy::dlp::v2::ReplaceValueConfig* release_replace_config();
  ::google::privacy::dlp::v2::ReplaceValueConfig* mutable_replace_config();
  void set_allocated_replace_config(::google::privacy::dlp::v2::ReplaceValueConfig* replace_config);

  // .google.privacy.dlp.v2.RedactConfig redact_config = 2;
  bool has_redact_config() const;
  void clear_redact_config();
  static const int kRedactConfigFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::RedactConfig& _internal_redact_config() const;
  public:
  const ::google::privacy::dlp::v2::RedactConfig& redact_config() const;
  ::google::privacy::dlp::v2::RedactConfig* release_redact_config();
  ::google::privacy::dlp::v2::RedactConfig* mutable_redact_config();
  void set_allocated_redact_config(::google::privacy::dlp::v2::RedactConfig* redact_config);

  // .google.privacy.dlp.v2.CharacterMaskConfig character_mask_config = 3;
  bool has_character_mask_config() const;
  void clear_character_mask_config();
  static const int kCharacterMaskConfigFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::CharacterMaskConfig& _internal_character_mask_config() const;
  public:
  const ::google::privacy::dlp::v2::CharacterMaskConfig& character_mask_config() const;
  ::google::privacy::dlp::v2::CharacterMaskConfig* release_character_mask_config();
  ::google::privacy::dlp::v2::CharacterMaskConfig* mutable_character_mask_config();
  void set_allocated_character_mask_config(::google::privacy::dlp::v2::CharacterMaskConfig* character_mask_config);

  // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
  bool has_crypto_replace_ffx_fpe_config() const;
  void clear_crypto_replace_ffx_fpe_config();
  static const int kCryptoReplaceFfxFpeConfigFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig& _internal_crypto_replace_ffx_fpe_config() const;
  public:
  const ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig& crypto_replace_ffx_fpe_config() const;
  ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig* release_crypto_replace_ffx_fpe_config();
  ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig* mutable_crypto_replace_ffx_fpe_config();
  void set_allocated_crypto_replace_ffx_fpe_config(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig* crypto_replace_ffx_fpe_config);

  // .google.privacy.dlp.v2.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
  bool has_fixed_size_bucketing_config() const;
  void clear_fixed_size_bucketing_config();
  static const int kFixedSizeBucketingConfigFieldNumber = 5;
  private:
  const ::google::privacy::dlp::v2::FixedSizeBucketingConfig& _internal_fixed_size_bucketing_config() const;
  public:
  const ::google::privacy::dlp::v2::FixedSizeBucketingConfig& fixed_size_bucketing_config() const;
  ::google::privacy::dlp::v2::FixedSizeBucketingConfig* release_fixed_size_bucketing_config();
  ::google::privacy::dlp::v2::FixedSizeBucketingConfig* mutable_fixed_size_bucketing_config();
  void set_allocated_fixed_size_bucketing_config(::google::privacy::dlp::v2::FixedSizeBucketingConfig* fixed_size_bucketing_config);

  // .google.privacy.dlp.v2.BucketingConfig bucketing_config = 6;
  bool has_bucketing_config() const;
  void clear_bucketing_config();
  static const int kBucketingConfigFieldNumber = 6;
  private:
  const ::google::privacy::dlp::v2::BucketingConfig& _internal_bucketing_config() const;
  public:
  const ::google::privacy::dlp::v2::BucketingConfig& bucketing_config() const;
  ::google::privacy::dlp::v2::BucketingConfig* release_bucketing_config();
  ::google::privacy::dlp::v2::BucketingConfig* mutable_bucketing_config();
  void set_allocated_bucketing_config(::google::privacy::dlp::v2::BucketingConfig* bucketing_config);

  // .google.privacy.dlp.v2.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
  bool has_replace_with_info_type_config() const;
  void clear_replace_with_info_type_config();
  static const int kReplaceWithInfoTypeConfigFieldNumber = 7;
  private:
  const ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig& _internal_replace_with_info_type_config() const;
  public:
  const ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig& replace_with_info_type_config() const;
  ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig* release_replace_with_info_type_config();
  ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig* mutable_replace_with_info_type_config();
  void set_allocated_replace_with_info_type_config(::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig* replace_with_info_type_config);

  // .google.privacy.dlp.v2.TimePartConfig time_part_config = 8;
  bool has_time_part_config() const;
  void clear_time_part_config();
  static const int kTimePartConfigFieldNumber = 8;
  private:
  const ::google::privacy::dlp::v2::TimePartConfig& _internal_time_part_config() const;
  public:
  const ::google::privacy::dlp::v2::TimePartConfig& time_part_config() const;
  ::google::privacy::dlp::v2::TimePartConfig* release_time_part_config();
  ::google::privacy::dlp::v2::TimePartConfig* mutable_time_part_config();
  void set_allocated_time_part_config(::google::privacy::dlp::v2::TimePartConfig* time_part_config);

  // .google.privacy.dlp.v2.CryptoHashConfig crypto_hash_config = 9;
  bool has_crypto_hash_config() const;
  void clear_crypto_hash_config();
  static const int kCryptoHashConfigFieldNumber = 9;
  private:
  const ::google::privacy::dlp::v2::CryptoHashConfig& _internal_crypto_hash_config() const;
  public:
  const ::google::privacy::dlp::v2::CryptoHashConfig& crypto_hash_config() const;
  ::google::privacy::dlp::v2::CryptoHashConfig* release_crypto_hash_config();
  ::google::privacy::dlp::v2::CryptoHashConfig* mutable_crypto_hash_config();
  void set_allocated_crypto_hash_config(::google::privacy::dlp::v2::CryptoHashConfig* crypto_hash_config);

  // .google.privacy.dlp.v2.DateShiftConfig date_shift_config = 11;
  bool has_date_shift_config() const;
  void clear_date_shift_config();
  static const int kDateShiftConfigFieldNumber = 11;
  private:
  const ::google::privacy::dlp::v2::DateShiftConfig& _internal_date_shift_config() const;
  public:
  const ::google::privacy::dlp::v2::DateShiftConfig& date_shift_config() const;
  ::google::privacy::dlp::v2::DateShiftConfig* release_date_shift_config();
  ::google::privacy::dlp::v2::DateShiftConfig* mutable_date_shift_config();
  void set_allocated_date_shift_config(::google::privacy::dlp::v2::DateShiftConfig* date_shift_config);

  void clear_transformation();
  TransformationCase transformation_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.PrimitiveTransformation)
 private:
  void set_has_replace_config();
  void set_has_redact_config();
  void set_has_character_mask_config();
  void set_has_crypto_replace_ffx_fpe_config();
  void set_has_fixed_size_bucketing_config();
  void set_has_bucketing_config();
  void set_has_replace_with_info_type_config();
  void set_has_time_part_config();
  void set_has_crypto_hash_config();
  void set_has_date_shift_config();

  inline bool has_transformation() const;
  inline void clear_has_transformation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TransformationUnion {
    TransformationUnion() {}
    ::google::privacy::dlp::v2::ReplaceValueConfig* replace_config_;
    ::google::privacy::dlp::v2::RedactConfig* redact_config_;
    ::google::privacy::dlp::v2::CharacterMaskConfig* character_mask_config_;
    ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig* crypto_replace_ffx_fpe_config_;
    ::google::privacy::dlp::v2::FixedSizeBucketingConfig* fixed_size_bucketing_config_;
    ::google::privacy::dlp::v2::BucketingConfig* bucketing_config_;
    ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig* replace_with_info_type_config_;
    ::google::privacy::dlp::v2::TimePartConfig* time_part_config_;
    ::google::privacy::dlp::v2::CryptoHashConfig* crypto_hash_config_;
    ::google::privacy::dlp::v2::DateShiftConfig* date_shift_config_;
  } transformation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimePartConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.TimePartConfig) */ {
 public:
  TimePartConfig();
  virtual ~TimePartConfig();

  TimePartConfig(const TimePartConfig& from);

  inline TimePartConfig& operator=(const TimePartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimePartConfig(TimePartConfig&& from) noexcept
    : TimePartConfig() {
    *this = ::std::move(from);
  }

  inline TimePartConfig& operator=(TimePartConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimePartConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimePartConfig* internal_default_instance() {
    return reinterpret_cast<const TimePartConfig*>(
               &_TimePartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(TimePartConfig* other);
  friend void swap(TimePartConfig& a, TimePartConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimePartConfig* New() const final {
    return CreateMaybeMessage<TimePartConfig>(NULL);
  }

  TimePartConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimePartConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimePartConfig& from);
  void MergeFrom(const TimePartConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimePartConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TimePartConfig_TimePart TimePart;
  static const TimePart TIME_PART_UNSPECIFIED =
    TimePartConfig_TimePart_TIME_PART_UNSPECIFIED;
  static const TimePart YEAR =
    TimePartConfig_TimePart_YEAR;
  static const TimePart MONTH =
    TimePartConfig_TimePart_MONTH;
  static const TimePart DAY_OF_MONTH =
    TimePartConfig_TimePart_DAY_OF_MONTH;
  static const TimePart DAY_OF_WEEK =
    TimePartConfig_TimePart_DAY_OF_WEEK;
  static const TimePart WEEK_OF_YEAR =
    TimePartConfig_TimePart_WEEK_OF_YEAR;
  static const TimePart HOUR_OF_DAY =
    TimePartConfig_TimePart_HOUR_OF_DAY;
  static inline bool TimePart_IsValid(int value) {
    return TimePartConfig_TimePart_IsValid(value);
  }
  static const TimePart TimePart_MIN =
    TimePartConfig_TimePart_TimePart_MIN;
  static const TimePart TimePart_MAX =
    TimePartConfig_TimePart_TimePart_MAX;
  static const int TimePart_ARRAYSIZE =
    TimePartConfig_TimePart_TimePart_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TimePart_descriptor() {
    return TimePartConfig_TimePart_descriptor();
  }
  static inline const ::std::string& TimePart_Name(TimePart value) {
    return TimePartConfig_TimePart_Name(value);
  }
  static inline bool TimePart_Parse(const ::std::string& name,
      TimePart* value) {
    return TimePartConfig_TimePart_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.TimePartConfig.TimePart part_to_extract = 1;
  void clear_part_to_extract();
  static const int kPartToExtractFieldNumber = 1;
  ::google::privacy::dlp::v2::TimePartConfig_TimePart part_to_extract() const;
  void set_part_to_extract(::google::privacy::dlp::v2::TimePartConfig_TimePart value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.TimePartConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int part_to_extract_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CryptoHashConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.CryptoHashConfig) */ {
 public:
  CryptoHashConfig();
  virtual ~CryptoHashConfig();

  CryptoHashConfig(const CryptoHashConfig& from);

  inline CryptoHashConfig& operator=(const CryptoHashConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CryptoHashConfig(CryptoHashConfig&& from) noexcept
    : CryptoHashConfig() {
    *this = ::std::move(from);
  }

  inline CryptoHashConfig& operator=(CryptoHashConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CryptoHashConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CryptoHashConfig* internal_default_instance() {
    return reinterpret_cast<const CryptoHashConfig*>(
               &_CryptoHashConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(CryptoHashConfig* other);
  friend void swap(CryptoHashConfig& a, CryptoHashConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CryptoHashConfig* New() const final {
    return CreateMaybeMessage<CryptoHashConfig>(NULL);
  }

  CryptoHashConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CryptoHashConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CryptoHashConfig& from);
  void MergeFrom(const CryptoHashConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoHashConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
  bool has_crypto_key() const;
  void clear_crypto_key();
  static const int kCryptoKeyFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::CryptoKey& _internal_crypto_key() const;
  public:
  const ::google::privacy::dlp::v2::CryptoKey& crypto_key() const;
  ::google::privacy::dlp::v2::CryptoKey* release_crypto_key();
  ::google::privacy::dlp::v2::CryptoKey* mutable_crypto_key();
  void set_allocated_crypto_key(::google::privacy::dlp::v2::CryptoKey* crypto_key);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.CryptoHashConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::CryptoKey* crypto_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReplaceValueConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ReplaceValueConfig) */ {
 public:
  ReplaceValueConfig();
  virtual ~ReplaceValueConfig();

  ReplaceValueConfig(const ReplaceValueConfig& from);

  inline ReplaceValueConfig& operator=(const ReplaceValueConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplaceValueConfig(ReplaceValueConfig&& from) noexcept
    : ReplaceValueConfig() {
    *this = ::std::move(from);
  }

  inline ReplaceValueConfig& operator=(ReplaceValueConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplaceValueConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplaceValueConfig* internal_default_instance() {
    return reinterpret_cast<const ReplaceValueConfig*>(
               &_ReplaceValueConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(ReplaceValueConfig* other);
  friend void swap(ReplaceValueConfig& a, ReplaceValueConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplaceValueConfig* New() const final {
    return CreateMaybeMessage<ReplaceValueConfig>(NULL);
  }

  ReplaceValueConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceValueConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReplaceValueConfig& from);
  void MergeFrom(const ReplaceValueConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceValueConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.Value new_value = 1;
  bool has_new_value() const;
  void clear_new_value();
  static const int kNewValueFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::Value& _internal_new_value() const;
  public:
  const ::google::privacy::dlp::v2::Value& new_value() const;
  ::google::privacy::dlp::v2::Value* release_new_value();
  ::google::privacy::dlp::v2::Value* mutable_new_value();
  void set_allocated_new_value(::google::privacy::dlp::v2::Value* new_value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ReplaceValueConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::Value* new_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReplaceWithInfoTypeConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig) */ {
 public:
  ReplaceWithInfoTypeConfig();
  virtual ~ReplaceWithInfoTypeConfig();

  ReplaceWithInfoTypeConfig(const ReplaceWithInfoTypeConfig& from);

  inline ReplaceWithInfoTypeConfig& operator=(const ReplaceWithInfoTypeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplaceWithInfoTypeConfig(ReplaceWithInfoTypeConfig&& from) noexcept
    : ReplaceWithInfoTypeConfig() {
    *this = ::std::move(from);
  }

  inline ReplaceWithInfoTypeConfig& operator=(ReplaceWithInfoTypeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplaceWithInfoTypeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplaceWithInfoTypeConfig* internal_default_instance() {
    return reinterpret_cast<const ReplaceWithInfoTypeConfig*>(
               &_ReplaceWithInfoTypeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(ReplaceWithInfoTypeConfig* other);
  friend void swap(ReplaceWithInfoTypeConfig& a, ReplaceWithInfoTypeConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplaceWithInfoTypeConfig* New() const final {
    return CreateMaybeMessage<ReplaceWithInfoTypeConfig>(NULL);
  }

  ReplaceWithInfoTypeConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceWithInfoTypeConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReplaceWithInfoTypeConfig& from);
  void MergeFrom(const ReplaceWithInfoTypeConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceWithInfoTypeConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedactConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RedactConfig) */ {
 public:
  RedactConfig();
  virtual ~RedactConfig();

  RedactConfig(const RedactConfig& from);

  inline RedactConfig& operator=(const RedactConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedactConfig(RedactConfig&& from) noexcept
    : RedactConfig() {
    *this = ::std::move(from);
  }

  inline RedactConfig& operator=(RedactConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedactConfig* internal_default_instance() {
    return reinterpret_cast<const RedactConfig*>(
               &_RedactConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(RedactConfig* other);
  friend void swap(RedactConfig& a, RedactConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedactConfig* New() const final {
    return CreateMaybeMessage<RedactConfig>(NULL);
  }

  RedactConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RedactConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RedactConfig& from);
  void MergeFrom(const RedactConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedactConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RedactConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharsToIgnore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.CharsToIgnore) */ {
 public:
  CharsToIgnore();
  virtual ~CharsToIgnore();

  CharsToIgnore(const CharsToIgnore& from);

  inline CharsToIgnore& operator=(const CharsToIgnore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharsToIgnore(CharsToIgnore&& from) noexcept
    : CharsToIgnore() {
    *this = ::std::move(from);
  }

  inline CharsToIgnore& operator=(CharsToIgnore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharsToIgnore& default_instance();

  enum CharactersCase {
    kCharactersToSkip = 1,
    kCommonCharactersToIgnore = 2,
    CHARACTERS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharsToIgnore* internal_default_instance() {
    return reinterpret_cast<const CharsToIgnore*>(
               &_CharsToIgnore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(CharsToIgnore* other);
  friend void swap(CharsToIgnore& a, CharsToIgnore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharsToIgnore* New() const final {
    return CreateMaybeMessage<CharsToIgnore>(NULL);
  }

  CharsToIgnore* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CharsToIgnore>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CharsToIgnore& from);
  void MergeFrom(const CharsToIgnore& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharsToIgnore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CharsToIgnore_CommonCharsToIgnore CommonCharsToIgnore;
  static const CommonCharsToIgnore COMMON_CHARS_TO_IGNORE_UNSPECIFIED =
    CharsToIgnore_CommonCharsToIgnore_COMMON_CHARS_TO_IGNORE_UNSPECIFIED;
  static const CommonCharsToIgnore NUMERIC =
    CharsToIgnore_CommonCharsToIgnore_NUMERIC;
  static const CommonCharsToIgnore ALPHA_UPPER_CASE =
    CharsToIgnore_CommonCharsToIgnore_ALPHA_UPPER_CASE;
  static const CommonCharsToIgnore ALPHA_LOWER_CASE =
    CharsToIgnore_CommonCharsToIgnore_ALPHA_LOWER_CASE;
  static const CommonCharsToIgnore PUNCTUATION =
    CharsToIgnore_CommonCharsToIgnore_PUNCTUATION;
  static const CommonCharsToIgnore WHITESPACE =
    CharsToIgnore_CommonCharsToIgnore_WHITESPACE;
  static inline bool CommonCharsToIgnore_IsValid(int value) {
    return CharsToIgnore_CommonCharsToIgnore_IsValid(value);
  }
  static const CommonCharsToIgnore CommonCharsToIgnore_MIN =
    CharsToIgnore_CommonCharsToIgnore_CommonCharsToIgnore_MIN;
  static const CommonCharsToIgnore CommonCharsToIgnore_MAX =
    CharsToIgnore_CommonCharsToIgnore_CommonCharsToIgnore_MAX;
  static const int CommonCharsToIgnore_ARRAYSIZE =
    CharsToIgnore_CommonCharsToIgnore_CommonCharsToIgnore_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommonCharsToIgnore_descriptor() {
    return CharsToIgnore_CommonCharsToIgnore_descriptor();
  }
  static inline const ::std::string& CommonCharsToIgnore_Name(CommonCharsToIgnore value) {
    return CharsToIgnore_CommonCharsToIgnore_Name(value);
  }
  static inline bool CommonCharsToIgnore_Parse(const ::std::string& name,
      CommonCharsToIgnore* value) {
    return CharsToIgnore_CommonCharsToIgnore_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string characters_to_skip = 1;
  private:
  bool has_characters_to_skip() const;
  public:
  void clear_characters_to_skip();
  static const int kCharactersToSkipFieldNumber = 1;
  const ::std::string& characters_to_skip() const;
  void set_characters_to_skip(const ::std::string& value);
  #if LANG_CXX11
  void set_characters_to_skip(::std::string&& value);
  #endif
  void set_characters_to_skip(const char* value);
  void set_characters_to_skip(const char* value, size_t size);
  ::std::string* mutable_characters_to_skip();
  ::std::string* release_characters_to_skip();
  void set_allocated_characters_to_skip(::std::string* characters_to_skip);

  // .google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore common_characters_to_ignore = 2;
  private:
  bool has_common_characters_to_ignore() const;
  public:
  void clear_common_characters_to_ignore();
  static const int kCommonCharactersToIgnoreFieldNumber = 2;
  ::google::privacy::dlp::v2::CharsToIgnore_CommonCharsToIgnore common_characters_to_ignore() const;
  void set_common_characters_to_ignore(::google::privacy::dlp::v2::CharsToIgnore_CommonCharsToIgnore value);

  void clear_characters();
  CharactersCase characters_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.CharsToIgnore)
 private:
  void set_has_characters_to_skip();
  void set_has_common_characters_to_ignore();

  inline bool has_characters() const;
  inline void clear_has_characters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union CharactersUnion {
    CharactersUnion() {}
    ::google::protobuf::internal::ArenaStringPtr characters_to_skip_;
    int common_characters_to_ignore_;
  } characters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharacterMaskConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.CharacterMaskConfig) */ {
 public:
  CharacterMaskConfig();
  virtual ~CharacterMaskConfig();

  CharacterMaskConfig(const CharacterMaskConfig& from);

  inline CharacterMaskConfig& operator=(const CharacterMaskConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharacterMaskConfig(CharacterMaskConfig&& from) noexcept
    : CharacterMaskConfig() {
    *this = ::std::move(from);
  }

  inline CharacterMaskConfig& operator=(CharacterMaskConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterMaskConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharacterMaskConfig* internal_default_instance() {
    return reinterpret_cast<const CharacterMaskConfig*>(
               &_CharacterMaskConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(CharacterMaskConfig* other);
  friend void swap(CharacterMaskConfig& a, CharacterMaskConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharacterMaskConfig* New() const final {
    return CreateMaybeMessage<CharacterMaskConfig>(NULL);
  }

  CharacterMaskConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CharacterMaskConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CharacterMaskConfig& from);
  void MergeFrom(const CharacterMaskConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterMaskConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.CharsToIgnore characters_to_ignore = 4;
  int characters_to_ignore_size() const;
  void clear_characters_to_ignore();
  static const int kCharactersToIgnoreFieldNumber = 4;
  ::google::privacy::dlp::v2::CharsToIgnore* mutable_characters_to_ignore(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::CharsToIgnore >*
      mutable_characters_to_ignore();
  const ::google::privacy::dlp::v2::CharsToIgnore& characters_to_ignore(int index) const;
  ::google::privacy::dlp::v2::CharsToIgnore* add_characters_to_ignore();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::CharsToIgnore >&
      characters_to_ignore() const;

  // string masking_character = 1;
  void clear_masking_character();
  static const int kMaskingCharacterFieldNumber = 1;
  const ::std::string& masking_character() const;
  void set_masking_character(const ::std::string& value);
  #if LANG_CXX11
  void set_masking_character(::std::string&& value);
  #endif
  void set_masking_character(const char* value);
  void set_masking_character(const char* value, size_t size);
  ::std::string* mutable_masking_character();
  ::std::string* release_masking_character();
  void set_allocated_masking_character(::std::string* masking_character);

  // int32 number_to_mask = 2;
  void clear_number_to_mask();
  static const int kNumberToMaskFieldNumber = 2;
  ::google::protobuf::int32 number_to_mask() const;
  void set_number_to_mask(::google::protobuf::int32 value);

  // bool reverse_order = 3;
  void clear_reverse_order();
  static const int kReverseOrderFieldNumber = 3;
  bool reverse_order() const;
  void set_reverse_order(bool value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.CharacterMaskConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::CharsToIgnore > characters_to_ignore_;
  ::google::protobuf::internal::ArenaStringPtr masking_character_;
  ::google::protobuf::int32 number_to_mask_;
  bool reverse_order_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FixedSizeBucketingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.FixedSizeBucketingConfig) */ {
 public:
  FixedSizeBucketingConfig();
  virtual ~FixedSizeBucketingConfig();

  FixedSizeBucketingConfig(const FixedSizeBucketingConfig& from);

  inline FixedSizeBucketingConfig& operator=(const FixedSizeBucketingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FixedSizeBucketingConfig(FixedSizeBucketingConfig&& from) noexcept
    : FixedSizeBucketingConfig() {
    *this = ::std::move(from);
  }

  inline FixedSizeBucketingConfig& operator=(FixedSizeBucketingConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedSizeBucketingConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FixedSizeBucketingConfig* internal_default_instance() {
    return reinterpret_cast<const FixedSizeBucketingConfig*>(
               &_FixedSizeBucketingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(FixedSizeBucketingConfig* other);
  friend void swap(FixedSizeBucketingConfig& a, FixedSizeBucketingConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FixedSizeBucketingConfig* New() const final {
    return CreateMaybeMessage<FixedSizeBucketingConfig>(NULL);
  }

  FixedSizeBucketingConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FixedSizeBucketingConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FixedSizeBucketingConfig& from);
  void MergeFrom(const FixedSizeBucketingConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedSizeBucketingConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.Value lower_bound = 1;
  bool has_lower_bound() const;
  void clear_lower_bound();
  static const int kLowerBoundFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::Value& _internal_lower_bound() const;
  public:
  const ::google::privacy::dlp::v2::Value& lower_bound() const;
  ::google::privacy::dlp::v2::Value* release_lower_bound();
  ::google::privacy::dlp::v2::Value* mutable_lower_bound();
  void set_allocated_lower_bound(::google::privacy::dlp::v2::Value* lower_bound);

  // .google.privacy.dlp.v2.Value upper_bound = 2;
  bool has_upper_bound() const;
  void clear_upper_bound();
  static const int kUpperBoundFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::Value& _internal_upper_bound() const;
  public:
  const ::google::privacy::dlp::v2::Value& upper_bound() const;
  ::google::privacy::dlp::v2::Value* release_upper_bound();
  ::google::privacy::dlp::v2::Value* mutable_upper_bound();
  void set_allocated_upper_bound(::google::privacy::dlp::v2::Value* upper_bound);

  // double bucket_size = 3;
  void clear_bucket_size();
  static const int kBucketSizeFieldNumber = 3;
  double bucket_size() const;
  void set_bucket_size(double value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.FixedSizeBucketingConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::Value* lower_bound_;
  ::google::privacy::dlp::v2::Value* upper_bound_;
  double bucket_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BucketingConfig_Bucket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.BucketingConfig.Bucket) */ {
 public:
  BucketingConfig_Bucket();
  virtual ~BucketingConfig_Bucket();

  BucketingConfig_Bucket(const BucketingConfig_Bucket& from);

  inline BucketingConfig_Bucket& operator=(const BucketingConfig_Bucket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BucketingConfig_Bucket(BucketingConfig_Bucket&& from) noexcept
    : BucketingConfig_Bucket() {
    *this = ::std::move(from);
  }

  inline BucketingConfig_Bucket& operator=(BucketingConfig_Bucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketingConfig_Bucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BucketingConfig_Bucket* internal_default_instance() {
    return reinterpret_cast<const BucketingConfig_Bucket*>(
               &_BucketingConfig_Bucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(BucketingConfig_Bucket* other);
  friend void swap(BucketingConfig_Bucket& a, BucketingConfig_Bucket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BucketingConfig_Bucket* New() const final {
    return CreateMaybeMessage<BucketingConfig_Bucket>(NULL);
  }

  BucketingConfig_Bucket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BucketingConfig_Bucket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BucketingConfig_Bucket& from);
  void MergeFrom(const BucketingConfig_Bucket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketingConfig_Bucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.Value min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::Value& _internal_min() const;
  public:
  const ::google::privacy::dlp::v2::Value& min() const;
  ::google::privacy::dlp::v2::Value* release_min();
  ::google::privacy::dlp::v2::Value* mutable_min();
  void set_allocated_min(::google::privacy::dlp::v2::Value* min);

  // .google.privacy.dlp.v2.Value max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::Value& _internal_max() const;
  public:
  const ::google::privacy::dlp::v2::Value& max() const;
  ::google::privacy::dlp::v2::Value* release_max();
  ::google::privacy::dlp::v2::Value* mutable_max();
  void set_allocated_max(::google::privacy::dlp::v2::Value* max);

  // .google.privacy.dlp.v2.Value replacement_value = 3;
  bool has_replacement_value() const;
  void clear_replacement_value();
  static const int kReplacementValueFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::Value& _internal_replacement_value() const;
  public:
  const ::google::privacy::dlp::v2::Value& replacement_value() const;
  ::google::privacy::dlp::v2::Value* release_replacement_value();
  ::google::privacy::dlp::v2::Value* mutable_replacement_value();
  void set_allocated_replacement_value(::google::privacy::dlp::v2::Value* replacement_value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.BucketingConfig.Bucket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::Value* min_;
  ::google::privacy::dlp::v2::Value* max_;
  ::google::privacy::dlp::v2::Value* replacement_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BucketingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.BucketingConfig) */ {
 public:
  BucketingConfig();
  virtual ~BucketingConfig();

  BucketingConfig(const BucketingConfig& from);

  inline BucketingConfig& operator=(const BucketingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BucketingConfig(BucketingConfig&& from) noexcept
    : BucketingConfig() {
    *this = ::std::move(from);
  }

  inline BucketingConfig& operator=(BucketingConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketingConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BucketingConfig* internal_default_instance() {
    return reinterpret_cast<const BucketingConfig*>(
               &_BucketingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(BucketingConfig* other);
  friend void swap(BucketingConfig& a, BucketingConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BucketingConfig* New() const final {
    return CreateMaybeMessage<BucketingConfig>(NULL);
  }

  BucketingConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BucketingConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BucketingConfig& from);
  void MergeFrom(const BucketingConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketingConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BucketingConfig_Bucket Bucket;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.BucketingConfig.Bucket buckets = 1;
  int buckets_size() const;
  void clear_buckets();
  static const int kBucketsFieldNumber = 1;
  ::google::privacy::dlp::v2::BucketingConfig_Bucket* mutable_buckets(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::BucketingConfig_Bucket >*
      mutable_buckets();
  const ::google::privacy::dlp::v2::BucketingConfig_Bucket& buckets(int index) const;
  ::google::privacy::dlp::v2::BucketingConfig_Bucket* add_buckets();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::BucketingConfig_Bucket >&
      buckets() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.BucketingConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::BucketingConfig_Bucket > buckets_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CryptoReplaceFfxFpeConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig) */ {
 public:
  CryptoReplaceFfxFpeConfig();
  virtual ~CryptoReplaceFfxFpeConfig();

  CryptoReplaceFfxFpeConfig(const CryptoReplaceFfxFpeConfig& from);

  inline CryptoReplaceFfxFpeConfig& operator=(const CryptoReplaceFfxFpeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CryptoReplaceFfxFpeConfig(CryptoReplaceFfxFpeConfig&& from) noexcept
    : CryptoReplaceFfxFpeConfig() {
    *this = ::std::move(from);
  }

  inline CryptoReplaceFfxFpeConfig& operator=(CryptoReplaceFfxFpeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CryptoReplaceFfxFpeConfig& default_instance();

  enum AlphabetCase {
    kCommonAlphabet = 4,
    kCustomAlphabet = 5,
    kRadix = 6,
    ALPHABET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CryptoReplaceFfxFpeConfig* internal_default_instance() {
    return reinterpret_cast<const CryptoReplaceFfxFpeConfig*>(
               &_CryptoReplaceFfxFpeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(CryptoReplaceFfxFpeConfig* other);
  friend void swap(CryptoReplaceFfxFpeConfig& a, CryptoReplaceFfxFpeConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CryptoReplaceFfxFpeConfig* New() const final {
    return CreateMaybeMessage<CryptoReplaceFfxFpeConfig>(NULL);
  }

  CryptoReplaceFfxFpeConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CryptoReplaceFfxFpeConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CryptoReplaceFfxFpeConfig& from);
  void MergeFrom(const CryptoReplaceFfxFpeConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoReplaceFfxFpeConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet FfxCommonNativeAlphabet;
  static const FfxCommonNativeAlphabet FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED;
  static const FfxCommonNativeAlphabet NUMERIC =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_NUMERIC;
  static const FfxCommonNativeAlphabet HEXADECIMAL =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_HEXADECIMAL;
  static const FfxCommonNativeAlphabet UPPER_CASE_ALPHA_NUMERIC =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_UPPER_CASE_ALPHA_NUMERIC;
  static const FfxCommonNativeAlphabet ALPHA_NUMERIC =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_ALPHA_NUMERIC;
  static inline bool FfxCommonNativeAlphabet_IsValid(int value) {
    return CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_IsValid(value);
  }
  static const FfxCommonNativeAlphabet FfxCommonNativeAlphabet_MIN =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_MIN;
  static const FfxCommonNativeAlphabet FfxCommonNativeAlphabet_MAX =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_MAX;
  static const int FfxCommonNativeAlphabet_ARRAYSIZE =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FfxCommonNativeAlphabet_descriptor() {
    return CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor();
  }
  static inline const ::std::string& FfxCommonNativeAlphabet_Name(FfxCommonNativeAlphabet value) {
    return CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_Name(value);
  }
  static inline bool FfxCommonNativeAlphabet_Parse(const ::std::string& name,
      FfxCommonNativeAlphabet* value) {
    return CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
  bool has_crypto_key() const;
  void clear_crypto_key();
  static const int kCryptoKeyFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::CryptoKey& _internal_crypto_key() const;
  public:
  const ::google::privacy::dlp::v2::CryptoKey& crypto_key() const;
  ::google::privacy::dlp::v2::CryptoKey* release_crypto_key();
  ::google::privacy::dlp::v2::CryptoKey* mutable_crypto_key();
  void set_allocated_crypto_key(::google::privacy::dlp::v2::CryptoKey* crypto_key);

  // .google.privacy.dlp.v2.FieldId context = 2;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_context() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& context() const;
  ::google::privacy::dlp::v2::FieldId* release_context();
  ::google::privacy::dlp::v2::FieldId* mutable_context();
  void set_allocated_context(::google::privacy::dlp::v2::FieldId* context);

  // .google.privacy.dlp.v2.InfoType surrogate_info_type = 8;
  bool has_surrogate_info_type() const;
  void clear_surrogate_info_type();
  static const int kSurrogateInfoTypeFieldNumber = 8;
  private:
  const ::google::privacy::dlp::v2::InfoType& _internal_surrogate_info_type() const;
  public:
  const ::google::privacy::dlp::v2::InfoType& surrogate_info_type() const;
  ::google::privacy::dlp::v2::InfoType* release_surrogate_info_type();
  ::google::privacy::dlp::v2::InfoType* mutable_surrogate_info_type();
  void set_allocated_surrogate_info_type(::google::privacy::dlp::v2::InfoType* surrogate_info_type);

  // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
  private:
  bool has_common_alphabet() const;
  public:
  void clear_common_alphabet();
  static const int kCommonAlphabetFieldNumber = 4;
  ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet common_alphabet() const;
  void set_common_alphabet(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet value);

  // string custom_alphabet = 5;
  private:
  bool has_custom_alphabet() const;
  public:
  void clear_custom_alphabet();
  static const int kCustomAlphabetFieldNumber = 5;
  const ::std::string& custom_alphabet() const;
  void set_custom_alphabet(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_alphabet(::std::string&& value);
  #endif
  void set_custom_alphabet(const char* value);
  void set_custom_alphabet(const char* value, size_t size);
  ::std::string* mutable_custom_alphabet();
  ::std::string* release_custom_alphabet();
  void set_allocated_custom_alphabet(::std::string* custom_alphabet);

  // int32 radix = 6;
  private:
  bool has_radix() const;
  public:
  void clear_radix();
  static const int kRadixFieldNumber = 6;
  ::google::protobuf::int32 radix() const;
  void set_radix(::google::protobuf::int32 value);

  void clear_alphabet();
  AlphabetCase alphabet_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
 private:
  void set_has_common_alphabet();
  void set_has_custom_alphabet();
  void set_has_radix();

  inline bool has_alphabet() const;
  inline void clear_has_alphabet();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::CryptoKey* crypto_key_;
  ::google::privacy::dlp::v2::FieldId* context_;
  ::google::privacy::dlp::v2::InfoType* surrogate_info_type_;
  union AlphabetUnion {
    AlphabetUnion() {}
    int common_alphabet_;
    ::google::protobuf::internal::ArenaStringPtr custom_alphabet_;
    ::google::protobuf::int32 radix_;
  } alphabet_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CryptoKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.CryptoKey) */ {
 public:
  CryptoKey();
  virtual ~CryptoKey();

  CryptoKey(const CryptoKey& from);

  inline CryptoKey& operator=(const CryptoKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CryptoKey(CryptoKey&& from) noexcept
    : CryptoKey() {
    *this = ::std::move(from);
  }

  inline CryptoKey& operator=(CryptoKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CryptoKey& default_instance();

  enum SourceCase {
    kTransient = 1,
    kUnwrapped = 2,
    kKmsWrapped = 3,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CryptoKey* internal_default_instance() {
    return reinterpret_cast<const CryptoKey*>(
               &_CryptoKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(CryptoKey* other);
  friend void swap(CryptoKey& a, CryptoKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CryptoKey* New() const final {
    return CreateMaybeMessage<CryptoKey>(NULL);
  }

  CryptoKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CryptoKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CryptoKey& from);
  void MergeFrom(const CryptoKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.TransientCryptoKey transient = 1;
  bool has_transient() const;
  void clear_transient();
  static const int kTransientFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::TransientCryptoKey& _internal_transient() const;
  public:
  const ::google::privacy::dlp::v2::TransientCryptoKey& transient() const;
  ::google::privacy::dlp::v2::TransientCryptoKey* release_transient();
  ::google::privacy::dlp::v2::TransientCryptoKey* mutable_transient();
  void set_allocated_transient(::google::privacy::dlp::v2::TransientCryptoKey* transient);

  // .google.privacy.dlp.v2.UnwrappedCryptoKey unwrapped = 2;
  bool has_unwrapped() const;
  void clear_unwrapped();
  static const int kUnwrappedFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::UnwrappedCryptoKey& _internal_unwrapped() const;
  public:
  const ::google::privacy::dlp::v2::UnwrappedCryptoKey& unwrapped() const;
  ::google::privacy::dlp::v2::UnwrappedCryptoKey* release_unwrapped();
  ::google::privacy::dlp::v2::UnwrappedCryptoKey* mutable_unwrapped();
  void set_allocated_unwrapped(::google::privacy::dlp::v2::UnwrappedCryptoKey* unwrapped);

  // .google.privacy.dlp.v2.KmsWrappedCryptoKey kms_wrapped = 3;
  bool has_kms_wrapped() const;
  void clear_kms_wrapped();
  static const int kKmsWrappedFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::KmsWrappedCryptoKey& _internal_kms_wrapped() const;
  public:
  const ::google::privacy::dlp::v2::KmsWrappedCryptoKey& kms_wrapped() const;
  ::google::privacy::dlp::v2::KmsWrappedCryptoKey* release_kms_wrapped();
  ::google::privacy::dlp::v2::KmsWrappedCryptoKey* mutable_kms_wrapped();
  void set_allocated_kms_wrapped(::google::privacy::dlp::v2::KmsWrappedCryptoKey* kms_wrapped);

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.CryptoKey)
 private:
  void set_has_transient();
  void set_has_unwrapped();
  void set_has_kms_wrapped();

  inline bool has_source() const;
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union SourceUnion {
    SourceUnion() {}
    ::google::privacy::dlp::v2::TransientCryptoKey* transient_;
    ::google::privacy::dlp::v2::UnwrappedCryptoKey* unwrapped_;
    ::google::privacy::dlp::v2::KmsWrappedCryptoKey* kms_wrapped_;
  } source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransientCryptoKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.TransientCryptoKey) */ {
 public:
  TransientCryptoKey();
  virtual ~TransientCryptoKey();

  TransientCryptoKey(const TransientCryptoKey& from);

  inline TransientCryptoKey& operator=(const TransientCryptoKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransientCryptoKey(TransientCryptoKey&& from) noexcept
    : TransientCryptoKey() {
    *this = ::std::move(from);
  }

  inline TransientCryptoKey& operator=(TransientCryptoKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransientCryptoKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransientCryptoKey* internal_default_instance() {
    return reinterpret_cast<const TransientCryptoKey*>(
               &_TransientCryptoKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(TransientCryptoKey* other);
  friend void swap(TransientCryptoKey& a, TransientCryptoKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransientCryptoKey* New() const final {
    return CreateMaybeMessage<TransientCryptoKey>(NULL);
  }

  TransientCryptoKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransientCryptoKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransientCryptoKey& from);
  void MergeFrom(const TransientCryptoKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransientCryptoKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.TransientCryptoKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnwrappedCryptoKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.UnwrappedCryptoKey) */ {
 public:
  UnwrappedCryptoKey();
  virtual ~UnwrappedCryptoKey();

  UnwrappedCryptoKey(const UnwrappedCryptoKey& from);

  inline UnwrappedCryptoKey& operator=(const UnwrappedCryptoKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnwrappedCryptoKey(UnwrappedCryptoKey&& from) noexcept
    : UnwrappedCryptoKey() {
    *this = ::std::move(from);
  }

  inline UnwrappedCryptoKey& operator=(UnwrappedCryptoKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnwrappedCryptoKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnwrappedCryptoKey* internal_default_instance() {
    return reinterpret_cast<const UnwrappedCryptoKey*>(
               &_UnwrappedCryptoKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void Swap(UnwrappedCryptoKey* other);
  friend void swap(UnwrappedCryptoKey& a, UnwrappedCryptoKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnwrappedCryptoKey* New() const final {
    return CreateMaybeMessage<UnwrappedCryptoKey>(NULL);
  }

  UnwrappedCryptoKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnwrappedCryptoKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnwrappedCryptoKey& from);
  void MergeFrom(const UnwrappedCryptoKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnwrappedCryptoKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.UnwrappedCryptoKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KmsWrappedCryptoKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.KmsWrappedCryptoKey) */ {
 public:
  KmsWrappedCryptoKey();
  virtual ~KmsWrappedCryptoKey();

  KmsWrappedCryptoKey(const KmsWrappedCryptoKey& from);

  inline KmsWrappedCryptoKey& operator=(const KmsWrappedCryptoKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KmsWrappedCryptoKey(KmsWrappedCryptoKey&& from) noexcept
    : KmsWrappedCryptoKey() {
    *this = ::std::move(from);
  }

  inline KmsWrappedCryptoKey& operator=(KmsWrappedCryptoKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KmsWrappedCryptoKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KmsWrappedCryptoKey* internal_default_instance() {
    return reinterpret_cast<const KmsWrappedCryptoKey*>(
               &_KmsWrappedCryptoKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(KmsWrappedCryptoKey* other);
  friend void swap(KmsWrappedCryptoKey& a, KmsWrappedCryptoKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KmsWrappedCryptoKey* New() const final {
    return CreateMaybeMessage<KmsWrappedCryptoKey>(NULL);
  }

  KmsWrappedCryptoKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KmsWrappedCryptoKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KmsWrappedCryptoKey& from);
  void MergeFrom(const KmsWrappedCryptoKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KmsWrappedCryptoKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes wrapped_key = 1;
  void clear_wrapped_key();
  static const int kWrappedKeyFieldNumber = 1;
  const ::std::string& wrapped_key() const;
  void set_wrapped_key(const ::std::string& value);
  #if LANG_CXX11
  void set_wrapped_key(::std::string&& value);
  #endif
  void set_wrapped_key(const char* value);
  void set_wrapped_key(const void* value, size_t size);
  ::std::string* mutable_wrapped_key();
  ::std::string* release_wrapped_key();
  void set_allocated_wrapped_key(::std::string* wrapped_key);

  // string crypto_key_name = 2;
  void clear_crypto_key_name();
  static const int kCryptoKeyNameFieldNumber = 2;
  const ::std::string& crypto_key_name() const;
  void set_crypto_key_name(const ::std::string& value);
  #if LANG_CXX11
  void set_crypto_key_name(::std::string&& value);
  #endif
  void set_crypto_key_name(const char* value);
  void set_crypto_key_name(const char* value, size_t size);
  ::std::string* mutable_crypto_key_name();
  ::std::string* release_crypto_key_name();
  void set_allocated_crypto_key_name(::std::string* crypto_key_name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.KmsWrappedCryptoKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr wrapped_key_;
  ::google::protobuf::internal::ArenaStringPtr crypto_key_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DateShiftConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DateShiftConfig) */ {
 public:
  DateShiftConfig();
  virtual ~DateShiftConfig();

  DateShiftConfig(const DateShiftConfig& from);

  inline DateShiftConfig& operator=(const DateShiftConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateShiftConfig(DateShiftConfig&& from) noexcept
    : DateShiftConfig() {
    *this = ::std::move(from);
  }

  inline DateShiftConfig& operator=(DateShiftConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DateShiftConfig& default_instance();

  enum MethodCase {
    kCryptoKey = 4,
    METHOD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateShiftConfig* internal_default_instance() {
    return reinterpret_cast<const DateShiftConfig*>(
               &_DateShiftConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(DateShiftConfig* other);
  friend void swap(DateShiftConfig& a, DateShiftConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateShiftConfig* New() const final {
    return CreateMaybeMessage<DateShiftConfig>(NULL);
  }

  DateShiftConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateShiftConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateShiftConfig& from);
  void MergeFrom(const DateShiftConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateShiftConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.FieldId context = 3;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_context() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& context() const;
  ::google::privacy::dlp::v2::FieldId* release_context();
  ::google::privacy::dlp::v2::FieldId* mutable_context();
  void set_allocated_context(::google::privacy::dlp::v2::FieldId* context);

  // int32 upper_bound_days = 1;
  void clear_upper_bound_days();
  static const int kUpperBoundDaysFieldNumber = 1;
  ::google::protobuf::int32 upper_bound_days() const;
  void set_upper_bound_days(::google::protobuf::int32 value);

  // int32 lower_bound_days = 2;
  void clear_lower_bound_days();
  static const int kLowerBoundDaysFieldNumber = 2;
  ::google::protobuf::int32 lower_bound_days() const;
  void set_lower_bound_days(::google::protobuf::int32 value);

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 4;
  bool has_crypto_key() const;
  void clear_crypto_key();
  static const int kCryptoKeyFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::CryptoKey& _internal_crypto_key() const;
  public:
  const ::google::privacy::dlp::v2::CryptoKey& crypto_key() const;
  ::google::privacy::dlp::v2::CryptoKey* release_crypto_key();
  ::google::privacy::dlp::v2::CryptoKey* mutable_crypto_key();
  void set_allocated_crypto_key(::google::privacy::dlp::v2::CryptoKey* crypto_key);

  void clear_method();
  MethodCase method_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DateShiftConfig)
 private:
  void set_has_crypto_key();

  inline bool has_method() const;
  inline void clear_has_method();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::FieldId* context_;
  ::google::protobuf::int32 upper_bound_days_;
  ::google::protobuf::int32 lower_bound_days_;
  union MethodUnion {
    MethodUnion() {}
    ::google::privacy::dlp::v2::CryptoKey* crypto_key_;
  } method_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoTypeTransformations_InfoTypeTransformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation) */ {
 public:
  InfoTypeTransformations_InfoTypeTransformation();
  virtual ~InfoTypeTransformations_InfoTypeTransformation();

  InfoTypeTransformations_InfoTypeTransformation(const InfoTypeTransformations_InfoTypeTransformation& from);

  inline InfoTypeTransformations_InfoTypeTransformation& operator=(const InfoTypeTransformations_InfoTypeTransformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoTypeTransformations_InfoTypeTransformation(InfoTypeTransformations_InfoTypeTransformation&& from) noexcept
    : InfoTypeTransformations_InfoTypeTransformation() {
    *this = ::std::move(from);
  }

  inline InfoTypeTransformations_InfoTypeTransformation& operator=(InfoTypeTransformations_InfoTypeTransformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoTypeTransformations_InfoTypeTransformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoTypeTransformations_InfoTypeTransformation* internal_default_instance() {
    return reinterpret_cast<const InfoTypeTransformations_InfoTypeTransformation*>(
               &_InfoTypeTransformations_InfoTypeTransformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(InfoTypeTransformations_InfoTypeTransformation* other);
  friend void swap(InfoTypeTransformations_InfoTypeTransformation& a, InfoTypeTransformations_InfoTypeTransformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoTypeTransformations_InfoTypeTransformation* New() const final {
    return CreateMaybeMessage<InfoTypeTransformations_InfoTypeTransformation>(NULL);
  }

  InfoTypeTransformations_InfoTypeTransformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoTypeTransformations_InfoTypeTransformation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoTypeTransformations_InfoTypeTransformation& from);
  void MergeFrom(const InfoTypeTransformations_InfoTypeTransformation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoTypeTransformations_InfoTypeTransformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  int info_types_size() const;
  void clear_info_types();
  static const int kInfoTypesFieldNumber = 1;
  ::google::privacy::dlp::v2::InfoType* mutable_info_types(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoType >*
      mutable_info_types();
  const ::google::privacy::dlp::v2::InfoType& info_types(int index) const;
  ::google::privacy::dlp::v2::InfoType* add_info_types();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoType >&
      info_types() const;

  // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 2;
  bool has_primitive_transformation() const;
  void clear_primitive_transformation();
  static const int kPrimitiveTransformationFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::PrimitiveTransformation& _internal_primitive_transformation() const;
  public:
  const ::google::privacy::dlp::v2::PrimitiveTransformation& primitive_transformation() const;
  ::google::privacy::dlp::v2::PrimitiveTransformation* release_primitive_transformation();
  ::google::privacy::dlp::v2::PrimitiveTransformation* mutable_primitive_transformation();
  void set_allocated_primitive_transformation(::google::privacy::dlp::v2::PrimitiveTransformation* primitive_transformation);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoType > info_types_;
  ::google::privacy::dlp::v2::PrimitiveTransformation* primitive_transformation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoTypeTransformations : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InfoTypeTransformations) */ {
 public:
  InfoTypeTransformations();
  virtual ~InfoTypeTransformations();

  InfoTypeTransformations(const InfoTypeTransformations& from);

  inline InfoTypeTransformations& operator=(const InfoTypeTransformations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoTypeTransformations(InfoTypeTransformations&& from) noexcept
    : InfoTypeTransformations() {
    *this = ::std::move(from);
  }

  inline InfoTypeTransformations& operator=(InfoTypeTransformations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoTypeTransformations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoTypeTransformations* internal_default_instance() {
    return reinterpret_cast<const InfoTypeTransformations*>(
               &_InfoTypeTransformations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(InfoTypeTransformations* other);
  friend void swap(InfoTypeTransformations& a, InfoTypeTransformations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoTypeTransformations* New() const final {
    return CreateMaybeMessage<InfoTypeTransformations>(NULL);
  }

  InfoTypeTransformations* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoTypeTransformations>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoTypeTransformations& from);
  void MergeFrom(const InfoTypeTransformations& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoTypeTransformations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InfoTypeTransformations_InfoTypeTransformation InfoTypeTransformation;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation transformations = 1;
  int transformations_size() const;
  void clear_transformations();
  static const int kTransformationsFieldNumber = 1;
  ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation* mutable_transformations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation >*
      mutable_transformations();
  const ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation& transformations(int index) const;
  ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation* add_transformations();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation >&
      transformations() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InfoTypeTransformations)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation > transformations_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FieldTransformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.FieldTransformation) */ {
 public:
  FieldTransformation();
  virtual ~FieldTransformation();

  FieldTransformation(const FieldTransformation& from);

  inline FieldTransformation& operator=(const FieldTransformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FieldTransformation(FieldTransformation&& from) noexcept
    : FieldTransformation() {
    *this = ::std::move(from);
  }

  inline FieldTransformation& operator=(FieldTransformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldTransformation& default_instance();

  enum TransformationCase {
    kPrimitiveTransformation = 4,
    kInfoTypeTransformations = 5,
    TRANSFORMATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldTransformation* internal_default_instance() {
    return reinterpret_cast<const FieldTransformation*>(
               &_FieldTransformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  void Swap(FieldTransformation* other);
  friend void swap(FieldTransformation& a, FieldTransformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldTransformation* New() const final {
    return CreateMaybeMessage<FieldTransformation>(NULL);
  }

  FieldTransformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FieldTransformation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FieldTransformation& from);
  void MergeFrom(const FieldTransformation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldTransformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.FieldId fields = 1;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 1;
  ::google::privacy::dlp::v2::FieldId* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >*
      mutable_fields();
  const ::google::privacy::dlp::v2::FieldId& fields(int index) const;
  ::google::privacy::dlp::v2::FieldId* add_fields();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >&
      fields() const;

  // .google.privacy.dlp.v2.RecordCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::RecordCondition& _internal_condition() const;
  public:
  const ::google::privacy::dlp::v2::RecordCondition& condition() const;
  ::google::privacy::dlp::v2::RecordCondition* release_condition();
  ::google::privacy::dlp::v2::RecordCondition* mutable_condition();
  void set_allocated_condition(::google::privacy::dlp::v2::RecordCondition* condition);

  // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 4;
  bool has_primitive_transformation() const;
  void clear_primitive_transformation();
  static const int kPrimitiveTransformationFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::PrimitiveTransformation& _internal_primitive_transformation() const;
  public:
  const ::google::privacy::dlp::v2::PrimitiveTransformation& primitive_transformation() const;
  ::google::privacy::dlp::v2::PrimitiveTransformation* release_primitive_transformation();
  ::google::privacy::dlp::v2::PrimitiveTransformation* mutable_primitive_transformation();
  void set_allocated_primitive_transformation(::google::privacy::dlp::v2::PrimitiveTransformation* primitive_transformation);

  // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 5;
  bool has_info_type_transformations() const;
  void clear_info_type_transformations();
  static const int kInfoTypeTransformationsFieldNumber = 5;
  private:
  const ::google::privacy::dlp::v2::InfoTypeTransformations& _internal_info_type_transformations() const;
  public:
  const ::google::privacy::dlp::v2::InfoTypeTransformations& info_type_transformations() const;
  ::google::privacy::dlp::v2::InfoTypeTransformations* release_info_type_transformations();
  ::google::privacy::dlp::v2::InfoTypeTransformations* mutable_info_type_transformations();
  void set_allocated_info_type_transformations(::google::privacy::dlp::v2::InfoTypeTransformations* info_type_transformations);

  void clear_transformation();
  TransformationCase transformation_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.FieldTransformation)
 private:
  void set_has_primitive_transformation();
  void set_has_info_type_transformations();

  inline bool has_transformation() const;
  inline void clear_has_transformation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId > fields_;
  ::google::privacy::dlp::v2::RecordCondition* condition_;
  union TransformationUnion {
    TransformationUnion() {}
    ::google::privacy::dlp::v2::PrimitiveTransformation* primitive_transformation_;
    ::google::privacy::dlp::v2::InfoTypeTransformations* info_type_transformations_;
  } transformation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordTransformations : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RecordTransformations) */ {
 public:
  RecordTransformations();
  virtual ~RecordTransformations();

  RecordTransformations(const RecordTransformations& from);

  inline RecordTransformations& operator=(const RecordTransformations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordTransformations(RecordTransformations&& from) noexcept
    : RecordTransformations() {
    *this = ::std::move(from);
  }

  inline RecordTransformations& operator=(RecordTransformations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordTransformations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordTransformations* internal_default_instance() {
    return reinterpret_cast<const RecordTransformations*>(
               &_RecordTransformations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  void Swap(RecordTransformations* other);
  friend void swap(RecordTransformations& a, RecordTransformations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordTransformations* New() const final {
    return CreateMaybeMessage<RecordTransformations>(NULL);
  }

  RecordTransformations* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordTransformations>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordTransformations& from);
  void MergeFrom(const RecordTransformations& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordTransformations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 1;
  int field_transformations_size() const;
  void clear_field_transformations();
  static const int kFieldTransformationsFieldNumber = 1;
  ::google::privacy::dlp::v2::FieldTransformation* mutable_field_transformations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldTransformation >*
      mutable_field_transformations();
  const ::google::privacy::dlp::v2::FieldTransformation& field_transformations(int index) const;
  ::google::privacy::dlp::v2::FieldTransformation* add_field_transformations();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldTransformation >&
      field_transformations() const;

  // repeated .google.privacy.dlp.v2.RecordSuppression record_suppressions = 2;
  int record_suppressions_size() const;
  void clear_record_suppressions();
  static const int kRecordSuppressionsFieldNumber = 2;
  ::google::privacy::dlp::v2::RecordSuppression* mutable_record_suppressions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RecordSuppression >*
      mutable_record_suppressions();
  const ::google::privacy::dlp::v2::RecordSuppression& record_suppressions(int index) const;
  ::google::privacy::dlp::v2::RecordSuppression* add_record_suppressions();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RecordSuppression >&
      record_suppressions() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RecordTransformations)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldTransformation > field_transformations_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RecordSuppression > record_suppressions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordSuppression : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RecordSuppression) */ {
 public:
  RecordSuppression();
  virtual ~RecordSuppression();

  RecordSuppression(const RecordSuppression& from);

  inline RecordSuppression& operator=(const RecordSuppression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordSuppression(RecordSuppression&& from) noexcept
    : RecordSuppression() {
    *this = ::std::move(from);
  }

  inline RecordSuppression& operator=(RecordSuppression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordSuppression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordSuppression* internal_default_instance() {
    return reinterpret_cast<const RecordSuppression*>(
               &_RecordSuppression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  void Swap(RecordSuppression* other);
  friend void swap(RecordSuppression& a, RecordSuppression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordSuppression* New() const final {
    return CreateMaybeMessage<RecordSuppression>(NULL);
  }

  RecordSuppression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordSuppression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordSuppression& from);
  void MergeFrom(const RecordSuppression& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordSuppression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.RecordCondition condition = 1;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::RecordCondition& _internal_condition() const;
  public:
  const ::google::privacy::dlp::v2::RecordCondition& condition() const;
  ::google::privacy::dlp::v2::RecordCondition* release_condition();
  ::google::privacy::dlp::v2::RecordCondition* mutable_condition();
  void set_allocated_condition(::google::privacy::dlp::v2::RecordCondition* condition);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RecordSuppression)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::RecordCondition* condition_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordCondition_Condition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RecordCondition.Condition) */ {
 public:
  RecordCondition_Condition();
  virtual ~RecordCondition_Condition();

  RecordCondition_Condition(const RecordCondition_Condition& from);

  inline RecordCondition_Condition& operator=(const RecordCondition_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordCondition_Condition(RecordCondition_Condition&& from) noexcept
    : RecordCondition_Condition() {
    *this = ::std::move(from);
  }

  inline RecordCondition_Condition& operator=(RecordCondition_Condition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordCondition_Condition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordCondition_Condition* internal_default_instance() {
    return reinterpret_cast<const RecordCondition_Condition*>(
               &_RecordCondition_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  void Swap(RecordCondition_Condition* other);
  friend void swap(RecordCondition_Condition& a, RecordCondition_Condition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordCondition_Condition* New() const final {
    return CreateMaybeMessage<RecordCondition_Condition>(NULL);
  }

  RecordCondition_Condition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordCondition_Condition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordCondition_Condition& from);
  void MergeFrom(const RecordCondition_Condition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordCondition_Condition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.FieldId field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_field() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& field() const;
  ::google::privacy::dlp::v2::FieldId* release_field();
  ::google::privacy::dlp::v2::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2::FieldId* field);

  // .google.privacy.dlp.v2.Value value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::Value& _internal_value() const;
  public:
  const ::google::privacy::dlp::v2::Value& value() const;
  ::google::privacy::dlp::v2::Value* release_value();
  ::google::privacy::dlp::v2::Value* mutable_value();
  void set_allocated_value(::google::privacy::dlp::v2::Value* value);

  // .google.privacy.dlp.v2.RelationalOperator operator = 3;
  void clear_operator_();
  static const int kOperatorFieldNumber = 3;
  ::google::privacy::dlp::v2::RelationalOperator operator_() const;
  void set_operator_(::google::privacy::dlp::v2::RelationalOperator value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RecordCondition.Condition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::FieldId* field_;
  ::google::privacy::dlp::v2::Value* value_;
  int operator__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordCondition_Conditions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RecordCondition.Conditions) */ {
 public:
  RecordCondition_Conditions();
  virtual ~RecordCondition_Conditions();

  RecordCondition_Conditions(const RecordCondition_Conditions& from);

  inline RecordCondition_Conditions& operator=(const RecordCondition_Conditions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordCondition_Conditions(RecordCondition_Conditions&& from) noexcept
    : RecordCondition_Conditions() {
    *this = ::std::move(from);
  }

  inline RecordCondition_Conditions& operator=(RecordCondition_Conditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordCondition_Conditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordCondition_Conditions* internal_default_instance() {
    return reinterpret_cast<const RecordCondition_Conditions*>(
               &_RecordCondition_Conditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  void Swap(RecordCondition_Conditions* other);
  friend void swap(RecordCondition_Conditions& a, RecordCondition_Conditions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordCondition_Conditions* New() const final {
    return CreateMaybeMessage<RecordCondition_Conditions>(NULL);
  }

  RecordCondition_Conditions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordCondition_Conditions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordCondition_Conditions& from);
  void MergeFrom(const RecordCondition_Conditions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordCondition_Conditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.RecordCondition.Condition conditions = 1;
  int conditions_size() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 1;
  ::google::privacy::dlp::v2::RecordCondition_Condition* mutable_conditions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RecordCondition_Condition >*
      mutable_conditions();
  const ::google::privacy::dlp::v2::RecordCondition_Condition& conditions(int index) const;
  ::google::privacy::dlp::v2::RecordCondition_Condition* add_conditions();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RecordCondition_Condition >&
      conditions() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RecordCondition.Conditions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RecordCondition_Condition > conditions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordCondition_Expressions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RecordCondition.Expressions) */ {
 public:
  RecordCondition_Expressions();
  virtual ~RecordCondition_Expressions();

  RecordCondition_Expressions(const RecordCondition_Expressions& from);

  inline RecordCondition_Expressions& operator=(const RecordCondition_Expressions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordCondition_Expressions(RecordCondition_Expressions&& from) noexcept
    : RecordCondition_Expressions() {
    *this = ::std::move(from);
  }

  inline RecordCondition_Expressions& operator=(RecordCondition_Expressions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordCondition_Expressions& default_instance();

  enum TypeCase {
    kConditions = 3,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordCondition_Expressions* internal_default_instance() {
    return reinterpret_cast<const RecordCondition_Expressions*>(
               &_RecordCondition_Expressions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  void Swap(RecordCondition_Expressions* other);
  friend void swap(RecordCondition_Expressions& a, RecordCondition_Expressions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordCondition_Expressions* New() const final {
    return CreateMaybeMessage<RecordCondition_Expressions>(NULL);
  }

  RecordCondition_Expressions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordCondition_Expressions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordCondition_Expressions& from);
  void MergeFrom(const RecordCondition_Expressions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordCondition_Expressions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecordCondition_Expressions_LogicalOperator LogicalOperator;
  static const LogicalOperator LOGICAL_OPERATOR_UNSPECIFIED =
    RecordCondition_Expressions_LogicalOperator_LOGICAL_OPERATOR_UNSPECIFIED;
  static const LogicalOperator AND =
    RecordCondition_Expressions_LogicalOperator_AND;
  static inline bool LogicalOperator_IsValid(int value) {
    return RecordCondition_Expressions_LogicalOperator_IsValid(value);
  }
  static const LogicalOperator LogicalOperator_MIN =
    RecordCondition_Expressions_LogicalOperator_LogicalOperator_MIN;
  static const LogicalOperator LogicalOperator_MAX =
    RecordCondition_Expressions_LogicalOperator_LogicalOperator_MAX;
  static const int LogicalOperator_ARRAYSIZE =
    RecordCondition_Expressions_LogicalOperator_LogicalOperator_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LogicalOperator_descriptor() {
    return RecordCondition_Expressions_LogicalOperator_descriptor();
  }
  static inline const ::std::string& LogicalOperator_Name(LogicalOperator value) {
    return RecordCondition_Expressions_LogicalOperator_Name(value);
  }
  static inline bool LogicalOperator_Parse(const ::std::string& name,
      LogicalOperator* value) {
    return RecordCondition_Expressions_LogicalOperator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
  void clear_logical_operator();
  static const int kLogicalOperatorFieldNumber = 1;
  ::google::privacy::dlp::v2::RecordCondition_Expressions_LogicalOperator logical_operator() const;
  void set_logical_operator(::google::privacy::dlp::v2::RecordCondition_Expressions_LogicalOperator value);

  // .google.privacy.dlp.v2.RecordCondition.Conditions conditions = 3;
  bool has_conditions() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::RecordCondition_Conditions& _internal_conditions() const;
  public:
  const ::google::privacy::dlp::v2::RecordCondition_Conditions& conditions() const;
  ::google::privacy::dlp::v2::RecordCondition_Conditions* release_conditions();
  ::google::privacy::dlp::v2::RecordCondition_Conditions* mutable_conditions();
  void set_allocated_conditions(::google::privacy::dlp::v2::RecordCondition_Conditions* conditions);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RecordCondition.Expressions)
 private:
  void set_has_conditions();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int logical_operator_;
  union TypeUnion {
    TypeUnion() {}
    ::google::privacy::dlp::v2::RecordCondition_Conditions* conditions_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.RecordCondition) */ {
 public:
  RecordCondition();
  virtual ~RecordCondition();

  RecordCondition(const RecordCondition& from);

  inline RecordCondition& operator=(const RecordCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordCondition(RecordCondition&& from) noexcept
    : RecordCondition() {
    *this = ::std::move(from);
  }

  inline RecordCondition& operator=(RecordCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordCondition* internal_default_instance() {
    return reinterpret_cast<const RecordCondition*>(
               &_RecordCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  void Swap(RecordCondition* other);
  friend void swap(RecordCondition& a, RecordCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordCondition* New() const final {
    return CreateMaybeMessage<RecordCondition>(NULL);
  }

  RecordCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordCondition& from);
  void MergeFrom(const RecordCondition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RecordCondition_Condition Condition;
  typedef RecordCondition_Conditions Conditions;
  typedef RecordCondition_Expressions Expressions;

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.RecordCondition.Expressions expressions = 3;
  bool has_expressions() const;
  void clear_expressions();
  static const int kExpressionsFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::RecordCondition_Expressions& _internal_expressions() const;
  public:
  const ::google::privacy::dlp::v2::RecordCondition_Expressions& expressions() const;
  ::google::privacy::dlp::v2::RecordCondition_Expressions* release_expressions();
  ::google::privacy::dlp::v2::RecordCondition_Expressions* mutable_expressions();
  void set_allocated_expressions(::google::privacy::dlp::v2::RecordCondition_Expressions* expressions);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.RecordCondition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::RecordCondition_Expressions* expressions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransformationOverview : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.TransformationOverview) */ {
 public:
  TransformationOverview();
  virtual ~TransformationOverview();

  TransformationOverview(const TransformationOverview& from);

  inline TransformationOverview& operator=(const TransformationOverview& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransformationOverview(TransformationOverview&& from) noexcept
    : TransformationOverview() {
    *this = ::std::move(from);
  }

  inline TransformationOverview& operator=(TransformationOverview&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationOverview& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformationOverview* internal_default_instance() {
    return reinterpret_cast<const TransformationOverview*>(
               &_TransformationOverview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  void Swap(TransformationOverview* other);
  friend void swap(TransformationOverview& a, TransformationOverview& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformationOverview* New() const final {
    return CreateMaybeMessage<TransformationOverview>(NULL);
  }

  TransformationOverview* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransformationOverview>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransformationOverview& from);
  void MergeFrom(const TransformationOverview& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformationOverview* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.TransformationSummary transformation_summaries = 3;
  int transformation_summaries_size() const;
  void clear_transformation_summaries();
  static const int kTransformationSummariesFieldNumber = 3;
  ::google::privacy::dlp::v2::TransformationSummary* mutable_transformation_summaries(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::TransformationSummary >*
      mutable_transformation_summaries();
  const ::google::privacy::dlp::v2::TransformationSummary& transformation_summaries(int index) const;
  ::google::privacy::dlp::v2::TransformationSummary* add_transformation_summaries();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::TransformationSummary >&
      transformation_summaries() const;

  // int64 transformed_bytes = 2;
  void clear_transformed_bytes();
  static const int kTransformedBytesFieldNumber = 2;
  ::google::protobuf::int64 transformed_bytes() const;
  void set_transformed_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.TransformationOverview)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::TransformationSummary > transformation_summaries_;
  ::google::protobuf::int64 transformed_bytes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransformationSummary_SummaryResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.TransformationSummary.SummaryResult) */ {
 public:
  TransformationSummary_SummaryResult();
  virtual ~TransformationSummary_SummaryResult();

  TransformationSummary_SummaryResult(const TransformationSummary_SummaryResult& from);

  inline TransformationSummary_SummaryResult& operator=(const TransformationSummary_SummaryResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransformationSummary_SummaryResult(TransformationSummary_SummaryResult&& from) noexcept
    : TransformationSummary_SummaryResult() {
    *this = ::std::move(from);
  }

  inline TransformationSummary_SummaryResult& operator=(TransformationSummary_SummaryResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationSummary_SummaryResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformationSummary_SummaryResult* internal_default_instance() {
    return reinterpret_cast<const TransformationSummary_SummaryResult*>(
               &_TransformationSummary_SummaryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  void Swap(TransformationSummary_SummaryResult* other);
  friend void swap(TransformationSummary_SummaryResult& a, TransformationSummary_SummaryResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformationSummary_SummaryResult* New() const final {
    return CreateMaybeMessage<TransformationSummary_SummaryResult>(NULL);
  }

  TransformationSummary_SummaryResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransformationSummary_SummaryResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransformationSummary_SummaryResult& from);
  void MergeFrom(const TransformationSummary_SummaryResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformationSummary_SummaryResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string details = 3;
  void clear_details();
  static const int kDetailsFieldNumber = 3;
  const ::std::string& details() const;
  void set_details(const ::std::string& value);
  #if LANG_CXX11
  void set_details(::std::string&& value);
  #endif
  void set_details(const char* value);
  void set_details(const char* value, size_t size);
  ::std::string* mutable_details();
  ::std::string* release_details();
  void set_allocated_details(::std::string* details);

  // int64 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // .google.privacy.dlp.v2.TransformationSummary.TransformationResultCode code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::privacy::dlp::v2::TransformationSummary_TransformationResultCode code() const;
  void set_code(::google::privacy::dlp::v2::TransformationSummary_TransformationResultCode value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr details_;
  ::google::protobuf::int64 count_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransformationSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.TransformationSummary) */ {
 public:
  TransformationSummary();
  virtual ~TransformationSummary();

  TransformationSummary(const TransformationSummary& from);

  inline TransformationSummary& operator=(const TransformationSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransformationSummary(TransformationSummary&& from) noexcept
    : TransformationSummary() {
    *this = ::std::move(from);
  }

  inline TransformationSummary& operator=(TransformationSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformationSummary* internal_default_instance() {
    return reinterpret_cast<const TransformationSummary*>(
               &_TransformationSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  void Swap(TransformationSummary* other);
  friend void swap(TransformationSummary& a, TransformationSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformationSummary* New() const final {
    return CreateMaybeMessage<TransformationSummary>(NULL);
  }

  TransformationSummary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransformationSummary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransformationSummary& from);
  void MergeFrom(const TransformationSummary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformationSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransformationSummary_SummaryResult SummaryResult;

  typedef TransformationSummary_TransformationResultCode TransformationResultCode;
  static const TransformationResultCode TRANSFORMATION_RESULT_CODE_UNSPECIFIED =
    TransformationSummary_TransformationResultCode_TRANSFORMATION_RESULT_CODE_UNSPECIFIED;
  static const TransformationResultCode SUCCESS =
    TransformationSummary_TransformationResultCode_SUCCESS;
  static const TransformationResultCode ERROR =
    TransformationSummary_TransformationResultCode_ERROR;
  static inline bool TransformationResultCode_IsValid(int value) {
    return TransformationSummary_TransformationResultCode_IsValid(value);
  }
  static const TransformationResultCode TransformationResultCode_MIN =
    TransformationSummary_TransformationResultCode_TransformationResultCode_MIN;
  static const TransformationResultCode TransformationResultCode_MAX =
    TransformationSummary_TransformationResultCode_TransformationResultCode_MAX;
  static const int TransformationResultCode_ARRAYSIZE =
    TransformationSummary_TransformationResultCode_TransformationResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransformationResultCode_descriptor() {
    return TransformationSummary_TransformationResultCode_descriptor();
  }
  static inline const ::std::string& TransformationResultCode_Name(TransformationResultCode value) {
    return TransformationSummary_TransformationResultCode_Name(value);
  }
  static inline bool TransformationResultCode_Parse(const ::std::string& name,
      TransformationResultCode* value) {
    return TransformationSummary_TransformationResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.TransformationSummary.SummaryResult results = 4;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 4;
  ::google::privacy::dlp::v2::TransformationSummary_SummaryResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::TransformationSummary_SummaryResult >*
      mutable_results();
  const ::google::privacy::dlp::v2::TransformationSummary_SummaryResult& results(int index) const;
  ::google::privacy::dlp::v2::TransformationSummary_SummaryResult* add_results();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::TransformationSummary_SummaryResult >&
      results() const;

  // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 5;
  int field_transformations_size() const;
  void clear_field_transformations();
  static const int kFieldTransformationsFieldNumber = 5;
  ::google::privacy::dlp::v2::FieldTransformation* mutable_field_transformations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldTransformation >*
      mutable_field_transformations();
  const ::google::privacy::dlp::v2::FieldTransformation& field_transformations(int index) const;
  ::google::privacy::dlp::v2::FieldTransformation* add_field_transformations();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldTransformation >&
      field_transformations() const;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::InfoType& _internal_info_type() const;
  public:
  const ::google::privacy::dlp::v2::InfoType& info_type() const;
  ::google::privacy::dlp::v2::InfoType* release_info_type();
  ::google::privacy::dlp::v2::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type);

  // .google.privacy.dlp.v2.FieldId field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::FieldId& _internal_field() const;
  public:
  const ::google::privacy::dlp::v2::FieldId& field() const;
  ::google::privacy::dlp::v2::FieldId* release_field();
  ::google::privacy::dlp::v2::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2::FieldId* field);

  // .google.privacy.dlp.v2.PrimitiveTransformation transformation = 3;
  bool has_transformation() const;
  void clear_transformation();
  static const int kTransformationFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::PrimitiveTransformation& _internal_transformation() const;
  public:
  const ::google::privacy::dlp::v2::PrimitiveTransformation& transformation() const;
  ::google::privacy::dlp::v2::PrimitiveTransformation* release_transformation();
  ::google::privacy::dlp::v2::PrimitiveTransformation* mutable_transformation();
  void set_allocated_transformation(::google::privacy::dlp::v2::PrimitiveTransformation* transformation);

  // .google.privacy.dlp.v2.RecordSuppression record_suppress = 6;
  bool has_record_suppress() const;
  void clear_record_suppress();
  static const int kRecordSuppressFieldNumber = 6;
  private:
  const ::google::privacy::dlp::v2::RecordSuppression& _internal_record_suppress() const;
  public:
  const ::google::privacy::dlp::v2::RecordSuppression& record_suppress() const;
  ::google::privacy::dlp::v2::RecordSuppression* release_record_suppress();
  ::google::privacy::dlp::v2::RecordSuppression* mutable_record_suppress();
  void set_allocated_record_suppress(::google::privacy::dlp::v2::RecordSuppression* record_suppress);

  // int64 transformed_bytes = 7;
  void clear_transformed_bytes();
  static const int kTransformedBytesFieldNumber = 7;
  ::google::protobuf::int64 transformed_bytes() const;
  void set_transformed_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.TransformationSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::TransformationSummary_SummaryResult > results_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldTransformation > field_transformations_;
  ::google::privacy::dlp::v2::InfoType* info_type_;
  ::google::privacy::dlp::v2::FieldId* field_;
  ::google::privacy::dlp::v2::PrimitiveTransformation* transformation_;
  ::google::privacy::dlp::v2::RecordSuppression* record_suppress_;
  ::google::protobuf::int64 transformed_bytes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Schedule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Schedule) */ {
 public:
  Schedule();
  virtual ~Schedule();

  Schedule(const Schedule& from);

  inline Schedule& operator=(const Schedule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Schedule(Schedule&& from) noexcept
    : Schedule() {
    *this = ::std::move(from);
  }

  inline Schedule& operator=(Schedule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Schedule& default_instance();

  enum OptionCase {
    kRecurrencePeriodDuration = 1,
    OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Schedule* internal_default_instance() {
    return reinterpret_cast<const Schedule*>(
               &_Schedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  void Swap(Schedule* other);
  friend void swap(Schedule& a, Schedule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Schedule* New() const final {
    return CreateMaybeMessage<Schedule>(NULL);
  }

  Schedule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Schedule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Schedule& from);
  void MergeFrom(const Schedule& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Schedule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration recurrence_period_duration = 1;
  bool has_recurrence_period_duration() const;
  void clear_recurrence_period_duration();
  static const int kRecurrencePeriodDurationFieldNumber = 1;
  private:
  const ::google::protobuf::Duration& _internal_recurrence_period_duration() const;
  public:
  const ::google::protobuf::Duration& recurrence_period_duration() const;
  ::google::protobuf::Duration* release_recurrence_period_duration();
  ::google::protobuf::Duration* mutable_recurrence_period_duration();
  void set_allocated_recurrence_period_duration(::google::protobuf::Duration* recurrence_period_duration);

  void clear_option();
  OptionCase option_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Schedule)
 private:
  void set_has_recurrence_period_duration();

  inline bool has_option() const;
  inline void clear_has_option();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OptionUnion {
    OptionUnion() {}
    ::google::protobuf::Duration* recurrence_period_duration_;
  } option_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectTemplate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InspectTemplate) */ {
 public:
  InspectTemplate();
  virtual ~InspectTemplate();

  InspectTemplate(const InspectTemplate& from);

  inline InspectTemplate& operator=(const InspectTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectTemplate(InspectTemplate&& from) noexcept
    : InspectTemplate() {
    *this = ::std::move(from);
  }

  inline InspectTemplate& operator=(InspectTemplate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectTemplate* internal_default_instance() {
    return reinterpret_cast<const InspectTemplate*>(
               &_InspectTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  void Swap(InspectTemplate* other);
  friend void swap(InspectTemplate& a, InspectTemplate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectTemplate* New() const final {
    return CreateMaybeMessage<InspectTemplate>(NULL);
  }

  InspectTemplate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InspectTemplate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InspectTemplate& from);
  void MergeFrom(const InspectTemplate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectTemplate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .google.protobuf.Timestamp create_time = 4;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 5;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 6;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 6;
  private:
  const ::google::privacy::dlp::v2::InspectConfig& _internal_inspect_config() const;
  public:
  const ::google::privacy::dlp::v2::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2::InspectConfig* release_inspect_config();
  ::google::privacy::dlp::v2::InspectConfig* mutable_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InspectTemplate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::privacy::dlp::v2::InspectConfig* inspect_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeidentifyTemplate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DeidentifyTemplate) */ {
 public:
  DeidentifyTemplate();
  virtual ~DeidentifyTemplate();

  DeidentifyTemplate(const DeidentifyTemplate& from);

  inline DeidentifyTemplate& operator=(const DeidentifyTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeidentifyTemplate(DeidentifyTemplate&& from) noexcept
    : DeidentifyTemplate() {
    *this = ::std::move(from);
  }

  inline DeidentifyTemplate& operator=(DeidentifyTemplate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeidentifyTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeidentifyTemplate* internal_default_instance() {
    return reinterpret_cast<const DeidentifyTemplate*>(
               &_DeidentifyTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  void Swap(DeidentifyTemplate* other);
  friend void swap(DeidentifyTemplate& a, DeidentifyTemplate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeidentifyTemplate* New() const final {
    return CreateMaybeMessage<DeidentifyTemplate>(NULL);
  }

  DeidentifyTemplate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeidentifyTemplate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeidentifyTemplate& from);
  void MergeFrom(const DeidentifyTemplate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeidentifyTemplate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .google.protobuf.Timestamp create_time = 4;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 5;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 6;
  bool has_deidentify_config() const;
  void clear_deidentify_config();
  static const int kDeidentifyConfigFieldNumber = 6;
  private:
  const ::google::privacy::dlp::v2::DeidentifyConfig& _internal_deidentify_config() const;
  public:
  const ::google::privacy::dlp::v2::DeidentifyConfig& deidentify_config() const;
  ::google::privacy::dlp::v2::DeidentifyConfig* release_deidentify_config();
  ::google::privacy::dlp::v2::DeidentifyConfig* mutable_deidentify_config();
  void set_allocated_deidentify_config(::google::privacy::dlp::v2::DeidentifyConfig* deidentify_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DeidentifyTemplate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::privacy::dlp::v2::DeidentifyConfig* deidentify_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(NULL);
  }

  Error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Timestamp timestamps = 2;
  int timestamps_size() const;
  void clear_timestamps();
  static const int kTimestampsFieldNumber = 2;
  ::google::protobuf::Timestamp* mutable_timestamps(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
      mutable_timestamps();
  const ::google::protobuf::Timestamp& timestamps(int index) const;
  ::google::protobuf::Timestamp* add_timestamps();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
      timestamps() const;

  // .google.rpc.Status details = 1;
  bool has_details() const;
  void clear_details();
  static const int kDetailsFieldNumber = 1;
  private:
  const ::google::rpc::Status& _internal_details() const;
  public:
  const ::google::rpc::Status& details() const;
  ::google::rpc::Status* release_details();
  ::google::rpc::Status* mutable_details();
  void set_allocated_details(::google::rpc::Status* details);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp > timestamps_;
  ::google::rpc::Status* details_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JobTrigger_Trigger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.JobTrigger.Trigger) */ {
 public:
  JobTrigger_Trigger();
  virtual ~JobTrigger_Trigger();

  JobTrigger_Trigger(const JobTrigger_Trigger& from);

  inline JobTrigger_Trigger& operator=(const JobTrigger_Trigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobTrigger_Trigger(JobTrigger_Trigger&& from) noexcept
    : JobTrigger_Trigger() {
    *this = ::std::move(from);
  }

  inline JobTrigger_Trigger& operator=(JobTrigger_Trigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobTrigger_Trigger& default_instance();

  enum TriggerCase {
    kSchedule = 1,
    TRIGGER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobTrigger_Trigger* internal_default_instance() {
    return reinterpret_cast<const JobTrigger_Trigger*>(
               &_JobTrigger_Trigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  void Swap(JobTrigger_Trigger* other);
  friend void swap(JobTrigger_Trigger& a, JobTrigger_Trigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobTrigger_Trigger* New() const final {
    return CreateMaybeMessage<JobTrigger_Trigger>(NULL);
  }

  JobTrigger_Trigger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JobTrigger_Trigger>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JobTrigger_Trigger& from);
  void MergeFrom(const JobTrigger_Trigger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobTrigger_Trigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.Schedule schedule = 1;
  bool has_schedule() const;
  void clear_schedule();
  static const int kScheduleFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::Schedule& _internal_schedule() const;
  public:
  const ::google::privacy::dlp::v2::Schedule& schedule() const;
  ::google::privacy::dlp::v2::Schedule* release_schedule();
  ::google::privacy::dlp::v2::Schedule* mutable_schedule();
  void set_allocated_schedule(::google::privacy::dlp::v2::Schedule* schedule);

  void clear_trigger();
  TriggerCase trigger_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.JobTrigger.Trigger)
 private:
  void set_has_schedule();

  inline bool has_trigger() const;
  inline void clear_has_trigger();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TriggerUnion {
    TriggerUnion() {}
    ::google::privacy::dlp::v2::Schedule* schedule_;
  } trigger_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JobTrigger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.JobTrigger) */ {
 public:
  JobTrigger();
  virtual ~JobTrigger();

  JobTrigger(const JobTrigger& from);

  inline JobTrigger& operator=(const JobTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobTrigger(JobTrigger&& from) noexcept
    : JobTrigger() {
    *this = ::std::move(from);
  }

  inline JobTrigger& operator=(JobTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobTrigger& default_instance();

  enum JobCase {
    kInspectJob = 4,
    JOB_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobTrigger* internal_default_instance() {
    return reinterpret_cast<const JobTrigger*>(
               &_JobTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  void Swap(JobTrigger* other);
  friend void swap(JobTrigger& a, JobTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobTrigger* New() const final {
    return CreateMaybeMessage<JobTrigger>(NULL);
  }

  JobTrigger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JobTrigger>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JobTrigger& from);
  void MergeFrom(const JobTrigger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef JobTrigger_Trigger Trigger;

  typedef JobTrigger_Status Status;
  static const Status STATUS_UNSPECIFIED =
    JobTrigger_Status_STATUS_UNSPECIFIED;
  static const Status HEALTHY =
    JobTrigger_Status_HEALTHY;
  static const Status PAUSED =
    JobTrigger_Status_PAUSED;
  static const Status CANCELLED =
    JobTrigger_Status_CANCELLED;
  static inline bool Status_IsValid(int value) {
    return JobTrigger_Status_IsValid(value);
  }
  static const Status Status_MIN =
    JobTrigger_Status_Status_MIN;
  static const Status Status_MAX =
    JobTrigger_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    JobTrigger_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return JobTrigger_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return JobTrigger_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return JobTrigger_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.JobTrigger.Trigger triggers = 5;
  int triggers_size() const;
  void clear_triggers();
  static const int kTriggersFieldNumber = 5;
  ::google::privacy::dlp::v2::JobTrigger_Trigger* mutable_triggers(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::JobTrigger_Trigger >*
      mutable_triggers();
  const ::google::privacy::dlp::v2::JobTrigger_Trigger& triggers(int index) const;
  ::google::privacy::dlp::v2::JobTrigger_Trigger* add_triggers();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::JobTrigger_Trigger >&
      triggers() const;

  // repeated .google.privacy.dlp.v2.Error errors = 6;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 6;
  ::google::privacy::dlp::v2::Error* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >*
      mutable_errors();
  const ::google::privacy::dlp::v2::Error& errors(int index) const;
  ::google::privacy::dlp::v2::Error* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >&
      errors() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .google.protobuf.Timestamp create_time = 7;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 8;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.protobuf.Timestamp last_run_time = 9;
  bool has_last_run_time() const;
  void clear_last_run_time();
  static const int kLastRunTimeFieldNumber = 9;
  private:
  const ::google::protobuf::Timestamp& _internal_last_run_time() const;
  public:
  const ::google::protobuf::Timestamp& last_run_time() const;
  ::google::protobuf::Timestamp* release_last_run_time();
  ::google::protobuf::Timestamp* mutable_last_run_time();
  void set_allocated_last_run_time(::google::protobuf::Timestamp* last_run_time);

  // .google.privacy.dlp.v2.JobTrigger.Status status = 10;
  void clear_status();
  static const int kStatusFieldNumber = 10;
  ::google::privacy::dlp::v2::JobTrigger_Status status() const;
  void set_status(::google::privacy::dlp::v2::JobTrigger_Status value);

  // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 4;
  bool has_inspect_job() const;
  void clear_inspect_job();
  static const int kInspectJobFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::InspectJobConfig& _internal_inspect_job() const;
  public:
  const ::google::privacy::dlp::v2::InspectJobConfig& inspect_job() const;
  ::google::privacy::dlp::v2::InspectJobConfig* release_inspect_job();
  ::google::privacy::dlp::v2::InspectJobConfig* mutable_inspect_job();
  void set_allocated_inspect_job(::google::privacy::dlp::v2::InspectJobConfig* inspect_job);

  void clear_job();
  JobCase job_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.JobTrigger)
 private:
  void set_has_inspect_job();

  inline bool has_job() const;
  inline void clear_has_job();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::JobTrigger_Trigger > triggers_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error > errors_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::protobuf::Timestamp* last_run_time_;
  int status_;
  union JobUnion {
    JobUnion() {}
    ::google::privacy::dlp::v2::InspectJobConfig* inspect_job_;
  } job_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Action_SaveFindings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Action.SaveFindings) */ {
 public:
  Action_SaveFindings();
  virtual ~Action_SaveFindings();

  Action_SaveFindings(const Action_SaveFindings& from);

  inline Action_SaveFindings& operator=(const Action_SaveFindings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action_SaveFindings(Action_SaveFindings&& from) noexcept
    : Action_SaveFindings() {
    *this = ::std::move(from);
  }

  inline Action_SaveFindings& operator=(Action_SaveFindings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Action_SaveFindings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action_SaveFindings* internal_default_instance() {
    return reinterpret_cast<const Action_SaveFindings*>(
               &_Action_SaveFindings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  void Swap(Action_SaveFindings* other);
  friend void swap(Action_SaveFindings& a, Action_SaveFindings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action_SaveFindings* New() const final {
    return CreateMaybeMessage<Action_SaveFindings>(NULL);
  }

  Action_SaveFindings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Action_SaveFindings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Action_SaveFindings& from);
  void MergeFrom(const Action_SaveFindings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action_SaveFindings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.OutputStorageConfig output_config = 1;
  bool has_output_config() const;
  void clear_output_config();
  static const int kOutputConfigFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::OutputStorageConfig& _internal_output_config() const;
  public:
  const ::google::privacy::dlp::v2::OutputStorageConfig& output_config() const;
  ::google::privacy::dlp::v2::OutputStorageConfig* release_output_config();
  ::google::privacy::dlp::v2::OutputStorageConfig* mutable_output_config();
  void set_allocated_output_config(::google::privacy::dlp::v2::OutputStorageConfig* output_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Action.SaveFindings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::OutputStorageConfig* output_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Action_PublishToPubSub : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Action.PublishToPubSub) */ {
 public:
  Action_PublishToPubSub();
  virtual ~Action_PublishToPubSub();

  Action_PublishToPubSub(const Action_PublishToPubSub& from);

  inline Action_PublishToPubSub& operator=(const Action_PublishToPubSub& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action_PublishToPubSub(Action_PublishToPubSub&& from) noexcept
    : Action_PublishToPubSub() {
    *this = ::std::move(from);
  }

  inline Action_PublishToPubSub& operator=(Action_PublishToPubSub&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Action_PublishToPubSub& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action_PublishToPubSub* internal_default_instance() {
    return reinterpret_cast<const Action_PublishToPubSub*>(
               &_Action_PublishToPubSub_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  void Swap(Action_PublishToPubSub* other);
  friend void swap(Action_PublishToPubSub& a, Action_PublishToPubSub& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action_PublishToPubSub* New() const final {
    return CreateMaybeMessage<Action_PublishToPubSub>(NULL);
  }

  Action_PublishToPubSub* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Action_PublishToPubSub>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Action_PublishToPubSub& from);
  void MergeFrom(const Action_PublishToPubSub& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action_PublishToPubSub* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Action.PublishToPubSub)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Action_PublishSummaryToCscc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Action.PublishSummaryToCscc) */ {
 public:
  Action_PublishSummaryToCscc();
  virtual ~Action_PublishSummaryToCscc();

  Action_PublishSummaryToCscc(const Action_PublishSummaryToCscc& from);

  inline Action_PublishSummaryToCscc& operator=(const Action_PublishSummaryToCscc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action_PublishSummaryToCscc(Action_PublishSummaryToCscc&& from) noexcept
    : Action_PublishSummaryToCscc() {
    *this = ::std::move(from);
  }

  inline Action_PublishSummaryToCscc& operator=(Action_PublishSummaryToCscc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Action_PublishSummaryToCscc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action_PublishSummaryToCscc* internal_default_instance() {
    return reinterpret_cast<const Action_PublishSummaryToCscc*>(
               &_Action_PublishSummaryToCscc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  void Swap(Action_PublishSummaryToCscc* other);
  friend void swap(Action_PublishSummaryToCscc& a, Action_PublishSummaryToCscc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action_PublishSummaryToCscc* New() const final {
    return CreateMaybeMessage<Action_PublishSummaryToCscc>(NULL);
  }

  Action_PublishSummaryToCscc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Action_PublishSummaryToCscc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Action_PublishSummaryToCscc& from);
  void MergeFrom(const Action_PublishSummaryToCscc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action_PublishSummaryToCscc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  enum ActionCase {
    kSaveFindings = 1,
    kPubSub = 2,
    kPublishSummaryToCscc = 3,
    ACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  void Swap(Action* other);
  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(NULL);
  }

  Action* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Action_SaveFindings SaveFindings;
  typedef Action_PublishToPubSub PublishToPubSub;
  typedef Action_PublishSummaryToCscc PublishSummaryToCscc;

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.Action.SaveFindings save_findings = 1;
  bool has_save_findings() const;
  void clear_save_findings();
  static const int kSaveFindingsFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::Action_SaveFindings& _internal_save_findings() const;
  public:
  const ::google::privacy::dlp::v2::Action_SaveFindings& save_findings() const;
  ::google::privacy::dlp::v2::Action_SaveFindings* release_save_findings();
  ::google::privacy::dlp::v2::Action_SaveFindings* mutable_save_findings();
  void set_allocated_save_findings(::google::privacy::dlp::v2::Action_SaveFindings* save_findings);

  // .google.privacy.dlp.v2.Action.PublishToPubSub pub_sub = 2;
  bool has_pub_sub() const;
  void clear_pub_sub();
  static const int kPubSubFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::Action_PublishToPubSub& _internal_pub_sub() const;
  public:
  const ::google::privacy::dlp::v2::Action_PublishToPubSub& pub_sub() const;
  ::google::privacy::dlp::v2::Action_PublishToPubSub* release_pub_sub();
  ::google::privacy::dlp::v2::Action_PublishToPubSub* mutable_pub_sub();
  void set_allocated_pub_sub(::google::privacy::dlp::v2::Action_PublishToPubSub* pub_sub);

  // .google.privacy.dlp.v2.Action.PublishSummaryToCscc publish_summary_to_cscc = 3;
  bool has_publish_summary_to_cscc() const;
  void clear_publish_summary_to_cscc();
  static const int kPublishSummaryToCsccFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::Action_PublishSummaryToCscc& _internal_publish_summary_to_cscc() const;
  public:
  const ::google::privacy::dlp::v2::Action_PublishSummaryToCscc& publish_summary_to_cscc() const;
  ::google::privacy::dlp::v2::Action_PublishSummaryToCscc* release_publish_summary_to_cscc();
  ::google::privacy::dlp::v2::Action_PublishSummaryToCscc* mutable_publish_summary_to_cscc();
  void set_allocated_publish_summary_to_cscc(::google::privacy::dlp::v2::Action_PublishSummaryToCscc* publish_summary_to_cscc);

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.Action)
 private:
  void set_has_save_findings();
  void set_has_pub_sub();
  void set_has_publish_summary_to_cscc();

  inline bool has_action() const;
  inline void clear_has_action();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ActionUnion {
    ActionUnion() {}
    ::google::privacy::dlp::v2::Action_SaveFindings* save_findings_;
    ::google::privacy::dlp::v2::Action_PublishToPubSub* pub_sub_;
    ::google::privacy::dlp::v2::Action_PublishSummaryToCscc* publish_summary_to_cscc_;
  } action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateInspectTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.CreateInspectTemplateRequest) */ {
 public:
  CreateInspectTemplateRequest();
  virtual ~CreateInspectTemplateRequest();

  CreateInspectTemplateRequest(const CreateInspectTemplateRequest& from);

  inline CreateInspectTemplateRequest& operator=(const CreateInspectTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateInspectTemplateRequest(CreateInspectTemplateRequest&& from) noexcept
    : CreateInspectTemplateRequest() {
    *this = ::std::move(from);
  }

  inline CreateInspectTemplateRequest& operator=(CreateInspectTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateInspectTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateInspectTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInspectTemplateRequest*>(
               &_CreateInspectTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  void Swap(CreateInspectTemplateRequest* other);
  friend void swap(CreateInspectTemplateRequest& a, CreateInspectTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateInspectTemplateRequest* New() const final {
    return CreateMaybeMessage<CreateInspectTemplateRequest>(NULL);
  }

  CreateInspectTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateInspectTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateInspectTemplateRequest& from);
  void MergeFrom(const CreateInspectTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInspectTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string template_id = 3;
  void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  const ::std::string& template_id() const;
  void set_template_id(const ::std::string& value);
  #if LANG_CXX11
  void set_template_id(::std::string&& value);
  #endif
  void set_template_id(const char* value);
  void set_template_id(const char* value, size_t size);
  ::std::string* mutable_template_id();
  ::std::string* release_template_id();
  void set_allocated_template_id(::std::string* template_id);

  // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2;
  bool has_inspect_template() const;
  void clear_inspect_template();
  static const int kInspectTemplateFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::InspectTemplate& _internal_inspect_template() const;
  public:
  const ::google::privacy::dlp::v2::InspectTemplate& inspect_template() const;
  ::google::privacy::dlp::v2::InspectTemplate* release_inspect_template();
  ::google::privacy::dlp::v2::InspectTemplate* mutable_inspect_template();
  void set_allocated_inspect_template(::google::privacy::dlp::v2::InspectTemplate* inspect_template);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.CreateInspectTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr template_id_;
  ::google::privacy::dlp::v2::InspectTemplate* inspect_template_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateInspectTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.UpdateInspectTemplateRequest) */ {
 public:
  UpdateInspectTemplateRequest();
  virtual ~UpdateInspectTemplateRequest();

  UpdateInspectTemplateRequest(const UpdateInspectTemplateRequest& from);

  inline UpdateInspectTemplateRequest& operator=(const UpdateInspectTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateInspectTemplateRequest(UpdateInspectTemplateRequest&& from) noexcept
    : UpdateInspectTemplateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateInspectTemplateRequest& operator=(UpdateInspectTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateInspectTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateInspectTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateInspectTemplateRequest*>(
               &_UpdateInspectTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  void Swap(UpdateInspectTemplateRequest* other);
  friend void swap(UpdateInspectTemplateRequest& a, UpdateInspectTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateInspectTemplateRequest* New() const final {
    return CreateMaybeMessage<UpdateInspectTemplateRequest>(NULL);
  }

  UpdateInspectTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateInspectTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateInspectTemplateRequest& from);
  void MergeFrom(const UpdateInspectTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateInspectTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2;
  bool has_inspect_template() const;
  void clear_inspect_template();
  static const int kInspectTemplateFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::InspectTemplate& _internal_inspect_template() const;
  public:
  const ::google::privacy::dlp::v2::InspectTemplate& inspect_template() const;
  ::google::privacy::dlp::v2::InspectTemplate* release_inspect_template();
  ::google::privacy::dlp::v2::InspectTemplate* mutable_inspect_template();
  void set_allocated_inspect_template(::google::privacy::dlp::v2::InspectTemplate* inspect_template);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::privacy::dlp::v2::InspectTemplate* inspect_template_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInspectTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.GetInspectTemplateRequest) */ {
 public:
  GetInspectTemplateRequest();
  virtual ~GetInspectTemplateRequest();

  GetInspectTemplateRequest(const GetInspectTemplateRequest& from);

  inline GetInspectTemplateRequest& operator=(const GetInspectTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInspectTemplateRequest(GetInspectTemplateRequest&& from) noexcept
    : GetInspectTemplateRequest() {
    *this = ::std::move(from);
  }

  inline GetInspectTemplateRequest& operator=(GetInspectTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInspectTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInspectTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const GetInspectTemplateRequest*>(
               &_GetInspectTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  void Swap(GetInspectTemplateRequest* other);
  friend void swap(GetInspectTemplateRequest& a, GetInspectTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInspectTemplateRequest* New() const final {
    return CreateMaybeMessage<GetInspectTemplateRequest>(NULL);
  }

  GetInspectTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetInspectTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetInspectTemplateRequest& from);
  void MergeFrom(const GetInspectTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInspectTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.GetInspectTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListInspectTemplatesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListInspectTemplatesRequest) */ {
 public:
  ListInspectTemplatesRequest();
  virtual ~ListInspectTemplatesRequest();

  ListInspectTemplatesRequest(const ListInspectTemplatesRequest& from);

  inline ListInspectTemplatesRequest& operator=(const ListInspectTemplatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListInspectTemplatesRequest(ListInspectTemplatesRequest&& from) noexcept
    : ListInspectTemplatesRequest() {
    *this = ::std::move(from);
  }

  inline ListInspectTemplatesRequest& operator=(ListInspectTemplatesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInspectTemplatesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInspectTemplatesRequest* internal_default_instance() {
    return reinterpret_cast<const ListInspectTemplatesRequest*>(
               &_ListInspectTemplatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  void Swap(ListInspectTemplatesRequest* other);
  friend void swap(ListInspectTemplatesRequest& a, ListInspectTemplatesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListInspectTemplatesRequest* New() const final {
    return CreateMaybeMessage<ListInspectTemplatesRequest>(NULL);
  }

  ListInspectTemplatesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListInspectTemplatesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListInspectTemplatesRequest& from);
  void MergeFrom(const ListInspectTemplatesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInspectTemplatesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListInspectTemplatesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListInspectTemplatesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListInspectTemplatesResponse) */ {
 public:
  ListInspectTemplatesResponse();
  virtual ~ListInspectTemplatesResponse();

  ListInspectTemplatesResponse(const ListInspectTemplatesResponse& from);

  inline ListInspectTemplatesResponse& operator=(const ListInspectTemplatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListInspectTemplatesResponse(ListInspectTemplatesResponse&& from) noexcept
    : ListInspectTemplatesResponse() {
    *this = ::std::move(from);
  }

  inline ListInspectTemplatesResponse& operator=(ListInspectTemplatesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInspectTemplatesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInspectTemplatesResponse* internal_default_instance() {
    return reinterpret_cast<const ListInspectTemplatesResponse*>(
               &_ListInspectTemplatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  void Swap(ListInspectTemplatesResponse* other);
  friend void swap(ListInspectTemplatesResponse& a, ListInspectTemplatesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListInspectTemplatesResponse* New() const final {
    return CreateMaybeMessage<ListInspectTemplatesResponse>(NULL);
  }

  ListInspectTemplatesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListInspectTemplatesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListInspectTemplatesResponse& from);
  void MergeFrom(const ListInspectTemplatesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInspectTemplatesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.InspectTemplate inspect_templates = 1;
  int inspect_templates_size() const;
  void clear_inspect_templates();
  static const int kInspectTemplatesFieldNumber = 1;
  ::google::privacy::dlp::v2::InspectTemplate* mutable_inspect_templates(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InspectTemplate >*
      mutable_inspect_templates();
  const ::google::privacy::dlp::v2::InspectTemplate& inspect_templates(int index) const;
  ::google::privacy::dlp::v2::InspectTemplate* add_inspect_templates();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InspectTemplate >&
      inspect_templates() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListInspectTemplatesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InspectTemplate > inspect_templates_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteInspectTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DeleteInspectTemplateRequest) */ {
 public:
  DeleteInspectTemplateRequest();
  virtual ~DeleteInspectTemplateRequest();

  DeleteInspectTemplateRequest(const DeleteInspectTemplateRequest& from);

  inline DeleteInspectTemplateRequest& operator=(const DeleteInspectTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteInspectTemplateRequest(DeleteInspectTemplateRequest&& from) noexcept
    : DeleteInspectTemplateRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInspectTemplateRequest& operator=(DeleteInspectTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteInspectTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteInspectTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInspectTemplateRequest*>(
               &_DeleteInspectTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  void Swap(DeleteInspectTemplateRequest* other);
  friend void swap(DeleteInspectTemplateRequest& a, DeleteInspectTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteInspectTemplateRequest* New() const final {
    return CreateMaybeMessage<DeleteInspectTemplateRequest>(NULL);
  }

  DeleteInspectTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteInspectTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteInspectTemplateRequest& from);
  void MergeFrom(const DeleteInspectTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInspectTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateJobTriggerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.CreateJobTriggerRequest) */ {
 public:
  CreateJobTriggerRequest();
  virtual ~CreateJobTriggerRequest();

  CreateJobTriggerRequest(const CreateJobTriggerRequest& from);

  inline CreateJobTriggerRequest& operator=(const CreateJobTriggerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateJobTriggerRequest(CreateJobTriggerRequest&& from) noexcept
    : CreateJobTriggerRequest() {
    *this = ::std::move(from);
  }

  inline CreateJobTriggerRequest& operator=(CreateJobTriggerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateJobTriggerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateJobTriggerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateJobTriggerRequest*>(
               &_CreateJobTriggerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  void Swap(CreateJobTriggerRequest* other);
  friend void swap(CreateJobTriggerRequest& a, CreateJobTriggerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateJobTriggerRequest* New() const final {
    return CreateMaybeMessage<CreateJobTriggerRequest>(NULL);
  }

  CreateJobTriggerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateJobTriggerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateJobTriggerRequest& from);
  void MergeFrom(const CreateJobTriggerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateJobTriggerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string trigger_id = 3;
  void clear_trigger_id();
  static const int kTriggerIdFieldNumber = 3;
  const ::std::string& trigger_id() const;
  void set_trigger_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_id(::std::string&& value);
  #endif
  void set_trigger_id(const char* value);
  void set_trigger_id(const char* value, size_t size);
  ::std::string* mutable_trigger_id();
  ::std::string* release_trigger_id();
  void set_allocated_trigger_id(::std::string* trigger_id);

  // .google.privacy.dlp.v2.JobTrigger job_trigger = 2;
  bool has_job_trigger() const;
  void clear_job_trigger();
  static const int kJobTriggerFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::JobTrigger& _internal_job_trigger() const;
  public:
  const ::google::privacy::dlp::v2::JobTrigger& job_trigger() const;
  ::google::privacy::dlp::v2::JobTrigger* release_job_trigger();
  ::google::privacy::dlp::v2::JobTrigger* mutable_job_trigger();
  void set_allocated_job_trigger(::google::privacy::dlp::v2::JobTrigger* job_trigger);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.CreateJobTriggerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr trigger_id_;
  ::google::privacy::dlp::v2::JobTrigger* job_trigger_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateJobTriggerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.UpdateJobTriggerRequest) */ {
 public:
  UpdateJobTriggerRequest();
  virtual ~UpdateJobTriggerRequest();

  UpdateJobTriggerRequest(const UpdateJobTriggerRequest& from);

  inline UpdateJobTriggerRequest& operator=(const UpdateJobTriggerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateJobTriggerRequest(UpdateJobTriggerRequest&& from) noexcept
    : UpdateJobTriggerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateJobTriggerRequest& operator=(UpdateJobTriggerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateJobTriggerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateJobTriggerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateJobTriggerRequest*>(
               &_UpdateJobTriggerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  void Swap(UpdateJobTriggerRequest* other);
  friend void swap(UpdateJobTriggerRequest& a, UpdateJobTriggerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateJobTriggerRequest* New() const final {
    return CreateMaybeMessage<UpdateJobTriggerRequest>(NULL);
  }

  UpdateJobTriggerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateJobTriggerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateJobTriggerRequest& from);
  void MergeFrom(const UpdateJobTriggerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateJobTriggerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.privacy.dlp.v2.JobTrigger job_trigger = 2;
  bool has_job_trigger() const;
  void clear_job_trigger();
  static const int kJobTriggerFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::JobTrigger& _internal_job_trigger() const;
  public:
  const ::google::privacy::dlp::v2::JobTrigger& job_trigger() const;
  ::google::privacy::dlp::v2::JobTrigger* release_job_trigger();
  ::google::privacy::dlp::v2::JobTrigger* mutable_job_trigger();
  void set_allocated_job_trigger(::google::privacy::dlp::v2::JobTrigger* job_trigger);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.UpdateJobTriggerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::privacy::dlp::v2::JobTrigger* job_trigger_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetJobTriggerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.GetJobTriggerRequest) */ {
 public:
  GetJobTriggerRequest();
  virtual ~GetJobTriggerRequest();

  GetJobTriggerRequest(const GetJobTriggerRequest& from);

  inline GetJobTriggerRequest& operator=(const GetJobTriggerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetJobTriggerRequest(GetJobTriggerRequest&& from) noexcept
    : GetJobTriggerRequest() {
    *this = ::std::move(from);
  }

  inline GetJobTriggerRequest& operator=(GetJobTriggerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetJobTriggerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJobTriggerRequest* internal_default_instance() {
    return reinterpret_cast<const GetJobTriggerRequest*>(
               &_GetJobTriggerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  void Swap(GetJobTriggerRequest* other);
  friend void swap(GetJobTriggerRequest& a, GetJobTriggerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetJobTriggerRequest* New() const final {
    return CreateMaybeMessage<GetJobTriggerRequest>(NULL);
  }

  GetJobTriggerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetJobTriggerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetJobTriggerRequest& from);
  void MergeFrom(const GetJobTriggerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobTriggerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.GetJobTriggerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateDlpJobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.CreateDlpJobRequest) */ {
 public:
  CreateDlpJobRequest();
  virtual ~CreateDlpJobRequest();

  CreateDlpJobRequest(const CreateDlpJobRequest& from);

  inline CreateDlpJobRequest& operator=(const CreateDlpJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDlpJobRequest(CreateDlpJobRequest&& from) noexcept
    : CreateDlpJobRequest() {
    *this = ::std::move(from);
  }

  inline CreateDlpJobRequest& operator=(CreateDlpJobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateDlpJobRequest& default_instance();

  enum JobCase {
    kInspectJob = 2,
    kRiskJob = 3,
    JOB_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDlpJobRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDlpJobRequest*>(
               &_CreateDlpJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  void Swap(CreateDlpJobRequest* other);
  friend void swap(CreateDlpJobRequest& a, CreateDlpJobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDlpJobRequest* New() const final {
    return CreateMaybeMessage<CreateDlpJobRequest>(NULL);
  }

  CreateDlpJobRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateDlpJobRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateDlpJobRequest& from);
  void MergeFrom(const CreateDlpJobRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDlpJobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string job_id = 4;
  void clear_job_id();
  static const int kJobIdFieldNumber = 4;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  #if LANG_CXX11
  void set_job_id(::std::string&& value);
  #endif
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 2;
  bool has_inspect_job() const;
  void clear_inspect_job();
  static const int kInspectJobFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::InspectJobConfig& _internal_inspect_job() const;
  public:
  const ::google::privacy::dlp::v2::InspectJobConfig& inspect_job() const;
  ::google::privacy::dlp::v2::InspectJobConfig* release_inspect_job();
  ::google::privacy::dlp::v2::InspectJobConfig* mutable_inspect_job();
  void set_allocated_inspect_job(::google::privacy::dlp::v2::InspectJobConfig* inspect_job);

  // .google.privacy.dlp.v2.RiskAnalysisJobConfig risk_job = 3;
  bool has_risk_job() const;
  void clear_risk_job();
  static const int kRiskJobFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::RiskAnalysisJobConfig& _internal_risk_job() const;
  public:
  const ::google::privacy::dlp::v2::RiskAnalysisJobConfig& risk_job() const;
  ::google::privacy::dlp::v2::RiskAnalysisJobConfig* release_risk_job();
  ::google::privacy::dlp::v2::RiskAnalysisJobConfig* mutable_risk_job();
  void set_allocated_risk_job(::google::privacy::dlp::v2::RiskAnalysisJobConfig* risk_job);

  void clear_job();
  JobCase job_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.CreateDlpJobRequest)
 private:
  void set_has_inspect_job();
  void set_has_risk_job();

  inline bool has_job() const;
  inline void clear_has_job();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  union JobUnion {
    JobUnion() {}
    ::google::privacy::dlp::v2::InspectJobConfig* inspect_job_;
    ::google::privacy::dlp::v2::RiskAnalysisJobConfig* risk_job_;
  } job_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListJobTriggersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListJobTriggersRequest) */ {
 public:
  ListJobTriggersRequest();
  virtual ~ListJobTriggersRequest();

  ListJobTriggersRequest(const ListJobTriggersRequest& from);

  inline ListJobTriggersRequest& operator=(const ListJobTriggersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListJobTriggersRequest(ListJobTriggersRequest&& from) noexcept
    : ListJobTriggersRequest() {
    *this = ::std::move(from);
  }

  inline ListJobTriggersRequest& operator=(ListJobTriggersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListJobTriggersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListJobTriggersRequest* internal_default_instance() {
    return reinterpret_cast<const ListJobTriggersRequest*>(
               &_ListJobTriggersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  void Swap(ListJobTriggersRequest* other);
  friend void swap(ListJobTriggersRequest& a, ListJobTriggersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListJobTriggersRequest* New() const final {
    return CreateMaybeMessage<ListJobTriggersRequest>(NULL);
  }

  ListJobTriggersRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListJobTriggersRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListJobTriggersRequest& from);
  void MergeFrom(const ListJobTriggersRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListJobTriggersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string order_by = 4;
  void clear_order_by();
  static const int kOrderByFieldNumber = 4;
  const ::std::string& order_by() const;
  void set_order_by(const ::std::string& value);
  #if LANG_CXX11
  void set_order_by(::std::string&& value);
  #endif
  void set_order_by(const char* value);
  void set_order_by(const char* value, size_t size);
  ::std::string* mutable_order_by();
  ::std::string* release_order_by();
  void set_allocated_order_by(::std::string* order_by);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListJobTriggersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr order_by_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListJobTriggersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListJobTriggersResponse) */ {
 public:
  ListJobTriggersResponse();
  virtual ~ListJobTriggersResponse();

  ListJobTriggersResponse(const ListJobTriggersResponse& from);

  inline ListJobTriggersResponse& operator=(const ListJobTriggersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListJobTriggersResponse(ListJobTriggersResponse&& from) noexcept
    : ListJobTriggersResponse() {
    *this = ::std::move(from);
  }

  inline ListJobTriggersResponse& operator=(ListJobTriggersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListJobTriggersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListJobTriggersResponse* internal_default_instance() {
    return reinterpret_cast<const ListJobTriggersResponse*>(
               &_ListJobTriggersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  void Swap(ListJobTriggersResponse* other);
  friend void swap(ListJobTriggersResponse& a, ListJobTriggersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListJobTriggersResponse* New() const final {
    return CreateMaybeMessage<ListJobTriggersResponse>(NULL);
  }

  ListJobTriggersResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListJobTriggersResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListJobTriggersResponse& from);
  void MergeFrom(const ListJobTriggersResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListJobTriggersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.JobTrigger job_triggers = 1;
  int job_triggers_size() const;
  void clear_job_triggers();
  static const int kJobTriggersFieldNumber = 1;
  ::google::privacy::dlp::v2::JobTrigger* mutable_job_triggers(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::JobTrigger >*
      mutable_job_triggers();
  const ::google::privacy::dlp::v2::JobTrigger& job_triggers(int index) const;
  ::google::privacy::dlp::v2::JobTrigger* add_job_triggers();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::JobTrigger >&
      job_triggers() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListJobTriggersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::JobTrigger > job_triggers_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteJobTriggerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DeleteJobTriggerRequest) */ {
 public:
  DeleteJobTriggerRequest();
  virtual ~DeleteJobTriggerRequest();

  DeleteJobTriggerRequest(const DeleteJobTriggerRequest& from);

  inline DeleteJobTriggerRequest& operator=(const DeleteJobTriggerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteJobTriggerRequest(DeleteJobTriggerRequest&& from) noexcept
    : DeleteJobTriggerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteJobTriggerRequest& operator=(DeleteJobTriggerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteJobTriggerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteJobTriggerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteJobTriggerRequest*>(
               &_DeleteJobTriggerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  void Swap(DeleteJobTriggerRequest* other);
  friend void swap(DeleteJobTriggerRequest& a, DeleteJobTriggerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteJobTriggerRequest* New() const final {
    return CreateMaybeMessage<DeleteJobTriggerRequest>(NULL);
  }

  DeleteJobTriggerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteJobTriggerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteJobTriggerRequest& from);
  void MergeFrom(const DeleteJobTriggerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteJobTriggerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DeleteJobTriggerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectJobConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.InspectJobConfig) */ {
 public:
  InspectJobConfig();
  virtual ~InspectJobConfig();

  InspectJobConfig(const InspectJobConfig& from);

  inline InspectJobConfig& operator=(const InspectJobConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectJobConfig(InspectJobConfig&& from) noexcept
    : InspectJobConfig() {
    *this = ::std::move(from);
  }

  inline InspectJobConfig& operator=(InspectJobConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectJobConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectJobConfig* internal_default_instance() {
    return reinterpret_cast<const InspectJobConfig*>(
               &_InspectJobConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  void Swap(InspectJobConfig* other);
  friend void swap(InspectJobConfig& a, InspectJobConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectJobConfig* New() const final {
    return CreateMaybeMessage<InspectJobConfig>(NULL);
  }

  InspectJobConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InspectJobConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InspectJobConfig& from);
  void MergeFrom(const InspectJobConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectJobConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.Action actions = 4;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 4;
  ::google::privacy::dlp::v2::Action* mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Action >*
      mutable_actions();
  const ::google::privacy::dlp::v2::Action& actions(int index) const;
  ::google::privacy::dlp::v2::Action* add_actions();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Action >&
      actions() const;

  // string inspect_template_name = 3;
  void clear_inspect_template_name();
  static const int kInspectTemplateNameFieldNumber = 3;
  const ::std::string& inspect_template_name() const;
  void set_inspect_template_name(const ::std::string& value);
  #if LANG_CXX11
  void set_inspect_template_name(::std::string&& value);
  #endif
  void set_inspect_template_name(const char* value);
  void set_inspect_template_name(const char* value, size_t size);
  ::std::string* mutable_inspect_template_name();
  ::std::string* release_inspect_template_name();
  void set_allocated_inspect_template_name(::std::string* inspect_template_name);

  // .google.privacy.dlp.v2.StorageConfig storage_config = 1;
  bool has_storage_config() const;
  void clear_storage_config();
  static const int kStorageConfigFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::StorageConfig& _internal_storage_config() const;
  public:
  const ::google::privacy::dlp::v2::StorageConfig& storage_config() const;
  ::google::privacy::dlp::v2::StorageConfig* release_storage_config();
  ::google::privacy::dlp::v2::StorageConfig* mutable_storage_config();
  void set_allocated_storage_config(::google::privacy::dlp::v2::StorageConfig* storage_config);

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::InspectConfig& _internal_inspect_config() const;
  public:
  const ::google::privacy::dlp::v2::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2::InspectConfig* release_inspect_config();
  ::google::privacy::dlp::v2::InspectConfig* mutable_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.InspectJobConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Action > actions_;
  ::google::protobuf::internal::ArenaStringPtr inspect_template_name_;
  ::google::privacy::dlp::v2::StorageConfig* storage_config_;
  ::google::privacy::dlp::v2::InspectConfig* inspect_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DlpJob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DlpJob) */ {
 public:
  DlpJob();
  virtual ~DlpJob();

  DlpJob(const DlpJob& from);

  inline DlpJob& operator=(const DlpJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DlpJob(DlpJob&& from) noexcept
    : DlpJob() {
    *this = ::std::move(from);
  }

  inline DlpJob& operator=(DlpJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DlpJob& default_instance();

  enum DetailsCase {
    kRiskDetails = 4,
    kInspectDetails = 5,
    DETAILS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DlpJob* internal_default_instance() {
    return reinterpret_cast<const DlpJob*>(
               &_DlpJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  void Swap(DlpJob* other);
  friend void swap(DlpJob& a, DlpJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DlpJob* New() const final {
    return CreateMaybeMessage<DlpJob>(NULL);
  }

  DlpJob* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DlpJob>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DlpJob& from);
  void MergeFrom(const DlpJob& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DlpJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DlpJob_JobState JobState;
  static const JobState JOB_STATE_UNSPECIFIED =
    DlpJob_JobState_JOB_STATE_UNSPECIFIED;
  static const JobState PENDING =
    DlpJob_JobState_PENDING;
  static const JobState RUNNING =
    DlpJob_JobState_RUNNING;
  static const JobState DONE =
    DlpJob_JobState_DONE;
  static const JobState CANCELED =
    DlpJob_JobState_CANCELED;
  static const JobState FAILED =
    DlpJob_JobState_FAILED;
  static inline bool JobState_IsValid(int value) {
    return DlpJob_JobState_IsValid(value);
  }
  static const JobState JobState_MIN =
    DlpJob_JobState_JobState_MIN;
  static const JobState JobState_MAX =
    DlpJob_JobState_JobState_MAX;
  static const int JobState_ARRAYSIZE =
    DlpJob_JobState_JobState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  JobState_descriptor() {
    return DlpJob_JobState_descriptor();
  }
  static inline const ::std::string& JobState_Name(JobState value) {
    return DlpJob_JobState_Name(value);
  }
  static inline bool JobState_Parse(const ::std::string& name,
      JobState* value) {
    return DlpJob_JobState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.Error errors = 11;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 11;
  ::google::privacy::dlp::v2::Error* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >*
      mutable_errors();
  const ::google::privacy::dlp::v2::Error& errors(int index) const;
  ::google::privacy::dlp::v2::Error* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >&
      errors() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string job_trigger_name = 10;
  void clear_job_trigger_name();
  static const int kJobTriggerNameFieldNumber = 10;
  const ::std::string& job_trigger_name() const;
  void set_job_trigger_name(const ::std::string& value);
  #if LANG_CXX11
  void set_job_trigger_name(::std::string&& value);
  #endif
  void set_job_trigger_name(const char* value);
  void set_job_trigger_name(const char* value, size_t size);
  ::std::string* mutable_job_trigger_name();
  ::std::string* release_job_trigger_name();
  void set_allocated_job_trigger_name(::std::string* job_trigger_name);

  // .google.protobuf.Timestamp create_time = 6;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp start_time = 7;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  public:
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 8;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_end_time() const;
  public:
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // .google.privacy.dlp.v2.DlpJobType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::privacy::dlp::v2::DlpJobType type() const;
  void set_type(::google::privacy::dlp::v2::DlpJobType value);

  // .google.privacy.dlp.v2.DlpJob.JobState state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::privacy::dlp::v2::DlpJob_JobState state() const;
  void set_state(::google::privacy::dlp::v2::DlpJob_JobState value);

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails risk_details = 4;
  bool has_risk_details() const;
  void clear_risk_details();
  static const int kRiskDetailsFieldNumber = 4;
  private:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails& _internal_risk_details() const;
  public:
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails& risk_details() const;
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails* release_risk_details();
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails* mutable_risk_details();
  void set_allocated_risk_details(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails* risk_details);

  // .google.privacy.dlp.v2.InspectDataSourceDetails inspect_details = 5;
  bool has_inspect_details() const;
  void clear_inspect_details();
  static const int kInspectDetailsFieldNumber = 5;
  private:
  const ::google::privacy::dlp::v2::InspectDataSourceDetails& _internal_inspect_details() const;
  public:
  const ::google::privacy::dlp::v2::InspectDataSourceDetails& inspect_details() const;
  ::google::privacy::dlp::v2::InspectDataSourceDetails* release_inspect_details();
  ::google::privacy::dlp::v2::InspectDataSourceDetails* mutable_inspect_details();
  void set_allocated_inspect_details(::google::privacy::dlp::v2::InspectDataSourceDetails* inspect_details);

  void clear_details();
  DetailsCase details_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DlpJob)
 private:
  void set_has_risk_details();
  void set_has_inspect_details();

  inline bool has_details() const;
  inline void clear_has_details();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error > errors_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr job_trigger_name_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  int type_;
  int state_;
  union DetailsUnion {
    DetailsUnion() {}
    ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails* risk_details_;
    ::google::privacy::dlp::v2::InspectDataSourceDetails* inspect_details_;
  } details_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDlpJobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.GetDlpJobRequest) */ {
 public:
  GetDlpJobRequest();
  virtual ~GetDlpJobRequest();

  GetDlpJobRequest(const GetDlpJobRequest& from);

  inline GetDlpJobRequest& operator=(const GetDlpJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDlpJobRequest(GetDlpJobRequest&& from) noexcept
    : GetDlpJobRequest() {
    *this = ::std::move(from);
  }

  inline GetDlpJobRequest& operator=(GetDlpJobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDlpJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDlpJobRequest* internal_default_instance() {
    return reinterpret_cast<const GetDlpJobRequest*>(
               &_GetDlpJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  void Swap(GetDlpJobRequest* other);
  friend void swap(GetDlpJobRequest& a, GetDlpJobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDlpJobRequest* New() const final {
    return CreateMaybeMessage<GetDlpJobRequest>(NULL);
  }

  GetDlpJobRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDlpJobRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDlpJobRequest& from);
  void MergeFrom(const GetDlpJobRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDlpJobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.GetDlpJobRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDlpJobsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListDlpJobsRequest) */ {
 public:
  ListDlpJobsRequest();
  virtual ~ListDlpJobsRequest();

  ListDlpJobsRequest(const ListDlpJobsRequest& from);

  inline ListDlpJobsRequest& operator=(const ListDlpJobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListDlpJobsRequest(ListDlpJobsRequest&& from) noexcept
    : ListDlpJobsRequest() {
    *this = ::std::move(from);
  }

  inline ListDlpJobsRequest& operator=(ListDlpJobsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDlpJobsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDlpJobsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDlpJobsRequest*>(
               &_ListDlpJobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  void Swap(ListDlpJobsRequest* other);
  friend void swap(ListDlpJobsRequest& a, ListDlpJobsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDlpJobsRequest* New() const final {
    return CreateMaybeMessage<ListDlpJobsRequest>(NULL);
  }

  ListDlpJobsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListDlpJobsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListDlpJobsRequest& from);
  void MergeFrom(const ListDlpJobsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDlpJobsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filter = 1;
  void clear_filter();
  static const int kFilterFieldNumber = 1;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string parent = 4;
  void clear_parent();
  static const int kParentFieldNumber = 4;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // .google.privacy.dlp.v2.DlpJobType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::privacy::dlp::v2::DlpJobType type() const;
  void set_type(::google::privacy::dlp::v2::DlpJobType value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListDlpJobsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::int32 page_size_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDlpJobsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListDlpJobsResponse) */ {
 public:
  ListDlpJobsResponse();
  virtual ~ListDlpJobsResponse();

  ListDlpJobsResponse(const ListDlpJobsResponse& from);

  inline ListDlpJobsResponse& operator=(const ListDlpJobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListDlpJobsResponse(ListDlpJobsResponse&& from) noexcept
    : ListDlpJobsResponse() {
    *this = ::std::move(from);
  }

  inline ListDlpJobsResponse& operator=(ListDlpJobsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDlpJobsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDlpJobsResponse* internal_default_instance() {
    return reinterpret_cast<const ListDlpJobsResponse*>(
               &_ListDlpJobsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  void Swap(ListDlpJobsResponse* other);
  friend void swap(ListDlpJobsResponse& a, ListDlpJobsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDlpJobsResponse* New() const final {
    return CreateMaybeMessage<ListDlpJobsResponse>(NULL);
  }

  ListDlpJobsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListDlpJobsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListDlpJobsResponse& from);
  void MergeFrom(const ListDlpJobsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDlpJobsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.DlpJob jobs = 1;
  int jobs_size() const;
  void clear_jobs();
  static const int kJobsFieldNumber = 1;
  ::google::privacy::dlp::v2::DlpJob* mutable_jobs(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::DlpJob >*
      mutable_jobs();
  const ::google::privacy::dlp::v2::DlpJob& jobs(int index) const;
  ::google::privacy::dlp::v2::DlpJob* add_jobs();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::DlpJob >&
      jobs() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListDlpJobsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::DlpJob > jobs_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CancelDlpJobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.CancelDlpJobRequest) */ {
 public:
  CancelDlpJobRequest();
  virtual ~CancelDlpJobRequest();

  CancelDlpJobRequest(const CancelDlpJobRequest& from);

  inline CancelDlpJobRequest& operator=(const CancelDlpJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelDlpJobRequest(CancelDlpJobRequest&& from) noexcept
    : CancelDlpJobRequest() {
    *this = ::std::move(from);
  }

  inline CancelDlpJobRequest& operator=(CancelDlpJobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelDlpJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelDlpJobRequest* internal_default_instance() {
    return reinterpret_cast<const CancelDlpJobRequest*>(
               &_CancelDlpJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  void Swap(CancelDlpJobRequest* other);
  friend void swap(CancelDlpJobRequest& a, CancelDlpJobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelDlpJobRequest* New() const final {
    return CreateMaybeMessage<CancelDlpJobRequest>(NULL);
  }

  CancelDlpJobRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CancelDlpJobRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CancelDlpJobRequest& from);
  void MergeFrom(const CancelDlpJobRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelDlpJobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.CancelDlpJobRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteDlpJobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DeleteDlpJobRequest) */ {
 public:
  DeleteDlpJobRequest();
  virtual ~DeleteDlpJobRequest();

  DeleteDlpJobRequest(const DeleteDlpJobRequest& from);

  inline DeleteDlpJobRequest& operator=(const DeleteDlpJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteDlpJobRequest(DeleteDlpJobRequest&& from) noexcept
    : DeleteDlpJobRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDlpJobRequest& operator=(DeleteDlpJobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteDlpJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDlpJobRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDlpJobRequest*>(
               &_DeleteDlpJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  void Swap(DeleteDlpJobRequest* other);
  friend void swap(DeleteDlpJobRequest& a, DeleteDlpJobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteDlpJobRequest* New() const final {
    return CreateMaybeMessage<DeleteDlpJobRequest>(NULL);
  }

  DeleteDlpJobRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDlpJobRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteDlpJobRequest& from);
  void MergeFrom(const DeleteDlpJobRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDlpJobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DeleteDlpJobRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateDeidentifyTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest) */ {
 public:
  CreateDeidentifyTemplateRequest();
  virtual ~CreateDeidentifyTemplateRequest();

  CreateDeidentifyTemplateRequest(const CreateDeidentifyTemplateRequest& from);

  inline CreateDeidentifyTemplateRequest& operator=(const CreateDeidentifyTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDeidentifyTemplateRequest(CreateDeidentifyTemplateRequest&& from) noexcept
    : CreateDeidentifyTemplateRequest() {
    *this = ::std::move(from);
  }

  inline CreateDeidentifyTemplateRequest& operator=(CreateDeidentifyTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateDeidentifyTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeidentifyTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDeidentifyTemplateRequest*>(
               &_CreateDeidentifyTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  void Swap(CreateDeidentifyTemplateRequest* other);
  friend void swap(CreateDeidentifyTemplateRequest& a, CreateDeidentifyTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDeidentifyTemplateRequest* New() const final {
    return CreateMaybeMessage<CreateDeidentifyTemplateRequest>(NULL);
  }

  CreateDeidentifyTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeidentifyTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateDeidentifyTemplateRequest& from);
  void MergeFrom(const CreateDeidentifyTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeidentifyTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string template_id = 3;
  void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  const ::std::string& template_id() const;
  void set_template_id(const ::std::string& value);
  #if LANG_CXX11
  void set_template_id(::std::string&& value);
  #endif
  void set_template_id(const char* value);
  void set_template_id(const char* value, size_t size);
  ::std::string* mutable_template_id();
  ::std::string* release_template_id();
  void set_allocated_template_id(::std::string* template_id);

  // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2;
  bool has_deidentify_template() const;
  void clear_deidentify_template();
  static const int kDeidentifyTemplateFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::DeidentifyTemplate& _internal_deidentify_template() const;
  public:
  const ::google::privacy::dlp::v2::DeidentifyTemplate& deidentify_template() const;
  ::google::privacy::dlp::v2::DeidentifyTemplate* release_deidentify_template();
  ::google::privacy::dlp::v2::DeidentifyTemplate* mutable_deidentify_template();
  void set_allocated_deidentify_template(::google::privacy::dlp::v2::DeidentifyTemplate* deidentify_template);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr template_id_;
  ::google::privacy::dlp::v2::DeidentifyTemplate* deidentify_template_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateDeidentifyTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest) */ {
 public:
  UpdateDeidentifyTemplateRequest();
  virtual ~UpdateDeidentifyTemplateRequest();

  UpdateDeidentifyTemplateRequest(const UpdateDeidentifyTemplateRequest& from);

  inline UpdateDeidentifyTemplateRequest& operator=(const UpdateDeidentifyTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateDeidentifyTemplateRequest(UpdateDeidentifyTemplateRequest&& from) noexcept
    : UpdateDeidentifyTemplateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDeidentifyTemplateRequest& operator=(UpdateDeidentifyTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDeidentifyTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDeidentifyTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDeidentifyTemplateRequest*>(
               &_UpdateDeidentifyTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  void Swap(UpdateDeidentifyTemplateRequest* other);
  friend void swap(UpdateDeidentifyTemplateRequest& a, UpdateDeidentifyTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeidentifyTemplateRequest* New() const final {
    return CreateMaybeMessage<UpdateDeidentifyTemplateRequest>(NULL);
  }

  UpdateDeidentifyTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeidentifyTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateDeidentifyTemplateRequest& from);
  void MergeFrom(const UpdateDeidentifyTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeidentifyTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2;
  bool has_deidentify_template() const;
  void clear_deidentify_template();
  static const int kDeidentifyTemplateFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::DeidentifyTemplate& _internal_deidentify_template() const;
  public:
  const ::google::privacy::dlp::v2::DeidentifyTemplate& deidentify_template() const;
  ::google::privacy::dlp::v2::DeidentifyTemplate* release_deidentify_template();
  ::google::privacy::dlp::v2::DeidentifyTemplate* mutable_deidentify_template();
  void set_allocated_deidentify_template(::google::privacy::dlp::v2::DeidentifyTemplate* deidentify_template);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::privacy::dlp::v2::DeidentifyTemplate* deidentify_template_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDeidentifyTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.GetDeidentifyTemplateRequest) */ {
 public:
  GetDeidentifyTemplateRequest();
  virtual ~GetDeidentifyTemplateRequest();

  GetDeidentifyTemplateRequest(const GetDeidentifyTemplateRequest& from);

  inline GetDeidentifyTemplateRequest& operator=(const GetDeidentifyTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDeidentifyTemplateRequest(GetDeidentifyTemplateRequest&& from) noexcept
    : GetDeidentifyTemplateRequest() {
    *this = ::std::move(from);
  }

  inline GetDeidentifyTemplateRequest& operator=(GetDeidentifyTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDeidentifyTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeidentifyTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeidentifyTemplateRequest*>(
               &_GetDeidentifyTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  void Swap(GetDeidentifyTemplateRequest* other);
  friend void swap(GetDeidentifyTemplateRequest& a, GetDeidentifyTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDeidentifyTemplateRequest* New() const final {
    return CreateMaybeMessage<GetDeidentifyTemplateRequest>(NULL);
  }

  GetDeidentifyTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDeidentifyTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDeidentifyTemplateRequest& from);
  void MergeFrom(const GetDeidentifyTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeidentifyTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDeidentifyTemplatesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest) */ {
 public:
  ListDeidentifyTemplatesRequest();
  virtual ~ListDeidentifyTemplatesRequest();

  ListDeidentifyTemplatesRequest(const ListDeidentifyTemplatesRequest& from);

  inline ListDeidentifyTemplatesRequest& operator=(const ListDeidentifyTemplatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListDeidentifyTemplatesRequest(ListDeidentifyTemplatesRequest&& from) noexcept
    : ListDeidentifyTemplatesRequest() {
    *this = ::std::move(from);
  }

  inline ListDeidentifyTemplatesRequest& operator=(ListDeidentifyTemplatesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDeidentifyTemplatesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDeidentifyTemplatesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDeidentifyTemplatesRequest*>(
               &_ListDeidentifyTemplatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  void Swap(ListDeidentifyTemplatesRequest* other);
  friend void swap(ListDeidentifyTemplatesRequest& a, ListDeidentifyTemplatesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDeidentifyTemplatesRequest* New() const final {
    return CreateMaybeMessage<ListDeidentifyTemplatesRequest>(NULL);
  }

  ListDeidentifyTemplatesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListDeidentifyTemplatesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListDeidentifyTemplatesRequest& from);
  void MergeFrom(const ListDeidentifyTemplatesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDeidentifyTemplatesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDeidentifyTemplatesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse) */ {
 public:
  ListDeidentifyTemplatesResponse();
  virtual ~ListDeidentifyTemplatesResponse();

  ListDeidentifyTemplatesResponse(const ListDeidentifyTemplatesResponse& from);

  inline ListDeidentifyTemplatesResponse& operator=(const ListDeidentifyTemplatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListDeidentifyTemplatesResponse(ListDeidentifyTemplatesResponse&& from) noexcept
    : ListDeidentifyTemplatesResponse() {
    *this = ::std::move(from);
  }

  inline ListDeidentifyTemplatesResponse& operator=(ListDeidentifyTemplatesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDeidentifyTemplatesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDeidentifyTemplatesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDeidentifyTemplatesResponse*>(
               &_ListDeidentifyTemplatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  void Swap(ListDeidentifyTemplatesResponse* other);
  friend void swap(ListDeidentifyTemplatesResponse& a, ListDeidentifyTemplatesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDeidentifyTemplatesResponse* New() const final {
    return CreateMaybeMessage<ListDeidentifyTemplatesResponse>(NULL);
  }

  ListDeidentifyTemplatesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListDeidentifyTemplatesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListDeidentifyTemplatesResponse& from);
  void MergeFrom(const ListDeidentifyTemplatesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDeidentifyTemplatesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.DeidentifyTemplate deidentify_templates = 1;
  int deidentify_templates_size() const;
  void clear_deidentify_templates();
  static const int kDeidentifyTemplatesFieldNumber = 1;
  ::google::privacy::dlp::v2::DeidentifyTemplate* mutable_deidentify_templates(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::DeidentifyTemplate >*
      mutable_deidentify_templates();
  const ::google::privacy::dlp::v2::DeidentifyTemplate& deidentify_templates(int index) const;
  ::google::privacy::dlp::v2::DeidentifyTemplate* add_deidentify_templates();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::DeidentifyTemplate >&
      deidentify_templates() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::DeidentifyTemplate > deidentify_templates_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteDeidentifyTemplateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest) */ {
 public:
  DeleteDeidentifyTemplateRequest();
  virtual ~DeleteDeidentifyTemplateRequest();

  DeleteDeidentifyTemplateRequest(const DeleteDeidentifyTemplateRequest& from);

  inline DeleteDeidentifyTemplateRequest& operator=(const DeleteDeidentifyTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteDeidentifyTemplateRequest(DeleteDeidentifyTemplateRequest&& from) noexcept
    : DeleteDeidentifyTemplateRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDeidentifyTemplateRequest& operator=(DeleteDeidentifyTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteDeidentifyTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDeidentifyTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDeidentifyTemplateRequest*>(
               &_DeleteDeidentifyTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  void Swap(DeleteDeidentifyTemplateRequest* other);
  friend void swap(DeleteDeidentifyTemplateRequest& a, DeleteDeidentifyTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteDeidentifyTemplateRequest* New() const final {
    return CreateMaybeMessage<DeleteDeidentifyTemplateRequest>(NULL);
  }

  DeleteDeidentifyTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDeidentifyTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteDeidentifyTemplateRequest& from);
  void MergeFrom(const DeleteDeidentifyTemplateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDeidentifyTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LargeCustomDictionaryConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.LargeCustomDictionaryConfig) */ {
 public:
  LargeCustomDictionaryConfig();
  virtual ~LargeCustomDictionaryConfig();

  LargeCustomDictionaryConfig(const LargeCustomDictionaryConfig& from);

  inline LargeCustomDictionaryConfig& operator=(const LargeCustomDictionaryConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LargeCustomDictionaryConfig(LargeCustomDictionaryConfig&& from) noexcept
    : LargeCustomDictionaryConfig() {
    *this = ::std::move(from);
  }

  inline LargeCustomDictionaryConfig& operator=(LargeCustomDictionaryConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LargeCustomDictionaryConfig& default_instance();

  enum SourceCase {
    kCloudStorageFileSet = 2,
    kBigQueryField = 3,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LargeCustomDictionaryConfig* internal_default_instance() {
    return reinterpret_cast<const LargeCustomDictionaryConfig*>(
               &_LargeCustomDictionaryConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  void Swap(LargeCustomDictionaryConfig* other);
  friend void swap(LargeCustomDictionaryConfig& a, LargeCustomDictionaryConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LargeCustomDictionaryConfig* New() const final {
    return CreateMaybeMessage<LargeCustomDictionaryConfig>(NULL);
  }

  LargeCustomDictionaryConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LargeCustomDictionaryConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LargeCustomDictionaryConfig& from);
  void MergeFrom(const LargeCustomDictionaryConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeCustomDictionaryConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2.CloudStoragePath output_path = 1;
  bool has_output_path() const;
  void clear_output_path();
  static const int kOutputPathFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::CloudStoragePath& _internal_output_path() const;
  public:
  const ::google::privacy::dlp::v2::CloudStoragePath& output_path() const;
  ::google::privacy::dlp::v2::CloudStoragePath* release_output_path();
  ::google::privacy::dlp::v2::CloudStoragePath* mutable_output_path();
  void set_allocated_output_path(::google::privacy::dlp::v2::CloudStoragePath* output_path);

  // .google.privacy.dlp.v2.CloudStorageFileSet cloud_storage_file_set = 2;
  bool has_cloud_storage_file_set() const;
  void clear_cloud_storage_file_set();
  static const int kCloudStorageFileSetFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::CloudStorageFileSet& _internal_cloud_storage_file_set() const;
  public:
  const ::google::privacy::dlp::v2::CloudStorageFileSet& cloud_storage_file_set() const;
  ::google::privacy::dlp::v2::CloudStorageFileSet* release_cloud_storage_file_set();
  ::google::privacy::dlp::v2::CloudStorageFileSet* mutable_cloud_storage_file_set();
  void set_allocated_cloud_storage_file_set(::google::privacy::dlp::v2::CloudStorageFileSet* cloud_storage_file_set);

  // .google.privacy.dlp.v2.BigQueryField big_query_field = 3;
  bool has_big_query_field() const;
  void clear_big_query_field();
  static const int kBigQueryFieldFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::BigQueryField& _internal_big_query_field() const;
  public:
  const ::google::privacy::dlp::v2::BigQueryField& big_query_field() const;
  ::google::privacy::dlp::v2::BigQueryField* release_big_query_field();
  ::google::privacy::dlp::v2::BigQueryField* mutable_big_query_field();
  void set_allocated_big_query_field(::google::privacy::dlp::v2::BigQueryField* big_query_field);

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
 private:
  void set_has_cloud_storage_file_set();
  void set_has_big_query_field();

  inline bool has_source() const;
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2::CloudStoragePath* output_path_;
  union SourceUnion {
    SourceUnion() {}
    ::google::privacy::dlp::v2::CloudStorageFileSet* cloud_storage_file_set_;
    ::google::privacy::dlp::v2::BigQueryField* big_query_field_;
  } source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StoredInfoTypeConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.StoredInfoTypeConfig) */ {
 public:
  StoredInfoTypeConfig();
  virtual ~StoredInfoTypeConfig();

  StoredInfoTypeConfig(const StoredInfoTypeConfig& from);

  inline StoredInfoTypeConfig& operator=(const StoredInfoTypeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoredInfoTypeConfig(StoredInfoTypeConfig&& from) noexcept
    : StoredInfoTypeConfig() {
    *this = ::std::move(from);
  }

  inline StoredInfoTypeConfig& operator=(StoredInfoTypeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoredInfoTypeConfig& default_instance();

  enum TypeCase {
    kLargeCustomDictionary = 3,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredInfoTypeConfig* internal_default_instance() {
    return reinterpret_cast<const StoredInfoTypeConfig*>(
               &_StoredInfoTypeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  void Swap(StoredInfoTypeConfig* other);
  friend void swap(StoredInfoTypeConfig& a, StoredInfoTypeConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoredInfoTypeConfig* New() const final {
    return CreateMaybeMessage<StoredInfoTypeConfig>(NULL);
  }

  StoredInfoTypeConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StoredInfoTypeConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StoredInfoTypeConfig& from);
  void MergeFrom(const StoredInfoTypeConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoredInfoTypeConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string display_name = 1;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 1;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .google.privacy.dlp.v2.LargeCustomDictionaryConfig large_custom_dictionary = 3;
  bool has_large_custom_dictionary() const;
  void clear_large_custom_dictionary();
  static const int kLargeCustomDictionaryFieldNumber = 3;
  private:
  const ::google::privacy::dlp::v2::LargeCustomDictionaryConfig& _internal_large_custom_dictionary() const;
  public:
  const ::google::privacy::dlp::v2::LargeCustomDictionaryConfig& large_custom_dictionary() const;
  ::google::privacy::dlp::v2::LargeCustomDictionaryConfig* release_large_custom_dictionary();
  ::google::privacy::dlp::v2::LargeCustomDictionaryConfig* mutable_large_custom_dictionary();
  void set_allocated_large_custom_dictionary(::google::privacy::dlp::v2::LargeCustomDictionaryConfig* large_custom_dictionary);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.StoredInfoTypeConfig)
 private:
  void set_has_large_custom_dictionary();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  union TypeUnion {
    TypeUnion() {}
    ::google::privacy::dlp::v2::LargeCustomDictionaryConfig* large_custom_dictionary_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StoredInfoTypeVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.StoredInfoTypeVersion) */ {
 public:
  StoredInfoTypeVersion();
  virtual ~StoredInfoTypeVersion();

  StoredInfoTypeVersion(const StoredInfoTypeVersion& from);

  inline StoredInfoTypeVersion& operator=(const StoredInfoTypeVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoredInfoTypeVersion(StoredInfoTypeVersion&& from) noexcept
    : StoredInfoTypeVersion() {
    *this = ::std::move(from);
  }

  inline StoredInfoTypeVersion& operator=(StoredInfoTypeVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoredInfoTypeVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredInfoTypeVersion* internal_default_instance() {
    return reinterpret_cast<const StoredInfoTypeVersion*>(
               &_StoredInfoTypeVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  void Swap(StoredInfoTypeVersion* other);
  friend void swap(StoredInfoTypeVersion& a, StoredInfoTypeVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoredInfoTypeVersion* New() const final {
    return CreateMaybeMessage<StoredInfoTypeVersion>(NULL);
  }

  StoredInfoTypeVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StoredInfoTypeVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StoredInfoTypeVersion& from);
  void MergeFrom(const StoredInfoTypeVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoredInfoTypeVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.Error errors = 4;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 4;
  ::google::privacy::dlp::v2::Error* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >*
      mutable_errors();
  const ::google::privacy::dlp::v2::Error& errors(int index) const;
  ::google::privacy::dlp::v2::Error* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >&
      errors() const;

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  private:
  const ::google::privacy::dlp::v2::StoredInfoTypeConfig& _internal_config() const;
  public:
  const ::google::privacy::dlp::v2::StoredInfoTypeConfig& config() const;
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* release_config();
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* mutable_config();
  void set_allocated_config(::google::privacy::dlp::v2::StoredInfoTypeConfig* config);

  // .google.protobuf.Timestamp create_time = 2;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.privacy.dlp.v2.StoredInfoTypeState state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::privacy::dlp::v2::StoredInfoTypeState state() const;
  void set_state(::google::privacy::dlp::v2::StoredInfoTypeState value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.StoredInfoTypeVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error > errors_;
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* config_;
  ::google::protobuf::Timestamp* create_time_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StoredInfoType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.StoredInfoType) */ {
 public:
  StoredInfoType();
  virtual ~StoredInfoType();

  StoredInfoType(const StoredInfoType& from);

  inline StoredInfoType& operator=(const StoredInfoType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoredInfoType(StoredInfoType&& from) noexcept
    : StoredInfoType() {
    *this = ::std::move(from);
  }

  inline StoredInfoType& operator=(StoredInfoType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoredInfoType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoredInfoType* internal_default_instance() {
    return reinterpret_cast<const StoredInfoType*>(
               &_StoredInfoType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  void Swap(StoredInfoType* other);
  friend void swap(StoredInfoType& a, StoredInfoType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoredInfoType* New() const final {
    return CreateMaybeMessage<StoredInfoType>(NULL);
  }

  StoredInfoType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StoredInfoType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StoredInfoType& from);
  void MergeFrom(const StoredInfoType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoredInfoType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.StoredInfoTypeVersion pending_versions = 3;
  int pending_versions_size() const;
  void clear_pending_versions();
  static const int kPendingVersionsFieldNumber = 3;
  ::google::privacy::dlp::v2::StoredInfoTypeVersion* mutable_pending_versions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StoredInfoTypeVersion >*
      mutable_pending_versions();
  const ::google::privacy::dlp::v2::StoredInfoTypeVersion& pending_versions(int index) const;
  ::google::privacy::dlp::v2::StoredInfoTypeVersion* add_pending_versions();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StoredInfoTypeVersion >&
      pending_versions() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.privacy.dlp.v2.StoredInfoTypeVersion current_version = 2;
  bool has_current_version() const;
  void clear_current_version();
  static const int kCurrentVersionFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::StoredInfoTypeVersion& _internal_current_version() const;
  public:
  const ::google::privacy::dlp::v2::StoredInfoTypeVersion& current_version() const;
  ::google::privacy::dlp::v2::StoredInfoTypeVersion* release_current_version();
  ::google::privacy::dlp::v2::StoredInfoTypeVersion* mutable_current_version();
  void set_allocated_current_version(::google::privacy::dlp::v2::StoredInfoTypeVersion* current_version);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.StoredInfoType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StoredInfoTypeVersion > pending_versions_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::privacy::dlp::v2::StoredInfoTypeVersion* current_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateStoredInfoTypeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.CreateStoredInfoTypeRequest) */ {
 public:
  CreateStoredInfoTypeRequest();
  virtual ~CreateStoredInfoTypeRequest();

  CreateStoredInfoTypeRequest(const CreateStoredInfoTypeRequest& from);

  inline CreateStoredInfoTypeRequest& operator=(const CreateStoredInfoTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateStoredInfoTypeRequest(CreateStoredInfoTypeRequest&& from) noexcept
    : CreateStoredInfoTypeRequest() {
    *this = ::std::move(from);
  }

  inline CreateStoredInfoTypeRequest& operator=(CreateStoredInfoTypeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateStoredInfoTypeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateStoredInfoTypeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateStoredInfoTypeRequest*>(
               &_CreateStoredInfoTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  void Swap(CreateStoredInfoTypeRequest* other);
  friend void swap(CreateStoredInfoTypeRequest& a, CreateStoredInfoTypeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateStoredInfoTypeRequest* New() const final {
    return CreateMaybeMessage<CreateStoredInfoTypeRequest>(NULL);
  }

  CreateStoredInfoTypeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateStoredInfoTypeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateStoredInfoTypeRequest& from);
  void MergeFrom(const CreateStoredInfoTypeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateStoredInfoTypeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string stored_info_type_id = 3;
  void clear_stored_info_type_id();
  static const int kStoredInfoTypeIdFieldNumber = 3;
  const ::std::string& stored_info_type_id() const;
  void set_stored_info_type_id(const ::std::string& value);
  #if LANG_CXX11
  void set_stored_info_type_id(::std::string&& value);
  #endif
  void set_stored_info_type_id(const char* value);
  void set_stored_info_type_id(const char* value, size_t size);
  ::std::string* mutable_stored_info_type_id();
  ::std::string* release_stored_info_type_id();
  void set_allocated_stored_info_type_id(::std::string* stored_info_type_id);

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::StoredInfoTypeConfig& _internal_config() const;
  public:
  const ::google::privacy::dlp::v2::StoredInfoTypeConfig& config() const;
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* release_config();
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* mutable_config();
  void set_allocated_config(::google::privacy::dlp::v2::StoredInfoTypeConfig* config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr stored_info_type_id_;
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateStoredInfoTypeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest) */ {
 public:
  UpdateStoredInfoTypeRequest();
  virtual ~UpdateStoredInfoTypeRequest();

  UpdateStoredInfoTypeRequest(const UpdateStoredInfoTypeRequest& from);

  inline UpdateStoredInfoTypeRequest& operator=(const UpdateStoredInfoTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateStoredInfoTypeRequest(UpdateStoredInfoTypeRequest&& from) noexcept
    : UpdateStoredInfoTypeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateStoredInfoTypeRequest& operator=(UpdateStoredInfoTypeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateStoredInfoTypeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateStoredInfoTypeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStoredInfoTypeRequest*>(
               &_UpdateStoredInfoTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  void Swap(UpdateStoredInfoTypeRequest* other);
  friend void swap(UpdateStoredInfoTypeRequest& a, UpdateStoredInfoTypeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateStoredInfoTypeRequest* New() const final {
    return CreateMaybeMessage<UpdateStoredInfoTypeRequest>(NULL);
  }

  UpdateStoredInfoTypeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateStoredInfoTypeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateStoredInfoTypeRequest& from);
  void MergeFrom(const UpdateStoredInfoTypeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStoredInfoTypeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  private:
  const ::google::privacy::dlp::v2::StoredInfoTypeConfig& _internal_config() const;
  public:
  const ::google::privacy::dlp::v2::StoredInfoTypeConfig& config() const;
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* release_config();
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* mutable_config();
  void set_allocated_config(::google::privacy::dlp::v2::StoredInfoTypeConfig* config);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* config_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStoredInfoTypeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.GetStoredInfoTypeRequest) */ {
 public:
  GetStoredInfoTypeRequest();
  virtual ~GetStoredInfoTypeRequest();

  GetStoredInfoTypeRequest(const GetStoredInfoTypeRequest& from);

  inline GetStoredInfoTypeRequest& operator=(const GetStoredInfoTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetStoredInfoTypeRequest(GetStoredInfoTypeRequest&& from) noexcept
    : GetStoredInfoTypeRequest() {
    *this = ::std::move(from);
  }

  inline GetStoredInfoTypeRequest& operator=(GetStoredInfoTypeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStoredInfoTypeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStoredInfoTypeRequest* internal_default_instance() {
    return reinterpret_cast<const GetStoredInfoTypeRequest*>(
               &_GetStoredInfoTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  void Swap(GetStoredInfoTypeRequest* other);
  friend void swap(GetStoredInfoTypeRequest& a, GetStoredInfoTypeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStoredInfoTypeRequest* New() const final {
    return CreateMaybeMessage<GetStoredInfoTypeRequest>(NULL);
  }

  GetStoredInfoTypeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetStoredInfoTypeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetStoredInfoTypeRequest& from);
  void MergeFrom(const GetStoredInfoTypeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStoredInfoTypeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListStoredInfoTypesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListStoredInfoTypesRequest) */ {
 public:
  ListStoredInfoTypesRequest();
  virtual ~ListStoredInfoTypesRequest();

  ListStoredInfoTypesRequest(const ListStoredInfoTypesRequest& from);

  inline ListStoredInfoTypesRequest& operator=(const ListStoredInfoTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListStoredInfoTypesRequest(ListStoredInfoTypesRequest&& from) noexcept
    : ListStoredInfoTypesRequest() {
    *this = ::std::move(from);
  }

  inline ListStoredInfoTypesRequest& operator=(ListStoredInfoTypesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListStoredInfoTypesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListStoredInfoTypesRequest* internal_default_instance() {
    return reinterpret_cast<const ListStoredInfoTypesRequest*>(
               &_ListStoredInfoTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  void Swap(ListStoredInfoTypesRequest* other);
  friend void swap(ListStoredInfoTypesRequest& a, ListStoredInfoTypesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListStoredInfoTypesRequest* New() const final {
    return CreateMaybeMessage<ListStoredInfoTypesRequest>(NULL);
  }

  ListStoredInfoTypesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListStoredInfoTypesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListStoredInfoTypesRequest& from);
  void MergeFrom(const ListStoredInfoTypesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStoredInfoTypesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListStoredInfoTypesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.ListStoredInfoTypesResponse) */ {
 public:
  ListStoredInfoTypesResponse();
  virtual ~ListStoredInfoTypesResponse();

  ListStoredInfoTypesResponse(const ListStoredInfoTypesResponse& from);

  inline ListStoredInfoTypesResponse& operator=(const ListStoredInfoTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListStoredInfoTypesResponse(ListStoredInfoTypesResponse&& from) noexcept
    : ListStoredInfoTypesResponse() {
    *this = ::std::move(from);
  }

  inline ListStoredInfoTypesResponse& operator=(ListStoredInfoTypesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListStoredInfoTypesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListStoredInfoTypesResponse* internal_default_instance() {
    return reinterpret_cast<const ListStoredInfoTypesResponse*>(
               &_ListStoredInfoTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  void Swap(ListStoredInfoTypesResponse* other);
  friend void swap(ListStoredInfoTypesResponse& a, ListStoredInfoTypesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListStoredInfoTypesResponse* New() const final {
    return CreateMaybeMessage<ListStoredInfoTypesResponse>(NULL);
  }

  ListStoredInfoTypesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListStoredInfoTypesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListStoredInfoTypesResponse& from);
  void MergeFrom(const ListStoredInfoTypesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStoredInfoTypesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2.StoredInfoType stored_info_types = 1;
  int stored_info_types_size() const;
  void clear_stored_info_types();
  static const int kStoredInfoTypesFieldNumber = 1;
  ::google::privacy::dlp::v2::StoredInfoType* mutable_stored_info_types(int index);
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StoredInfoType >*
      mutable_stored_info_types();
  const ::google::privacy::dlp::v2::StoredInfoType& stored_info_types(int index) const;
  ::google::privacy::dlp::v2::StoredInfoType* add_stored_info_types();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StoredInfoType >&
      stored_info_types() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StoredInfoType > stored_info_types_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteStoredInfoTypeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest) */ {
 public:
  DeleteStoredInfoTypeRequest();
  virtual ~DeleteStoredInfoTypeRequest();

  DeleteStoredInfoTypeRequest(const DeleteStoredInfoTypeRequest& from);

  inline DeleteStoredInfoTypeRequest& operator=(const DeleteStoredInfoTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteStoredInfoTypeRequest(DeleteStoredInfoTypeRequest&& from) noexcept
    : DeleteStoredInfoTypeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteStoredInfoTypeRequest& operator=(DeleteStoredInfoTypeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteStoredInfoTypeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteStoredInfoTypeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteStoredInfoTypeRequest*>(
               &_DeleteStoredInfoTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  void Swap(DeleteStoredInfoTypeRequest* other);
  friend void swap(DeleteStoredInfoTypeRequest& a, DeleteStoredInfoTypeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteStoredInfoTypeRequest* New() const final {
    return CreateMaybeMessage<DeleteStoredInfoTypeRequest>(NULL);
  }

  DeleteStoredInfoTypeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteStoredInfoTypeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteStoredInfoTypeRequest& from);
  void MergeFrom(const DeleteStoredInfoTypeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteStoredInfoTypeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InspectConfig_FindingLimits_InfoTypeLimit

// .google.privacy.dlp.v2.InfoType info_type = 1;
inline bool InspectConfig_FindingLimits_InfoTypeLimit::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline const ::google::privacy::dlp::v2::InfoType& InspectConfig_FindingLimits_InfoTypeLimit::_internal_info_type() const {
  return *info_type_;
}
inline const ::google::privacy::dlp::v2::InfoType& InspectConfig_FindingLimits_InfoTypeLimit::info_type() const {
  const ::google::privacy::dlp::v2::InfoType* p = info_type_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.info_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InfoType*>(
      &::google::privacy::dlp::v2::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2::InfoType* InspectConfig_FindingLimits_InfoTypeLimit::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.info_type)
  
  ::google::privacy::dlp::v2::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InfoType* InspectConfig_FindingLimits_InfoTypeLimit::mutable_info_type() {
  
  if (info_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InfoType>(GetArenaNoVirtual());
    info_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.info_type)
  return info_type_;
}
inline void InspectConfig_FindingLimits_InfoTypeLimit::set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_type_);
  }
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    
  } else {
    
  }
  info_type_ = info_type;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.info_type)
}

// int32 max_findings = 2;
inline void InspectConfig_FindingLimits_InfoTypeLimit::clear_max_findings() {
  max_findings_ = 0;
}
inline ::google::protobuf::int32 InspectConfig_FindingLimits_InfoTypeLimit::max_findings() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.max_findings)
  return max_findings_;
}
inline void InspectConfig_FindingLimits_InfoTypeLimit::set_max_findings(::google::protobuf::int32 value) {
  
  max_findings_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.max_findings)
}

// -------------------------------------------------------------------

// InspectConfig_FindingLimits

// int32 max_findings_per_item = 1;
inline void InspectConfig_FindingLimits::clear_max_findings_per_item() {
  max_findings_per_item_ = 0;
}
inline ::google::protobuf::int32 InspectConfig_FindingLimits::max_findings_per_item() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.FindingLimits.max_findings_per_item)
  return max_findings_per_item_;
}
inline void InspectConfig_FindingLimits::set_max_findings_per_item(::google::protobuf::int32 value) {
  
  max_findings_per_item_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectConfig.FindingLimits.max_findings_per_item)
}

// int32 max_findings_per_request = 2;
inline void InspectConfig_FindingLimits::clear_max_findings_per_request() {
  max_findings_per_request_ = 0;
}
inline ::google::protobuf::int32 InspectConfig_FindingLimits::max_findings_per_request() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.FindingLimits.max_findings_per_request)
  return max_findings_per_request_;
}
inline void InspectConfig_FindingLimits::set_max_findings_per_request(::google::protobuf::int32 value) {
  
  max_findings_per_request_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectConfig.FindingLimits.max_findings_per_request)
}

// repeated .google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit max_findings_per_info_type = 3;
inline int InspectConfig_FindingLimits::max_findings_per_info_type_size() const {
  return max_findings_per_info_type_.size();
}
inline void InspectConfig_FindingLimits::clear_max_findings_per_info_type() {
  max_findings_per_info_type_.Clear();
}
inline ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit* InspectConfig_FindingLimits::mutable_max_findings_per_info_type(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectConfig.FindingLimits.max_findings_per_info_type)
  return max_findings_per_info_type_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit >*
InspectConfig_FindingLimits::mutable_max_findings_per_info_type() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.InspectConfig.FindingLimits.max_findings_per_info_type)
  return &max_findings_per_info_type_;
}
inline const ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit& InspectConfig_FindingLimits::max_findings_per_info_type(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.FindingLimits.max_findings_per_info_type)
  return max_findings_per_info_type_.Get(index);
}
inline ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit* InspectConfig_FindingLimits::add_max_findings_per_info_type() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.InspectConfig.FindingLimits.max_findings_per_info_type)
  return max_findings_per_info_type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit >&
InspectConfig_FindingLimits::max_findings_per_info_type() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.InspectConfig.FindingLimits.max_findings_per_info_type)
  return max_findings_per_info_type_;
}

// -------------------------------------------------------------------

// InspectConfig

// repeated .google.privacy.dlp.v2.InfoType info_types = 1;
inline int InspectConfig::info_types_size() const {
  return info_types_.size();
}
inline ::google::privacy::dlp::v2::InfoType* InspectConfig::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectConfig.info_types)
  return info_types_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoType >*
InspectConfig::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.InspectConfig.info_types)
  return &info_types_;
}
inline const ::google::privacy::dlp::v2::InfoType& InspectConfig::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.info_types)
  return info_types_.Get(index);
}
inline ::google::privacy::dlp::v2::InfoType* InspectConfig::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.InspectConfig.info_types)
  return info_types_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoType >&
InspectConfig::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.InspectConfig.info_types)
  return info_types_;
}

// .google.privacy.dlp.v2.Likelihood min_likelihood = 2;
inline void InspectConfig::clear_min_likelihood() {
  min_likelihood_ = 0;
}
inline ::google::privacy::dlp::v2::Likelihood InspectConfig::min_likelihood() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.min_likelihood)
  return static_cast< ::google::privacy::dlp::v2::Likelihood >(min_likelihood_);
}
inline void InspectConfig::set_min_likelihood(::google::privacy::dlp::v2::Likelihood value) {
  
  min_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectConfig.min_likelihood)
}

// .google.privacy.dlp.v2.InspectConfig.FindingLimits limits = 3;
inline bool InspectConfig::has_limits() const {
  return this != internal_default_instance() && limits_ != NULL;
}
inline void InspectConfig::clear_limits() {
  if (GetArenaNoVirtual() == NULL && limits_ != NULL) {
    delete limits_;
  }
  limits_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectConfig_FindingLimits& InspectConfig::_internal_limits() const {
  return *limits_;
}
inline const ::google::privacy::dlp::v2::InspectConfig_FindingLimits& InspectConfig::limits() const {
  const ::google::privacy::dlp::v2::InspectConfig_FindingLimits* p = limits_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.limits)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectConfig_FindingLimits*>(
      &::google::privacy::dlp::v2::_InspectConfig_FindingLimits_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectConfig_FindingLimits* InspectConfig::release_limits() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectConfig.limits)
  
  ::google::privacy::dlp::v2::InspectConfig_FindingLimits* temp = limits_;
  limits_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectConfig_FindingLimits* InspectConfig::mutable_limits() {
  
  if (limits_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectConfig_FindingLimits>(GetArenaNoVirtual());
    limits_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectConfig.limits)
  return limits_;
}
inline void InspectConfig::set_allocated_limits(::google::privacy::dlp::v2::InspectConfig_FindingLimits* limits) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete limits_;
  }
  if (limits) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      limits = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limits, submessage_arena);
    }
    
  } else {
    
  }
  limits_ = limits;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectConfig.limits)
}

// bool include_quote = 4;
inline void InspectConfig::clear_include_quote() {
  include_quote_ = false;
}
inline bool InspectConfig::include_quote() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.include_quote)
  return include_quote_;
}
inline void InspectConfig::set_include_quote(bool value) {
  
  include_quote_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectConfig.include_quote)
}

// bool exclude_info_types = 5;
inline void InspectConfig::clear_exclude_info_types() {
  exclude_info_types_ = false;
}
inline bool InspectConfig::exclude_info_types() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.exclude_info_types)
  return exclude_info_types_;
}
inline void InspectConfig::set_exclude_info_types(bool value) {
  
  exclude_info_types_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectConfig.exclude_info_types)
}

// repeated .google.privacy.dlp.v2.CustomInfoType custom_info_types = 6;
inline int InspectConfig::custom_info_types_size() const {
  return custom_info_types_.size();
}
inline ::google::privacy::dlp::v2::CustomInfoType* InspectConfig::mutable_custom_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectConfig.custom_info_types)
  return custom_info_types_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::CustomInfoType >*
InspectConfig::mutable_custom_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.InspectConfig.custom_info_types)
  return &custom_info_types_;
}
inline const ::google::privacy::dlp::v2::CustomInfoType& InspectConfig::custom_info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.custom_info_types)
  return custom_info_types_.Get(index);
}
inline ::google::privacy::dlp::v2::CustomInfoType* InspectConfig::add_custom_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.InspectConfig.custom_info_types)
  return custom_info_types_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::CustomInfoType >&
InspectConfig::custom_info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.InspectConfig.custom_info_types)
  return custom_info_types_;
}

// repeated .google.privacy.dlp.v2.ContentOption content_options = 8;
inline int InspectConfig::content_options_size() const {
  return content_options_.size();
}
inline void InspectConfig::clear_content_options() {
  content_options_.Clear();
}
inline ::google::privacy::dlp::v2::ContentOption InspectConfig::content_options(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectConfig.content_options)
  return static_cast< ::google::privacy::dlp::v2::ContentOption >(content_options_.Get(index));
}
inline void InspectConfig::set_content_options(int index, ::google::privacy::dlp::v2::ContentOption value) {
  content_options_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectConfig.content_options)
}
inline void InspectConfig::add_content_options(::google::privacy::dlp::v2::ContentOption value) {
  content_options_.Add(value);
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.InspectConfig.content_options)
}
inline const ::google::protobuf::RepeatedField<int>&
InspectConfig::content_options() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.InspectConfig.content_options)
  return content_options_;
}
inline ::google::protobuf::RepeatedField<int>*
InspectConfig::mutable_content_options() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.InspectConfig.content_options)
  return &content_options_;
}

// -------------------------------------------------------------------

// ByteContentItem

// .google.privacy.dlp.v2.ByteContentItem.BytesType type = 1;
inline void ByteContentItem::clear_type() {
  type_ = 0;
}
inline ::google::privacy::dlp::v2::ByteContentItem_BytesType ByteContentItem::type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ByteContentItem.type)
  return static_cast< ::google::privacy::dlp::v2::ByteContentItem_BytesType >(type_);
}
inline void ByteContentItem::set_type(::google::privacy::dlp::v2::ByteContentItem_BytesType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ByteContentItem.type)
}

// bytes data = 2;
inline void ByteContentItem::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ByteContentItem::data() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ByteContentItem.data)
  return data_.GetNoArena();
}
inline void ByteContentItem::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ByteContentItem.data)
}
#if LANG_CXX11
inline void ByteContentItem::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ByteContentItem.data)
}
#endif
inline void ByteContentItem::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ByteContentItem.data)
}
inline void ByteContentItem::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ByteContentItem.data)
}
inline ::std::string* ByteContentItem::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ByteContentItem.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ByteContentItem::release_data() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ByteContentItem.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ByteContentItem::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ByteContentItem.data)
}

// -------------------------------------------------------------------

// ContentItem

// string value = 3;
inline bool ContentItem::has_value() const {
  return data_item_case() == kValue;
}
inline void ContentItem::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void ContentItem::clear_value() {
  if (has_value()) {
    data_item_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_item();
  }
}
inline const ::std::string& ContentItem::value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ContentItem.value)
  if (has_value()) {
    return data_item_.value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ContentItem::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ContentItem.value)
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ContentItem.value)
}
#if LANG_CXX11
inline void ContentItem::set_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ContentItem.value)
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ContentItem.value)
}
#endif
inline void ContentItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ContentItem.value)
}
inline void ContentItem::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ContentItem.value)
}
inline ::std::string* ContentItem::mutable_value() {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ContentItem.value)
  return data_item_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentItem::release_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ContentItem.value)
  if (has_value()) {
    clear_has_data_item();
    return data_item_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ContentItem::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_item();
  if (value != NULL) {
    set_has_value();
    data_item_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ContentItem.value)
}

// .google.privacy.dlp.v2.Table table = 4;
inline bool ContentItem::has_table() const {
  return data_item_case() == kTable;
}
inline void ContentItem::set_has_table() {
  _oneof_case_[0] = kTable;
}
inline void ContentItem::clear_table() {
  if (has_table()) {
    delete data_item_.table_;
    clear_has_data_item();
  }
}
inline const ::google::privacy::dlp::v2::Table& ContentItem::_internal_table() const {
  return *data_item_.table_;
}
inline ::google::privacy::dlp::v2::Table* ContentItem::release_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ContentItem.table)
  if (has_table()) {
    clear_has_data_item();
      ::google::privacy::dlp::v2::Table* temp = data_item_.table_;
    data_item_.table_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::Table& ContentItem::table() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ContentItem.table)
  return has_table()
      ? *data_item_.table_
      : *reinterpret_cast< ::google::privacy::dlp::v2::Table*>(&::google::privacy::dlp::v2::_Table_default_instance_);
}
inline ::google::privacy::dlp::v2::Table* ContentItem::mutable_table() {
  if (!has_table()) {
    clear_data_item();
    set_has_table();
    data_item_.table_ = CreateMaybeMessage< ::google::privacy::dlp::v2::Table >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ContentItem.table)
  return data_item_.table_;
}

// .google.privacy.dlp.v2.ByteContentItem byte_item = 5;
inline bool ContentItem::has_byte_item() const {
  return data_item_case() == kByteItem;
}
inline void ContentItem::set_has_byte_item() {
  _oneof_case_[0] = kByteItem;
}
inline void ContentItem::clear_byte_item() {
  if (has_byte_item()) {
    delete data_item_.byte_item_;
    clear_has_data_item();
  }
}
inline const ::google::privacy::dlp::v2::ByteContentItem& ContentItem::_internal_byte_item() const {
  return *data_item_.byte_item_;
}
inline ::google::privacy::dlp::v2::ByteContentItem* ContentItem::release_byte_item() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ContentItem.byte_item)
  if (has_byte_item()) {
    clear_has_data_item();
      ::google::privacy::dlp::v2::ByteContentItem* temp = data_item_.byte_item_;
    data_item_.byte_item_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::ByteContentItem& ContentItem::byte_item() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ContentItem.byte_item)
  return has_byte_item()
      ? *data_item_.byte_item_
      : *reinterpret_cast< ::google::privacy::dlp::v2::ByteContentItem*>(&::google::privacy::dlp::v2::_ByteContentItem_default_instance_);
}
inline ::google::privacy::dlp::v2::ByteContentItem* ContentItem::mutable_byte_item() {
  if (!has_byte_item()) {
    clear_data_item();
    set_has_byte_item();
    data_item_.byte_item_ = CreateMaybeMessage< ::google::privacy::dlp::v2::ByteContentItem >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ContentItem.byte_item)
  return data_item_.byte_item_;
}

inline bool ContentItem::has_data_item() const {
  return data_item_case() != DATA_ITEM_NOT_SET;
}
inline void ContentItem::clear_has_data_item() {
  _oneof_case_[0] = DATA_ITEM_NOT_SET;
}
inline ContentItem::DataItemCase ContentItem::data_item_case() const {
  return ContentItem::DataItemCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Table_Row

// repeated .google.privacy.dlp.v2.Value values = 1;
inline int Table_Row::values_size() const {
  return values_.size();
}
inline void Table_Row::clear_values() {
  values_.Clear();
}
inline ::google::privacy::dlp::v2::Value* Table_Row::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Table.Row.values)
  return values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
Table_Row::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.Table.Row.values)
  return &values_;
}
inline const ::google::privacy::dlp::v2::Value& Table_Row::values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Table.Row.values)
  return values_.Get(index);
}
inline ::google::privacy::dlp::v2::Value* Table_Row::add_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.Table.Row.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
Table_Row::values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.Table.Row.values)
  return values_;
}

// -------------------------------------------------------------------

// Table

// repeated .google.privacy.dlp.v2.FieldId headers = 1;
inline int Table::headers_size() const {
  return headers_.size();
}
inline ::google::privacy::dlp::v2::FieldId* Table::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Table.headers)
  return headers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >*
Table::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.Table.headers)
  return &headers_;
}
inline const ::google::privacy::dlp::v2::FieldId& Table::headers(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Table.headers)
  return headers_.Get(index);
}
inline ::google::privacy::dlp::v2::FieldId* Table::add_headers() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.Table.headers)
  return headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >&
Table::headers() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.Table.headers)
  return headers_;
}

// repeated .google.privacy.dlp.v2.Table.Row rows = 2;
inline int Table::rows_size() const {
  return rows_.size();
}
inline void Table::clear_rows() {
  rows_.Clear();
}
inline ::google::privacy::dlp::v2::Table_Row* Table::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Table.rows)
  return rows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Table_Row >*
Table::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.Table.rows)
  return &rows_;
}
inline const ::google::privacy::dlp::v2::Table_Row& Table::rows(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Table.rows)
  return rows_.Get(index);
}
inline ::google::privacy::dlp::v2::Table_Row* Table::add_rows() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.Table.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Table_Row >&
Table::rows() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.Table.rows)
  return rows_;
}

// -------------------------------------------------------------------

// InspectResult

// repeated .google.privacy.dlp.v2.Finding findings = 1;
inline int InspectResult::findings_size() const {
  return findings_.size();
}
inline void InspectResult::clear_findings() {
  findings_.Clear();
}
inline ::google::privacy::dlp::v2::Finding* InspectResult::mutable_findings(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectResult.findings)
  return findings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Finding >*
InspectResult::mutable_findings() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.InspectResult.findings)
  return &findings_;
}
inline const ::google::privacy::dlp::v2::Finding& InspectResult::findings(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectResult.findings)
  return findings_.Get(index);
}
inline ::google::privacy::dlp::v2::Finding* InspectResult::add_findings() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.InspectResult.findings)
  return findings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Finding >&
InspectResult::findings() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.InspectResult.findings)
  return findings_;
}

// bool findings_truncated = 2;
inline void InspectResult::clear_findings_truncated() {
  findings_truncated_ = false;
}
inline bool InspectResult::findings_truncated() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectResult.findings_truncated)
  return findings_truncated_;
}
inline void InspectResult::set_findings_truncated(bool value) {
  
  findings_truncated_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectResult.findings_truncated)
}

// -------------------------------------------------------------------

// Finding

// string quote = 1;
inline void Finding::clear_quote() {
  quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Finding::quote() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Finding.quote)
  return quote_.GetNoArena();
}
inline void Finding::set_quote(const ::std::string& value) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Finding.quote)
}
#if LANG_CXX11
inline void Finding::set_quote(::std::string&& value) {
  
  quote_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.Finding.quote)
}
#endif
inline void Finding::set_quote(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.Finding.quote)
}
inline void Finding::set_quote(const char* value, size_t size) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.Finding.quote)
}
inline ::std::string* Finding::mutable_quote() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Finding.quote)
  return quote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Finding::release_quote() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Finding.quote)
  
  return quote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Finding::set_allocated_quote(::std::string* quote) {
  if (quote != NULL) {
    
  } else {
    
  }
  quote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quote);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Finding.quote)
}

// .google.privacy.dlp.v2.InfoType info_type = 2;
inline bool Finding::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline const ::google::privacy::dlp::v2::InfoType& Finding::_internal_info_type() const {
  return *info_type_;
}
inline const ::google::privacy::dlp::v2::InfoType& Finding::info_type() const {
  const ::google::privacy::dlp::v2::InfoType* p = info_type_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Finding.info_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InfoType*>(
      &::google::privacy::dlp::v2::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2::InfoType* Finding::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Finding.info_type)
  
  ::google::privacy::dlp::v2::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InfoType* Finding::mutable_info_type() {
  
  if (info_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InfoType>(GetArenaNoVirtual());
    info_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Finding.info_type)
  return info_type_;
}
inline void Finding::set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_type_);
  }
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    
  } else {
    
  }
  info_type_ = info_type;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Finding.info_type)
}

// .google.privacy.dlp.v2.Likelihood likelihood = 3;
inline void Finding::clear_likelihood() {
  likelihood_ = 0;
}
inline ::google::privacy::dlp::v2::Likelihood Finding::likelihood() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Finding.likelihood)
  return static_cast< ::google::privacy::dlp::v2::Likelihood >(likelihood_);
}
inline void Finding::set_likelihood(::google::privacy::dlp::v2::Likelihood value) {
  
  likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Finding.likelihood)
}

// .google.privacy.dlp.v2.Location location = 4;
inline bool Finding::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void Finding::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::google::privacy::dlp::v2::Location& Finding::_internal_location() const {
  return *location_;
}
inline const ::google::privacy::dlp::v2::Location& Finding::location() const {
  const ::google::privacy::dlp::v2::Location* p = location_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Finding.location)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Location*>(
      &::google::privacy::dlp::v2::_Location_default_instance_);
}
inline ::google::privacy::dlp::v2::Location* Finding::release_location() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Finding.location)
  
  ::google::privacy::dlp::v2::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Location* Finding::mutable_location() {
  
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Location>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Finding.location)
  return location_;
}
inline void Finding::set_allocated_location(::google::privacy::dlp::v2::Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Finding.location)
}

// .google.protobuf.Timestamp create_time = 6;
inline bool Finding::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Finding::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& Finding::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Finding.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Finding::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Finding.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Finding::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Finding.create_time)
  return create_time_;
}
inline void Finding::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Finding.create_time)
}

// .google.privacy.dlp.v2.QuoteInfo quote_info = 7;
inline bool Finding::has_quote_info() const {
  return this != internal_default_instance() && quote_info_ != NULL;
}
inline void Finding::clear_quote_info() {
  if (GetArenaNoVirtual() == NULL && quote_info_ != NULL) {
    delete quote_info_;
  }
  quote_info_ = NULL;
}
inline const ::google::privacy::dlp::v2::QuoteInfo& Finding::_internal_quote_info() const {
  return *quote_info_;
}
inline const ::google::privacy::dlp::v2::QuoteInfo& Finding::quote_info() const {
  const ::google::privacy::dlp::v2::QuoteInfo* p = quote_info_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Finding.quote_info)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::QuoteInfo*>(
      &::google::privacy::dlp::v2::_QuoteInfo_default_instance_);
}
inline ::google::privacy::dlp::v2::QuoteInfo* Finding::release_quote_info() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Finding.quote_info)
  
  ::google::privacy::dlp::v2::QuoteInfo* temp = quote_info_;
  quote_info_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::QuoteInfo* Finding::mutable_quote_info() {
  
  if (quote_info_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::QuoteInfo>(GetArenaNoVirtual());
    quote_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Finding.quote_info)
  return quote_info_;
}
inline void Finding::set_allocated_quote_info(::google::privacy::dlp::v2::QuoteInfo* quote_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete quote_info_;
  }
  if (quote_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quote_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quote_info, submessage_arena);
    }
    
  } else {
    
  }
  quote_info_ = quote_info;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Finding.quote_info)
}

// -------------------------------------------------------------------

// Location

// .google.privacy.dlp.v2.Range byte_range = 1;
inline bool Location::has_byte_range() const {
  return this != internal_default_instance() && byte_range_ != NULL;
}
inline void Location::clear_byte_range() {
  if (GetArenaNoVirtual() == NULL && byte_range_ != NULL) {
    delete byte_range_;
  }
  byte_range_ = NULL;
}
inline const ::google::privacy::dlp::v2::Range& Location::_internal_byte_range() const {
  return *byte_range_;
}
inline const ::google::privacy::dlp::v2::Range& Location::byte_range() const {
  const ::google::privacy::dlp::v2::Range* p = byte_range_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Location.byte_range)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Range*>(
      &::google::privacy::dlp::v2::_Range_default_instance_);
}
inline ::google::privacy::dlp::v2::Range* Location::release_byte_range() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Location.byte_range)
  
  ::google::privacy::dlp::v2::Range* temp = byte_range_;
  byte_range_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Range* Location::mutable_byte_range() {
  
  if (byte_range_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Range>(GetArenaNoVirtual());
    byte_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Location.byte_range)
  return byte_range_;
}
inline void Location::set_allocated_byte_range(::google::privacy::dlp::v2::Range* byte_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete byte_range_;
  }
  if (byte_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      byte_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, byte_range, submessage_arena);
    }
    
  } else {
    
  }
  byte_range_ = byte_range;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Location.byte_range)
}

// .google.privacy.dlp.v2.Range codepoint_range = 2;
inline bool Location::has_codepoint_range() const {
  return this != internal_default_instance() && codepoint_range_ != NULL;
}
inline void Location::clear_codepoint_range() {
  if (GetArenaNoVirtual() == NULL && codepoint_range_ != NULL) {
    delete codepoint_range_;
  }
  codepoint_range_ = NULL;
}
inline const ::google::privacy::dlp::v2::Range& Location::_internal_codepoint_range() const {
  return *codepoint_range_;
}
inline const ::google::privacy::dlp::v2::Range& Location::codepoint_range() const {
  const ::google::privacy::dlp::v2::Range* p = codepoint_range_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Location.codepoint_range)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Range*>(
      &::google::privacy::dlp::v2::_Range_default_instance_);
}
inline ::google::privacy::dlp::v2::Range* Location::release_codepoint_range() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Location.codepoint_range)
  
  ::google::privacy::dlp::v2::Range* temp = codepoint_range_;
  codepoint_range_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Range* Location::mutable_codepoint_range() {
  
  if (codepoint_range_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Range>(GetArenaNoVirtual());
    codepoint_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Location.codepoint_range)
  return codepoint_range_;
}
inline void Location::set_allocated_codepoint_range(::google::privacy::dlp::v2::Range* codepoint_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete codepoint_range_;
  }
  if (codepoint_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      codepoint_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, codepoint_range, submessage_arena);
    }
    
  } else {
    
  }
  codepoint_range_ = codepoint_range;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Location.codepoint_range)
}

// repeated .google.privacy.dlp.v2.ContentLocation content_locations = 7;
inline int Location::content_locations_size() const {
  return content_locations_.size();
}
inline void Location::clear_content_locations() {
  content_locations_.Clear();
}
inline ::google::privacy::dlp::v2::ContentLocation* Location::mutable_content_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Location.content_locations)
  return content_locations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ContentLocation >*
Location::mutable_content_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.Location.content_locations)
  return &content_locations_;
}
inline const ::google::privacy::dlp::v2::ContentLocation& Location::content_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Location.content_locations)
  return content_locations_.Get(index);
}
inline ::google::privacy::dlp::v2::ContentLocation* Location::add_content_locations() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.Location.content_locations)
  return content_locations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ContentLocation >&
Location::content_locations() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.Location.content_locations)
  return content_locations_;
}

// -------------------------------------------------------------------

// ContentLocation

// string container_name = 1;
inline void ContentLocation::clear_container_name() {
  container_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentLocation::container_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ContentLocation.container_name)
  return container_name_.GetNoArena();
}
inline void ContentLocation::set_container_name(const ::std::string& value) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ContentLocation.container_name)
}
#if LANG_CXX11
inline void ContentLocation::set_container_name(::std::string&& value) {
  
  container_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ContentLocation.container_name)
}
#endif
inline void ContentLocation::set_container_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ContentLocation.container_name)
}
inline void ContentLocation::set_container_name(const char* value, size_t size) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ContentLocation.container_name)
}
inline ::std::string* ContentLocation::mutable_container_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ContentLocation.container_name)
  return container_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentLocation::release_container_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ContentLocation.container_name)
  
  return container_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentLocation::set_allocated_container_name(::std::string* container_name) {
  if (container_name != NULL) {
    
  } else {
    
  }
  container_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ContentLocation.container_name)
}

// .google.privacy.dlp.v2.RecordLocation record_location = 2;
inline bool ContentLocation::has_record_location() const {
  return location_case() == kRecordLocation;
}
inline void ContentLocation::set_has_record_location() {
  _oneof_case_[0] = kRecordLocation;
}
inline void ContentLocation::clear_record_location() {
  if (has_record_location()) {
    delete location_.record_location_;
    clear_has_location();
  }
}
inline const ::google::privacy::dlp::v2::RecordLocation& ContentLocation::_internal_record_location() const {
  return *location_.record_location_;
}
inline ::google::privacy::dlp::v2::RecordLocation* ContentLocation::release_record_location() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ContentLocation.record_location)
  if (has_record_location()) {
    clear_has_location();
      ::google::privacy::dlp::v2::RecordLocation* temp = location_.record_location_;
    location_.record_location_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::RecordLocation& ContentLocation::record_location() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ContentLocation.record_location)
  return has_record_location()
      ? *location_.record_location_
      : *reinterpret_cast< ::google::privacy::dlp::v2::RecordLocation*>(&::google::privacy::dlp::v2::_RecordLocation_default_instance_);
}
inline ::google::privacy::dlp::v2::RecordLocation* ContentLocation::mutable_record_location() {
  if (!has_record_location()) {
    clear_location();
    set_has_record_location();
    location_.record_location_ = CreateMaybeMessage< ::google::privacy::dlp::v2::RecordLocation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ContentLocation.record_location)
  return location_.record_location_;
}

// .google.privacy.dlp.v2.ImageLocation image_location = 3;
inline bool ContentLocation::has_image_location() const {
  return location_case() == kImageLocation;
}
inline void ContentLocation::set_has_image_location() {
  _oneof_case_[0] = kImageLocation;
}
inline void ContentLocation::clear_image_location() {
  if (has_image_location()) {
    delete location_.image_location_;
    clear_has_location();
  }
}
inline const ::google::privacy::dlp::v2::ImageLocation& ContentLocation::_internal_image_location() const {
  return *location_.image_location_;
}
inline ::google::privacy::dlp::v2::ImageLocation* ContentLocation::release_image_location() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ContentLocation.image_location)
  if (has_image_location()) {
    clear_has_location();
      ::google::privacy::dlp::v2::ImageLocation* temp = location_.image_location_;
    location_.image_location_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::ImageLocation& ContentLocation::image_location() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ContentLocation.image_location)
  return has_image_location()
      ? *location_.image_location_
      : *reinterpret_cast< ::google::privacy::dlp::v2::ImageLocation*>(&::google::privacy::dlp::v2::_ImageLocation_default_instance_);
}
inline ::google::privacy::dlp::v2::ImageLocation* ContentLocation::mutable_image_location() {
  if (!has_image_location()) {
    clear_location();
    set_has_image_location();
    location_.image_location_ = CreateMaybeMessage< ::google::privacy::dlp::v2::ImageLocation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ContentLocation.image_location)
  return location_.image_location_;
}

// .google.privacy.dlp.v2.DocumentLocation document_location = 5;
inline bool ContentLocation::has_document_location() const {
  return location_case() == kDocumentLocation;
}
inline void ContentLocation::set_has_document_location() {
  _oneof_case_[0] = kDocumentLocation;
}
inline void ContentLocation::clear_document_location() {
  if (has_document_location()) {
    delete location_.document_location_;
    clear_has_location();
  }
}
inline const ::google::privacy::dlp::v2::DocumentLocation& ContentLocation::_internal_document_location() const {
  return *location_.document_location_;
}
inline ::google::privacy::dlp::v2::DocumentLocation* ContentLocation::release_document_location() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ContentLocation.document_location)
  if (has_document_location()) {
    clear_has_location();
      ::google::privacy::dlp::v2::DocumentLocation* temp = location_.document_location_;
    location_.document_location_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::DocumentLocation& ContentLocation::document_location() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ContentLocation.document_location)
  return has_document_location()
      ? *location_.document_location_
      : *reinterpret_cast< ::google::privacy::dlp::v2::DocumentLocation*>(&::google::privacy::dlp::v2::_DocumentLocation_default_instance_);
}
inline ::google::privacy::dlp::v2::DocumentLocation* ContentLocation::mutable_document_location() {
  if (!has_document_location()) {
    clear_location();
    set_has_document_location();
    location_.document_location_ = CreateMaybeMessage< ::google::privacy::dlp::v2::DocumentLocation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ContentLocation.document_location)
  return location_.document_location_;
}

// .google.protobuf.Timestamp container_timestamp = 6;
inline bool ContentLocation::has_container_timestamp() const {
  return this != internal_default_instance() && container_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& ContentLocation::_internal_container_timestamp() const {
  return *container_timestamp_;
}
inline const ::google::protobuf::Timestamp& ContentLocation::container_timestamp() const {
  const ::google::protobuf::Timestamp* p = container_timestamp_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ContentLocation.container_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ContentLocation::release_container_timestamp() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ContentLocation.container_timestamp)
  
  ::google::protobuf::Timestamp* temp = container_timestamp_;
  container_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ContentLocation::mutable_container_timestamp() {
  
  if (container_timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    container_timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ContentLocation.container_timestamp)
  return container_timestamp_;
}
inline void ContentLocation::set_allocated_container_timestamp(::google::protobuf::Timestamp* container_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(container_timestamp_);
  }
  if (container_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(container_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      container_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, container_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  container_timestamp_ = container_timestamp;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ContentLocation.container_timestamp)
}

// string container_version = 7;
inline void ContentLocation::clear_container_version() {
  container_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentLocation::container_version() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ContentLocation.container_version)
  return container_version_.GetNoArena();
}
inline void ContentLocation::set_container_version(const ::std::string& value) {
  
  container_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ContentLocation.container_version)
}
#if LANG_CXX11
inline void ContentLocation::set_container_version(::std::string&& value) {
  
  container_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ContentLocation.container_version)
}
#endif
inline void ContentLocation::set_container_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  container_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ContentLocation.container_version)
}
inline void ContentLocation::set_container_version(const char* value, size_t size) {
  
  container_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ContentLocation.container_version)
}
inline ::std::string* ContentLocation::mutable_container_version() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ContentLocation.container_version)
  return container_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentLocation::release_container_version() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ContentLocation.container_version)
  
  return container_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentLocation::set_allocated_container_version(::std::string* container_version) {
  if (container_version != NULL) {
    
  } else {
    
  }
  container_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_version);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ContentLocation.container_version)
}

inline bool ContentLocation::has_location() const {
  return location_case() != LOCATION_NOT_SET;
}
inline void ContentLocation::clear_has_location() {
  _oneof_case_[0] = LOCATION_NOT_SET;
}
inline ContentLocation::LocationCase ContentLocation::location_case() const {
  return ContentLocation::LocationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DocumentLocation

// int64 file_offset = 1;
inline void DocumentLocation::clear_file_offset() {
  file_offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DocumentLocation::file_offset() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DocumentLocation.file_offset)
  return file_offset_;
}
inline void DocumentLocation::set_file_offset(::google::protobuf::int64 value) {
  
  file_offset_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DocumentLocation.file_offset)
}

// -------------------------------------------------------------------

// RecordLocation

// .google.privacy.dlp.v2.RecordKey record_key = 1;
inline bool RecordLocation::has_record_key() const {
  return this != internal_default_instance() && record_key_ != NULL;
}
inline const ::google::privacy::dlp::v2::RecordKey& RecordLocation::_internal_record_key() const {
  return *record_key_;
}
inline const ::google::privacy::dlp::v2::RecordKey& RecordLocation::record_key() const {
  const ::google::privacy::dlp::v2::RecordKey* p = record_key_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordLocation.record_key)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::RecordKey*>(
      &::google::privacy::dlp::v2::_RecordKey_default_instance_);
}
inline ::google::privacy::dlp::v2::RecordKey* RecordLocation::release_record_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RecordLocation.record_key)
  
  ::google::privacy::dlp::v2::RecordKey* temp = record_key_;
  record_key_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::RecordKey* RecordLocation::mutable_record_key() {
  
  if (record_key_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::RecordKey>(GetArenaNoVirtual());
    record_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RecordLocation.record_key)
  return record_key_;
}
inline void RecordLocation::set_allocated_record_key(::google::privacy::dlp::v2::RecordKey* record_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(record_key_);
  }
  if (record_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      record_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, record_key, submessage_arena);
    }
    
  } else {
    
  }
  record_key_ = record_key;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RecordLocation.record_key)
}

// .google.privacy.dlp.v2.FieldId field_id = 2;
inline bool RecordLocation::has_field_id() const {
  return this != internal_default_instance() && field_id_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& RecordLocation::_internal_field_id() const {
  return *field_id_;
}
inline const ::google::privacy::dlp::v2::FieldId& RecordLocation::field_id() const {
  const ::google::privacy::dlp::v2::FieldId* p = field_id_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordLocation.field_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* RecordLocation::release_field_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RecordLocation.field_id)
  
  ::google::privacy::dlp::v2::FieldId* temp = field_id_;
  field_id_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* RecordLocation::mutable_field_id() {
  
  if (field_id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    field_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RecordLocation.field_id)
  return field_id_;
}
inline void RecordLocation::set_allocated_field_id(::google::privacy::dlp::v2::FieldId* field_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_id_);
  }
  if (field_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field_id, submessage_arena);
    }
    
  } else {
    
  }
  field_id_ = field_id;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RecordLocation.field_id)
}

// .google.privacy.dlp.v2.TableLocation table_location = 3;
inline bool RecordLocation::has_table_location() const {
  return this != internal_default_instance() && table_location_ != NULL;
}
inline void RecordLocation::clear_table_location() {
  if (GetArenaNoVirtual() == NULL && table_location_ != NULL) {
    delete table_location_;
  }
  table_location_ = NULL;
}
inline const ::google::privacy::dlp::v2::TableLocation& RecordLocation::_internal_table_location() const {
  return *table_location_;
}
inline const ::google::privacy::dlp::v2::TableLocation& RecordLocation::table_location() const {
  const ::google::privacy::dlp::v2::TableLocation* p = table_location_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordLocation.table_location)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::TableLocation*>(
      &::google::privacy::dlp::v2::_TableLocation_default_instance_);
}
inline ::google::privacy::dlp::v2::TableLocation* RecordLocation::release_table_location() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RecordLocation.table_location)
  
  ::google::privacy::dlp::v2::TableLocation* temp = table_location_;
  table_location_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::TableLocation* RecordLocation::mutable_table_location() {
  
  if (table_location_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::TableLocation>(GetArenaNoVirtual());
    table_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RecordLocation.table_location)
  return table_location_;
}
inline void RecordLocation::set_allocated_table_location(::google::privacy::dlp::v2::TableLocation* table_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_location_;
  }
  if (table_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_location, submessage_arena);
    }
    
  } else {
    
  }
  table_location_ = table_location;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RecordLocation.table_location)
}

// -------------------------------------------------------------------

// TableLocation

// int64 row_index = 1;
inline void TableLocation::clear_row_index() {
  row_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TableLocation::row_index() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TableLocation.row_index)
  return row_index_;
}
inline void TableLocation::set_row_index(::google::protobuf::int64 value) {
  
  row_index_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.TableLocation.row_index)
}

// -------------------------------------------------------------------

// Range

// int64 start = 1;
inline void Range::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Range::start() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Range.start)
  return start_;
}
inline void Range::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Range.start)
}

// int64 end = 2;
inline void Range::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Range::end() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Range.end)
  return end_;
}
inline void Range::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Range.end)
}

// -------------------------------------------------------------------

// ImageLocation

// repeated .google.privacy.dlp.v2.BoundingBox bounding_boxes = 1;
inline int ImageLocation::bounding_boxes_size() const {
  return bounding_boxes_.size();
}
inline void ImageLocation::clear_bounding_boxes() {
  bounding_boxes_.Clear();
}
inline ::google::privacy::dlp::v2::BoundingBox* ImageLocation::mutable_bounding_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ImageLocation.bounding_boxes)
  return bounding_boxes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::BoundingBox >*
ImageLocation::mutable_bounding_boxes() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.ImageLocation.bounding_boxes)
  return &bounding_boxes_;
}
inline const ::google::privacy::dlp::v2::BoundingBox& ImageLocation::bounding_boxes(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ImageLocation.bounding_boxes)
  return bounding_boxes_.Get(index);
}
inline ::google::privacy::dlp::v2::BoundingBox* ImageLocation::add_bounding_boxes() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.ImageLocation.bounding_boxes)
  return bounding_boxes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::BoundingBox >&
ImageLocation::bounding_boxes() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.ImageLocation.bounding_boxes)
  return bounding_boxes_;
}

// -------------------------------------------------------------------

// BoundingBox

// int32 top = 1;
inline void BoundingBox::clear_top() {
  top_ = 0;
}
inline ::google::protobuf::int32 BoundingBox::top() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.BoundingBox.top)
  return top_;
}
inline void BoundingBox::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.BoundingBox.top)
}

// int32 left = 2;
inline void BoundingBox::clear_left() {
  left_ = 0;
}
inline ::google::protobuf::int32 BoundingBox::left() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.BoundingBox.left)
  return left_;
}
inline void BoundingBox::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.BoundingBox.left)
}

// int32 width = 3;
inline void BoundingBox::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 BoundingBox::width() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.BoundingBox.width)
  return width_;
}
inline void BoundingBox::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.BoundingBox.width)
}

// int32 height = 4;
inline void BoundingBox::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 BoundingBox::height() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.BoundingBox.height)
  return height_;
}
inline void BoundingBox::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.BoundingBox.height)
}

// -------------------------------------------------------------------

// RedactImageRequest_ImageRedactionConfig

// .google.privacy.dlp.v2.InfoType info_type = 1;
inline bool RedactImageRequest_ImageRedactionConfig::has_info_type() const {
  return target_case() == kInfoType;
}
inline void RedactImageRequest_ImageRedactionConfig::set_has_info_type() {
  _oneof_case_[0] = kInfoType;
}
inline const ::google::privacy::dlp::v2::InfoType& RedactImageRequest_ImageRedactionConfig::_internal_info_type() const {
  return *target_.info_type_;
}
inline ::google::privacy::dlp::v2::InfoType* RedactImageRequest_ImageRedactionConfig::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.info_type)
  if (has_info_type()) {
    clear_has_target();
      ::google::privacy::dlp::v2::InfoType* temp = target_.info_type_;
    target_.info_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::InfoType& RedactImageRequest_ImageRedactionConfig::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.info_type)
  return has_info_type()
      ? *target_.info_type_
      : *reinterpret_cast< ::google::privacy::dlp::v2::InfoType*>(&::google::privacy::dlp::v2::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2::InfoType* RedactImageRequest_ImageRedactionConfig::mutable_info_type() {
  if (!has_info_type()) {
    clear_target();
    set_has_info_type();
    target_.info_type_ = CreateMaybeMessage< ::google::privacy::dlp::v2::InfoType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.info_type)
  return target_.info_type_;
}

// bool redact_all_text = 2;
inline bool RedactImageRequest_ImageRedactionConfig::has_redact_all_text() const {
  return target_case() == kRedactAllText;
}
inline void RedactImageRequest_ImageRedactionConfig::set_has_redact_all_text() {
  _oneof_case_[0] = kRedactAllText;
}
inline void RedactImageRequest_ImageRedactionConfig::clear_redact_all_text() {
  if (has_redact_all_text()) {
    target_.redact_all_text_ = false;
    clear_has_target();
  }
}
inline bool RedactImageRequest_ImageRedactionConfig::redact_all_text() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.redact_all_text)
  if (has_redact_all_text()) {
    return target_.redact_all_text_;
  }
  return false;
}
inline void RedactImageRequest_ImageRedactionConfig::set_redact_all_text(bool value) {
  if (!has_redact_all_text()) {
    clear_target();
    set_has_redact_all_text();
  }
  target_.redact_all_text_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.redact_all_text)
}

// .google.privacy.dlp.v2.Color redaction_color = 3;
inline bool RedactImageRequest_ImageRedactionConfig::has_redaction_color() const {
  return this != internal_default_instance() && redaction_color_ != NULL;
}
inline void RedactImageRequest_ImageRedactionConfig::clear_redaction_color() {
  if (GetArenaNoVirtual() == NULL && redaction_color_ != NULL) {
    delete redaction_color_;
  }
  redaction_color_ = NULL;
}
inline const ::google::privacy::dlp::v2::Color& RedactImageRequest_ImageRedactionConfig::_internal_redaction_color() const {
  return *redaction_color_;
}
inline const ::google::privacy::dlp::v2::Color& RedactImageRequest_ImageRedactionConfig::redaction_color() const {
  const ::google::privacy::dlp::v2::Color* p = redaction_color_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.redaction_color)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Color*>(
      &::google::privacy::dlp::v2::_Color_default_instance_);
}
inline ::google::privacy::dlp::v2::Color* RedactImageRequest_ImageRedactionConfig::release_redaction_color() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.redaction_color)
  
  ::google::privacy::dlp::v2::Color* temp = redaction_color_;
  redaction_color_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Color* RedactImageRequest_ImageRedactionConfig::mutable_redaction_color() {
  
  if (redaction_color_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Color>(GetArenaNoVirtual());
    redaction_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.redaction_color)
  return redaction_color_;
}
inline void RedactImageRequest_ImageRedactionConfig::set_allocated_redaction_color(::google::privacy::dlp::v2::Color* redaction_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete redaction_color_;
  }
  if (redaction_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      redaction_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, redaction_color, submessage_arena);
    }
    
  } else {
    
  }
  redaction_color_ = redaction_color;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.redaction_color)
}

inline bool RedactImageRequest_ImageRedactionConfig::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void RedactImageRequest_ImageRedactionConfig::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline RedactImageRequest_ImageRedactionConfig::TargetCase RedactImageRequest_ImageRedactionConfig::target_case() const {
  return RedactImageRequest_ImageRedactionConfig::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RedactImageRequest

// string parent = 1;
inline void RedactImageRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedactImageRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RedactImageRequest.parent)
  return parent_.GetNoArena();
}
inline void RedactImageRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.RedactImageRequest.parent)
}
#if LANG_CXX11
inline void RedactImageRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.RedactImageRequest.parent)
}
#endif
inline void RedactImageRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.RedactImageRequest.parent)
}
inline void RedactImageRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.RedactImageRequest.parent)
}
inline ::std::string* RedactImageRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RedactImageRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedactImageRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RedactImageRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedactImageRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RedactImageRequest.parent)
}

// .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
inline bool RedactImageRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void RedactImageRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectConfig& RedactImageRequest::_internal_inspect_config() const {
  return *inspect_config_;
}
inline const ::google::privacy::dlp::v2::InspectConfig& RedactImageRequest::inspect_config() const {
  const ::google::privacy::dlp::v2::InspectConfig* p = inspect_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RedactImageRequest.inspect_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectConfig*>(
      &::google::privacy::dlp::v2::_InspectConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectConfig* RedactImageRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RedactImageRequest.inspect_config)
  
  ::google::privacy::dlp::v2::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectConfig* RedactImageRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectConfig>(GetArenaNoVirtual());
    inspect_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RedactImageRequest.inspect_config)
  return inspect_config_;
}
inline void RedactImageRequest::set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_config_;
  }
  if (inspect_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_config, submessage_arena);
    }
    
  } else {
    
  }
  inspect_config_ = inspect_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RedactImageRequest.inspect_config)
}

// repeated .google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig image_redaction_configs = 5;
inline int RedactImageRequest::image_redaction_configs_size() const {
  return image_redaction_configs_.size();
}
inline void RedactImageRequest::clear_image_redaction_configs() {
  image_redaction_configs_.Clear();
}
inline ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig* RedactImageRequest::mutable_image_redaction_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RedactImageRequest.image_redaction_configs)
  return image_redaction_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig >*
RedactImageRequest::mutable_image_redaction_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.RedactImageRequest.image_redaction_configs)
  return &image_redaction_configs_;
}
inline const ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig& RedactImageRequest::image_redaction_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RedactImageRequest.image_redaction_configs)
  return image_redaction_configs_.Get(index);
}
inline ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig* RedactImageRequest::add_image_redaction_configs() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.RedactImageRequest.image_redaction_configs)
  return image_redaction_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig >&
RedactImageRequest::image_redaction_configs() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.RedactImageRequest.image_redaction_configs)
  return image_redaction_configs_;
}

// bool include_findings = 6;
inline void RedactImageRequest::clear_include_findings() {
  include_findings_ = false;
}
inline bool RedactImageRequest::include_findings() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RedactImageRequest.include_findings)
  return include_findings_;
}
inline void RedactImageRequest::set_include_findings(bool value) {
  
  include_findings_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.RedactImageRequest.include_findings)
}

// .google.privacy.dlp.v2.ByteContentItem byte_item = 7;
inline bool RedactImageRequest::has_byte_item() const {
  return this != internal_default_instance() && byte_item_ != NULL;
}
inline void RedactImageRequest::clear_byte_item() {
  if (GetArenaNoVirtual() == NULL && byte_item_ != NULL) {
    delete byte_item_;
  }
  byte_item_ = NULL;
}
inline const ::google::privacy::dlp::v2::ByteContentItem& RedactImageRequest::_internal_byte_item() const {
  return *byte_item_;
}
inline const ::google::privacy::dlp::v2::ByteContentItem& RedactImageRequest::byte_item() const {
  const ::google::privacy::dlp::v2::ByteContentItem* p = byte_item_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RedactImageRequest.byte_item)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::ByteContentItem*>(
      &::google::privacy::dlp::v2::_ByteContentItem_default_instance_);
}
inline ::google::privacy::dlp::v2::ByteContentItem* RedactImageRequest::release_byte_item() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RedactImageRequest.byte_item)
  
  ::google::privacy::dlp::v2::ByteContentItem* temp = byte_item_;
  byte_item_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::ByteContentItem* RedactImageRequest::mutable_byte_item() {
  
  if (byte_item_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::ByteContentItem>(GetArenaNoVirtual());
    byte_item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RedactImageRequest.byte_item)
  return byte_item_;
}
inline void RedactImageRequest::set_allocated_byte_item(::google::privacy::dlp::v2::ByteContentItem* byte_item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete byte_item_;
  }
  if (byte_item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      byte_item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, byte_item, submessage_arena);
    }
    
  } else {
    
  }
  byte_item_ = byte_item;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RedactImageRequest.byte_item)
}

// -------------------------------------------------------------------

// Color

// float red = 1;
inline void Color::clear_red() {
  red_ = 0;
}
inline float Color::red() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Color.red)
  return red_;
}
inline void Color::set_red(float value) {
  
  red_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Color.red)
}

// float green = 2;
inline void Color::clear_green() {
  green_ = 0;
}
inline float Color::green() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Color.green)
  return green_;
}
inline void Color::set_green(float value) {
  
  green_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Color.green)
}

// float blue = 3;
inline void Color::clear_blue() {
  blue_ = 0;
}
inline float Color::blue() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Color.blue)
  return blue_;
}
inline void Color::set_blue(float value) {
  
  blue_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Color.blue)
}

// -------------------------------------------------------------------

// RedactImageResponse

// bytes redacted_image = 1;
inline void RedactImageResponse::clear_redacted_image() {
  redacted_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedactImageResponse::redacted_image() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RedactImageResponse.redacted_image)
  return redacted_image_.GetNoArena();
}
inline void RedactImageResponse::set_redacted_image(const ::std::string& value) {
  
  redacted_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.RedactImageResponse.redacted_image)
}
#if LANG_CXX11
inline void RedactImageResponse::set_redacted_image(::std::string&& value) {
  
  redacted_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.RedactImageResponse.redacted_image)
}
#endif
inline void RedactImageResponse::set_redacted_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redacted_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.RedactImageResponse.redacted_image)
}
inline void RedactImageResponse::set_redacted_image(const void* value, size_t size) {
  
  redacted_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.RedactImageResponse.redacted_image)
}
inline ::std::string* RedactImageResponse::mutable_redacted_image() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RedactImageResponse.redacted_image)
  return redacted_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedactImageResponse::release_redacted_image() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RedactImageResponse.redacted_image)
  
  return redacted_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedactImageResponse::set_allocated_redacted_image(::std::string* redacted_image) {
  if (redacted_image != NULL) {
    
  } else {
    
  }
  redacted_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redacted_image);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RedactImageResponse.redacted_image)
}

// string extracted_text = 2;
inline void RedactImageResponse::clear_extracted_text() {
  extracted_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedactImageResponse::extracted_text() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RedactImageResponse.extracted_text)
  return extracted_text_.GetNoArena();
}
inline void RedactImageResponse::set_extracted_text(const ::std::string& value) {
  
  extracted_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.RedactImageResponse.extracted_text)
}
#if LANG_CXX11
inline void RedactImageResponse::set_extracted_text(::std::string&& value) {
  
  extracted_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.RedactImageResponse.extracted_text)
}
#endif
inline void RedactImageResponse::set_extracted_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extracted_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.RedactImageResponse.extracted_text)
}
inline void RedactImageResponse::set_extracted_text(const char* value, size_t size) {
  
  extracted_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.RedactImageResponse.extracted_text)
}
inline ::std::string* RedactImageResponse::mutable_extracted_text() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RedactImageResponse.extracted_text)
  return extracted_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedactImageResponse::release_extracted_text() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RedactImageResponse.extracted_text)
  
  return extracted_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedactImageResponse::set_allocated_extracted_text(::std::string* extracted_text) {
  if (extracted_text != NULL) {
    
  } else {
    
  }
  extracted_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extracted_text);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RedactImageResponse.extracted_text)
}

// .google.privacy.dlp.v2.InspectResult inspect_result = 3;
inline bool RedactImageResponse::has_inspect_result() const {
  return this != internal_default_instance() && inspect_result_ != NULL;
}
inline void RedactImageResponse::clear_inspect_result() {
  if (GetArenaNoVirtual() == NULL && inspect_result_ != NULL) {
    delete inspect_result_;
  }
  inspect_result_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectResult& RedactImageResponse::_internal_inspect_result() const {
  return *inspect_result_;
}
inline const ::google::privacy::dlp::v2::InspectResult& RedactImageResponse::inspect_result() const {
  const ::google::privacy::dlp::v2::InspectResult* p = inspect_result_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RedactImageResponse.inspect_result)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectResult*>(
      &::google::privacy::dlp::v2::_InspectResult_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectResult* RedactImageResponse::release_inspect_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RedactImageResponse.inspect_result)
  
  ::google::privacy::dlp::v2::InspectResult* temp = inspect_result_;
  inspect_result_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectResult* RedactImageResponse::mutable_inspect_result() {
  
  if (inspect_result_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectResult>(GetArenaNoVirtual());
    inspect_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RedactImageResponse.inspect_result)
  return inspect_result_;
}
inline void RedactImageResponse::set_allocated_inspect_result(::google::privacy::dlp::v2::InspectResult* inspect_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_result_;
  }
  if (inspect_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_result, submessage_arena);
    }
    
  } else {
    
  }
  inspect_result_ = inspect_result;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RedactImageResponse.inspect_result)
}

// -------------------------------------------------------------------

// DeidentifyContentRequest

// string parent = 1;
inline void DeidentifyContentRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeidentifyContentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyContentRequest.parent)
  return parent_.GetNoArena();
}
inline void DeidentifyContentRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DeidentifyContentRequest.parent)
}
#if LANG_CXX11
inline void DeidentifyContentRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DeidentifyContentRequest.parent)
}
#endif
inline void DeidentifyContentRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DeidentifyContentRequest.parent)
}
inline void DeidentifyContentRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DeidentifyContentRequest.parent)
}
inline ::std::string* DeidentifyContentRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyContentRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeidentifyContentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyContentRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeidentifyContentRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyContentRequest.parent)
}

// .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 2;
inline bool DeidentifyContentRequest::has_deidentify_config() const {
  return this != internal_default_instance() && deidentify_config_ != NULL;
}
inline void DeidentifyContentRequest::clear_deidentify_config() {
  if (GetArenaNoVirtual() == NULL && deidentify_config_ != NULL) {
    delete deidentify_config_;
  }
  deidentify_config_ = NULL;
}
inline const ::google::privacy::dlp::v2::DeidentifyConfig& DeidentifyContentRequest::_internal_deidentify_config() const {
  return *deidentify_config_;
}
inline const ::google::privacy::dlp::v2::DeidentifyConfig& DeidentifyContentRequest::deidentify_config() const {
  const ::google::privacy::dlp::v2::DeidentifyConfig* p = deidentify_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::DeidentifyConfig*>(
      &::google::privacy::dlp::v2::_DeidentifyConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::DeidentifyConfig* DeidentifyContentRequest::release_deidentify_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_config)
  
  ::google::privacy::dlp::v2::DeidentifyConfig* temp = deidentify_config_;
  deidentify_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::DeidentifyConfig* DeidentifyContentRequest::mutable_deidentify_config() {
  
  if (deidentify_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::DeidentifyConfig>(GetArenaNoVirtual());
    deidentify_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_config)
  return deidentify_config_;
}
inline void DeidentifyContentRequest::set_allocated_deidentify_config(::google::privacy::dlp::v2::DeidentifyConfig* deidentify_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deidentify_config_;
  }
  if (deidentify_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deidentify_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deidentify_config, submessage_arena);
    }
    
  } else {
    
  }
  deidentify_config_ = deidentify_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_config)
}

// .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
inline bool DeidentifyContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void DeidentifyContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectConfig& DeidentifyContentRequest::_internal_inspect_config() const {
  return *inspect_config_;
}
inline const ::google::privacy::dlp::v2::InspectConfig& DeidentifyContentRequest::inspect_config() const {
  const ::google::privacy::dlp::v2::InspectConfig* p = inspect_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectConfig*>(
      &::google::privacy::dlp::v2::_InspectConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectConfig* DeidentifyContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectConfig* DeidentifyContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectConfig>(GetArenaNoVirtual());
    inspect_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_config)
  return inspect_config_;
}
inline void DeidentifyContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_config_;
  }
  if (inspect_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_config, submessage_arena);
    }
    
  } else {
    
  }
  inspect_config_ = inspect_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_config)
}

// .google.privacy.dlp.v2.ContentItem item = 4;
inline bool DeidentifyContentRequest::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void DeidentifyContentRequest::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::google::privacy::dlp::v2::ContentItem& DeidentifyContentRequest::_internal_item() const {
  return *item_;
}
inline const ::google::privacy::dlp::v2::ContentItem& DeidentifyContentRequest::item() const {
  const ::google::privacy::dlp::v2::ContentItem* p = item_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyContentRequest.item)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::ContentItem*>(
      &::google::privacy::dlp::v2::_ContentItem_default_instance_);
}
inline ::google::privacy::dlp::v2::ContentItem* DeidentifyContentRequest::release_item() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyContentRequest.item)
  
  ::google::privacy::dlp::v2::ContentItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::ContentItem* DeidentifyContentRequest::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::ContentItem>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyContentRequest.item)
  return item_;
}
inline void DeidentifyContentRequest::set_allocated_item(::google::privacy::dlp::v2::ContentItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyContentRequest.item)
}

// string inspect_template_name = 5;
inline void DeidentifyContentRequest::clear_inspect_template_name() {
  inspect_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeidentifyContentRequest::inspect_template_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name)
  return inspect_template_name_.GetNoArena();
}
inline void DeidentifyContentRequest::set_inspect_template_name(const ::std::string& value) {
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name)
}
#if LANG_CXX11
inline void DeidentifyContentRequest::set_inspect_template_name(::std::string&& value) {
  
  inspect_template_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name)
}
#endif
inline void DeidentifyContentRequest::set_inspect_template_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name)
}
inline void DeidentifyContentRequest::set_inspect_template_name(const char* value, size_t size) {
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name)
}
inline ::std::string* DeidentifyContentRequest::mutable_inspect_template_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name)
  return inspect_template_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeidentifyContentRequest::release_inspect_template_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name)
  
  return inspect_template_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeidentifyContentRequest::set_allocated_inspect_template_name(::std::string* inspect_template_name) {
  if (inspect_template_name != NULL) {
    
  } else {
    
  }
  inspect_template_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inspect_template_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name)
}

// string deidentify_template_name = 6;
inline void DeidentifyContentRequest::clear_deidentify_template_name() {
  deidentify_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeidentifyContentRequest::deidentify_template_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name)
  return deidentify_template_name_.GetNoArena();
}
inline void DeidentifyContentRequest::set_deidentify_template_name(const ::std::string& value) {
  
  deidentify_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name)
}
#if LANG_CXX11
inline void DeidentifyContentRequest::set_deidentify_template_name(::std::string&& value) {
  
  deidentify_template_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name)
}
#endif
inline void DeidentifyContentRequest::set_deidentify_template_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deidentify_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name)
}
inline void DeidentifyContentRequest::set_deidentify_template_name(const char* value, size_t size) {
  
  deidentify_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name)
}
inline ::std::string* DeidentifyContentRequest::mutable_deidentify_template_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name)
  return deidentify_template_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeidentifyContentRequest::release_deidentify_template_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name)
  
  return deidentify_template_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeidentifyContentRequest::set_allocated_deidentify_template_name(::std::string* deidentify_template_name) {
  if (deidentify_template_name != NULL) {
    
  } else {
    
  }
  deidentify_template_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deidentify_template_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name)
}

// -------------------------------------------------------------------

// DeidentifyContentResponse

// .google.privacy.dlp.v2.ContentItem item = 1;
inline bool DeidentifyContentResponse::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void DeidentifyContentResponse::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::google::privacy::dlp::v2::ContentItem& DeidentifyContentResponse::_internal_item() const {
  return *item_;
}
inline const ::google::privacy::dlp::v2::ContentItem& DeidentifyContentResponse::item() const {
  const ::google::privacy::dlp::v2::ContentItem* p = item_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyContentResponse.item)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::ContentItem*>(
      &::google::privacy::dlp::v2::_ContentItem_default_instance_);
}
inline ::google::privacy::dlp::v2::ContentItem* DeidentifyContentResponse::release_item() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyContentResponse.item)
  
  ::google::privacy::dlp::v2::ContentItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::ContentItem* DeidentifyContentResponse::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::ContentItem>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyContentResponse.item)
  return item_;
}
inline void DeidentifyContentResponse::set_allocated_item(::google::privacy::dlp::v2::ContentItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyContentResponse.item)
}

// .google.privacy.dlp.v2.TransformationOverview overview = 2;
inline bool DeidentifyContentResponse::has_overview() const {
  return this != internal_default_instance() && overview_ != NULL;
}
inline void DeidentifyContentResponse::clear_overview() {
  if (GetArenaNoVirtual() == NULL && overview_ != NULL) {
    delete overview_;
  }
  overview_ = NULL;
}
inline const ::google::privacy::dlp::v2::TransformationOverview& DeidentifyContentResponse::_internal_overview() const {
  return *overview_;
}
inline const ::google::privacy::dlp::v2::TransformationOverview& DeidentifyContentResponse::overview() const {
  const ::google::privacy::dlp::v2::TransformationOverview* p = overview_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyContentResponse.overview)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::TransformationOverview*>(
      &::google::privacy::dlp::v2::_TransformationOverview_default_instance_);
}
inline ::google::privacy::dlp::v2::TransformationOverview* DeidentifyContentResponse::release_overview() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyContentResponse.overview)
  
  ::google::privacy::dlp::v2::TransformationOverview* temp = overview_;
  overview_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::TransformationOverview* DeidentifyContentResponse::mutable_overview() {
  
  if (overview_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::TransformationOverview>(GetArenaNoVirtual());
    overview_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyContentResponse.overview)
  return overview_;
}
inline void DeidentifyContentResponse::set_allocated_overview(::google::privacy::dlp::v2::TransformationOverview* overview) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete overview_;
  }
  if (overview) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      overview = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, overview, submessage_arena);
    }
    
  } else {
    
  }
  overview_ = overview;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyContentResponse.overview)
}

// -------------------------------------------------------------------

// ReidentifyContentRequest

// string parent = 1;
inline void ReidentifyContentRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReidentifyContentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ReidentifyContentRequest.parent)
  return parent_.GetNoArena();
}
inline void ReidentifyContentRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ReidentifyContentRequest.parent)
}
#if LANG_CXX11
inline void ReidentifyContentRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ReidentifyContentRequest.parent)
}
#endif
inline void ReidentifyContentRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ReidentifyContentRequest.parent)
}
inline void ReidentifyContentRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ReidentifyContentRequest.parent)
}
inline ::std::string* ReidentifyContentRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ReidentifyContentRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReidentifyContentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ReidentifyContentRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReidentifyContentRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ReidentifyContentRequest.parent)
}

// .google.privacy.dlp.v2.DeidentifyConfig reidentify_config = 2;
inline bool ReidentifyContentRequest::has_reidentify_config() const {
  return this != internal_default_instance() && reidentify_config_ != NULL;
}
inline void ReidentifyContentRequest::clear_reidentify_config() {
  if (GetArenaNoVirtual() == NULL && reidentify_config_ != NULL) {
    delete reidentify_config_;
  }
  reidentify_config_ = NULL;
}
inline const ::google::privacy::dlp::v2::DeidentifyConfig& ReidentifyContentRequest::_internal_reidentify_config() const {
  return *reidentify_config_;
}
inline const ::google::privacy::dlp::v2::DeidentifyConfig& ReidentifyContentRequest::reidentify_config() const {
  const ::google::privacy::dlp::v2::DeidentifyConfig* p = reidentify_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::DeidentifyConfig*>(
      &::google::privacy::dlp::v2::_DeidentifyConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::DeidentifyConfig* ReidentifyContentRequest::release_reidentify_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_config)
  
  ::google::privacy::dlp::v2::DeidentifyConfig* temp = reidentify_config_;
  reidentify_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::DeidentifyConfig* ReidentifyContentRequest::mutable_reidentify_config() {
  
  if (reidentify_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::DeidentifyConfig>(GetArenaNoVirtual());
    reidentify_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_config)
  return reidentify_config_;
}
inline void ReidentifyContentRequest::set_allocated_reidentify_config(::google::privacy::dlp::v2::DeidentifyConfig* reidentify_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reidentify_config_;
  }
  if (reidentify_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reidentify_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reidentify_config, submessage_arena);
    }
    
  } else {
    
  }
  reidentify_config_ = reidentify_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_config)
}

// .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
inline bool ReidentifyContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void ReidentifyContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectConfig& ReidentifyContentRequest::_internal_inspect_config() const {
  return *inspect_config_;
}
inline const ::google::privacy::dlp::v2::InspectConfig& ReidentifyContentRequest::inspect_config() const {
  const ::google::privacy::dlp::v2::InspectConfig* p = inspect_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectConfig*>(
      &::google::privacy::dlp::v2::_InspectConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectConfig* ReidentifyContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectConfig* ReidentifyContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectConfig>(GetArenaNoVirtual());
    inspect_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_config)
  return inspect_config_;
}
inline void ReidentifyContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_config_;
  }
  if (inspect_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_config, submessage_arena);
    }
    
  } else {
    
  }
  inspect_config_ = inspect_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_config)
}

// .google.privacy.dlp.v2.ContentItem item = 4;
inline bool ReidentifyContentRequest::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void ReidentifyContentRequest::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::google::privacy::dlp::v2::ContentItem& ReidentifyContentRequest::_internal_item() const {
  return *item_;
}
inline const ::google::privacy::dlp::v2::ContentItem& ReidentifyContentRequest::item() const {
  const ::google::privacy::dlp::v2::ContentItem* p = item_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ReidentifyContentRequest.item)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::ContentItem*>(
      &::google::privacy::dlp::v2::_ContentItem_default_instance_);
}
inline ::google::privacy::dlp::v2::ContentItem* ReidentifyContentRequest::release_item() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ReidentifyContentRequest.item)
  
  ::google::privacy::dlp::v2::ContentItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::ContentItem* ReidentifyContentRequest::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::ContentItem>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ReidentifyContentRequest.item)
  return item_;
}
inline void ReidentifyContentRequest::set_allocated_item(::google::privacy::dlp::v2::ContentItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ReidentifyContentRequest.item)
}

// string inspect_template_name = 5;
inline void ReidentifyContentRequest::clear_inspect_template_name() {
  inspect_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReidentifyContentRequest::inspect_template_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name)
  return inspect_template_name_.GetNoArena();
}
inline void ReidentifyContentRequest::set_inspect_template_name(const ::std::string& value) {
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name)
}
#if LANG_CXX11
inline void ReidentifyContentRequest::set_inspect_template_name(::std::string&& value) {
  
  inspect_template_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name)
}
#endif
inline void ReidentifyContentRequest::set_inspect_template_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name)
}
inline void ReidentifyContentRequest::set_inspect_template_name(const char* value, size_t size) {
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name)
}
inline ::std::string* ReidentifyContentRequest::mutable_inspect_template_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name)
  return inspect_template_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReidentifyContentRequest::release_inspect_template_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name)
  
  return inspect_template_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReidentifyContentRequest::set_allocated_inspect_template_name(::std::string* inspect_template_name) {
  if (inspect_template_name != NULL) {
    
  } else {
    
  }
  inspect_template_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inspect_template_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name)
}

// string reidentify_template_name = 6;
inline void ReidentifyContentRequest::clear_reidentify_template_name() {
  reidentify_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReidentifyContentRequest::reidentify_template_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name)
  return reidentify_template_name_.GetNoArena();
}
inline void ReidentifyContentRequest::set_reidentify_template_name(const ::std::string& value) {
  
  reidentify_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name)
}
#if LANG_CXX11
inline void ReidentifyContentRequest::set_reidentify_template_name(::std::string&& value) {
  
  reidentify_template_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name)
}
#endif
inline void ReidentifyContentRequest::set_reidentify_template_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reidentify_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name)
}
inline void ReidentifyContentRequest::set_reidentify_template_name(const char* value, size_t size) {
  
  reidentify_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name)
}
inline ::std::string* ReidentifyContentRequest::mutable_reidentify_template_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name)
  return reidentify_template_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReidentifyContentRequest::release_reidentify_template_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name)
  
  return reidentify_template_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReidentifyContentRequest::set_allocated_reidentify_template_name(::std::string* reidentify_template_name) {
  if (reidentify_template_name != NULL) {
    
  } else {
    
  }
  reidentify_template_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reidentify_template_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name)
}

// -------------------------------------------------------------------

// ReidentifyContentResponse

// .google.privacy.dlp.v2.ContentItem item = 1;
inline bool ReidentifyContentResponse::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void ReidentifyContentResponse::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::google::privacy::dlp::v2::ContentItem& ReidentifyContentResponse::_internal_item() const {
  return *item_;
}
inline const ::google::privacy::dlp::v2::ContentItem& ReidentifyContentResponse::item() const {
  const ::google::privacy::dlp::v2::ContentItem* p = item_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ReidentifyContentResponse.item)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::ContentItem*>(
      &::google::privacy::dlp::v2::_ContentItem_default_instance_);
}
inline ::google::privacy::dlp::v2::ContentItem* ReidentifyContentResponse::release_item() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ReidentifyContentResponse.item)
  
  ::google::privacy::dlp::v2::ContentItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::ContentItem* ReidentifyContentResponse::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::ContentItem>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ReidentifyContentResponse.item)
  return item_;
}
inline void ReidentifyContentResponse::set_allocated_item(::google::privacy::dlp::v2::ContentItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ReidentifyContentResponse.item)
}

// .google.privacy.dlp.v2.TransformationOverview overview = 2;
inline bool ReidentifyContentResponse::has_overview() const {
  return this != internal_default_instance() && overview_ != NULL;
}
inline void ReidentifyContentResponse::clear_overview() {
  if (GetArenaNoVirtual() == NULL && overview_ != NULL) {
    delete overview_;
  }
  overview_ = NULL;
}
inline const ::google::privacy::dlp::v2::TransformationOverview& ReidentifyContentResponse::_internal_overview() const {
  return *overview_;
}
inline const ::google::privacy::dlp::v2::TransformationOverview& ReidentifyContentResponse::overview() const {
  const ::google::privacy::dlp::v2::TransformationOverview* p = overview_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ReidentifyContentResponse.overview)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::TransformationOverview*>(
      &::google::privacy::dlp::v2::_TransformationOverview_default_instance_);
}
inline ::google::privacy::dlp::v2::TransformationOverview* ReidentifyContentResponse::release_overview() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ReidentifyContentResponse.overview)
  
  ::google::privacy::dlp::v2::TransformationOverview* temp = overview_;
  overview_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::TransformationOverview* ReidentifyContentResponse::mutable_overview() {
  
  if (overview_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::TransformationOverview>(GetArenaNoVirtual());
    overview_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ReidentifyContentResponse.overview)
  return overview_;
}
inline void ReidentifyContentResponse::set_allocated_overview(::google::privacy::dlp::v2::TransformationOverview* overview) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete overview_;
  }
  if (overview) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      overview = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, overview, submessage_arena);
    }
    
  } else {
    
  }
  overview_ = overview;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ReidentifyContentResponse.overview)
}

// -------------------------------------------------------------------

// InspectContentRequest

// string parent = 1;
inline void InspectContentRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InspectContentRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectContentRequest.parent)
  return parent_.GetNoArena();
}
inline void InspectContentRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectContentRequest.parent)
}
#if LANG_CXX11
inline void InspectContentRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.InspectContentRequest.parent)
}
#endif
inline void InspectContentRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.InspectContentRequest.parent)
}
inline void InspectContentRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.InspectContentRequest.parent)
}
inline ::std::string* InspectContentRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectContentRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InspectContentRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectContentRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InspectContentRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectContentRequest.parent)
}

// .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
inline bool InspectContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void InspectContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectConfig& InspectContentRequest::_internal_inspect_config() const {
  return *inspect_config_;
}
inline const ::google::privacy::dlp::v2::InspectConfig& InspectContentRequest::inspect_config() const {
  const ::google::privacy::dlp::v2::InspectConfig* p = inspect_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectContentRequest.inspect_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectConfig*>(
      &::google::privacy::dlp::v2::_InspectConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectConfig* InspectContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectConfig* InspectContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectConfig>(GetArenaNoVirtual());
    inspect_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectContentRequest.inspect_config)
  return inspect_config_;
}
inline void InspectContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_config_;
  }
  if (inspect_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_config, submessage_arena);
    }
    
  } else {
    
  }
  inspect_config_ = inspect_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectContentRequest.inspect_config)
}

// .google.privacy.dlp.v2.ContentItem item = 3;
inline bool InspectContentRequest::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void InspectContentRequest::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::google::privacy::dlp::v2::ContentItem& InspectContentRequest::_internal_item() const {
  return *item_;
}
inline const ::google::privacy::dlp::v2::ContentItem& InspectContentRequest::item() const {
  const ::google::privacy::dlp::v2::ContentItem* p = item_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectContentRequest.item)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::ContentItem*>(
      &::google::privacy::dlp::v2::_ContentItem_default_instance_);
}
inline ::google::privacy::dlp::v2::ContentItem* InspectContentRequest::release_item() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectContentRequest.item)
  
  ::google::privacy::dlp::v2::ContentItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::ContentItem* InspectContentRequest::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::ContentItem>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectContentRequest.item)
  return item_;
}
inline void InspectContentRequest::set_allocated_item(::google::privacy::dlp::v2::ContentItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectContentRequest.item)
}

// string inspect_template_name = 4;
inline void InspectContentRequest::clear_inspect_template_name() {
  inspect_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InspectContentRequest::inspect_template_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectContentRequest.inspect_template_name)
  return inspect_template_name_.GetNoArena();
}
inline void InspectContentRequest::set_inspect_template_name(const ::std::string& value) {
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectContentRequest.inspect_template_name)
}
#if LANG_CXX11
inline void InspectContentRequest::set_inspect_template_name(::std::string&& value) {
  
  inspect_template_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.InspectContentRequest.inspect_template_name)
}
#endif
inline void InspectContentRequest::set_inspect_template_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.InspectContentRequest.inspect_template_name)
}
inline void InspectContentRequest::set_inspect_template_name(const char* value, size_t size) {
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.InspectContentRequest.inspect_template_name)
}
inline ::std::string* InspectContentRequest::mutable_inspect_template_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectContentRequest.inspect_template_name)
  return inspect_template_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InspectContentRequest::release_inspect_template_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectContentRequest.inspect_template_name)
  
  return inspect_template_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InspectContentRequest::set_allocated_inspect_template_name(::std::string* inspect_template_name) {
  if (inspect_template_name != NULL) {
    
  } else {
    
  }
  inspect_template_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inspect_template_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectContentRequest.inspect_template_name)
}

// -------------------------------------------------------------------

// InspectContentResponse

// .google.privacy.dlp.v2.InspectResult result = 1;
inline bool InspectContentResponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void InspectContentResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectResult& InspectContentResponse::_internal_result() const {
  return *result_;
}
inline const ::google::privacy::dlp::v2::InspectResult& InspectContentResponse::result() const {
  const ::google::privacy::dlp::v2::InspectResult* p = result_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectContentResponse.result)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectResult*>(
      &::google::privacy::dlp::v2::_InspectResult_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectResult* InspectContentResponse::release_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectContentResponse.result)
  
  ::google::privacy::dlp::v2::InspectResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectResult* InspectContentResponse::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectResult>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectContentResponse.result)
  return result_;
}
inline void InspectContentResponse::set_allocated_result(::google::privacy::dlp::v2::InspectResult* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectContentResponse.result)
}

// -------------------------------------------------------------------

// OutputStorageConfig

// .google.privacy.dlp.v2.BigQueryTable table = 1;
inline bool OutputStorageConfig::has_table() const {
  return type_case() == kTable;
}
inline void OutputStorageConfig::set_has_table() {
  _oneof_case_[0] = kTable;
}
inline const ::google::privacy::dlp::v2::BigQueryTable& OutputStorageConfig::_internal_table() const {
  return *type_.table_;
}
inline ::google::privacy::dlp::v2::BigQueryTable* OutputStorageConfig::release_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.OutputStorageConfig.table)
  if (has_table()) {
    clear_has_type();
      ::google::privacy::dlp::v2::BigQueryTable* temp = type_.table_;
    type_.table_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::BigQueryTable& OutputStorageConfig::table() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.OutputStorageConfig.table)
  return has_table()
      ? *type_.table_
      : *reinterpret_cast< ::google::privacy::dlp::v2::BigQueryTable*>(&::google::privacy::dlp::v2::_BigQueryTable_default_instance_);
}
inline ::google::privacy::dlp::v2::BigQueryTable* OutputStorageConfig::mutable_table() {
  if (!has_table()) {
    clear_type();
    set_has_table();
    type_.table_ = CreateMaybeMessage< ::google::privacy::dlp::v2::BigQueryTable >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.OutputStorageConfig.table)
  return type_.table_;
}

// .google.privacy.dlp.v2.OutputStorageConfig.OutputSchema output_schema = 3;
inline void OutputStorageConfig::clear_output_schema() {
  output_schema_ = 0;
}
inline ::google::privacy::dlp::v2::OutputStorageConfig_OutputSchema OutputStorageConfig::output_schema() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.OutputStorageConfig.output_schema)
  return static_cast< ::google::privacy::dlp::v2::OutputStorageConfig_OutputSchema >(output_schema_);
}
inline void OutputStorageConfig::set_output_schema(::google::privacy::dlp::v2::OutputStorageConfig_OutputSchema value) {
  
  output_schema_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.OutputStorageConfig.output_schema)
}

inline bool OutputStorageConfig::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void OutputStorageConfig::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline OutputStorageConfig::TypeCase OutputStorageConfig::type_case() const {
  return OutputStorageConfig::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InfoTypeStats

// .google.privacy.dlp.v2.InfoType info_type = 1;
inline bool InfoTypeStats::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline const ::google::privacy::dlp::v2::InfoType& InfoTypeStats::_internal_info_type() const {
  return *info_type_;
}
inline const ::google::privacy::dlp::v2::InfoType& InfoTypeStats::info_type() const {
  const ::google::privacy::dlp::v2::InfoType* p = info_type_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InfoTypeStats.info_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InfoType*>(
      &::google::privacy::dlp::v2::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2::InfoType* InfoTypeStats::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InfoTypeStats.info_type)
  
  ::google::privacy::dlp::v2::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InfoType* InfoTypeStats::mutable_info_type() {
  
  if (info_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InfoType>(GetArenaNoVirtual());
    info_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InfoTypeStats.info_type)
  return info_type_;
}
inline void InfoTypeStats::set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_type_);
  }
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    
  } else {
    
  }
  info_type_ = info_type;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InfoTypeStats.info_type)
}

// int64 count = 2;
inline void InfoTypeStats::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InfoTypeStats::count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InfoTypeStats.count)
  return count_;
}
inline void InfoTypeStats::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InfoTypeStats.count)
}

// -------------------------------------------------------------------

// InspectDataSourceDetails_RequestedOptions

// .google.privacy.dlp.v2.InspectTemplate snapshot_inspect_template = 1;
inline bool InspectDataSourceDetails_RequestedOptions::has_snapshot_inspect_template() const {
  return this != internal_default_instance() && snapshot_inspect_template_ != NULL;
}
inline void InspectDataSourceDetails_RequestedOptions::clear_snapshot_inspect_template() {
  if (GetArenaNoVirtual() == NULL && snapshot_inspect_template_ != NULL) {
    delete snapshot_inspect_template_;
  }
  snapshot_inspect_template_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectTemplate& InspectDataSourceDetails_RequestedOptions::_internal_snapshot_inspect_template() const {
  return *snapshot_inspect_template_;
}
inline const ::google::privacy::dlp::v2::InspectTemplate& InspectDataSourceDetails_RequestedOptions::snapshot_inspect_template() const {
  const ::google::privacy::dlp::v2::InspectTemplate* p = snapshot_inspect_template_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.snapshot_inspect_template)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectTemplate*>(
      &::google::privacy::dlp::v2::_InspectTemplate_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectTemplate* InspectDataSourceDetails_RequestedOptions::release_snapshot_inspect_template() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.snapshot_inspect_template)
  
  ::google::privacy::dlp::v2::InspectTemplate* temp = snapshot_inspect_template_;
  snapshot_inspect_template_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectTemplate* InspectDataSourceDetails_RequestedOptions::mutable_snapshot_inspect_template() {
  
  if (snapshot_inspect_template_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectTemplate>(GetArenaNoVirtual());
    snapshot_inspect_template_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.snapshot_inspect_template)
  return snapshot_inspect_template_;
}
inline void InspectDataSourceDetails_RequestedOptions::set_allocated_snapshot_inspect_template(::google::privacy::dlp::v2::InspectTemplate* snapshot_inspect_template) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete snapshot_inspect_template_;
  }
  if (snapshot_inspect_template) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      snapshot_inspect_template = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, snapshot_inspect_template, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_inspect_template_ = snapshot_inspect_template;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.snapshot_inspect_template)
}

// .google.privacy.dlp.v2.InspectJobConfig job_config = 3;
inline bool InspectDataSourceDetails_RequestedOptions::has_job_config() const {
  return this != internal_default_instance() && job_config_ != NULL;
}
inline void InspectDataSourceDetails_RequestedOptions::clear_job_config() {
  if (GetArenaNoVirtual() == NULL && job_config_ != NULL) {
    delete job_config_;
  }
  job_config_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectJobConfig& InspectDataSourceDetails_RequestedOptions::_internal_job_config() const {
  return *job_config_;
}
inline const ::google::privacy::dlp::v2::InspectJobConfig& InspectDataSourceDetails_RequestedOptions::job_config() const {
  const ::google::privacy::dlp::v2::InspectJobConfig* p = job_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.job_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectJobConfig*>(
      &::google::privacy::dlp::v2::_InspectJobConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectJobConfig* InspectDataSourceDetails_RequestedOptions::release_job_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.job_config)
  
  ::google::privacy::dlp::v2::InspectJobConfig* temp = job_config_;
  job_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectJobConfig* InspectDataSourceDetails_RequestedOptions::mutable_job_config() {
  
  if (job_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectJobConfig>(GetArenaNoVirtual());
    job_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.job_config)
  return job_config_;
}
inline void InspectDataSourceDetails_RequestedOptions::set_allocated_job_config(::google::privacy::dlp::v2::InspectJobConfig* job_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_config_;
  }
  if (job_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job_config, submessage_arena);
    }
    
  } else {
    
  }
  job_config_ = job_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.job_config)
}

// -------------------------------------------------------------------

// InspectDataSourceDetails_Result

// int64 processed_bytes = 1;
inline void InspectDataSourceDetails_Result::clear_processed_bytes() {
  processed_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InspectDataSourceDetails_Result::processed_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectDataSourceDetails.Result.processed_bytes)
  return processed_bytes_;
}
inline void InspectDataSourceDetails_Result::set_processed_bytes(::google::protobuf::int64 value) {
  
  processed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectDataSourceDetails.Result.processed_bytes)
}

// int64 total_estimated_bytes = 2;
inline void InspectDataSourceDetails_Result::clear_total_estimated_bytes() {
  total_estimated_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InspectDataSourceDetails_Result::total_estimated_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectDataSourceDetails.Result.total_estimated_bytes)
  return total_estimated_bytes_;
}
inline void InspectDataSourceDetails_Result::set_total_estimated_bytes(::google::protobuf::int64 value) {
  
  total_estimated_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectDataSourceDetails.Result.total_estimated_bytes)
}

// repeated .google.privacy.dlp.v2.InfoTypeStats info_type_stats = 3;
inline int InspectDataSourceDetails_Result::info_type_stats_size() const {
  return info_type_stats_.size();
}
inline void InspectDataSourceDetails_Result::clear_info_type_stats() {
  info_type_stats_.Clear();
}
inline ::google::privacy::dlp::v2::InfoTypeStats* InspectDataSourceDetails_Result::mutable_info_type_stats(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectDataSourceDetails.Result.info_type_stats)
  return info_type_stats_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeStats >*
InspectDataSourceDetails_Result::mutable_info_type_stats() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.InspectDataSourceDetails.Result.info_type_stats)
  return &info_type_stats_;
}
inline const ::google::privacy::dlp::v2::InfoTypeStats& InspectDataSourceDetails_Result::info_type_stats(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectDataSourceDetails.Result.info_type_stats)
  return info_type_stats_.Get(index);
}
inline ::google::privacy::dlp::v2::InfoTypeStats* InspectDataSourceDetails_Result::add_info_type_stats() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.InspectDataSourceDetails.Result.info_type_stats)
  return info_type_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeStats >&
InspectDataSourceDetails_Result::info_type_stats() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.InspectDataSourceDetails.Result.info_type_stats)
  return info_type_stats_;
}

// -------------------------------------------------------------------

// InspectDataSourceDetails

// .google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions requested_options = 2;
inline bool InspectDataSourceDetails::has_requested_options() const {
  return this != internal_default_instance() && requested_options_ != NULL;
}
inline void InspectDataSourceDetails::clear_requested_options() {
  if (GetArenaNoVirtual() == NULL && requested_options_ != NULL) {
    delete requested_options_;
  }
  requested_options_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions& InspectDataSourceDetails::_internal_requested_options() const {
  return *requested_options_;
}
inline const ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions& InspectDataSourceDetails::requested_options() const {
  const ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions* p = requested_options_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectDataSourceDetails.requested_options)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions*>(
      &::google::privacy::dlp::v2::_InspectDataSourceDetails_RequestedOptions_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions* InspectDataSourceDetails::release_requested_options() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectDataSourceDetails.requested_options)
  
  ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions* temp = requested_options_;
  requested_options_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions* InspectDataSourceDetails::mutable_requested_options() {
  
  if (requested_options_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions>(GetArenaNoVirtual());
    requested_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectDataSourceDetails.requested_options)
  return requested_options_;
}
inline void InspectDataSourceDetails::set_allocated_requested_options(::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions* requested_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete requested_options_;
  }
  if (requested_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      requested_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requested_options, submessage_arena);
    }
    
  } else {
    
  }
  requested_options_ = requested_options;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectDataSourceDetails.requested_options)
}

// .google.privacy.dlp.v2.InspectDataSourceDetails.Result result = 3;
inline bool InspectDataSourceDetails::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void InspectDataSourceDetails::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectDataSourceDetails_Result& InspectDataSourceDetails::_internal_result() const {
  return *result_;
}
inline const ::google::privacy::dlp::v2::InspectDataSourceDetails_Result& InspectDataSourceDetails::result() const {
  const ::google::privacy::dlp::v2::InspectDataSourceDetails_Result* p = result_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectDataSourceDetails.result)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectDataSourceDetails_Result*>(
      &::google::privacy::dlp::v2::_InspectDataSourceDetails_Result_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectDataSourceDetails_Result* InspectDataSourceDetails::release_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectDataSourceDetails.result)
  
  ::google::privacy::dlp::v2::InspectDataSourceDetails_Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectDataSourceDetails_Result* InspectDataSourceDetails::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectDataSourceDetails_Result>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectDataSourceDetails.result)
  return result_;
}
inline void InspectDataSourceDetails::set_allocated_result(::google::privacy::dlp::v2::InspectDataSourceDetails_Result* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectDataSourceDetails.result)
}

// -------------------------------------------------------------------

// InfoTypeDescription

// string name = 1;
inline void InfoTypeDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoTypeDescription::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InfoTypeDescription.name)
  return name_.GetNoArena();
}
inline void InfoTypeDescription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InfoTypeDescription.name)
}
#if LANG_CXX11
inline void InfoTypeDescription::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.InfoTypeDescription.name)
}
#endif
inline void InfoTypeDescription::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.InfoTypeDescription.name)
}
inline void InfoTypeDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.InfoTypeDescription.name)
}
inline ::std::string* InfoTypeDescription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InfoTypeDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoTypeDescription::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InfoTypeDescription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoTypeDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InfoTypeDescription.name)
}

// string display_name = 2;
inline void InfoTypeDescription::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoTypeDescription::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InfoTypeDescription.display_name)
  return display_name_.GetNoArena();
}
inline void InfoTypeDescription::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InfoTypeDescription.display_name)
}
#if LANG_CXX11
inline void InfoTypeDescription::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.InfoTypeDescription.display_name)
}
#endif
inline void InfoTypeDescription::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.InfoTypeDescription.display_name)
}
inline void InfoTypeDescription::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.InfoTypeDescription.display_name)
}
inline ::std::string* InfoTypeDescription::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InfoTypeDescription.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoTypeDescription::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InfoTypeDescription.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoTypeDescription::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InfoTypeDescription.display_name)
}

// repeated .google.privacy.dlp.v2.InfoTypeSupportedBy supported_by = 3;
inline int InfoTypeDescription::supported_by_size() const {
  return supported_by_.size();
}
inline void InfoTypeDescription::clear_supported_by() {
  supported_by_.Clear();
}
inline ::google::privacy::dlp::v2::InfoTypeSupportedBy InfoTypeDescription::supported_by(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InfoTypeDescription.supported_by)
  return static_cast< ::google::privacy::dlp::v2::InfoTypeSupportedBy >(supported_by_.Get(index));
}
inline void InfoTypeDescription::set_supported_by(int index, ::google::privacy::dlp::v2::InfoTypeSupportedBy value) {
  supported_by_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InfoTypeDescription.supported_by)
}
inline void InfoTypeDescription::add_supported_by(::google::privacy::dlp::v2::InfoTypeSupportedBy value) {
  supported_by_.Add(value);
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.InfoTypeDescription.supported_by)
}
inline const ::google::protobuf::RepeatedField<int>&
InfoTypeDescription::supported_by() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.InfoTypeDescription.supported_by)
  return supported_by_;
}
inline ::google::protobuf::RepeatedField<int>*
InfoTypeDescription::mutable_supported_by() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.InfoTypeDescription.supported_by)
  return &supported_by_;
}

// -------------------------------------------------------------------

// ListInfoTypesRequest

// string language_code = 1;
inline void ListInfoTypesRequest::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInfoTypesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListInfoTypesRequest.language_code)
  return language_code_.GetNoArena();
}
inline void ListInfoTypesRequest::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListInfoTypesRequest.language_code)
}
#if LANG_CXX11
inline void ListInfoTypesRequest::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListInfoTypesRequest.language_code)
}
#endif
inline void ListInfoTypesRequest::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListInfoTypesRequest.language_code)
}
inline void ListInfoTypesRequest::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListInfoTypesRequest.language_code)
}
inline ::std::string* ListInfoTypesRequest::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListInfoTypesRequest.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInfoTypesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListInfoTypesRequest.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInfoTypesRequest::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListInfoTypesRequest.language_code)
}

// string filter = 2;
inline void ListInfoTypesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInfoTypesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListInfoTypesRequest.filter)
  return filter_.GetNoArena();
}
inline void ListInfoTypesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListInfoTypesRequest.filter)
}
#if LANG_CXX11
inline void ListInfoTypesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListInfoTypesRequest.filter)
}
#endif
inline void ListInfoTypesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListInfoTypesRequest.filter)
}
inline void ListInfoTypesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListInfoTypesRequest.filter)
}
inline ::std::string* ListInfoTypesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListInfoTypesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInfoTypesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListInfoTypesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInfoTypesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListInfoTypesRequest.filter)
}

// -------------------------------------------------------------------

// ListInfoTypesResponse

// repeated .google.privacy.dlp.v2.InfoTypeDescription info_types = 1;
inline int ListInfoTypesResponse::info_types_size() const {
  return info_types_.size();
}
inline void ListInfoTypesResponse::clear_info_types() {
  info_types_.Clear();
}
inline ::google::privacy::dlp::v2::InfoTypeDescription* ListInfoTypesResponse::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListInfoTypesResponse.info_types)
  return info_types_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeDescription >*
ListInfoTypesResponse::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.ListInfoTypesResponse.info_types)
  return &info_types_;
}
inline const ::google::privacy::dlp::v2::InfoTypeDescription& ListInfoTypesResponse::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListInfoTypesResponse.info_types)
  return info_types_.Get(index);
}
inline ::google::privacy::dlp::v2::InfoTypeDescription* ListInfoTypesResponse::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.ListInfoTypesResponse.info_types)
  return info_types_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeDescription >&
ListInfoTypesResponse::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.ListInfoTypesResponse.info_types)
  return info_types_;
}

// -------------------------------------------------------------------

// RiskAnalysisJobConfig

// .google.privacy.dlp.v2.PrivacyMetric privacy_metric = 1;
inline bool RiskAnalysisJobConfig::has_privacy_metric() const {
  return this != internal_default_instance() && privacy_metric_ != NULL;
}
inline void RiskAnalysisJobConfig::clear_privacy_metric() {
  if (GetArenaNoVirtual() == NULL && privacy_metric_ != NULL) {
    delete privacy_metric_;
  }
  privacy_metric_ = NULL;
}
inline const ::google::privacy::dlp::v2::PrivacyMetric& RiskAnalysisJobConfig::_internal_privacy_metric() const {
  return *privacy_metric_;
}
inline const ::google::privacy::dlp::v2::PrivacyMetric& RiskAnalysisJobConfig::privacy_metric() const {
  const ::google::privacy::dlp::v2::PrivacyMetric* p = privacy_metric_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RiskAnalysisJobConfig.privacy_metric)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::PrivacyMetric*>(
      &::google::privacy::dlp::v2::_PrivacyMetric_default_instance_);
}
inline ::google::privacy::dlp::v2::PrivacyMetric* RiskAnalysisJobConfig::release_privacy_metric() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RiskAnalysisJobConfig.privacy_metric)
  
  ::google::privacy::dlp::v2::PrivacyMetric* temp = privacy_metric_;
  privacy_metric_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::PrivacyMetric* RiskAnalysisJobConfig::mutable_privacy_metric() {
  
  if (privacy_metric_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric>(GetArenaNoVirtual());
    privacy_metric_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RiskAnalysisJobConfig.privacy_metric)
  return privacy_metric_;
}
inline void RiskAnalysisJobConfig::set_allocated_privacy_metric(::google::privacy::dlp::v2::PrivacyMetric* privacy_metric) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete privacy_metric_;
  }
  if (privacy_metric) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      privacy_metric = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, privacy_metric, submessage_arena);
    }
    
  } else {
    
  }
  privacy_metric_ = privacy_metric;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RiskAnalysisJobConfig.privacy_metric)
}

// .google.privacy.dlp.v2.BigQueryTable source_table = 2;
inline bool RiskAnalysisJobConfig::has_source_table() const {
  return this != internal_default_instance() && source_table_ != NULL;
}
inline const ::google::privacy::dlp::v2::BigQueryTable& RiskAnalysisJobConfig::_internal_source_table() const {
  return *source_table_;
}
inline const ::google::privacy::dlp::v2::BigQueryTable& RiskAnalysisJobConfig::source_table() const {
  const ::google::privacy::dlp::v2::BigQueryTable* p = source_table_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RiskAnalysisJobConfig.source_table)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::BigQueryTable*>(
      &::google::privacy::dlp::v2::_BigQueryTable_default_instance_);
}
inline ::google::privacy::dlp::v2::BigQueryTable* RiskAnalysisJobConfig::release_source_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RiskAnalysisJobConfig.source_table)
  
  ::google::privacy::dlp::v2::BigQueryTable* temp = source_table_;
  source_table_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::BigQueryTable* RiskAnalysisJobConfig::mutable_source_table() {
  
  if (source_table_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::BigQueryTable>(GetArenaNoVirtual());
    source_table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RiskAnalysisJobConfig.source_table)
  return source_table_;
}
inline void RiskAnalysisJobConfig::set_allocated_source_table(::google::privacy::dlp::v2::BigQueryTable* source_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_table_);
  }
  if (source_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_table, submessage_arena);
    }
    
  } else {
    
  }
  source_table_ = source_table;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RiskAnalysisJobConfig.source_table)
}

// repeated .google.privacy.dlp.v2.Action actions = 3;
inline int RiskAnalysisJobConfig::actions_size() const {
  return actions_.size();
}
inline void RiskAnalysisJobConfig::clear_actions() {
  actions_.Clear();
}
inline ::google::privacy::dlp::v2::Action* RiskAnalysisJobConfig::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RiskAnalysisJobConfig.actions)
  return actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Action >*
RiskAnalysisJobConfig::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.RiskAnalysisJobConfig.actions)
  return &actions_;
}
inline const ::google::privacy::dlp::v2::Action& RiskAnalysisJobConfig::actions(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RiskAnalysisJobConfig.actions)
  return actions_.Get(index);
}
inline ::google::privacy::dlp::v2::Action* RiskAnalysisJobConfig::add_actions() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.RiskAnalysisJobConfig.actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Action >&
RiskAnalysisJobConfig::actions() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.RiskAnalysisJobConfig.actions)
  return actions_;
}

// -------------------------------------------------------------------

// QuasiId

// .google.privacy.dlp.v2.FieldId field = 1;
inline bool QuasiId::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& QuasiId::_internal_field() const {
  return *field_;
}
inline const ::google::privacy::dlp::v2::FieldId& QuasiId::field() const {
  const ::google::privacy::dlp::v2::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.QuasiId.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* QuasiId::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.QuasiId.field)
  
  ::google::privacy::dlp::v2::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* QuasiId::mutable_field() {
  
  if (field_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.QuasiId.field)
  return field_;
}
inline void QuasiId::set_allocated_field(::google::privacy::dlp::v2::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.QuasiId.field)
}

// .google.privacy.dlp.v2.InfoType info_type = 2;
inline bool QuasiId::has_info_type() const {
  return tag_case() == kInfoType;
}
inline void QuasiId::set_has_info_type() {
  _oneof_case_[0] = kInfoType;
}
inline const ::google::privacy::dlp::v2::InfoType& QuasiId::_internal_info_type() const {
  return *tag_.info_type_;
}
inline ::google::privacy::dlp::v2::InfoType* QuasiId::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.QuasiId.info_type)
  if (has_info_type()) {
    clear_has_tag();
      ::google::privacy::dlp::v2::InfoType* temp = tag_.info_type_;
    tag_.info_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::InfoType& QuasiId::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.QuasiId.info_type)
  return has_info_type()
      ? *tag_.info_type_
      : *reinterpret_cast< ::google::privacy::dlp::v2::InfoType*>(&::google::privacy::dlp::v2::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2::InfoType* QuasiId::mutable_info_type() {
  if (!has_info_type()) {
    clear_tag();
    set_has_info_type();
    tag_.info_type_ = CreateMaybeMessage< ::google::privacy::dlp::v2::InfoType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.QuasiId.info_type)
  return tag_.info_type_;
}

// string custom_tag = 3;
inline bool QuasiId::has_custom_tag() const {
  return tag_case() == kCustomTag;
}
inline void QuasiId::set_has_custom_tag() {
  _oneof_case_[0] = kCustomTag;
}
inline void QuasiId::clear_custom_tag() {
  if (has_custom_tag()) {
    tag_.custom_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_tag();
  }
}
inline const ::std::string& QuasiId::custom_tag() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.QuasiId.custom_tag)
  if (has_custom_tag()) {
    return tag_.custom_tag_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void QuasiId::set_custom_tag(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.QuasiId.custom_tag)
  if (!has_custom_tag()) {
    clear_tag();
    set_has_custom_tag();
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  tag_.custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.QuasiId.custom_tag)
}
#if LANG_CXX11
inline void QuasiId::set_custom_tag(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.QuasiId.custom_tag)
  if (!has_custom_tag()) {
    clear_tag();
    set_has_custom_tag();
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  tag_.custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.QuasiId.custom_tag)
}
#endif
inline void QuasiId::set_custom_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_custom_tag()) {
    clear_tag();
    set_has_custom_tag();
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  tag_.custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.QuasiId.custom_tag)
}
inline void QuasiId::set_custom_tag(const char* value, size_t size) {
  if (!has_custom_tag()) {
    clear_tag();
    set_has_custom_tag();
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  tag_.custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.QuasiId.custom_tag)
}
inline ::std::string* QuasiId::mutable_custom_tag() {
  if (!has_custom_tag()) {
    clear_tag();
    set_has_custom_tag();
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.QuasiId.custom_tag)
  return tag_.custom_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuasiId::release_custom_tag() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.QuasiId.custom_tag)
  if (has_custom_tag()) {
    clear_has_tag();
    return tag_.custom_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void QuasiId::set_allocated_custom_tag(::std::string* custom_tag) {
  if (!has_custom_tag()) {
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_tag();
  if (custom_tag != NULL) {
    set_has_custom_tag();
    tag_.custom_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_tag);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.QuasiId.custom_tag)
}

// .google.protobuf.Empty inferred = 4;
inline bool QuasiId::has_inferred() const {
  return tag_case() == kInferred;
}
inline void QuasiId::set_has_inferred() {
  _oneof_case_[0] = kInferred;
}
inline const ::google::protobuf::Empty& QuasiId::_internal_inferred() const {
  return *tag_.inferred_;
}
inline ::google::protobuf::Empty* QuasiId::release_inferred() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.QuasiId.inferred)
  if (has_inferred()) {
    clear_has_tag();
      ::google::protobuf::Empty* temp = tag_.inferred_;
    tag_.inferred_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Empty& QuasiId::inferred() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.QuasiId.inferred)
  return has_inferred()
      ? *tag_.inferred_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* QuasiId::mutable_inferred() {
  if (!has_inferred()) {
    clear_tag();
    set_has_inferred();
    tag_.inferred_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.QuasiId.inferred)
  return tag_.inferred_;
}

inline bool QuasiId::has_tag() const {
  return tag_case() != TAG_NOT_SET;
}
inline void QuasiId::clear_has_tag() {
  _oneof_case_[0] = TAG_NOT_SET;
}
inline QuasiId::TagCase QuasiId::tag_case() const {
  return QuasiId::TagCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StatisticalTable_QuasiIdentifierField

// .google.privacy.dlp.v2.FieldId field = 1;
inline bool StatisticalTable_QuasiIdentifierField::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& StatisticalTable_QuasiIdentifierField::_internal_field() const {
  return *field_;
}
inline const ::google::privacy::dlp::v2::FieldId& StatisticalTable_QuasiIdentifierField::field() const {
  const ::google::privacy::dlp::v2::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* StatisticalTable_QuasiIdentifierField::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.field)
  
  ::google::privacy::dlp::v2::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* StatisticalTable_QuasiIdentifierField::mutable_field() {
  
  if (field_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.field)
  return field_;
}
inline void StatisticalTable_QuasiIdentifierField::set_allocated_field(::google::privacy::dlp::v2::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.field)
}

// string custom_tag = 2;
inline void StatisticalTable_QuasiIdentifierField::clear_custom_tag() {
  custom_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatisticalTable_QuasiIdentifierField::custom_tag() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag)
  return custom_tag_.GetNoArena();
}
inline void StatisticalTable_QuasiIdentifierField::set_custom_tag(const ::std::string& value) {
  
  custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag)
}
#if LANG_CXX11
inline void StatisticalTable_QuasiIdentifierField::set_custom_tag(::std::string&& value) {
  
  custom_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag)
}
#endif
inline void StatisticalTable_QuasiIdentifierField::set_custom_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag)
}
inline void StatisticalTable_QuasiIdentifierField::set_custom_tag(const char* value, size_t size) {
  
  custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag)
}
inline ::std::string* StatisticalTable_QuasiIdentifierField::mutable_custom_tag() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag)
  return custom_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatisticalTable_QuasiIdentifierField::release_custom_tag() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag)
  
  return custom_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatisticalTable_QuasiIdentifierField::set_allocated_custom_tag(::std::string* custom_tag) {
  if (custom_tag != NULL) {
    
  } else {
    
  }
  custom_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_tag);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag)
}

// -------------------------------------------------------------------

// StatisticalTable

// .google.privacy.dlp.v2.BigQueryTable table = 3;
inline bool StatisticalTable::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
inline const ::google::privacy::dlp::v2::BigQueryTable& StatisticalTable::_internal_table() const {
  return *table_;
}
inline const ::google::privacy::dlp::v2::BigQueryTable& StatisticalTable::table() const {
  const ::google::privacy::dlp::v2::BigQueryTable* p = table_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StatisticalTable.table)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::BigQueryTable*>(
      &::google::privacy::dlp::v2::_BigQueryTable_default_instance_);
}
inline ::google::privacy::dlp::v2::BigQueryTable* StatisticalTable::release_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.StatisticalTable.table)
  
  ::google::privacy::dlp::v2::BigQueryTable* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::BigQueryTable* StatisticalTable::mutable_table() {
  
  if (table_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::BigQueryTable>(GetArenaNoVirtual());
    table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StatisticalTable.table)
  return table_;
}
inline void StatisticalTable::set_allocated_table(::google::privacy::dlp::v2::BigQueryTable* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(table_);
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StatisticalTable.table)
}

// repeated .google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField quasi_ids = 1;
inline int StatisticalTable::quasi_ids_size() const {
  return quasi_ids_.size();
}
inline void StatisticalTable::clear_quasi_ids() {
  quasi_ids_.Clear();
}
inline ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField* StatisticalTable::mutable_quasi_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StatisticalTable.quasi_ids)
  return quasi_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField >*
StatisticalTable::mutable_quasi_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.StatisticalTable.quasi_ids)
  return &quasi_ids_;
}
inline const ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField& StatisticalTable::quasi_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StatisticalTable.quasi_ids)
  return quasi_ids_.Get(index);
}
inline ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField* StatisticalTable::add_quasi_ids() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.StatisticalTable.quasi_ids)
  return quasi_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField >&
StatisticalTable::quasi_ids() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.StatisticalTable.quasi_ids)
  return quasi_ids_;
}

// .google.privacy.dlp.v2.FieldId relative_frequency = 2;
inline bool StatisticalTable::has_relative_frequency() const {
  return this != internal_default_instance() && relative_frequency_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& StatisticalTable::_internal_relative_frequency() const {
  return *relative_frequency_;
}
inline const ::google::privacy::dlp::v2::FieldId& StatisticalTable::relative_frequency() const {
  const ::google::privacy::dlp::v2::FieldId* p = relative_frequency_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StatisticalTable.relative_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* StatisticalTable::release_relative_frequency() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.StatisticalTable.relative_frequency)
  
  ::google::privacy::dlp::v2::FieldId* temp = relative_frequency_;
  relative_frequency_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* StatisticalTable::mutable_relative_frequency() {
  
  if (relative_frequency_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    relative_frequency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StatisticalTable.relative_frequency)
  return relative_frequency_;
}
inline void StatisticalTable::set_allocated_relative_frequency(::google::privacy::dlp::v2::FieldId* relative_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(relative_frequency_);
  }
  if (relative_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relative_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relative_frequency, submessage_arena);
    }
    
  } else {
    
  }
  relative_frequency_ = relative_frequency;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StatisticalTable.relative_frequency)
}

// -------------------------------------------------------------------

// PrivacyMetric_NumericalStatsConfig

// .google.privacy.dlp.v2.FieldId field = 1;
inline bool PrivacyMetric_NumericalStatsConfig::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_NumericalStatsConfig::_internal_field() const {
  return *field_;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_NumericalStatsConfig::field() const {
  const ::google::privacy::dlp::v2::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_NumericalStatsConfig::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.field)
  
  ::google::privacy::dlp::v2::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_NumericalStatsConfig::mutable_field() {
  
  if (field_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.field)
  return field_;
}
inline void PrivacyMetric_NumericalStatsConfig::set_allocated_field(::google::privacy::dlp::v2::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.field)
}

// -------------------------------------------------------------------

// PrivacyMetric_CategoricalStatsConfig

// .google.privacy.dlp.v2.FieldId field = 1;
inline bool PrivacyMetric_CategoricalStatsConfig::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_CategoricalStatsConfig::_internal_field() const {
  return *field_;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_CategoricalStatsConfig::field() const {
  const ::google::privacy::dlp::v2::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_CategoricalStatsConfig::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.field)
  
  ::google::privacy::dlp::v2::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_CategoricalStatsConfig::mutable_field() {
  
  if (field_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.field)
  return field_;
}
inline void PrivacyMetric_CategoricalStatsConfig::set_allocated_field(::google::privacy::dlp::v2::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.field)
}

// -------------------------------------------------------------------

// PrivacyMetric_KAnonymityConfig

// repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
inline int PrivacyMetric_KAnonymityConfig::quasi_ids_size() const {
  return quasi_ids_.size();
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_KAnonymityConfig::mutable_quasi_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.quasi_ids)
  return quasi_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >*
PrivacyMetric_KAnonymityConfig::mutable_quasi_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.quasi_ids)
  return &quasi_ids_;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_KAnonymityConfig::quasi_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.quasi_ids)
  return quasi_ids_.Get(index);
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_KAnonymityConfig::add_quasi_ids() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.quasi_ids)
  return quasi_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >&
PrivacyMetric_KAnonymityConfig::quasi_ids() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.quasi_ids)
  return quasi_ids_;
}

// .google.privacy.dlp.v2.EntityId entity_id = 2;
inline bool PrivacyMetric_KAnonymityConfig::has_entity_id() const {
  return this != internal_default_instance() && entity_id_ != NULL;
}
inline const ::google::privacy::dlp::v2::EntityId& PrivacyMetric_KAnonymityConfig::_internal_entity_id() const {
  return *entity_id_;
}
inline const ::google::privacy::dlp::v2::EntityId& PrivacyMetric_KAnonymityConfig::entity_id() const {
  const ::google::privacy::dlp::v2::EntityId* p = entity_id_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.entity_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::EntityId*>(
      &::google::privacy::dlp::v2::_EntityId_default_instance_);
}
inline ::google::privacy::dlp::v2::EntityId* PrivacyMetric_KAnonymityConfig::release_entity_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.entity_id)
  
  ::google::privacy::dlp::v2::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::EntityId* PrivacyMetric_KAnonymityConfig::mutable_entity_id() {
  
  if (entity_id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::EntityId>(GetArenaNoVirtual());
    entity_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.entity_id)
  return entity_id_;
}
inline void PrivacyMetric_KAnonymityConfig::set_allocated_entity_id(::google::privacy::dlp::v2::EntityId* entity_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entity_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    
  } else {
    
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.entity_id)
}

// -------------------------------------------------------------------

// PrivacyMetric_LDiversityConfig

// repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
inline int PrivacyMetric_LDiversityConfig::quasi_ids_size() const {
  return quasi_ids_.size();
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_LDiversityConfig::mutable_quasi_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.quasi_ids)
  return quasi_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >*
PrivacyMetric_LDiversityConfig::mutable_quasi_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.quasi_ids)
  return &quasi_ids_;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_LDiversityConfig::quasi_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.quasi_ids)
  return quasi_ids_.Get(index);
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_LDiversityConfig::add_quasi_ids() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.quasi_ids)
  return quasi_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >&
PrivacyMetric_LDiversityConfig::quasi_ids() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.quasi_ids)
  return quasi_ids_;
}

// .google.privacy.dlp.v2.FieldId sensitive_attribute = 2;
inline bool PrivacyMetric_LDiversityConfig::has_sensitive_attribute() const {
  return this != internal_default_instance() && sensitive_attribute_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_LDiversityConfig::_internal_sensitive_attribute() const {
  return *sensitive_attribute_;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_LDiversityConfig::sensitive_attribute() const {
  const ::google::privacy::dlp::v2::FieldId* p = sensitive_attribute_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.sensitive_attribute)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_LDiversityConfig::release_sensitive_attribute() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.sensitive_attribute)
  
  ::google::privacy::dlp::v2::FieldId* temp = sensitive_attribute_;
  sensitive_attribute_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_LDiversityConfig::mutable_sensitive_attribute() {
  
  if (sensitive_attribute_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    sensitive_attribute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.sensitive_attribute)
  return sensitive_attribute_;
}
inline void PrivacyMetric_LDiversityConfig::set_allocated_sensitive_attribute(::google::privacy::dlp::v2::FieldId* sensitive_attribute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sensitive_attribute_);
  }
  if (sensitive_attribute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensitive_attribute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensitive_attribute, submessage_arena);
    }
    
  } else {
    
  }
  sensitive_attribute_ = sensitive_attribute;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.sensitive_attribute)
}

// -------------------------------------------------------------------

// PrivacyMetric_KMapEstimationConfig_TaggedField

// .google.privacy.dlp.v2.FieldId field = 1;
inline bool PrivacyMetric_KMapEstimationConfig_TaggedField::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_KMapEstimationConfig_TaggedField::_internal_field() const {
  return *field_;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_KMapEstimationConfig_TaggedField::field() const {
  const ::google::privacy::dlp::v2::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_KMapEstimationConfig_TaggedField::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.field)
  
  ::google::privacy::dlp::v2::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_KMapEstimationConfig_TaggedField::mutable_field() {
  
  if (field_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.field)
  return field_;
}
inline void PrivacyMetric_KMapEstimationConfig_TaggedField::set_allocated_field(::google::privacy::dlp::v2::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.field)
}

// .google.privacy.dlp.v2.InfoType info_type = 2;
inline bool PrivacyMetric_KMapEstimationConfig_TaggedField::has_info_type() const {
  return tag_case() == kInfoType;
}
inline void PrivacyMetric_KMapEstimationConfig_TaggedField::set_has_info_type() {
  _oneof_case_[0] = kInfoType;
}
inline const ::google::privacy::dlp::v2::InfoType& PrivacyMetric_KMapEstimationConfig_TaggedField::_internal_info_type() const {
  return *tag_.info_type_;
}
inline ::google::privacy::dlp::v2::InfoType* PrivacyMetric_KMapEstimationConfig_TaggedField::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.info_type)
  if (has_info_type()) {
    clear_has_tag();
      ::google::privacy::dlp::v2::InfoType* temp = tag_.info_type_;
    tag_.info_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::InfoType& PrivacyMetric_KMapEstimationConfig_TaggedField::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.info_type)
  return has_info_type()
      ? *tag_.info_type_
      : *reinterpret_cast< ::google::privacy::dlp::v2::InfoType*>(&::google::privacy::dlp::v2::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2::InfoType* PrivacyMetric_KMapEstimationConfig_TaggedField::mutable_info_type() {
  if (!has_info_type()) {
    clear_tag();
    set_has_info_type();
    tag_.info_type_ = CreateMaybeMessage< ::google::privacy::dlp::v2::InfoType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.info_type)
  return tag_.info_type_;
}

// string custom_tag = 3;
inline bool PrivacyMetric_KMapEstimationConfig_TaggedField::has_custom_tag() const {
  return tag_case() == kCustomTag;
}
inline void PrivacyMetric_KMapEstimationConfig_TaggedField::set_has_custom_tag() {
  _oneof_case_[0] = kCustomTag;
}
inline void PrivacyMetric_KMapEstimationConfig_TaggedField::clear_custom_tag() {
  if (has_custom_tag()) {
    tag_.custom_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_tag();
  }
}
inline const ::std::string& PrivacyMetric_KMapEstimationConfig_TaggedField::custom_tag() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag)
  if (has_custom_tag()) {
    return tag_.custom_tag_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void PrivacyMetric_KMapEstimationConfig_TaggedField::set_custom_tag(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag)
  if (!has_custom_tag()) {
    clear_tag();
    set_has_custom_tag();
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  tag_.custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag)
}
#if LANG_CXX11
inline void PrivacyMetric_KMapEstimationConfig_TaggedField::set_custom_tag(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag)
  if (!has_custom_tag()) {
    clear_tag();
    set_has_custom_tag();
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  tag_.custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag)
}
#endif
inline void PrivacyMetric_KMapEstimationConfig_TaggedField::set_custom_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_custom_tag()) {
    clear_tag();
    set_has_custom_tag();
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  tag_.custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag)
}
inline void PrivacyMetric_KMapEstimationConfig_TaggedField::set_custom_tag(const char* value, size_t size) {
  if (!has_custom_tag()) {
    clear_tag();
    set_has_custom_tag();
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  tag_.custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag)
}
inline ::std::string* PrivacyMetric_KMapEstimationConfig_TaggedField::mutable_custom_tag() {
  if (!has_custom_tag()) {
    clear_tag();
    set_has_custom_tag();
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag)
  return tag_.custom_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivacyMetric_KMapEstimationConfig_TaggedField::release_custom_tag() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag)
  if (has_custom_tag()) {
    clear_has_tag();
    return tag_.custom_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void PrivacyMetric_KMapEstimationConfig_TaggedField::set_allocated_custom_tag(::std::string* custom_tag) {
  if (!has_custom_tag()) {
    tag_.custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_tag();
  if (custom_tag != NULL) {
    set_has_custom_tag();
    tag_.custom_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_tag);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag)
}

// .google.protobuf.Empty inferred = 4;
inline bool PrivacyMetric_KMapEstimationConfig_TaggedField::has_inferred() const {
  return tag_case() == kInferred;
}
inline void PrivacyMetric_KMapEstimationConfig_TaggedField::set_has_inferred() {
  _oneof_case_[0] = kInferred;
}
inline const ::google::protobuf::Empty& PrivacyMetric_KMapEstimationConfig_TaggedField::_internal_inferred() const {
  return *tag_.inferred_;
}
inline ::google::protobuf::Empty* PrivacyMetric_KMapEstimationConfig_TaggedField::release_inferred() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.inferred)
  if (has_inferred()) {
    clear_has_tag();
      ::google::protobuf::Empty* temp = tag_.inferred_;
    tag_.inferred_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Empty& PrivacyMetric_KMapEstimationConfig_TaggedField::inferred() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.inferred)
  return has_inferred()
      ? *tag_.inferred_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* PrivacyMetric_KMapEstimationConfig_TaggedField::mutable_inferred() {
  if (!has_inferred()) {
    clear_tag();
    set_has_inferred();
    tag_.inferred_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.inferred)
  return tag_.inferred_;
}

inline bool PrivacyMetric_KMapEstimationConfig_TaggedField::has_tag() const {
  return tag_case() != TAG_NOT_SET;
}
inline void PrivacyMetric_KMapEstimationConfig_TaggedField::clear_has_tag() {
  _oneof_case_[0] = TAG_NOT_SET;
}
inline PrivacyMetric_KMapEstimationConfig_TaggedField::TagCase PrivacyMetric_KMapEstimationConfig_TaggedField::tag_case() const {
  return PrivacyMetric_KMapEstimationConfig_TaggedField::TagCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField

// .google.privacy.dlp.v2.FieldId field = 1;
inline bool PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::_internal_field() const {
  return *field_;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::field() const {
  const ::google::privacy::dlp::v2::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.field)
  
  ::google::privacy::dlp::v2::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::mutable_field() {
  
  if (field_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.field)
  return field_;
}
inline void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::set_allocated_field(::google::privacy::dlp::v2::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.field)
}

// string custom_tag = 2;
inline void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::clear_custom_tag() {
  custom_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::custom_tag() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag)
  return custom_tag_.GetNoArena();
}
inline void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::set_custom_tag(const ::std::string& value) {
  
  custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag)
}
#if LANG_CXX11
inline void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::set_custom_tag(::std::string&& value) {
  
  custom_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag)
}
#endif
inline void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::set_custom_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag)
}
inline void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::set_custom_tag(const char* value, size_t size) {
  
  custom_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag)
}
inline ::std::string* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::mutable_custom_tag() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag)
  return custom_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::release_custom_tag() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag)
  
  return custom_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::set_allocated_custom_tag(::std::string* custom_tag) {
  if (custom_tag != NULL) {
    
  } else {
    
  }
  custom_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_tag);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag)
}

// -------------------------------------------------------------------

// PrivacyMetric_KMapEstimationConfig_AuxiliaryTable

// .google.privacy.dlp.v2.BigQueryTable table = 3;
inline bool PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
inline const ::google::privacy::dlp::v2::BigQueryTable& PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::_internal_table() const {
  return *table_;
}
inline const ::google::privacy::dlp::v2::BigQueryTable& PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::table() const {
  const ::google::privacy::dlp::v2::BigQueryTable* p = table_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.table)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::BigQueryTable*>(
      &::google::privacy::dlp::v2::_BigQueryTable_default_instance_);
}
inline ::google::privacy::dlp::v2::BigQueryTable* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::release_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.table)
  
  ::google::privacy::dlp::v2::BigQueryTable* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::BigQueryTable* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::mutable_table() {
  
  if (table_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::BigQueryTable>(GetArenaNoVirtual());
    table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.table)
  return table_;
}
inline void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::set_allocated_table(::google::privacy::dlp::v2::BigQueryTable* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(table_);
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.table)
}

// repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField quasi_ids = 1;
inline int PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::quasi_ids_size() const {
  return quasi_ids_.size();
}
inline void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::clear_quasi_ids() {
  quasi_ids_.Clear();
}
inline ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::mutable_quasi_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.quasi_ids)
  return quasi_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField >*
PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::mutable_quasi_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.quasi_ids)
  return &quasi_ids_;
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::quasi_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.quasi_ids)
  return quasi_ids_.Get(index);
}
inline ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::add_quasi_ids() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.quasi_ids)
  return quasi_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField >&
PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::quasi_ids() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.quasi_ids)
  return quasi_ids_;
}

// .google.privacy.dlp.v2.FieldId relative_frequency = 2;
inline bool PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::has_relative_frequency() const {
  return this != internal_default_instance() && relative_frequency_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::_internal_relative_frequency() const {
  return *relative_frequency_;
}
inline const ::google::privacy::dlp::v2::FieldId& PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::relative_frequency() const {
  const ::google::privacy::dlp::v2::FieldId* p = relative_frequency_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.relative_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::release_relative_frequency() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.relative_frequency)
  
  ::google::privacy::dlp::v2::FieldId* temp = relative_frequency_;
  relative_frequency_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::mutable_relative_frequency() {
  
  if (relative_frequency_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    relative_frequency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.relative_frequency)
  return relative_frequency_;
}
inline void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::set_allocated_relative_frequency(::google::privacy::dlp::v2::FieldId* relative_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(relative_frequency_);
  }
  if (relative_frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relative_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relative_frequency, submessage_arena);
    }
    
  } else {
    
  }
  relative_frequency_ = relative_frequency;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.relative_frequency)
}

// -------------------------------------------------------------------

// PrivacyMetric_KMapEstimationConfig

// repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField quasi_ids = 1;
inline int PrivacyMetric_KMapEstimationConfig::quasi_ids_size() const {
  return quasi_ids_.size();
}
inline void PrivacyMetric_KMapEstimationConfig::clear_quasi_ids() {
  quasi_ids_.Clear();
}
inline ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField* PrivacyMetric_KMapEstimationConfig::mutable_quasi_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.quasi_ids)
  return quasi_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField >*
PrivacyMetric_KMapEstimationConfig::mutable_quasi_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.quasi_ids)
  return &quasi_ids_;
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField& PrivacyMetric_KMapEstimationConfig::quasi_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.quasi_ids)
  return quasi_ids_.Get(index);
}
inline ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField* PrivacyMetric_KMapEstimationConfig::add_quasi_ids() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.quasi_ids)
  return quasi_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField >&
PrivacyMetric_KMapEstimationConfig::quasi_ids() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.quasi_ids)
  return quasi_ids_;
}

// string region_code = 2;
inline void PrivacyMetric_KMapEstimationConfig::clear_region_code() {
  region_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivacyMetric_KMapEstimationConfig::region_code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code)
  return region_code_.GetNoArena();
}
inline void PrivacyMetric_KMapEstimationConfig::set_region_code(const ::std::string& value) {
  
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code)
}
#if LANG_CXX11
inline void PrivacyMetric_KMapEstimationConfig::set_region_code(::std::string&& value) {
  
  region_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code)
}
#endif
inline void PrivacyMetric_KMapEstimationConfig::set_region_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code)
}
inline void PrivacyMetric_KMapEstimationConfig::set_region_code(const char* value, size_t size) {
  
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code)
}
inline ::std::string* PrivacyMetric_KMapEstimationConfig::mutable_region_code() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code)
  return region_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivacyMetric_KMapEstimationConfig::release_region_code() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code)
  
  return region_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivacyMetric_KMapEstimationConfig::set_allocated_region_code(::std::string* region_code) {
  if (region_code != NULL) {
    
  } else {
    
  }
  region_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_code);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code)
}

// repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable auxiliary_tables = 3;
inline int PrivacyMetric_KMapEstimationConfig::auxiliary_tables_size() const {
  return auxiliary_tables_.size();
}
inline void PrivacyMetric_KMapEstimationConfig::clear_auxiliary_tables() {
  auxiliary_tables_.Clear();
}
inline ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* PrivacyMetric_KMapEstimationConfig::mutable_auxiliary_tables(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.auxiliary_tables)
  return auxiliary_tables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable >*
PrivacyMetric_KMapEstimationConfig::mutable_auxiliary_tables() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.auxiliary_tables)
  return &auxiliary_tables_;
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& PrivacyMetric_KMapEstimationConfig::auxiliary_tables(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.auxiliary_tables)
  return auxiliary_tables_.Get(index);
}
inline ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* PrivacyMetric_KMapEstimationConfig::add_auxiliary_tables() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.auxiliary_tables)
  return auxiliary_tables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable >&
PrivacyMetric_KMapEstimationConfig::auxiliary_tables() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.auxiliary_tables)
  return auxiliary_tables_;
}

// -------------------------------------------------------------------

// PrivacyMetric_DeltaPresenceEstimationConfig

// repeated .google.privacy.dlp.v2.QuasiId quasi_ids = 1;
inline int PrivacyMetric_DeltaPresenceEstimationConfig::quasi_ids_size() const {
  return quasi_ids_.size();
}
inline void PrivacyMetric_DeltaPresenceEstimationConfig::clear_quasi_ids() {
  quasi_ids_.Clear();
}
inline ::google::privacy::dlp::v2::QuasiId* PrivacyMetric_DeltaPresenceEstimationConfig::mutable_quasi_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.quasi_ids)
  return quasi_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::QuasiId >*
PrivacyMetric_DeltaPresenceEstimationConfig::mutable_quasi_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.quasi_ids)
  return &quasi_ids_;
}
inline const ::google::privacy::dlp::v2::QuasiId& PrivacyMetric_DeltaPresenceEstimationConfig::quasi_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.quasi_ids)
  return quasi_ids_.Get(index);
}
inline ::google::privacy::dlp::v2::QuasiId* PrivacyMetric_DeltaPresenceEstimationConfig::add_quasi_ids() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.quasi_ids)
  return quasi_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::QuasiId >&
PrivacyMetric_DeltaPresenceEstimationConfig::quasi_ids() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.quasi_ids)
  return quasi_ids_;
}

// string region_code = 2;
inline void PrivacyMetric_DeltaPresenceEstimationConfig::clear_region_code() {
  region_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivacyMetric_DeltaPresenceEstimationConfig::region_code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code)
  return region_code_.GetNoArena();
}
inline void PrivacyMetric_DeltaPresenceEstimationConfig::set_region_code(const ::std::string& value) {
  
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code)
}
#if LANG_CXX11
inline void PrivacyMetric_DeltaPresenceEstimationConfig::set_region_code(::std::string&& value) {
  
  region_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code)
}
#endif
inline void PrivacyMetric_DeltaPresenceEstimationConfig::set_region_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code)
}
inline void PrivacyMetric_DeltaPresenceEstimationConfig::set_region_code(const char* value, size_t size) {
  
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code)
}
inline ::std::string* PrivacyMetric_DeltaPresenceEstimationConfig::mutable_region_code() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code)
  return region_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivacyMetric_DeltaPresenceEstimationConfig::release_region_code() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code)
  
  return region_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivacyMetric_DeltaPresenceEstimationConfig::set_allocated_region_code(::std::string* region_code) {
  if (region_code != NULL) {
    
  } else {
    
  }
  region_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_code);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code)
}

// repeated .google.privacy.dlp.v2.StatisticalTable auxiliary_tables = 3;
inline int PrivacyMetric_DeltaPresenceEstimationConfig::auxiliary_tables_size() const {
  return auxiliary_tables_.size();
}
inline void PrivacyMetric_DeltaPresenceEstimationConfig::clear_auxiliary_tables() {
  auxiliary_tables_.Clear();
}
inline ::google::privacy::dlp::v2::StatisticalTable* PrivacyMetric_DeltaPresenceEstimationConfig::mutable_auxiliary_tables(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.auxiliary_tables)
  return auxiliary_tables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StatisticalTable >*
PrivacyMetric_DeltaPresenceEstimationConfig::mutable_auxiliary_tables() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.auxiliary_tables)
  return &auxiliary_tables_;
}
inline const ::google::privacy::dlp::v2::StatisticalTable& PrivacyMetric_DeltaPresenceEstimationConfig::auxiliary_tables(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.auxiliary_tables)
  return auxiliary_tables_.Get(index);
}
inline ::google::privacy::dlp::v2::StatisticalTable* PrivacyMetric_DeltaPresenceEstimationConfig::add_auxiliary_tables() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.auxiliary_tables)
  return auxiliary_tables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StatisticalTable >&
PrivacyMetric_DeltaPresenceEstimationConfig::auxiliary_tables() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.auxiliary_tables)
  return auxiliary_tables_;
}

// -------------------------------------------------------------------

// PrivacyMetric

// .google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
inline bool PrivacyMetric::has_numerical_stats_config() const {
  return type_case() == kNumericalStatsConfig;
}
inline void PrivacyMetric::set_has_numerical_stats_config() {
  _oneof_case_[0] = kNumericalStatsConfig;
}
inline void PrivacyMetric::clear_numerical_stats_config() {
  if (has_numerical_stats_config()) {
    delete type_.numerical_stats_config_;
    clear_has_type();
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig& PrivacyMetric::_internal_numerical_stats_config() const {
  return *type_.numerical_stats_config_;
}
inline ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig* PrivacyMetric::release_numerical_stats_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.numerical_stats_config)
  if (has_numerical_stats_config()) {
    clear_has_type();
      ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig* temp = type_.numerical_stats_config_;
    type_.numerical_stats_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig& PrivacyMetric::numerical_stats_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.numerical_stats_config)
  return has_numerical_stats_config()
      ? *type_.numerical_stats_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig*>(&::google::privacy::dlp::v2::_PrivacyMetric_NumericalStatsConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig* PrivacyMetric::mutable_numerical_stats_config() {
  if (!has_numerical_stats_config()) {
    clear_type();
    set_has_numerical_stats_config();
    type_.numerical_stats_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.numerical_stats_config)
  return type_.numerical_stats_config_;
}

// .google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
inline bool PrivacyMetric::has_categorical_stats_config() const {
  return type_case() == kCategoricalStatsConfig;
}
inline void PrivacyMetric::set_has_categorical_stats_config() {
  _oneof_case_[0] = kCategoricalStatsConfig;
}
inline void PrivacyMetric::clear_categorical_stats_config() {
  if (has_categorical_stats_config()) {
    delete type_.categorical_stats_config_;
    clear_has_type();
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig& PrivacyMetric::_internal_categorical_stats_config() const {
  return *type_.categorical_stats_config_;
}
inline ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig* PrivacyMetric::release_categorical_stats_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.categorical_stats_config)
  if (has_categorical_stats_config()) {
    clear_has_type();
      ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig* temp = type_.categorical_stats_config_;
    type_.categorical_stats_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig& PrivacyMetric::categorical_stats_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.categorical_stats_config)
  return has_categorical_stats_config()
      ? *type_.categorical_stats_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig*>(&::google::privacy::dlp::v2::_PrivacyMetric_CategoricalStatsConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig* PrivacyMetric::mutable_categorical_stats_config() {
  if (!has_categorical_stats_config()) {
    clear_type();
    set_has_categorical_stats_config();
    type_.categorical_stats_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.categorical_stats_config)
  return type_.categorical_stats_config_;
}

// .google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
inline bool PrivacyMetric::has_k_anonymity_config() const {
  return type_case() == kKAnonymityConfig;
}
inline void PrivacyMetric::set_has_k_anonymity_config() {
  _oneof_case_[0] = kKAnonymityConfig;
}
inline void PrivacyMetric::clear_k_anonymity_config() {
  if (has_k_anonymity_config()) {
    delete type_.k_anonymity_config_;
    clear_has_type();
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig& PrivacyMetric::_internal_k_anonymity_config() const {
  return *type_.k_anonymity_config_;
}
inline ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig* PrivacyMetric::release_k_anonymity_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.k_anonymity_config)
  if (has_k_anonymity_config()) {
    clear_has_type();
      ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig* temp = type_.k_anonymity_config_;
    type_.k_anonymity_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig& PrivacyMetric::k_anonymity_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.k_anonymity_config)
  return has_k_anonymity_config()
      ? *type_.k_anonymity_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig*>(&::google::privacy::dlp::v2::_PrivacyMetric_KAnonymityConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig* PrivacyMetric::mutable_k_anonymity_config() {
  if (!has_k_anonymity_config()) {
    clear_type();
    set_has_k_anonymity_config();
    type_.k_anonymity_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.k_anonymity_config)
  return type_.k_anonymity_config_;
}

// .google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
inline bool PrivacyMetric::has_l_diversity_config() const {
  return type_case() == kLDiversityConfig;
}
inline void PrivacyMetric::set_has_l_diversity_config() {
  _oneof_case_[0] = kLDiversityConfig;
}
inline void PrivacyMetric::clear_l_diversity_config() {
  if (has_l_diversity_config()) {
    delete type_.l_diversity_config_;
    clear_has_type();
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig& PrivacyMetric::_internal_l_diversity_config() const {
  return *type_.l_diversity_config_;
}
inline ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig* PrivacyMetric::release_l_diversity_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.l_diversity_config)
  if (has_l_diversity_config()) {
    clear_has_type();
      ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig* temp = type_.l_diversity_config_;
    type_.l_diversity_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig& PrivacyMetric::l_diversity_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.l_diversity_config)
  return has_l_diversity_config()
      ? *type_.l_diversity_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig*>(&::google::privacy::dlp::v2::_PrivacyMetric_LDiversityConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig* PrivacyMetric::mutable_l_diversity_config() {
  if (!has_l_diversity_config()) {
    clear_type();
    set_has_l_diversity_config();
    type_.l_diversity_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.l_diversity_config)
  return type_.l_diversity_config_;
}

// .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig k_map_estimation_config = 5;
inline bool PrivacyMetric::has_k_map_estimation_config() const {
  return type_case() == kKMapEstimationConfig;
}
inline void PrivacyMetric::set_has_k_map_estimation_config() {
  _oneof_case_[0] = kKMapEstimationConfig;
}
inline void PrivacyMetric::clear_k_map_estimation_config() {
  if (has_k_map_estimation_config()) {
    delete type_.k_map_estimation_config_;
    clear_has_type();
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig& PrivacyMetric::_internal_k_map_estimation_config() const {
  return *type_.k_map_estimation_config_;
}
inline ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig* PrivacyMetric::release_k_map_estimation_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.k_map_estimation_config)
  if (has_k_map_estimation_config()) {
    clear_has_type();
      ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig* temp = type_.k_map_estimation_config_;
    type_.k_map_estimation_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig& PrivacyMetric::k_map_estimation_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.k_map_estimation_config)
  return has_k_map_estimation_config()
      ? *type_.k_map_estimation_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig*>(&::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig* PrivacyMetric::mutable_k_map_estimation_config() {
  if (!has_k_map_estimation_config()) {
    clear_type();
    set_has_k_map_estimation_config();
    type_.k_map_estimation_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.k_map_estimation_config)
  return type_.k_map_estimation_config_;
}

// .google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig delta_presence_estimation_config = 6;
inline bool PrivacyMetric::has_delta_presence_estimation_config() const {
  return type_case() == kDeltaPresenceEstimationConfig;
}
inline void PrivacyMetric::set_has_delta_presence_estimation_config() {
  _oneof_case_[0] = kDeltaPresenceEstimationConfig;
}
inline void PrivacyMetric::clear_delta_presence_estimation_config() {
  if (has_delta_presence_estimation_config()) {
    delete type_.delta_presence_estimation_config_;
    clear_has_type();
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig& PrivacyMetric::_internal_delta_presence_estimation_config() const {
  return *type_.delta_presence_estimation_config_;
}
inline ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig* PrivacyMetric::release_delta_presence_estimation_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrivacyMetric.delta_presence_estimation_config)
  if (has_delta_presence_estimation_config()) {
    clear_has_type();
      ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig* temp = type_.delta_presence_estimation_config_;
    type_.delta_presence_estimation_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig& PrivacyMetric::delta_presence_estimation_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrivacyMetric.delta_presence_estimation_config)
  return has_delta_presence_estimation_config()
      ? *type_.delta_presence_estimation_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig*>(&::google::privacy::dlp::v2::_PrivacyMetric_DeltaPresenceEstimationConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig* PrivacyMetric::mutable_delta_presence_estimation_config() {
  if (!has_delta_presence_estimation_config()) {
    clear_type();
    set_has_delta_presence_estimation_config();
    type_.delta_presence_estimation_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrivacyMetric.delta_presence_estimation_config)
  return type_.delta_presence_estimation_config_;
}

inline bool PrivacyMetric::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void PrivacyMetric::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline PrivacyMetric::TypeCase PrivacyMetric::type_case() const {
  return PrivacyMetric::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_NumericalStatsResult

// .google.privacy.dlp.v2.Value min_value = 1;
inline bool AnalyzeDataSourceRiskDetails_NumericalStatsResult::has_min_value() const {
  return this != internal_default_instance() && min_value_ != NULL;
}
inline void AnalyzeDataSourceRiskDetails_NumericalStatsResult::clear_min_value() {
  if (GetArenaNoVirtual() == NULL && min_value_ != NULL) {
    delete min_value_;
  }
  min_value_ = NULL;
}
inline const ::google::privacy::dlp::v2::Value& AnalyzeDataSourceRiskDetails_NumericalStatsResult::_internal_min_value() const {
  return *min_value_;
}
inline const ::google::privacy::dlp::v2::Value& AnalyzeDataSourceRiskDetails_NumericalStatsResult::min_value() const {
  const ::google::privacy::dlp::v2::Value* p = min_value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.min_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Value*>(
      &::google::privacy::dlp::v2::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_NumericalStatsResult::release_min_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.min_value)
  
  ::google::privacy::dlp::v2::Value* temp = min_value_;
  min_value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_NumericalStatsResult::mutable_min_value() {
  
  if (min_value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Value>(GetArenaNoVirtual());
    min_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.min_value)
  return min_value_;
}
inline void AnalyzeDataSourceRiskDetails_NumericalStatsResult::set_allocated_min_value(::google::privacy::dlp::v2::Value* min_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete min_value_;
  }
  if (min_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_value, submessage_arena);
    }
    
  } else {
    
  }
  min_value_ = min_value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.min_value)
}

// .google.privacy.dlp.v2.Value max_value = 2;
inline bool AnalyzeDataSourceRiskDetails_NumericalStatsResult::has_max_value() const {
  return this != internal_default_instance() && max_value_ != NULL;
}
inline void AnalyzeDataSourceRiskDetails_NumericalStatsResult::clear_max_value() {
  if (GetArenaNoVirtual() == NULL && max_value_ != NULL) {
    delete max_value_;
  }
  max_value_ = NULL;
}
inline const ::google::privacy::dlp::v2::Value& AnalyzeDataSourceRiskDetails_NumericalStatsResult::_internal_max_value() const {
  return *max_value_;
}
inline const ::google::privacy::dlp::v2::Value& AnalyzeDataSourceRiskDetails_NumericalStatsResult::max_value() const {
  const ::google::privacy::dlp::v2::Value* p = max_value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.max_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Value*>(
      &::google::privacy::dlp::v2::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_NumericalStatsResult::release_max_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.max_value)
  
  ::google::privacy::dlp::v2::Value* temp = max_value_;
  max_value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_NumericalStatsResult::mutable_max_value() {
  
  if (max_value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Value>(GetArenaNoVirtual());
    max_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.max_value)
  return max_value_;
}
inline void AnalyzeDataSourceRiskDetails_NumericalStatsResult::set_allocated_max_value(::google::privacy::dlp::v2::Value* max_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete max_value_;
  }
  if (max_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_value, submessage_arena);
    }
    
  } else {
    
  }
  max_value_ = max_value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.max_value)
}

// repeated .google.privacy.dlp.v2.Value quantile_values = 4;
inline int AnalyzeDataSourceRiskDetails_NumericalStatsResult::quantile_values_size() const {
  return quantile_values_.size();
}
inline void AnalyzeDataSourceRiskDetails_NumericalStatsResult::clear_quantile_values() {
  quantile_values_.Clear();
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_NumericalStatsResult::mutable_quantile_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.quantile_values)
  return quantile_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
AnalyzeDataSourceRiskDetails_NumericalStatsResult::mutable_quantile_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.quantile_values)
  return &quantile_values_;
}
inline const ::google::privacy::dlp::v2::Value& AnalyzeDataSourceRiskDetails_NumericalStatsResult::quantile_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.quantile_values)
  return quantile_values_.Get(index);
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_NumericalStatsResult::add_quantile_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.quantile_values)
  return quantile_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
AnalyzeDataSourceRiskDetails_NumericalStatsResult::quantile_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.quantile_values)
  return quantile_values_;
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket

// int64 value_frequency_lower_bound = 1;
inline void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::clear_value_frequency_lower_bound() {
  value_frequency_lower_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::value_frequency_lower_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.value_frequency_lower_bound)
  return value_frequency_lower_bound_;
}
inline void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::set_value_frequency_lower_bound(::google::protobuf::int64 value) {
  
  value_frequency_lower_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.value_frequency_lower_bound)
}

// int64 value_frequency_upper_bound = 2;
inline void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::clear_value_frequency_upper_bound() {
  value_frequency_upper_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::value_frequency_upper_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.value_frequency_upper_bound)
  return value_frequency_upper_bound_;
}
inline void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::set_value_frequency_upper_bound(::google::protobuf::int64 value) {
  
  value_frequency_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.value_frequency_upper_bound)
}

// int64 bucket_size = 3;
inline void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::clear_bucket_size() {
  bucket_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::bucket_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_size)
  return bucket_size_;
}
inline void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::set_bucket_size(::google::protobuf::int64 value) {
  
  bucket_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_size)
}

// repeated .google.privacy.dlp.v2.ValueFrequency bucket_values = 4;
inline int AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::bucket_values_size() const {
  return bucket_values_.size();
}
inline void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::clear_bucket_values() {
  bucket_values_.Clear();
}
inline ::google::privacy::dlp::v2::ValueFrequency* AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::mutable_bucket_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_values)
  return bucket_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ValueFrequency >*
AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::mutable_bucket_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_values)
  return &bucket_values_;
}
inline const ::google::privacy::dlp::v2::ValueFrequency& AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::bucket_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_values)
  return bucket_values_.Get(index);
}
inline ::google::privacy::dlp::v2::ValueFrequency* AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::add_bucket_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_values)
  return bucket_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ValueFrequency >&
AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::bucket_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_values)
  return bucket_values_;
}

// int64 bucket_value_count = 5;
inline void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::clear_bucket_value_count() {
  bucket_value_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::bucket_value_count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_value_count)
  return bucket_value_count_;
}
inline void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::set_bucket_value_count(::google::protobuf::int64 value) {
  
  bucket_value_count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_value_count)
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_CategoricalStatsResult

// repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
inline int AnalyzeDataSourceRiskDetails_CategoricalStatsResult::value_frequency_histogram_buckets_size() const {
  return value_frequency_histogram_buckets_.size();
}
inline void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::clear_value_frequency_histogram_buckets() {
  value_frequency_histogram_buckets_.Clear();
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* AnalyzeDataSourceRiskDetails_CategoricalStatsResult::mutable_value_frequency_histogram_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.value_frequency_histogram_buckets)
  return value_frequency_histogram_buckets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket >*
AnalyzeDataSourceRiskDetails_CategoricalStatsResult::mutable_value_frequency_histogram_buckets() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.value_frequency_histogram_buckets)
  return &value_frequency_histogram_buckets_;
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& AnalyzeDataSourceRiskDetails_CategoricalStatsResult::value_frequency_histogram_buckets(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.value_frequency_histogram_buckets)
  return value_frequency_histogram_buckets_.Get(index);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* AnalyzeDataSourceRiskDetails_CategoricalStatsResult::add_value_frequency_histogram_buckets() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.value_frequency_histogram_buckets)
  return value_frequency_histogram_buckets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket >&
AnalyzeDataSourceRiskDetails_CategoricalStatsResult::value_frequency_histogram_buckets() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.value_frequency_histogram_buckets)
  return value_frequency_histogram_buckets_;
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass

// repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
inline int AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::quasi_ids_values_size() const {
  return quasi_ids_values_.size();
}
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::clear_quasi_ids_values() {
  quasi_ids_values_.Clear();
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::mutable_quasi_ids_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::mutable_quasi_ids_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.quasi_ids_values)
  return &quasi_ids_values_;
}
inline const ::google::privacy::dlp::v2::Value& AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::quasi_ids_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Get(index);
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::add_quasi_ids_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::quasi_ids_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_;
}

// int64 equivalence_class_size = 2;
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::clear_equivalence_class_size() {
  equivalence_class_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::equivalence_class_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.equivalence_class_size)
  return equivalence_class_size_;
}
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::set_equivalence_class_size(::google::protobuf::int64 value) {
  
  equivalence_class_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.equivalence_class_size)
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket

// int64 equivalence_class_size_lower_bound = 1;
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::clear_equivalence_class_size_lower_bound() {
  equivalence_class_size_lower_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::equivalence_class_size_lower_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.equivalence_class_size_lower_bound)
  return equivalence_class_size_lower_bound_;
}
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::set_equivalence_class_size_lower_bound(::google::protobuf::int64 value) {
  
  equivalence_class_size_lower_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.equivalence_class_size_lower_bound)
}

// int64 equivalence_class_size_upper_bound = 2;
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::clear_equivalence_class_size_upper_bound() {
  equivalence_class_size_upper_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::equivalence_class_size_upper_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.equivalence_class_size_upper_bound)
  return equivalence_class_size_upper_bound_;
}
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::set_equivalence_class_size_upper_bound(::google::protobuf::int64 value) {
  
  equivalence_class_size_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.equivalence_class_size_upper_bound)
}

// int64 bucket_size = 3;
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::clear_bucket_size() {
  bucket_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::bucket_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.bucket_size)
  return bucket_size_;
}
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::set_bucket_size(::google::protobuf::int64 value) {
  
  bucket_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.bucket_size)
}

// repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
inline int AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::bucket_values_size() const {
  return bucket_values_.size();
}
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::clear_bucket_values() {
  bucket_values_.Clear();
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::mutable_bucket_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.bucket_values)
  return bucket_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass >*
AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::mutable_bucket_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.bucket_values)
  return &bucket_values_;
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::bucket_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.bucket_values)
  return bucket_values_.Get(index);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::add_bucket_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.bucket_values)
  return bucket_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass >&
AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::bucket_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.bucket_values)
  return bucket_values_;
}

// int64 bucket_value_count = 5;
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::clear_bucket_value_count() {
  bucket_value_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::bucket_value_count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.bucket_value_count)
  return bucket_value_count_;
}
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::set_bucket_value_count(::google::protobuf::int64 value) {
  
  bucket_value_count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.bucket_value_count)
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_KAnonymityResult

// repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
inline int AnalyzeDataSourceRiskDetails_KAnonymityResult::equivalence_class_histogram_buckets_size() const {
  return equivalence_class_histogram_buckets_.size();
}
inline void AnalyzeDataSourceRiskDetails_KAnonymityResult::clear_equivalence_class_histogram_buckets() {
  equivalence_class_histogram_buckets_.Clear();
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* AnalyzeDataSourceRiskDetails_KAnonymityResult::mutable_equivalence_class_histogram_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.equivalence_class_histogram_buckets)
  return equivalence_class_histogram_buckets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket >*
AnalyzeDataSourceRiskDetails_KAnonymityResult::mutable_equivalence_class_histogram_buckets() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.equivalence_class_histogram_buckets)
  return &equivalence_class_histogram_buckets_;
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& AnalyzeDataSourceRiskDetails_KAnonymityResult::equivalence_class_histogram_buckets(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.equivalence_class_histogram_buckets)
  return equivalence_class_histogram_buckets_.Get(index);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* AnalyzeDataSourceRiskDetails_KAnonymityResult::add_equivalence_class_histogram_buckets() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.equivalence_class_histogram_buckets)
  return equivalence_class_histogram_buckets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket >&
AnalyzeDataSourceRiskDetails_KAnonymityResult::equivalence_class_histogram_buckets() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.equivalence_class_histogram_buckets)
  return equivalence_class_histogram_buckets_;
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass

// repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
inline int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::quasi_ids_values_size() const {
  return quasi_ids_values_.size();
}
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::clear_quasi_ids_values() {
  quasi_ids_values_.Clear();
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::mutable_quasi_ids_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::mutable_quasi_ids_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.quasi_ids_values)
  return &quasi_ids_values_;
}
inline const ::google::privacy::dlp::v2::Value& AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::quasi_ids_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Get(index);
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::add_quasi_ids_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::quasi_ids_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_;
}

// int64 equivalence_class_size = 2;
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::clear_equivalence_class_size() {
  equivalence_class_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::equivalence_class_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.equivalence_class_size)
  return equivalence_class_size_;
}
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::set_equivalence_class_size(::google::protobuf::int64 value) {
  
  equivalence_class_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.equivalence_class_size)
}

// int64 num_distinct_sensitive_values = 3;
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::clear_num_distinct_sensitive_values() {
  num_distinct_sensitive_values_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::num_distinct_sensitive_values() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.num_distinct_sensitive_values)
  return num_distinct_sensitive_values_;
}
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::set_num_distinct_sensitive_values(::google::protobuf::int64 value) {
  
  num_distinct_sensitive_values_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.num_distinct_sensitive_values)
}

// repeated .google.privacy.dlp.v2.ValueFrequency top_sensitive_values = 4;
inline int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::top_sensitive_values_size() const {
  return top_sensitive_values_.size();
}
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::clear_top_sensitive_values() {
  top_sensitive_values_.Clear();
}
inline ::google::privacy::dlp::v2::ValueFrequency* AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::mutable_top_sensitive_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.top_sensitive_values)
  return top_sensitive_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ValueFrequency >*
AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::mutable_top_sensitive_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.top_sensitive_values)
  return &top_sensitive_values_;
}
inline const ::google::privacy::dlp::v2::ValueFrequency& AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::top_sensitive_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.top_sensitive_values)
  return top_sensitive_values_.Get(index);
}
inline ::google::privacy::dlp::v2::ValueFrequency* AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::add_top_sensitive_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.top_sensitive_values)
  return top_sensitive_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::ValueFrequency >&
AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::top_sensitive_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.top_sensitive_values)
  return top_sensitive_values_;
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket

// int64 sensitive_value_frequency_lower_bound = 1;
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::clear_sensitive_value_frequency_lower_bound() {
  sensitive_value_frequency_lower_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::sensitive_value_frequency_lower_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.sensitive_value_frequency_lower_bound)
  return sensitive_value_frequency_lower_bound_;
}
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::set_sensitive_value_frequency_lower_bound(::google::protobuf::int64 value) {
  
  sensitive_value_frequency_lower_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.sensitive_value_frequency_lower_bound)
}

// int64 sensitive_value_frequency_upper_bound = 2;
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::clear_sensitive_value_frequency_upper_bound() {
  sensitive_value_frequency_upper_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::sensitive_value_frequency_upper_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.sensitive_value_frequency_upper_bound)
  return sensitive_value_frequency_upper_bound_;
}
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::set_sensitive_value_frequency_upper_bound(::google::protobuf::int64 value) {
  
  sensitive_value_frequency_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.sensitive_value_frequency_upper_bound)
}

// int64 bucket_size = 3;
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::clear_bucket_size() {
  bucket_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::bucket_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.bucket_size)
  return bucket_size_;
}
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::set_bucket_size(::google::protobuf::int64 value) {
  
  bucket_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.bucket_size)
}

// repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
inline int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::bucket_values_size() const {
  return bucket_values_.size();
}
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::clear_bucket_values() {
  bucket_values_.Clear();
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::mutable_bucket_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.bucket_values)
  return bucket_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass >*
AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::mutable_bucket_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.bucket_values)
  return &bucket_values_;
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::bucket_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.bucket_values)
  return bucket_values_.Get(index);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::add_bucket_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.bucket_values)
  return bucket_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass >&
AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::bucket_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.bucket_values)
  return bucket_values_;
}

// int64 bucket_value_count = 5;
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::clear_bucket_value_count() {
  bucket_value_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::bucket_value_count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.bucket_value_count)
  return bucket_value_count_;
}
inline void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::set_bucket_value_count(::google::protobuf::int64 value) {
  
  bucket_value_count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.bucket_value_count)
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_LDiversityResult

// repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
inline int AnalyzeDataSourceRiskDetails_LDiversityResult::sensitive_value_frequency_histogram_buckets_size() const {
  return sensitive_value_frequency_histogram_buckets_.size();
}
inline void AnalyzeDataSourceRiskDetails_LDiversityResult::clear_sensitive_value_frequency_histogram_buckets() {
  sensitive_value_frequency_histogram_buckets_.Clear();
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* AnalyzeDataSourceRiskDetails_LDiversityResult::mutable_sensitive_value_frequency_histogram_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.sensitive_value_frequency_histogram_buckets)
  return sensitive_value_frequency_histogram_buckets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket >*
AnalyzeDataSourceRiskDetails_LDiversityResult::mutable_sensitive_value_frequency_histogram_buckets() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.sensitive_value_frequency_histogram_buckets)
  return &sensitive_value_frequency_histogram_buckets_;
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& AnalyzeDataSourceRiskDetails_LDiversityResult::sensitive_value_frequency_histogram_buckets(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.sensitive_value_frequency_histogram_buckets)
  return sensitive_value_frequency_histogram_buckets_.Get(index);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* AnalyzeDataSourceRiskDetails_LDiversityResult::add_sensitive_value_frequency_histogram_buckets() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.sensitive_value_frequency_histogram_buckets)
  return sensitive_value_frequency_histogram_buckets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket >&
AnalyzeDataSourceRiskDetails_LDiversityResult::sensitive_value_frequency_histogram_buckets() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.sensitive_value_frequency_histogram_buckets)
  return sensitive_value_frequency_histogram_buckets_;
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues

// repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
inline int AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::quasi_ids_values_size() const {
  return quasi_ids_values_.size();
}
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::clear_quasi_ids_values() {
  quasi_ids_values_.Clear();
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::mutable_quasi_ids_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.quasi_ids_values)
  return quasi_ids_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::mutable_quasi_ids_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.quasi_ids_values)
  return &quasi_ids_values_;
}
inline const ::google::privacy::dlp::v2::Value& AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::quasi_ids_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.quasi_ids_values)
  return quasi_ids_values_.Get(index);
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::add_quasi_ids_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.quasi_ids_values)
  return quasi_ids_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::quasi_ids_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.quasi_ids_values)
  return quasi_ids_values_;
}

// int64 estimated_anonymity = 2;
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::clear_estimated_anonymity() {
  estimated_anonymity_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::estimated_anonymity() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.estimated_anonymity)
  return estimated_anonymity_;
}
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::set_estimated_anonymity(::google::protobuf::int64 value) {
  
  estimated_anonymity_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.estimated_anonymity)
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket

// int64 min_anonymity = 1;
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::clear_min_anonymity() {
  min_anonymity_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::min_anonymity() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.min_anonymity)
  return min_anonymity_;
}
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::set_min_anonymity(::google::protobuf::int64 value) {
  
  min_anonymity_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.min_anonymity)
}

// int64 max_anonymity = 2;
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::clear_max_anonymity() {
  max_anonymity_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::max_anonymity() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.max_anonymity)
  return max_anonymity_;
}
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::set_max_anonymity(::google::protobuf::int64 value) {
  
  max_anonymity_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.max_anonymity)
}

// int64 bucket_size = 5;
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::clear_bucket_size() {
  bucket_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::bucket_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.bucket_size)
  return bucket_size_;
}
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::set_bucket_size(::google::protobuf::int64 value) {
  
  bucket_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.bucket_size)
}

// repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues bucket_values = 6;
inline int AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::bucket_values_size() const {
  return bucket_values_.size();
}
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::clear_bucket_values() {
  bucket_values_.Clear();
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::mutable_bucket_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.bucket_values)
  return bucket_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues >*
AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::mutable_bucket_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.bucket_values)
  return &bucket_values_;
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::bucket_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.bucket_values)
  return bucket_values_.Get(index);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::add_bucket_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.bucket_values)
  return bucket_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues >&
AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::bucket_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.bucket_values)
  return bucket_values_;
}

// int64 bucket_value_count = 7;
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::clear_bucket_value_count() {
  bucket_value_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::bucket_value_count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.bucket_value_count)
  return bucket_value_count_;
}
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::set_bucket_value_count(::google::protobuf::int64 value) {
  
  bucket_value_count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.bucket_value_count)
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_KMapEstimationResult

// repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket k_map_estimation_histogram = 1;
inline int AnalyzeDataSourceRiskDetails_KMapEstimationResult::k_map_estimation_histogram_size() const {
  return k_map_estimation_histogram_.size();
}
inline void AnalyzeDataSourceRiskDetails_KMapEstimationResult::clear_k_map_estimation_histogram() {
  k_map_estimation_histogram_.Clear();
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* AnalyzeDataSourceRiskDetails_KMapEstimationResult::mutable_k_map_estimation_histogram(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.k_map_estimation_histogram)
  return k_map_estimation_histogram_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket >*
AnalyzeDataSourceRiskDetails_KMapEstimationResult::mutable_k_map_estimation_histogram() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.k_map_estimation_histogram)
  return &k_map_estimation_histogram_;
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& AnalyzeDataSourceRiskDetails_KMapEstimationResult::k_map_estimation_histogram(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.k_map_estimation_histogram)
  return k_map_estimation_histogram_.Get(index);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* AnalyzeDataSourceRiskDetails_KMapEstimationResult::add_k_map_estimation_histogram() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.k_map_estimation_histogram)
  return k_map_estimation_histogram_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket >&
AnalyzeDataSourceRiskDetails_KMapEstimationResult::k_map_estimation_histogram() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.k_map_estimation_histogram)
  return k_map_estimation_histogram_;
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues

// repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
inline int AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::quasi_ids_values_size() const {
  return quasi_ids_values_.size();
}
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::clear_quasi_ids_values() {
  quasi_ids_values_.Clear();
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::mutable_quasi_ids_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.quasi_ids_values)
  return quasi_ids_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >*
AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::mutable_quasi_ids_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.quasi_ids_values)
  return &quasi_ids_values_;
}
inline const ::google::privacy::dlp::v2::Value& AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::quasi_ids_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.quasi_ids_values)
  return quasi_ids_values_.Get(index);
}
inline ::google::privacy::dlp::v2::Value* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::add_quasi_ids_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.quasi_ids_values)
  return quasi_ids_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Value >&
AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::quasi_ids_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.quasi_ids_values)
  return quasi_ids_values_;
}

// double estimated_probability = 2;
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::clear_estimated_probability() {
  estimated_probability_ = 0;
}
inline double AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::estimated_probability() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.estimated_probability)
  return estimated_probability_;
}
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::set_estimated_probability(double value) {
  
  estimated_probability_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.estimated_probability)
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket

// double min_probability = 1;
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::clear_min_probability() {
  min_probability_ = 0;
}
inline double AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::min_probability() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.min_probability)
  return min_probability_;
}
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::set_min_probability(double value) {
  
  min_probability_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.min_probability)
}

// double max_probability = 2;
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::clear_max_probability() {
  max_probability_ = 0;
}
inline double AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::max_probability() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.max_probability)
  return max_probability_;
}
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::set_max_probability(double value) {
  
  max_probability_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.max_probability)
}

// int64 bucket_size = 5;
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::clear_bucket_size() {
  bucket_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::bucket_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.bucket_size)
  return bucket_size_;
}
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::set_bucket_size(::google::protobuf::int64 value) {
  
  bucket_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.bucket_size)
}

// repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues bucket_values = 6;
inline int AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::bucket_values_size() const {
  return bucket_values_.size();
}
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::clear_bucket_values() {
  bucket_values_.Clear();
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::mutable_bucket_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.bucket_values)
  return bucket_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues >*
AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::mutable_bucket_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.bucket_values)
  return &bucket_values_;
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::bucket_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.bucket_values)
  return bucket_values_.Get(index);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::add_bucket_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.bucket_values)
  return bucket_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues >&
AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::bucket_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.bucket_values)
  return bucket_values_;
}

// int64 bucket_value_count = 7;
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::clear_bucket_value_count() {
  bucket_value_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::bucket_value_count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.bucket_value_count)
  return bucket_value_count_;
}
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::set_bucket_value_count(::google::protobuf::int64 value) {
  
  bucket_value_count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.bucket_value_count)
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult

// repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket delta_presence_estimation_histogram = 1;
inline int AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::delta_presence_estimation_histogram_size() const {
  return delta_presence_estimation_histogram_.size();
}
inline void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::clear_delta_presence_estimation_histogram() {
  delta_presence_estimation_histogram_.Clear();
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::mutable_delta_presence_estimation_histogram(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.delta_presence_estimation_histogram)
  return delta_presence_estimation_histogram_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket >*
AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::mutable_delta_presence_estimation_histogram() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.delta_presence_estimation_histogram)
  return &delta_presence_estimation_histogram_;
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::delta_presence_estimation_histogram(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.delta_presence_estimation_histogram)
  return delta_presence_estimation_histogram_.Get(index);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::add_delta_presence_estimation_histogram() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.delta_presence_estimation_histogram)
  return delta_presence_estimation_histogram_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket >&
AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::delta_presence_estimation_histogram() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.delta_presence_estimation_histogram)
  return delta_presence_estimation_histogram_;
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskDetails

// .google.privacy.dlp.v2.PrivacyMetric requested_privacy_metric = 1;
inline bool AnalyzeDataSourceRiskDetails::has_requested_privacy_metric() const {
  return this != internal_default_instance() && requested_privacy_metric_ != NULL;
}
inline void AnalyzeDataSourceRiskDetails::clear_requested_privacy_metric() {
  if (GetArenaNoVirtual() == NULL && requested_privacy_metric_ != NULL) {
    delete requested_privacy_metric_;
  }
  requested_privacy_metric_ = NULL;
}
inline const ::google::privacy::dlp::v2::PrivacyMetric& AnalyzeDataSourceRiskDetails::_internal_requested_privacy_metric() const {
  return *requested_privacy_metric_;
}
inline const ::google::privacy::dlp::v2::PrivacyMetric& AnalyzeDataSourceRiskDetails::requested_privacy_metric() const {
  const ::google::privacy::dlp::v2::PrivacyMetric* p = requested_privacy_metric_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.requested_privacy_metric)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::PrivacyMetric*>(
      &::google::privacy::dlp::v2::_PrivacyMetric_default_instance_);
}
inline ::google::privacy::dlp::v2::PrivacyMetric* AnalyzeDataSourceRiskDetails::release_requested_privacy_metric() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.requested_privacy_metric)
  
  ::google::privacy::dlp::v2::PrivacyMetric* temp = requested_privacy_metric_;
  requested_privacy_metric_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::PrivacyMetric* AnalyzeDataSourceRiskDetails::mutable_requested_privacy_metric() {
  
  if (requested_privacy_metric_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::PrivacyMetric>(GetArenaNoVirtual());
    requested_privacy_metric_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.requested_privacy_metric)
  return requested_privacy_metric_;
}
inline void AnalyzeDataSourceRiskDetails::set_allocated_requested_privacy_metric(::google::privacy::dlp::v2::PrivacyMetric* requested_privacy_metric) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete requested_privacy_metric_;
  }
  if (requested_privacy_metric) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      requested_privacy_metric = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requested_privacy_metric, submessage_arena);
    }
    
  } else {
    
  }
  requested_privacy_metric_ = requested_privacy_metric;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.requested_privacy_metric)
}

// .google.privacy.dlp.v2.BigQueryTable requested_source_table = 2;
inline bool AnalyzeDataSourceRiskDetails::has_requested_source_table() const {
  return this != internal_default_instance() && requested_source_table_ != NULL;
}
inline const ::google::privacy::dlp::v2::BigQueryTable& AnalyzeDataSourceRiskDetails::_internal_requested_source_table() const {
  return *requested_source_table_;
}
inline const ::google::privacy::dlp::v2::BigQueryTable& AnalyzeDataSourceRiskDetails::requested_source_table() const {
  const ::google::privacy::dlp::v2::BigQueryTable* p = requested_source_table_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.requested_source_table)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::BigQueryTable*>(
      &::google::privacy::dlp::v2::_BigQueryTable_default_instance_);
}
inline ::google::privacy::dlp::v2::BigQueryTable* AnalyzeDataSourceRiskDetails::release_requested_source_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.requested_source_table)
  
  ::google::privacy::dlp::v2::BigQueryTable* temp = requested_source_table_;
  requested_source_table_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::BigQueryTable* AnalyzeDataSourceRiskDetails::mutable_requested_source_table() {
  
  if (requested_source_table_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::BigQueryTable>(GetArenaNoVirtual());
    requested_source_table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.requested_source_table)
  return requested_source_table_;
}
inline void AnalyzeDataSourceRiskDetails::set_allocated_requested_source_table(::google::privacy::dlp::v2::BigQueryTable* requested_source_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(requested_source_table_);
  }
  if (requested_source_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      requested_source_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requested_source_table, submessage_arena);
    }
    
  } else {
    
  }
  requested_source_table_ = requested_source_table;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.requested_source_table)
}

// .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult numerical_stats_result = 3;
inline bool AnalyzeDataSourceRiskDetails::has_numerical_stats_result() const {
  return result_case() == kNumericalStatsResult;
}
inline void AnalyzeDataSourceRiskDetails::set_has_numerical_stats_result() {
  _oneof_case_[0] = kNumericalStatsResult;
}
inline void AnalyzeDataSourceRiskDetails::clear_numerical_stats_result() {
  if (has_numerical_stats_result()) {
    delete result_.numerical_stats_result_;
    clear_has_result();
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult& AnalyzeDataSourceRiskDetails::_internal_numerical_stats_result() const {
  return *result_.numerical_stats_result_;
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult* AnalyzeDataSourceRiskDetails::release_numerical_stats_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.numerical_stats_result)
  if (has_numerical_stats_result()) {
    clear_has_result();
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult* temp = result_.numerical_stats_result_;
    result_.numerical_stats_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult& AnalyzeDataSourceRiskDetails::numerical_stats_result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.numerical_stats_result)
  return has_numerical_stats_result()
      ? *result_.numerical_stats_result_
      : *reinterpret_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_NumericalStatsResult_default_instance_);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult* AnalyzeDataSourceRiskDetails::mutable_numerical_stats_result() {
  if (!has_numerical_stats_result()) {
    clear_result();
    set_has_numerical_stats_result();
    result_.numerical_stats_result_ = CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.numerical_stats_result)
  return result_.numerical_stats_result_;
}

// .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult categorical_stats_result = 4;
inline bool AnalyzeDataSourceRiskDetails::has_categorical_stats_result() const {
  return result_case() == kCategoricalStatsResult;
}
inline void AnalyzeDataSourceRiskDetails::set_has_categorical_stats_result() {
  _oneof_case_[0] = kCategoricalStatsResult;
}
inline void AnalyzeDataSourceRiskDetails::clear_categorical_stats_result() {
  if (has_categorical_stats_result()) {
    delete result_.categorical_stats_result_;
    clear_has_result();
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult& AnalyzeDataSourceRiskDetails::_internal_categorical_stats_result() const {
  return *result_.categorical_stats_result_;
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult* AnalyzeDataSourceRiskDetails::release_categorical_stats_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.categorical_stats_result)
  if (has_categorical_stats_result()) {
    clear_has_result();
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult* temp = result_.categorical_stats_result_;
    result_.categorical_stats_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult& AnalyzeDataSourceRiskDetails::categorical_stats_result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.categorical_stats_result)
  return has_categorical_stats_result()
      ? *result_.categorical_stats_result_
      : *reinterpret_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_default_instance_);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult* AnalyzeDataSourceRiskDetails::mutable_categorical_stats_result() {
  if (!has_categorical_stats_result()) {
    clear_result();
    set_has_categorical_stats_result();
    result_.categorical_stats_result_ = CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.categorical_stats_result)
  return result_.categorical_stats_result_;
}

// .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult k_anonymity_result = 5;
inline bool AnalyzeDataSourceRiskDetails::has_k_anonymity_result() const {
  return result_case() == kKAnonymityResult;
}
inline void AnalyzeDataSourceRiskDetails::set_has_k_anonymity_result() {
  _oneof_case_[0] = kKAnonymityResult;
}
inline void AnalyzeDataSourceRiskDetails::clear_k_anonymity_result() {
  if (has_k_anonymity_result()) {
    delete result_.k_anonymity_result_;
    clear_has_result();
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult& AnalyzeDataSourceRiskDetails::_internal_k_anonymity_result() const {
  return *result_.k_anonymity_result_;
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult* AnalyzeDataSourceRiskDetails::release_k_anonymity_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.k_anonymity_result)
  if (has_k_anonymity_result()) {
    clear_has_result();
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult* temp = result_.k_anonymity_result_;
    result_.k_anonymity_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult& AnalyzeDataSourceRiskDetails::k_anonymity_result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.k_anonymity_result)
  return has_k_anonymity_result()
      ? *result_.k_anonymity_result_
      : *reinterpret_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KAnonymityResult_default_instance_);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult* AnalyzeDataSourceRiskDetails::mutable_k_anonymity_result() {
  if (!has_k_anonymity_result()) {
    clear_result();
    set_has_k_anonymity_result();
    result_.k_anonymity_result_ = CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.k_anonymity_result)
  return result_.k_anonymity_result_;
}

// .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult l_diversity_result = 6;
inline bool AnalyzeDataSourceRiskDetails::has_l_diversity_result() const {
  return result_case() == kLDiversityResult;
}
inline void AnalyzeDataSourceRiskDetails::set_has_l_diversity_result() {
  _oneof_case_[0] = kLDiversityResult;
}
inline void AnalyzeDataSourceRiskDetails::clear_l_diversity_result() {
  if (has_l_diversity_result()) {
    delete result_.l_diversity_result_;
    clear_has_result();
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult& AnalyzeDataSourceRiskDetails::_internal_l_diversity_result() const {
  return *result_.l_diversity_result_;
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult* AnalyzeDataSourceRiskDetails::release_l_diversity_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.l_diversity_result)
  if (has_l_diversity_result()) {
    clear_has_result();
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult* temp = result_.l_diversity_result_;
    result_.l_diversity_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult& AnalyzeDataSourceRiskDetails::l_diversity_result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.l_diversity_result)
  return has_l_diversity_result()
      ? *result_.l_diversity_result_
      : *reinterpret_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_LDiversityResult_default_instance_);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult* AnalyzeDataSourceRiskDetails::mutable_l_diversity_result() {
  if (!has_l_diversity_result()) {
    clear_result();
    set_has_l_diversity_result();
    result_.l_diversity_result_ = CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.l_diversity_result)
  return result_.l_diversity_result_;
}

// .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult k_map_estimation_result = 7;
inline bool AnalyzeDataSourceRiskDetails::has_k_map_estimation_result() const {
  return result_case() == kKMapEstimationResult;
}
inline void AnalyzeDataSourceRiskDetails::set_has_k_map_estimation_result() {
  _oneof_case_[0] = kKMapEstimationResult;
}
inline void AnalyzeDataSourceRiskDetails::clear_k_map_estimation_result() {
  if (has_k_map_estimation_result()) {
    delete result_.k_map_estimation_result_;
    clear_has_result();
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult& AnalyzeDataSourceRiskDetails::_internal_k_map_estimation_result() const {
  return *result_.k_map_estimation_result_;
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult* AnalyzeDataSourceRiskDetails::release_k_map_estimation_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.k_map_estimation_result)
  if (has_k_map_estimation_result()) {
    clear_has_result();
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult* temp = result_.k_map_estimation_result_;
    result_.k_map_estimation_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult& AnalyzeDataSourceRiskDetails::k_map_estimation_result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.k_map_estimation_result)
  return has_k_map_estimation_result()
      ? *result_.k_map_estimation_result_
      : *reinterpret_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KMapEstimationResult_default_instance_);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult* AnalyzeDataSourceRiskDetails::mutable_k_map_estimation_result() {
  if (!has_k_map_estimation_result()) {
    clear_result();
    set_has_k_map_estimation_result();
    result_.k_map_estimation_result_ = CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.k_map_estimation_result)
  return result_.k_map_estimation_result_;
}

// .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult delta_presence_estimation_result = 9;
inline bool AnalyzeDataSourceRiskDetails::has_delta_presence_estimation_result() const {
  return result_case() == kDeltaPresenceEstimationResult;
}
inline void AnalyzeDataSourceRiskDetails::set_has_delta_presence_estimation_result() {
  _oneof_case_[0] = kDeltaPresenceEstimationResult;
}
inline void AnalyzeDataSourceRiskDetails::clear_delta_presence_estimation_result() {
  if (has_delta_presence_estimation_result()) {
    delete result_.delta_presence_estimation_result_;
    clear_has_result();
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& AnalyzeDataSourceRiskDetails::_internal_delta_presence_estimation_result() const {
  return *result_.delta_presence_estimation_result_;
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* AnalyzeDataSourceRiskDetails::release_delta_presence_estimation_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.delta_presence_estimation_result)
  if (has_delta_presence_estimation_result()) {
    clear_has_result();
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* temp = result_.delta_presence_estimation_result_;
    result_.delta_presence_estimation_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& AnalyzeDataSourceRiskDetails::delta_presence_estimation_result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.delta_presence_estimation_result)
  return has_delta_presence_estimation_result()
      ? *result_.delta_presence_estimation_result_
      : *reinterpret_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_default_instance_);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* AnalyzeDataSourceRiskDetails::mutable_delta_presence_estimation_result() {
  if (!has_delta_presence_estimation_result()) {
    clear_result();
    set_has_delta_presence_estimation_result();
    result_.delta_presence_estimation_result_ = CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.delta_presence_estimation_result)
  return result_.delta_presence_estimation_result_;
}

inline bool AnalyzeDataSourceRiskDetails::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void AnalyzeDataSourceRiskDetails::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline AnalyzeDataSourceRiskDetails::ResultCase AnalyzeDataSourceRiskDetails::result_case() const {
  return AnalyzeDataSourceRiskDetails::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ValueFrequency

// .google.privacy.dlp.v2.Value value = 1;
inline bool ValueFrequency::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ValueFrequency::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::privacy::dlp::v2::Value& ValueFrequency::_internal_value() const {
  return *value_;
}
inline const ::google::privacy::dlp::v2::Value& ValueFrequency::value() const {
  const ::google::privacy::dlp::v2::Value* p = value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ValueFrequency.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Value*>(
      &::google::privacy::dlp::v2::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2::Value* ValueFrequency::release_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ValueFrequency.value)
  
  ::google::privacy::dlp::v2::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Value* ValueFrequency::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ValueFrequency.value)
  return value_;
}
inline void ValueFrequency::set_allocated_value(::google::privacy::dlp::v2::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ValueFrequency.value)
}

// int64 count = 2;
inline void ValueFrequency::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ValueFrequency::count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ValueFrequency.count)
  return count_;
}
inline void ValueFrequency::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ValueFrequency.count)
}

// -------------------------------------------------------------------

// Value

// int64 integer_value = 1;
inline bool Value::has_integer_value() const {
  return type_case() == kIntegerValue;
}
inline void Value::set_has_integer_value() {
  _oneof_case_[0] = kIntegerValue;
}
inline void Value::clear_integer_value() {
  if (has_integer_value()) {
    type_.integer_value_ = GOOGLE_LONGLONG(0);
    clear_has_type();
  }
}
inline ::google::protobuf::int64 Value::integer_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Value.integer_value)
  if (has_integer_value()) {
    return type_.integer_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Value::set_integer_value(::google::protobuf::int64 value) {
  if (!has_integer_value()) {
    clear_type();
    set_has_integer_value();
  }
  type_.integer_value_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Value.integer_value)
}

// double float_value = 2;
inline bool Value::has_float_value() const {
  return type_case() == kFloatValue;
}
inline void Value::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Value::clear_float_value() {
  if (has_float_value()) {
    type_.float_value_ = 0;
    clear_has_type();
  }
}
inline double Value::float_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Value.float_value)
  if (has_float_value()) {
    return type_.float_value_;
  }
  return 0;
}
inline void Value::set_float_value(double value) {
  if (!has_float_value()) {
    clear_type();
    set_has_float_value();
  }
  type_.float_value_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Value.float_value)
}

// string string_value = 3;
inline bool Value::has_string_value() const {
  return type_case() == kStringValue;
}
inline void Value::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Value::clear_string_value() {
  if (has_string_value()) {
    type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
inline const ::std::string& Value::string_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Value.string_value)
  if (has_string_value()) {
    return type_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Value::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Value.string_value)
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Value.string_value)
}
#if LANG_CXX11
inline void Value::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Value.string_value)
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.Value.string_value)
}
#endif
inline void Value::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.Value.string_value)
}
inline void Value::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.Value.string_value)
}
inline ::std::string* Value::mutable_string_value() {
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Value.string_value)
  return type_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_string_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Value.string_value)
  if (has_string_value()) {
    clear_has_type();
    return type_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Value::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type();
  if (string_value != NULL) {
    set_has_string_value();
    type_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Value.string_value)
}

// bool boolean_value = 4;
inline bool Value::has_boolean_value() const {
  return type_case() == kBooleanValue;
}
inline void Value::set_has_boolean_value() {
  _oneof_case_[0] = kBooleanValue;
}
inline void Value::clear_boolean_value() {
  if (has_boolean_value()) {
    type_.boolean_value_ = false;
    clear_has_type();
  }
}
inline bool Value::boolean_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Value.boolean_value)
  if (has_boolean_value()) {
    return type_.boolean_value_;
  }
  return false;
}
inline void Value::set_boolean_value(bool value) {
  if (!has_boolean_value()) {
    clear_type();
    set_has_boolean_value();
  }
  type_.boolean_value_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Value.boolean_value)
}

// .google.protobuf.Timestamp timestamp_value = 5;
inline bool Value::has_timestamp_value() const {
  return type_case() == kTimestampValue;
}
inline void Value::set_has_timestamp_value() {
  _oneof_case_[0] = kTimestampValue;
}
inline const ::google::protobuf::Timestamp& Value::_internal_timestamp_value() const {
  return *type_.timestamp_value_;
}
inline ::google::protobuf::Timestamp* Value::release_timestamp_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Value.timestamp_value)
  if (has_timestamp_value()) {
    clear_has_type();
      ::google::protobuf::Timestamp* temp = type_.timestamp_value_;
    type_.timestamp_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Timestamp& Value::timestamp_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Value.timestamp_value)
  return has_timestamp_value()
      ? *type_.timestamp_value_
      : *reinterpret_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Value::mutable_timestamp_value() {
  if (!has_timestamp_value()) {
    clear_type();
    set_has_timestamp_value();
    type_.timestamp_value_ = CreateMaybeMessage< ::google::protobuf::Timestamp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Value.timestamp_value)
  return type_.timestamp_value_;
}

// .google.type.TimeOfDay time_value = 6;
inline bool Value::has_time_value() const {
  return type_case() == kTimeValue;
}
inline void Value::set_has_time_value() {
  _oneof_case_[0] = kTimeValue;
}
inline const ::google::type::TimeOfDay& Value::_internal_time_value() const {
  return *type_.time_value_;
}
inline ::google::type::TimeOfDay* Value::release_time_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Value.time_value)
  if (has_time_value()) {
    clear_has_type();
      ::google::type::TimeOfDay* temp = type_.time_value_;
    type_.time_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::type::TimeOfDay& Value::time_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Value.time_value)
  return has_time_value()
      ? *type_.time_value_
      : *reinterpret_cast< ::google::type::TimeOfDay*>(&::google::type::_TimeOfDay_default_instance_);
}
inline ::google::type::TimeOfDay* Value::mutable_time_value() {
  if (!has_time_value()) {
    clear_type();
    set_has_time_value();
    type_.time_value_ = CreateMaybeMessage< ::google::type::TimeOfDay >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Value.time_value)
  return type_.time_value_;
}

// .google.type.Date date_value = 7;
inline bool Value::has_date_value() const {
  return type_case() == kDateValue;
}
inline void Value::set_has_date_value() {
  _oneof_case_[0] = kDateValue;
}
inline const ::google::type::Date& Value::_internal_date_value() const {
  return *type_.date_value_;
}
inline ::google::type::Date* Value::release_date_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Value.date_value)
  if (has_date_value()) {
    clear_has_type();
      ::google::type::Date* temp = type_.date_value_;
    type_.date_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::type::Date& Value::date_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Value.date_value)
  return has_date_value()
      ? *type_.date_value_
      : *reinterpret_cast< ::google::type::Date*>(&::google::type::_Date_default_instance_);
}
inline ::google::type::Date* Value::mutable_date_value() {
  if (!has_date_value()) {
    clear_type();
    set_has_date_value();
    type_.date_value_ = CreateMaybeMessage< ::google::type::Date >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Value.date_value)
  return type_.date_value_;
}

// .google.type.DayOfWeek day_of_week_value = 8;
inline bool Value::has_day_of_week_value() const {
  return type_case() == kDayOfWeekValue;
}
inline void Value::set_has_day_of_week_value() {
  _oneof_case_[0] = kDayOfWeekValue;
}
inline void Value::clear_day_of_week_value() {
  if (has_day_of_week_value()) {
    type_.day_of_week_value_ = 0;
    clear_has_type();
  }
}
inline ::google::type::DayOfWeek Value::day_of_week_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Value.day_of_week_value)
  if (has_day_of_week_value()) {
    return static_cast< ::google::type::DayOfWeek >(type_.day_of_week_value_);
  }
  return static_cast< ::google::type::DayOfWeek >(0);
}
inline void Value::set_day_of_week_value(::google::type::DayOfWeek value) {
  if (!has_day_of_week_value()) {
    clear_type();
    set_has_day_of_week_value();
  }
  type_.day_of_week_value_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Value.day_of_week_value)
}

inline bool Value::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Value::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Value::TypeCase Value::type_case() const {
  return Value::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QuoteInfo

// .google.privacy.dlp.v2.DateTime date_time = 2;
inline bool QuoteInfo::has_date_time() const {
  return parsed_quote_case() == kDateTime;
}
inline void QuoteInfo::set_has_date_time() {
  _oneof_case_[0] = kDateTime;
}
inline void QuoteInfo::clear_date_time() {
  if (has_date_time()) {
    delete parsed_quote_.date_time_;
    clear_has_parsed_quote();
  }
}
inline const ::google::privacy::dlp::v2::DateTime& QuoteInfo::_internal_date_time() const {
  return *parsed_quote_.date_time_;
}
inline ::google::privacy::dlp::v2::DateTime* QuoteInfo::release_date_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.QuoteInfo.date_time)
  if (has_date_time()) {
    clear_has_parsed_quote();
      ::google::privacy::dlp::v2::DateTime* temp = parsed_quote_.date_time_;
    parsed_quote_.date_time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::DateTime& QuoteInfo::date_time() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.QuoteInfo.date_time)
  return has_date_time()
      ? *parsed_quote_.date_time_
      : *reinterpret_cast< ::google::privacy::dlp::v2::DateTime*>(&::google::privacy::dlp::v2::_DateTime_default_instance_);
}
inline ::google::privacy::dlp::v2::DateTime* QuoteInfo::mutable_date_time() {
  if (!has_date_time()) {
    clear_parsed_quote();
    set_has_date_time();
    parsed_quote_.date_time_ = CreateMaybeMessage< ::google::privacy::dlp::v2::DateTime >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.QuoteInfo.date_time)
  return parsed_quote_.date_time_;
}

inline bool QuoteInfo::has_parsed_quote() const {
  return parsed_quote_case() != PARSED_QUOTE_NOT_SET;
}
inline void QuoteInfo::clear_has_parsed_quote() {
  _oneof_case_[0] = PARSED_QUOTE_NOT_SET;
}
inline QuoteInfo::ParsedQuoteCase QuoteInfo::parsed_quote_case() const {
  return QuoteInfo::ParsedQuoteCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DateTime_TimeZone

// int32 offset_minutes = 1;
inline void DateTime_TimeZone::clear_offset_minutes() {
  offset_minutes_ = 0;
}
inline ::google::protobuf::int32 DateTime_TimeZone::offset_minutes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DateTime.TimeZone.offset_minutes)
  return offset_minutes_;
}
inline void DateTime_TimeZone::set_offset_minutes(::google::protobuf::int32 value) {
  
  offset_minutes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DateTime.TimeZone.offset_minutes)
}

// -------------------------------------------------------------------

// DateTime

// .google.type.Date date = 1;
inline bool DateTime::has_date() const {
  return this != internal_default_instance() && date_ != NULL;
}
inline const ::google::type::Date& DateTime::_internal_date() const {
  return *date_;
}
inline const ::google::type::Date& DateTime::date() const {
  const ::google::type::Date* p = date_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DateTime.date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::type::Date*>(
      &::google::type::_Date_default_instance_);
}
inline ::google::type::Date* DateTime::release_date() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DateTime.date)
  
  ::google::type::Date* temp = date_;
  date_ = NULL;
  return temp;
}
inline ::google::type::Date* DateTime::mutable_date() {
  
  if (date_ == NULL) {
    auto* p = CreateMaybeMessage<::google::type::Date>(GetArenaNoVirtual());
    date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DateTime.date)
  return date_;
}
inline void DateTime::set_allocated_date(::google::type::Date* date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(date_);
  }
  if (date) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(date)->GetArena();
    if (message_arena != submessage_arena) {
      date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DateTime.date)
}

// .google.type.DayOfWeek day_of_week = 2;
inline void DateTime::clear_day_of_week() {
  day_of_week_ = 0;
}
inline ::google::type::DayOfWeek DateTime::day_of_week() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DateTime.day_of_week)
  return static_cast< ::google::type::DayOfWeek >(day_of_week_);
}
inline void DateTime::set_day_of_week(::google::type::DayOfWeek value) {
  
  day_of_week_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DateTime.day_of_week)
}

// .google.type.TimeOfDay time = 3;
inline bool DateTime::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
inline const ::google::type::TimeOfDay& DateTime::_internal_time() const {
  return *time_;
}
inline const ::google::type::TimeOfDay& DateTime::time() const {
  const ::google::type::TimeOfDay* p = time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DateTime.time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::type::TimeOfDay*>(
      &::google::type::_TimeOfDay_default_instance_);
}
inline ::google::type::TimeOfDay* DateTime::release_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DateTime.time)
  
  ::google::type::TimeOfDay* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::google::type::TimeOfDay* DateTime::mutable_time() {
  
  if (time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::type::TimeOfDay>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DateTime.time)
  return time_;
}
inline void DateTime::set_allocated_time(::google::type::TimeOfDay* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_);
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DateTime.time)
}

// .google.privacy.dlp.v2.DateTime.TimeZone time_zone = 4;
inline bool DateTime::has_time_zone() const {
  return this != internal_default_instance() && time_zone_ != NULL;
}
inline void DateTime::clear_time_zone() {
  if (GetArenaNoVirtual() == NULL && time_zone_ != NULL) {
    delete time_zone_;
  }
  time_zone_ = NULL;
}
inline const ::google::privacy::dlp::v2::DateTime_TimeZone& DateTime::_internal_time_zone() const {
  return *time_zone_;
}
inline const ::google::privacy::dlp::v2::DateTime_TimeZone& DateTime::time_zone() const {
  const ::google::privacy::dlp::v2::DateTime_TimeZone* p = time_zone_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DateTime.time_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::DateTime_TimeZone*>(
      &::google::privacy::dlp::v2::_DateTime_TimeZone_default_instance_);
}
inline ::google::privacy::dlp::v2::DateTime_TimeZone* DateTime::release_time_zone() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DateTime.time_zone)
  
  ::google::privacy::dlp::v2::DateTime_TimeZone* temp = time_zone_;
  time_zone_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::DateTime_TimeZone* DateTime::mutable_time_zone() {
  
  if (time_zone_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::DateTime_TimeZone>(GetArenaNoVirtual());
    time_zone_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DateTime.time_zone)
  return time_zone_;
}
inline void DateTime::set_allocated_time_zone(::google::privacy::dlp::v2::DateTime_TimeZone* time_zone) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_zone_;
  }
  if (time_zone) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time_zone = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_zone, submessage_arena);
    }
    
  } else {
    
  }
  time_zone_ = time_zone;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DateTime.time_zone)
}

// -------------------------------------------------------------------

// DeidentifyConfig

// .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 1;
inline bool DeidentifyConfig::has_info_type_transformations() const {
  return transformation_case() == kInfoTypeTransformations;
}
inline void DeidentifyConfig::set_has_info_type_transformations() {
  _oneof_case_[0] = kInfoTypeTransformations;
}
inline void DeidentifyConfig::clear_info_type_transformations() {
  if (has_info_type_transformations()) {
    delete transformation_.info_type_transformations_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::InfoTypeTransformations& DeidentifyConfig::_internal_info_type_transformations() const {
  return *transformation_.info_type_transformations_;
}
inline ::google::privacy::dlp::v2::InfoTypeTransformations* DeidentifyConfig::release_info_type_transformations() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyConfig.info_type_transformations)
  if (has_info_type_transformations()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::InfoTypeTransformations* temp = transformation_.info_type_transformations_;
    transformation_.info_type_transformations_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::InfoTypeTransformations& DeidentifyConfig::info_type_transformations() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyConfig.info_type_transformations)
  return has_info_type_transformations()
      ? *transformation_.info_type_transformations_
      : *reinterpret_cast< ::google::privacy::dlp::v2::InfoTypeTransformations*>(&::google::privacy::dlp::v2::_InfoTypeTransformations_default_instance_);
}
inline ::google::privacy::dlp::v2::InfoTypeTransformations* DeidentifyConfig::mutable_info_type_transformations() {
  if (!has_info_type_transformations()) {
    clear_transformation();
    set_has_info_type_transformations();
    transformation_.info_type_transformations_ = CreateMaybeMessage< ::google::privacy::dlp::v2::InfoTypeTransformations >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyConfig.info_type_transformations)
  return transformation_.info_type_transformations_;
}

// .google.privacy.dlp.v2.RecordTransformations record_transformations = 2;
inline bool DeidentifyConfig::has_record_transformations() const {
  return transformation_case() == kRecordTransformations;
}
inline void DeidentifyConfig::set_has_record_transformations() {
  _oneof_case_[0] = kRecordTransformations;
}
inline void DeidentifyConfig::clear_record_transformations() {
  if (has_record_transformations()) {
    delete transformation_.record_transformations_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::RecordTransformations& DeidentifyConfig::_internal_record_transformations() const {
  return *transformation_.record_transformations_;
}
inline ::google::privacy::dlp::v2::RecordTransformations* DeidentifyConfig::release_record_transformations() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyConfig.record_transformations)
  if (has_record_transformations()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::RecordTransformations* temp = transformation_.record_transformations_;
    transformation_.record_transformations_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::RecordTransformations& DeidentifyConfig::record_transformations() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyConfig.record_transformations)
  return has_record_transformations()
      ? *transformation_.record_transformations_
      : *reinterpret_cast< ::google::privacy::dlp::v2::RecordTransformations*>(&::google::privacy::dlp::v2::_RecordTransformations_default_instance_);
}
inline ::google::privacy::dlp::v2::RecordTransformations* DeidentifyConfig::mutable_record_transformations() {
  if (!has_record_transformations()) {
    clear_transformation();
    set_has_record_transformations();
    transformation_.record_transformations_ = CreateMaybeMessage< ::google::privacy::dlp::v2::RecordTransformations >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyConfig.record_transformations)
  return transformation_.record_transformations_;
}

inline bool DeidentifyConfig::has_transformation() const {
  return transformation_case() != TRANSFORMATION_NOT_SET;
}
inline void DeidentifyConfig::clear_has_transformation() {
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}
inline DeidentifyConfig::TransformationCase DeidentifyConfig::transformation_case() const {
  return DeidentifyConfig::TransformationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PrimitiveTransformation

// .google.privacy.dlp.v2.ReplaceValueConfig replace_config = 1;
inline bool PrimitiveTransformation::has_replace_config() const {
  return transformation_case() == kReplaceConfig;
}
inline void PrimitiveTransformation::set_has_replace_config() {
  _oneof_case_[0] = kReplaceConfig;
}
inline void PrimitiveTransformation::clear_replace_config() {
  if (has_replace_config()) {
    delete transformation_.replace_config_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::ReplaceValueConfig& PrimitiveTransformation::_internal_replace_config() const {
  return *transformation_.replace_config_;
}
inline ::google::privacy::dlp::v2::ReplaceValueConfig* PrimitiveTransformation::release_replace_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrimitiveTransformation.replace_config)
  if (has_replace_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::ReplaceValueConfig* temp = transformation_.replace_config_;
    transformation_.replace_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::ReplaceValueConfig& PrimitiveTransformation::replace_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrimitiveTransformation.replace_config)
  return has_replace_config()
      ? *transformation_.replace_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::ReplaceValueConfig*>(&::google::privacy::dlp::v2::_ReplaceValueConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::ReplaceValueConfig* PrimitiveTransformation::mutable_replace_config() {
  if (!has_replace_config()) {
    clear_transformation();
    set_has_replace_config();
    transformation_.replace_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::ReplaceValueConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrimitiveTransformation.replace_config)
  return transformation_.replace_config_;
}

// .google.privacy.dlp.v2.RedactConfig redact_config = 2;
inline bool PrimitiveTransformation::has_redact_config() const {
  return transformation_case() == kRedactConfig;
}
inline void PrimitiveTransformation::set_has_redact_config() {
  _oneof_case_[0] = kRedactConfig;
}
inline void PrimitiveTransformation::clear_redact_config() {
  if (has_redact_config()) {
    delete transformation_.redact_config_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::RedactConfig& PrimitiveTransformation::_internal_redact_config() const {
  return *transformation_.redact_config_;
}
inline ::google::privacy::dlp::v2::RedactConfig* PrimitiveTransformation::release_redact_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrimitiveTransformation.redact_config)
  if (has_redact_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::RedactConfig* temp = transformation_.redact_config_;
    transformation_.redact_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::RedactConfig& PrimitiveTransformation::redact_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrimitiveTransformation.redact_config)
  return has_redact_config()
      ? *transformation_.redact_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::RedactConfig*>(&::google::privacy::dlp::v2::_RedactConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::RedactConfig* PrimitiveTransformation::mutable_redact_config() {
  if (!has_redact_config()) {
    clear_transformation();
    set_has_redact_config();
    transformation_.redact_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::RedactConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrimitiveTransformation.redact_config)
  return transformation_.redact_config_;
}

// .google.privacy.dlp.v2.CharacterMaskConfig character_mask_config = 3;
inline bool PrimitiveTransformation::has_character_mask_config() const {
  return transformation_case() == kCharacterMaskConfig;
}
inline void PrimitiveTransformation::set_has_character_mask_config() {
  _oneof_case_[0] = kCharacterMaskConfig;
}
inline void PrimitiveTransformation::clear_character_mask_config() {
  if (has_character_mask_config()) {
    delete transformation_.character_mask_config_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::CharacterMaskConfig& PrimitiveTransformation::_internal_character_mask_config() const {
  return *transformation_.character_mask_config_;
}
inline ::google::privacy::dlp::v2::CharacterMaskConfig* PrimitiveTransformation::release_character_mask_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrimitiveTransformation.character_mask_config)
  if (has_character_mask_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::CharacterMaskConfig* temp = transformation_.character_mask_config_;
    transformation_.character_mask_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::CharacterMaskConfig& PrimitiveTransformation::character_mask_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrimitiveTransformation.character_mask_config)
  return has_character_mask_config()
      ? *transformation_.character_mask_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::CharacterMaskConfig*>(&::google::privacy::dlp::v2::_CharacterMaskConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::CharacterMaskConfig* PrimitiveTransformation::mutable_character_mask_config() {
  if (!has_character_mask_config()) {
    clear_transformation();
    set_has_character_mask_config();
    transformation_.character_mask_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::CharacterMaskConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrimitiveTransformation.character_mask_config)
  return transformation_.character_mask_config_;
}

// .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
inline bool PrimitiveTransformation::has_crypto_replace_ffx_fpe_config() const {
  return transformation_case() == kCryptoReplaceFfxFpeConfig;
}
inline void PrimitiveTransformation::set_has_crypto_replace_ffx_fpe_config() {
  _oneof_case_[0] = kCryptoReplaceFfxFpeConfig;
}
inline void PrimitiveTransformation::clear_crypto_replace_ffx_fpe_config() {
  if (has_crypto_replace_ffx_fpe_config()) {
    delete transformation_.crypto_replace_ffx_fpe_config_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig& PrimitiveTransformation::_internal_crypto_replace_ffx_fpe_config() const {
  return *transformation_.crypto_replace_ffx_fpe_config_;
}
inline ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig* PrimitiveTransformation::release_crypto_replace_ffx_fpe_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrimitiveTransformation.crypto_replace_ffx_fpe_config)
  if (has_crypto_replace_ffx_fpe_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig* temp = transformation_.crypto_replace_ffx_fpe_config_;
    transformation_.crypto_replace_ffx_fpe_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig& PrimitiveTransformation::crypto_replace_ffx_fpe_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrimitiveTransformation.crypto_replace_ffx_fpe_config)
  return has_crypto_replace_ffx_fpe_config()
      ? *transformation_.crypto_replace_ffx_fpe_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig*>(&::google::privacy::dlp::v2::_CryptoReplaceFfxFpeConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig* PrimitiveTransformation::mutable_crypto_replace_ffx_fpe_config() {
  if (!has_crypto_replace_ffx_fpe_config()) {
    clear_transformation();
    set_has_crypto_replace_ffx_fpe_config();
    transformation_.crypto_replace_ffx_fpe_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrimitiveTransformation.crypto_replace_ffx_fpe_config)
  return transformation_.crypto_replace_ffx_fpe_config_;
}

// .google.privacy.dlp.v2.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
inline bool PrimitiveTransformation::has_fixed_size_bucketing_config() const {
  return transformation_case() == kFixedSizeBucketingConfig;
}
inline void PrimitiveTransformation::set_has_fixed_size_bucketing_config() {
  _oneof_case_[0] = kFixedSizeBucketingConfig;
}
inline void PrimitiveTransformation::clear_fixed_size_bucketing_config() {
  if (has_fixed_size_bucketing_config()) {
    delete transformation_.fixed_size_bucketing_config_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::FixedSizeBucketingConfig& PrimitiveTransformation::_internal_fixed_size_bucketing_config() const {
  return *transformation_.fixed_size_bucketing_config_;
}
inline ::google::privacy::dlp::v2::FixedSizeBucketingConfig* PrimitiveTransformation::release_fixed_size_bucketing_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrimitiveTransformation.fixed_size_bucketing_config)
  if (has_fixed_size_bucketing_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::FixedSizeBucketingConfig* temp = transformation_.fixed_size_bucketing_config_;
    transformation_.fixed_size_bucketing_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::FixedSizeBucketingConfig& PrimitiveTransformation::fixed_size_bucketing_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrimitiveTransformation.fixed_size_bucketing_config)
  return has_fixed_size_bucketing_config()
      ? *transformation_.fixed_size_bucketing_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::FixedSizeBucketingConfig*>(&::google::privacy::dlp::v2::_FixedSizeBucketingConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::FixedSizeBucketingConfig* PrimitiveTransformation::mutable_fixed_size_bucketing_config() {
  if (!has_fixed_size_bucketing_config()) {
    clear_transformation();
    set_has_fixed_size_bucketing_config();
    transformation_.fixed_size_bucketing_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::FixedSizeBucketingConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrimitiveTransformation.fixed_size_bucketing_config)
  return transformation_.fixed_size_bucketing_config_;
}

// .google.privacy.dlp.v2.BucketingConfig bucketing_config = 6;
inline bool PrimitiveTransformation::has_bucketing_config() const {
  return transformation_case() == kBucketingConfig;
}
inline void PrimitiveTransformation::set_has_bucketing_config() {
  _oneof_case_[0] = kBucketingConfig;
}
inline void PrimitiveTransformation::clear_bucketing_config() {
  if (has_bucketing_config()) {
    delete transformation_.bucketing_config_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::BucketingConfig& PrimitiveTransformation::_internal_bucketing_config() const {
  return *transformation_.bucketing_config_;
}
inline ::google::privacy::dlp::v2::BucketingConfig* PrimitiveTransformation::release_bucketing_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrimitiveTransformation.bucketing_config)
  if (has_bucketing_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::BucketingConfig* temp = transformation_.bucketing_config_;
    transformation_.bucketing_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::BucketingConfig& PrimitiveTransformation::bucketing_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrimitiveTransformation.bucketing_config)
  return has_bucketing_config()
      ? *transformation_.bucketing_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::BucketingConfig*>(&::google::privacy::dlp::v2::_BucketingConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::BucketingConfig* PrimitiveTransformation::mutable_bucketing_config() {
  if (!has_bucketing_config()) {
    clear_transformation();
    set_has_bucketing_config();
    transformation_.bucketing_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::BucketingConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrimitiveTransformation.bucketing_config)
  return transformation_.bucketing_config_;
}

// .google.privacy.dlp.v2.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
inline bool PrimitiveTransformation::has_replace_with_info_type_config() const {
  return transformation_case() == kReplaceWithInfoTypeConfig;
}
inline void PrimitiveTransformation::set_has_replace_with_info_type_config() {
  _oneof_case_[0] = kReplaceWithInfoTypeConfig;
}
inline void PrimitiveTransformation::clear_replace_with_info_type_config() {
  if (has_replace_with_info_type_config()) {
    delete transformation_.replace_with_info_type_config_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig& PrimitiveTransformation::_internal_replace_with_info_type_config() const {
  return *transformation_.replace_with_info_type_config_;
}
inline ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig* PrimitiveTransformation::release_replace_with_info_type_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrimitiveTransformation.replace_with_info_type_config)
  if (has_replace_with_info_type_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig* temp = transformation_.replace_with_info_type_config_;
    transformation_.replace_with_info_type_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig& PrimitiveTransformation::replace_with_info_type_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrimitiveTransformation.replace_with_info_type_config)
  return has_replace_with_info_type_config()
      ? *transformation_.replace_with_info_type_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig*>(&::google::privacy::dlp::v2::_ReplaceWithInfoTypeConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig* PrimitiveTransformation::mutable_replace_with_info_type_config() {
  if (!has_replace_with_info_type_config()) {
    clear_transformation();
    set_has_replace_with_info_type_config();
    transformation_.replace_with_info_type_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrimitiveTransformation.replace_with_info_type_config)
  return transformation_.replace_with_info_type_config_;
}

// .google.privacy.dlp.v2.TimePartConfig time_part_config = 8;
inline bool PrimitiveTransformation::has_time_part_config() const {
  return transformation_case() == kTimePartConfig;
}
inline void PrimitiveTransformation::set_has_time_part_config() {
  _oneof_case_[0] = kTimePartConfig;
}
inline void PrimitiveTransformation::clear_time_part_config() {
  if (has_time_part_config()) {
    delete transformation_.time_part_config_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::TimePartConfig& PrimitiveTransformation::_internal_time_part_config() const {
  return *transformation_.time_part_config_;
}
inline ::google::privacy::dlp::v2::TimePartConfig* PrimitiveTransformation::release_time_part_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrimitiveTransformation.time_part_config)
  if (has_time_part_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::TimePartConfig* temp = transformation_.time_part_config_;
    transformation_.time_part_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::TimePartConfig& PrimitiveTransformation::time_part_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrimitiveTransformation.time_part_config)
  return has_time_part_config()
      ? *transformation_.time_part_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::TimePartConfig*>(&::google::privacy::dlp::v2::_TimePartConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::TimePartConfig* PrimitiveTransformation::mutable_time_part_config() {
  if (!has_time_part_config()) {
    clear_transformation();
    set_has_time_part_config();
    transformation_.time_part_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::TimePartConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrimitiveTransformation.time_part_config)
  return transformation_.time_part_config_;
}

// .google.privacy.dlp.v2.CryptoHashConfig crypto_hash_config = 9;
inline bool PrimitiveTransformation::has_crypto_hash_config() const {
  return transformation_case() == kCryptoHashConfig;
}
inline void PrimitiveTransformation::set_has_crypto_hash_config() {
  _oneof_case_[0] = kCryptoHashConfig;
}
inline void PrimitiveTransformation::clear_crypto_hash_config() {
  if (has_crypto_hash_config()) {
    delete transformation_.crypto_hash_config_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::CryptoHashConfig& PrimitiveTransformation::_internal_crypto_hash_config() const {
  return *transformation_.crypto_hash_config_;
}
inline ::google::privacy::dlp::v2::CryptoHashConfig* PrimitiveTransformation::release_crypto_hash_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrimitiveTransformation.crypto_hash_config)
  if (has_crypto_hash_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::CryptoHashConfig* temp = transformation_.crypto_hash_config_;
    transformation_.crypto_hash_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::CryptoHashConfig& PrimitiveTransformation::crypto_hash_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrimitiveTransformation.crypto_hash_config)
  return has_crypto_hash_config()
      ? *transformation_.crypto_hash_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::CryptoHashConfig*>(&::google::privacy::dlp::v2::_CryptoHashConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::CryptoHashConfig* PrimitiveTransformation::mutable_crypto_hash_config() {
  if (!has_crypto_hash_config()) {
    clear_transformation();
    set_has_crypto_hash_config();
    transformation_.crypto_hash_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::CryptoHashConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrimitiveTransformation.crypto_hash_config)
  return transformation_.crypto_hash_config_;
}

// .google.privacy.dlp.v2.DateShiftConfig date_shift_config = 11;
inline bool PrimitiveTransformation::has_date_shift_config() const {
  return transformation_case() == kDateShiftConfig;
}
inline void PrimitiveTransformation::set_has_date_shift_config() {
  _oneof_case_[0] = kDateShiftConfig;
}
inline void PrimitiveTransformation::clear_date_shift_config() {
  if (has_date_shift_config()) {
    delete transformation_.date_shift_config_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::DateShiftConfig& PrimitiveTransformation::_internal_date_shift_config() const {
  return *transformation_.date_shift_config_;
}
inline ::google::privacy::dlp::v2::DateShiftConfig* PrimitiveTransformation::release_date_shift_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.PrimitiveTransformation.date_shift_config)
  if (has_date_shift_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::DateShiftConfig* temp = transformation_.date_shift_config_;
    transformation_.date_shift_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::DateShiftConfig& PrimitiveTransformation::date_shift_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.PrimitiveTransformation.date_shift_config)
  return has_date_shift_config()
      ? *transformation_.date_shift_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2::DateShiftConfig*>(&::google::privacy::dlp::v2::_DateShiftConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::DateShiftConfig* PrimitiveTransformation::mutable_date_shift_config() {
  if (!has_date_shift_config()) {
    clear_transformation();
    set_has_date_shift_config();
    transformation_.date_shift_config_ = CreateMaybeMessage< ::google::privacy::dlp::v2::DateShiftConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.PrimitiveTransformation.date_shift_config)
  return transformation_.date_shift_config_;
}

inline bool PrimitiveTransformation::has_transformation() const {
  return transformation_case() != TRANSFORMATION_NOT_SET;
}
inline void PrimitiveTransformation::clear_has_transformation() {
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}
inline PrimitiveTransformation::TransformationCase PrimitiveTransformation::transformation_case() const {
  return PrimitiveTransformation::TransformationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimePartConfig

// .google.privacy.dlp.v2.TimePartConfig.TimePart part_to_extract = 1;
inline void TimePartConfig::clear_part_to_extract() {
  part_to_extract_ = 0;
}
inline ::google::privacy::dlp::v2::TimePartConfig_TimePart TimePartConfig::part_to_extract() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TimePartConfig.part_to_extract)
  return static_cast< ::google::privacy::dlp::v2::TimePartConfig_TimePart >(part_to_extract_);
}
inline void TimePartConfig::set_part_to_extract(::google::privacy::dlp::v2::TimePartConfig_TimePart value) {
  
  part_to_extract_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.TimePartConfig.part_to_extract)
}

// -------------------------------------------------------------------

// CryptoHashConfig

// .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
inline bool CryptoHashConfig::has_crypto_key() const {
  return this != internal_default_instance() && crypto_key_ != NULL;
}
inline void CryptoHashConfig::clear_crypto_key() {
  if (GetArenaNoVirtual() == NULL && crypto_key_ != NULL) {
    delete crypto_key_;
  }
  crypto_key_ = NULL;
}
inline const ::google::privacy::dlp::v2::CryptoKey& CryptoHashConfig::_internal_crypto_key() const {
  return *crypto_key_;
}
inline const ::google::privacy::dlp::v2::CryptoKey& CryptoHashConfig::crypto_key() const {
  const ::google::privacy::dlp::v2::CryptoKey* p = crypto_key_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CryptoHashConfig.crypto_key)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::CryptoKey*>(
      &::google::privacy::dlp::v2::_CryptoKey_default_instance_);
}
inline ::google::privacy::dlp::v2::CryptoKey* CryptoHashConfig::release_crypto_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CryptoHashConfig.crypto_key)
  
  ::google::privacy::dlp::v2::CryptoKey* temp = crypto_key_;
  crypto_key_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::CryptoKey* CryptoHashConfig::mutable_crypto_key() {
  
  if (crypto_key_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::CryptoKey>(GetArenaNoVirtual());
    crypto_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CryptoHashConfig.crypto_key)
  return crypto_key_;
}
inline void CryptoHashConfig::set_allocated_crypto_key(::google::privacy::dlp::v2::CryptoKey* crypto_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crypto_key_;
  }
  if (crypto_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crypto_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypto_key, submessage_arena);
    }
    
  } else {
    
  }
  crypto_key_ = crypto_key;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CryptoHashConfig.crypto_key)
}

// -------------------------------------------------------------------

// ReplaceValueConfig

// .google.privacy.dlp.v2.Value new_value = 1;
inline bool ReplaceValueConfig::has_new_value() const {
  return this != internal_default_instance() && new_value_ != NULL;
}
inline void ReplaceValueConfig::clear_new_value() {
  if (GetArenaNoVirtual() == NULL && new_value_ != NULL) {
    delete new_value_;
  }
  new_value_ = NULL;
}
inline const ::google::privacy::dlp::v2::Value& ReplaceValueConfig::_internal_new_value() const {
  return *new_value_;
}
inline const ::google::privacy::dlp::v2::Value& ReplaceValueConfig::new_value() const {
  const ::google::privacy::dlp::v2::Value* p = new_value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ReplaceValueConfig.new_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Value*>(
      &::google::privacy::dlp::v2::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2::Value* ReplaceValueConfig::release_new_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ReplaceValueConfig.new_value)
  
  ::google::privacy::dlp::v2::Value* temp = new_value_;
  new_value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Value* ReplaceValueConfig::mutable_new_value() {
  
  if (new_value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Value>(GetArenaNoVirtual());
    new_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ReplaceValueConfig.new_value)
  return new_value_;
}
inline void ReplaceValueConfig::set_allocated_new_value(::google::privacy::dlp::v2::Value* new_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete new_value_;
  }
  if (new_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_value, submessage_arena);
    }
    
  } else {
    
  }
  new_value_ = new_value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ReplaceValueConfig.new_value)
}

// -------------------------------------------------------------------

// ReplaceWithInfoTypeConfig

// -------------------------------------------------------------------

// RedactConfig

// -------------------------------------------------------------------

// CharsToIgnore

// string characters_to_skip = 1;
inline bool CharsToIgnore::has_characters_to_skip() const {
  return characters_case() == kCharactersToSkip;
}
inline void CharsToIgnore::set_has_characters_to_skip() {
  _oneof_case_[0] = kCharactersToSkip;
}
inline void CharsToIgnore::clear_characters_to_skip() {
  if (has_characters_to_skip()) {
    characters_.characters_to_skip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_characters();
  }
}
inline const ::std::string& CharsToIgnore::characters_to_skip() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CharsToIgnore.characters_to_skip)
  if (has_characters_to_skip()) {
    return characters_.characters_to_skip_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CharsToIgnore::set_characters_to_skip(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CharsToIgnore.characters_to_skip)
  if (!has_characters_to_skip()) {
    clear_characters();
    set_has_characters_to_skip();
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  characters_.characters_to_skip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CharsToIgnore.characters_to_skip)
}
#if LANG_CXX11
inline void CharsToIgnore::set_characters_to_skip(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CharsToIgnore.characters_to_skip)
  if (!has_characters_to_skip()) {
    clear_characters();
    set_has_characters_to_skip();
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  characters_.characters_to_skip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CharsToIgnore.characters_to_skip)
}
#endif
inline void CharsToIgnore::set_characters_to_skip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_characters_to_skip()) {
    clear_characters();
    set_has_characters_to_skip();
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  characters_.characters_to_skip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CharsToIgnore.characters_to_skip)
}
inline void CharsToIgnore::set_characters_to_skip(const char* value, size_t size) {
  if (!has_characters_to_skip()) {
    clear_characters();
    set_has_characters_to_skip();
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  characters_.characters_to_skip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CharsToIgnore.characters_to_skip)
}
inline ::std::string* CharsToIgnore::mutable_characters_to_skip() {
  if (!has_characters_to_skip()) {
    clear_characters();
    set_has_characters_to_skip();
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CharsToIgnore.characters_to_skip)
  return characters_.characters_to_skip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CharsToIgnore::release_characters_to_skip() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CharsToIgnore.characters_to_skip)
  if (has_characters_to_skip()) {
    clear_has_characters();
    return characters_.characters_to_skip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CharsToIgnore::set_allocated_characters_to_skip(::std::string* characters_to_skip) {
  if (!has_characters_to_skip()) {
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_characters();
  if (characters_to_skip != NULL) {
    set_has_characters_to_skip();
    characters_.characters_to_skip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), characters_to_skip);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CharsToIgnore.characters_to_skip)
}

// .google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore common_characters_to_ignore = 2;
inline bool CharsToIgnore::has_common_characters_to_ignore() const {
  return characters_case() == kCommonCharactersToIgnore;
}
inline void CharsToIgnore::set_has_common_characters_to_ignore() {
  _oneof_case_[0] = kCommonCharactersToIgnore;
}
inline void CharsToIgnore::clear_common_characters_to_ignore() {
  if (has_common_characters_to_ignore()) {
    characters_.common_characters_to_ignore_ = 0;
    clear_has_characters();
  }
}
inline ::google::privacy::dlp::v2::CharsToIgnore_CommonCharsToIgnore CharsToIgnore::common_characters_to_ignore() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CharsToIgnore.common_characters_to_ignore)
  if (has_common_characters_to_ignore()) {
    return static_cast< ::google::privacy::dlp::v2::CharsToIgnore_CommonCharsToIgnore >(characters_.common_characters_to_ignore_);
  }
  return static_cast< ::google::privacy::dlp::v2::CharsToIgnore_CommonCharsToIgnore >(0);
}
inline void CharsToIgnore::set_common_characters_to_ignore(::google::privacy::dlp::v2::CharsToIgnore_CommonCharsToIgnore value) {
  if (!has_common_characters_to_ignore()) {
    clear_characters();
    set_has_common_characters_to_ignore();
  }
  characters_.common_characters_to_ignore_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CharsToIgnore.common_characters_to_ignore)
}

inline bool CharsToIgnore::has_characters() const {
  return characters_case() != CHARACTERS_NOT_SET;
}
inline void CharsToIgnore::clear_has_characters() {
  _oneof_case_[0] = CHARACTERS_NOT_SET;
}
inline CharsToIgnore::CharactersCase CharsToIgnore::characters_case() const {
  return CharsToIgnore::CharactersCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CharacterMaskConfig

// string masking_character = 1;
inline void CharacterMaskConfig::clear_masking_character() {
  masking_character_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CharacterMaskConfig::masking_character() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CharacterMaskConfig.masking_character)
  return masking_character_.GetNoArena();
}
inline void CharacterMaskConfig::set_masking_character(const ::std::string& value) {
  
  masking_character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CharacterMaskConfig.masking_character)
}
#if LANG_CXX11
inline void CharacterMaskConfig::set_masking_character(::std::string&& value) {
  
  masking_character_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CharacterMaskConfig.masking_character)
}
#endif
inline void CharacterMaskConfig::set_masking_character(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  masking_character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CharacterMaskConfig.masking_character)
}
inline void CharacterMaskConfig::set_masking_character(const char* value, size_t size) {
  
  masking_character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CharacterMaskConfig.masking_character)
}
inline ::std::string* CharacterMaskConfig::mutable_masking_character() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CharacterMaskConfig.masking_character)
  return masking_character_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CharacterMaskConfig::release_masking_character() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CharacterMaskConfig.masking_character)
  
  return masking_character_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CharacterMaskConfig::set_allocated_masking_character(::std::string* masking_character) {
  if (masking_character != NULL) {
    
  } else {
    
  }
  masking_character_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), masking_character);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CharacterMaskConfig.masking_character)
}

// int32 number_to_mask = 2;
inline void CharacterMaskConfig::clear_number_to_mask() {
  number_to_mask_ = 0;
}
inline ::google::protobuf::int32 CharacterMaskConfig::number_to_mask() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CharacterMaskConfig.number_to_mask)
  return number_to_mask_;
}
inline void CharacterMaskConfig::set_number_to_mask(::google::protobuf::int32 value) {
  
  number_to_mask_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CharacterMaskConfig.number_to_mask)
}

// bool reverse_order = 3;
inline void CharacterMaskConfig::clear_reverse_order() {
  reverse_order_ = false;
}
inline bool CharacterMaskConfig::reverse_order() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CharacterMaskConfig.reverse_order)
  return reverse_order_;
}
inline void CharacterMaskConfig::set_reverse_order(bool value) {
  
  reverse_order_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CharacterMaskConfig.reverse_order)
}

// repeated .google.privacy.dlp.v2.CharsToIgnore characters_to_ignore = 4;
inline int CharacterMaskConfig::characters_to_ignore_size() const {
  return characters_to_ignore_.size();
}
inline void CharacterMaskConfig::clear_characters_to_ignore() {
  characters_to_ignore_.Clear();
}
inline ::google::privacy::dlp::v2::CharsToIgnore* CharacterMaskConfig::mutable_characters_to_ignore(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CharacterMaskConfig.characters_to_ignore)
  return characters_to_ignore_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::CharsToIgnore >*
CharacterMaskConfig::mutable_characters_to_ignore() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.CharacterMaskConfig.characters_to_ignore)
  return &characters_to_ignore_;
}
inline const ::google::privacy::dlp::v2::CharsToIgnore& CharacterMaskConfig::characters_to_ignore(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CharacterMaskConfig.characters_to_ignore)
  return characters_to_ignore_.Get(index);
}
inline ::google::privacy::dlp::v2::CharsToIgnore* CharacterMaskConfig::add_characters_to_ignore() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.CharacterMaskConfig.characters_to_ignore)
  return characters_to_ignore_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::CharsToIgnore >&
CharacterMaskConfig::characters_to_ignore() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.CharacterMaskConfig.characters_to_ignore)
  return characters_to_ignore_;
}

// -------------------------------------------------------------------

// FixedSizeBucketingConfig

// .google.privacy.dlp.v2.Value lower_bound = 1;
inline bool FixedSizeBucketingConfig::has_lower_bound() const {
  return this != internal_default_instance() && lower_bound_ != NULL;
}
inline void FixedSizeBucketingConfig::clear_lower_bound() {
  if (GetArenaNoVirtual() == NULL && lower_bound_ != NULL) {
    delete lower_bound_;
  }
  lower_bound_ = NULL;
}
inline const ::google::privacy::dlp::v2::Value& FixedSizeBucketingConfig::_internal_lower_bound() const {
  return *lower_bound_;
}
inline const ::google::privacy::dlp::v2::Value& FixedSizeBucketingConfig::lower_bound() const {
  const ::google::privacy::dlp::v2::Value* p = lower_bound_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.FixedSizeBucketingConfig.lower_bound)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Value*>(
      &::google::privacy::dlp::v2::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2::Value* FixedSizeBucketingConfig::release_lower_bound() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.FixedSizeBucketingConfig.lower_bound)
  
  ::google::privacy::dlp::v2::Value* temp = lower_bound_;
  lower_bound_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Value* FixedSizeBucketingConfig::mutable_lower_bound() {
  
  if (lower_bound_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Value>(GetArenaNoVirtual());
    lower_bound_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.FixedSizeBucketingConfig.lower_bound)
  return lower_bound_;
}
inline void FixedSizeBucketingConfig::set_allocated_lower_bound(::google::privacy::dlp::v2::Value* lower_bound) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lower_bound_;
  }
  if (lower_bound) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lower_bound = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_bound, submessage_arena);
    }
    
  } else {
    
  }
  lower_bound_ = lower_bound;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.FixedSizeBucketingConfig.lower_bound)
}

// .google.privacy.dlp.v2.Value upper_bound = 2;
inline bool FixedSizeBucketingConfig::has_upper_bound() const {
  return this != internal_default_instance() && upper_bound_ != NULL;
}
inline void FixedSizeBucketingConfig::clear_upper_bound() {
  if (GetArenaNoVirtual() == NULL && upper_bound_ != NULL) {
    delete upper_bound_;
  }
  upper_bound_ = NULL;
}
inline const ::google::privacy::dlp::v2::Value& FixedSizeBucketingConfig::_internal_upper_bound() const {
  return *upper_bound_;
}
inline const ::google::privacy::dlp::v2::Value& FixedSizeBucketingConfig::upper_bound() const {
  const ::google::privacy::dlp::v2::Value* p = upper_bound_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.FixedSizeBucketingConfig.upper_bound)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Value*>(
      &::google::privacy::dlp::v2::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2::Value* FixedSizeBucketingConfig::release_upper_bound() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.FixedSizeBucketingConfig.upper_bound)
  
  ::google::privacy::dlp::v2::Value* temp = upper_bound_;
  upper_bound_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Value* FixedSizeBucketingConfig::mutable_upper_bound() {
  
  if (upper_bound_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Value>(GetArenaNoVirtual());
    upper_bound_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.FixedSizeBucketingConfig.upper_bound)
  return upper_bound_;
}
inline void FixedSizeBucketingConfig::set_allocated_upper_bound(::google::privacy::dlp::v2::Value* upper_bound) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete upper_bound_;
  }
  if (upper_bound) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upper_bound = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_bound, submessage_arena);
    }
    
  } else {
    
  }
  upper_bound_ = upper_bound;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.FixedSizeBucketingConfig.upper_bound)
}

// double bucket_size = 3;
inline void FixedSizeBucketingConfig::clear_bucket_size() {
  bucket_size_ = 0;
}
inline double FixedSizeBucketingConfig::bucket_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.FixedSizeBucketingConfig.bucket_size)
  return bucket_size_;
}
inline void FixedSizeBucketingConfig::set_bucket_size(double value) {
  
  bucket_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.FixedSizeBucketingConfig.bucket_size)
}

// -------------------------------------------------------------------

// BucketingConfig_Bucket

// .google.privacy.dlp.v2.Value min = 1;
inline bool BucketingConfig_Bucket::has_min() const {
  return this != internal_default_instance() && min_ != NULL;
}
inline void BucketingConfig_Bucket::clear_min() {
  if (GetArenaNoVirtual() == NULL && min_ != NULL) {
    delete min_;
  }
  min_ = NULL;
}
inline const ::google::privacy::dlp::v2::Value& BucketingConfig_Bucket::_internal_min() const {
  return *min_;
}
inline const ::google::privacy::dlp::v2::Value& BucketingConfig_Bucket::min() const {
  const ::google::privacy::dlp::v2::Value* p = min_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.BucketingConfig.Bucket.min)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Value*>(
      &::google::privacy::dlp::v2::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2::Value* BucketingConfig_Bucket::release_min() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.BucketingConfig.Bucket.min)
  
  ::google::privacy::dlp::v2::Value* temp = min_;
  min_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Value* BucketingConfig_Bucket::mutable_min() {
  
  if (min_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Value>(GetArenaNoVirtual());
    min_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.BucketingConfig.Bucket.min)
  return min_;
}
inline void BucketingConfig_Bucket::set_allocated_min(::google::privacy::dlp::v2::Value* min) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete min_;
  }
  if (min) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    
  } else {
    
  }
  min_ = min;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.BucketingConfig.Bucket.min)
}

// .google.privacy.dlp.v2.Value max = 2;
inline bool BucketingConfig_Bucket::has_max() const {
  return this != internal_default_instance() && max_ != NULL;
}
inline void BucketingConfig_Bucket::clear_max() {
  if (GetArenaNoVirtual() == NULL && max_ != NULL) {
    delete max_;
  }
  max_ = NULL;
}
inline const ::google::privacy::dlp::v2::Value& BucketingConfig_Bucket::_internal_max() const {
  return *max_;
}
inline const ::google::privacy::dlp::v2::Value& BucketingConfig_Bucket::max() const {
  const ::google::privacy::dlp::v2::Value* p = max_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.BucketingConfig.Bucket.max)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Value*>(
      &::google::privacy::dlp::v2::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2::Value* BucketingConfig_Bucket::release_max() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.BucketingConfig.Bucket.max)
  
  ::google::privacy::dlp::v2::Value* temp = max_;
  max_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Value* BucketingConfig_Bucket::mutable_max() {
  
  if (max_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Value>(GetArenaNoVirtual());
    max_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.BucketingConfig.Bucket.max)
  return max_;
}
inline void BucketingConfig_Bucket::set_allocated_max(::google::privacy::dlp::v2::Value* max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete max_;
  }
  if (max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    
  } else {
    
  }
  max_ = max;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.BucketingConfig.Bucket.max)
}

// .google.privacy.dlp.v2.Value replacement_value = 3;
inline bool BucketingConfig_Bucket::has_replacement_value() const {
  return this != internal_default_instance() && replacement_value_ != NULL;
}
inline void BucketingConfig_Bucket::clear_replacement_value() {
  if (GetArenaNoVirtual() == NULL && replacement_value_ != NULL) {
    delete replacement_value_;
  }
  replacement_value_ = NULL;
}
inline const ::google::privacy::dlp::v2::Value& BucketingConfig_Bucket::_internal_replacement_value() const {
  return *replacement_value_;
}
inline const ::google::privacy::dlp::v2::Value& BucketingConfig_Bucket::replacement_value() const {
  const ::google::privacy::dlp::v2::Value* p = replacement_value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.BucketingConfig.Bucket.replacement_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Value*>(
      &::google::privacy::dlp::v2::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2::Value* BucketingConfig_Bucket::release_replacement_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.BucketingConfig.Bucket.replacement_value)
  
  ::google::privacy::dlp::v2::Value* temp = replacement_value_;
  replacement_value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Value* BucketingConfig_Bucket::mutable_replacement_value() {
  
  if (replacement_value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Value>(GetArenaNoVirtual());
    replacement_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.BucketingConfig.Bucket.replacement_value)
  return replacement_value_;
}
inline void BucketingConfig_Bucket::set_allocated_replacement_value(::google::privacy::dlp::v2::Value* replacement_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete replacement_value_;
  }
  if (replacement_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replacement_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replacement_value, submessage_arena);
    }
    
  } else {
    
  }
  replacement_value_ = replacement_value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.BucketingConfig.Bucket.replacement_value)
}

// -------------------------------------------------------------------

// BucketingConfig

// repeated .google.privacy.dlp.v2.BucketingConfig.Bucket buckets = 1;
inline int BucketingConfig::buckets_size() const {
  return buckets_.size();
}
inline void BucketingConfig::clear_buckets() {
  buckets_.Clear();
}
inline ::google::privacy::dlp::v2::BucketingConfig_Bucket* BucketingConfig::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.BucketingConfig.buckets)
  return buckets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::BucketingConfig_Bucket >*
BucketingConfig::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.BucketingConfig.buckets)
  return &buckets_;
}
inline const ::google::privacy::dlp::v2::BucketingConfig_Bucket& BucketingConfig::buckets(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.BucketingConfig.buckets)
  return buckets_.Get(index);
}
inline ::google::privacy::dlp::v2::BucketingConfig_Bucket* BucketingConfig::add_buckets() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.BucketingConfig.buckets)
  return buckets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::BucketingConfig_Bucket >&
BucketingConfig::buckets() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.BucketingConfig.buckets)
  return buckets_;
}

// -------------------------------------------------------------------

// CryptoReplaceFfxFpeConfig

// .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
inline bool CryptoReplaceFfxFpeConfig::has_crypto_key() const {
  return this != internal_default_instance() && crypto_key_ != NULL;
}
inline void CryptoReplaceFfxFpeConfig::clear_crypto_key() {
  if (GetArenaNoVirtual() == NULL && crypto_key_ != NULL) {
    delete crypto_key_;
  }
  crypto_key_ = NULL;
}
inline const ::google::privacy::dlp::v2::CryptoKey& CryptoReplaceFfxFpeConfig::_internal_crypto_key() const {
  return *crypto_key_;
}
inline const ::google::privacy::dlp::v2::CryptoKey& CryptoReplaceFfxFpeConfig::crypto_key() const {
  const ::google::privacy::dlp::v2::CryptoKey* p = crypto_key_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.crypto_key)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::CryptoKey*>(
      &::google::privacy::dlp::v2::_CryptoKey_default_instance_);
}
inline ::google::privacy::dlp::v2::CryptoKey* CryptoReplaceFfxFpeConfig::release_crypto_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.crypto_key)
  
  ::google::privacy::dlp::v2::CryptoKey* temp = crypto_key_;
  crypto_key_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::CryptoKey* CryptoReplaceFfxFpeConfig::mutable_crypto_key() {
  
  if (crypto_key_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::CryptoKey>(GetArenaNoVirtual());
    crypto_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.crypto_key)
  return crypto_key_;
}
inline void CryptoReplaceFfxFpeConfig::set_allocated_crypto_key(::google::privacy::dlp::v2::CryptoKey* crypto_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crypto_key_;
  }
  if (crypto_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crypto_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypto_key, submessage_arena);
    }
    
  } else {
    
  }
  crypto_key_ = crypto_key;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.crypto_key)
}

// .google.privacy.dlp.v2.FieldId context = 2;
inline bool CryptoReplaceFfxFpeConfig::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& CryptoReplaceFfxFpeConfig::_internal_context() const {
  return *context_;
}
inline const ::google::privacy::dlp::v2::FieldId& CryptoReplaceFfxFpeConfig::context() const {
  const ::google::privacy::dlp::v2::FieldId* p = context_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.context)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* CryptoReplaceFfxFpeConfig::release_context() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.context)
  
  ::google::privacy::dlp::v2::FieldId* temp = context_;
  context_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* CryptoReplaceFfxFpeConfig::mutable_context() {
  
  if (context_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    context_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.context)
  return context_;
}
inline void CryptoReplaceFfxFpeConfig::set_allocated_context(::google::privacy::dlp::v2::FieldId* context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(context_);
  }
  if (context) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.context)
}

// .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
inline bool CryptoReplaceFfxFpeConfig::has_common_alphabet() const {
  return alphabet_case() == kCommonAlphabet;
}
inline void CryptoReplaceFfxFpeConfig::set_has_common_alphabet() {
  _oneof_case_[0] = kCommonAlphabet;
}
inline void CryptoReplaceFfxFpeConfig::clear_common_alphabet() {
  if (has_common_alphabet()) {
    alphabet_.common_alphabet_ = 0;
    clear_has_alphabet();
  }
}
inline ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::common_alphabet() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.common_alphabet)
  if (has_common_alphabet()) {
    return static_cast< ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet >(alphabet_.common_alphabet_);
  }
  return static_cast< ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet >(0);
}
inline void CryptoReplaceFfxFpeConfig::set_common_alphabet(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet value) {
  if (!has_common_alphabet()) {
    clear_alphabet();
    set_has_common_alphabet();
  }
  alphabet_.common_alphabet_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.common_alphabet)
}

// string custom_alphabet = 5;
inline bool CryptoReplaceFfxFpeConfig::has_custom_alphabet() const {
  return alphabet_case() == kCustomAlphabet;
}
inline void CryptoReplaceFfxFpeConfig::set_has_custom_alphabet() {
  _oneof_case_[0] = kCustomAlphabet;
}
inline void CryptoReplaceFfxFpeConfig::clear_custom_alphabet() {
  if (has_custom_alphabet()) {
    alphabet_.custom_alphabet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_alphabet();
  }
}
inline const ::std::string& CryptoReplaceFfxFpeConfig::custom_alphabet() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet)
  if (has_custom_alphabet()) {
    return alphabet_.custom_alphabet_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CryptoReplaceFfxFpeConfig::set_custom_alphabet(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet)
  if (!has_custom_alphabet()) {
    clear_alphabet();
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  alphabet_.custom_alphabet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet)
}
#if LANG_CXX11
inline void CryptoReplaceFfxFpeConfig::set_custom_alphabet(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet)
  if (!has_custom_alphabet()) {
    clear_alphabet();
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  alphabet_.custom_alphabet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet)
}
#endif
inline void CryptoReplaceFfxFpeConfig::set_custom_alphabet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_custom_alphabet()) {
    clear_alphabet();
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  alphabet_.custom_alphabet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet)
}
inline void CryptoReplaceFfxFpeConfig::set_custom_alphabet(const char* value, size_t size) {
  if (!has_custom_alphabet()) {
    clear_alphabet();
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  alphabet_.custom_alphabet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet)
}
inline ::std::string* CryptoReplaceFfxFpeConfig::mutable_custom_alphabet() {
  if (!has_custom_alphabet()) {
    clear_alphabet();
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet)
  return alphabet_.custom_alphabet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CryptoReplaceFfxFpeConfig::release_custom_alphabet() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet)
  if (has_custom_alphabet()) {
    clear_has_alphabet();
    return alphabet_.custom_alphabet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CryptoReplaceFfxFpeConfig::set_allocated_custom_alphabet(::std::string* custom_alphabet) {
  if (!has_custom_alphabet()) {
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_alphabet();
  if (custom_alphabet != NULL) {
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_alphabet);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet)
}

// int32 radix = 6;
inline bool CryptoReplaceFfxFpeConfig::has_radix() const {
  return alphabet_case() == kRadix;
}
inline void CryptoReplaceFfxFpeConfig::set_has_radix() {
  _oneof_case_[0] = kRadix;
}
inline void CryptoReplaceFfxFpeConfig::clear_radix() {
  if (has_radix()) {
    alphabet_.radix_ = 0;
    clear_has_alphabet();
  }
}
inline ::google::protobuf::int32 CryptoReplaceFfxFpeConfig::radix() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.radix)
  if (has_radix()) {
    return alphabet_.radix_;
  }
  return 0;
}
inline void CryptoReplaceFfxFpeConfig::set_radix(::google::protobuf::int32 value) {
  if (!has_radix()) {
    clear_alphabet();
    set_has_radix();
  }
  alphabet_.radix_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.radix)
}

// .google.privacy.dlp.v2.InfoType surrogate_info_type = 8;
inline bool CryptoReplaceFfxFpeConfig::has_surrogate_info_type() const {
  return this != internal_default_instance() && surrogate_info_type_ != NULL;
}
inline const ::google::privacy::dlp::v2::InfoType& CryptoReplaceFfxFpeConfig::_internal_surrogate_info_type() const {
  return *surrogate_info_type_;
}
inline const ::google::privacy::dlp::v2::InfoType& CryptoReplaceFfxFpeConfig::surrogate_info_type() const {
  const ::google::privacy::dlp::v2::InfoType* p = surrogate_info_type_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.surrogate_info_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InfoType*>(
      &::google::privacy::dlp::v2::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2::InfoType* CryptoReplaceFfxFpeConfig::release_surrogate_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.surrogate_info_type)
  
  ::google::privacy::dlp::v2::InfoType* temp = surrogate_info_type_;
  surrogate_info_type_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InfoType* CryptoReplaceFfxFpeConfig::mutable_surrogate_info_type() {
  
  if (surrogate_info_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InfoType>(GetArenaNoVirtual());
    surrogate_info_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.surrogate_info_type)
  return surrogate_info_type_;
}
inline void CryptoReplaceFfxFpeConfig::set_allocated_surrogate_info_type(::google::privacy::dlp::v2::InfoType* surrogate_info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(surrogate_info_type_);
  }
  if (surrogate_info_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      surrogate_info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, surrogate_info_type, submessage_arena);
    }
    
  } else {
    
  }
  surrogate_info_type_ = surrogate_info_type;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.surrogate_info_type)
}

inline bool CryptoReplaceFfxFpeConfig::has_alphabet() const {
  return alphabet_case() != ALPHABET_NOT_SET;
}
inline void CryptoReplaceFfxFpeConfig::clear_has_alphabet() {
  _oneof_case_[0] = ALPHABET_NOT_SET;
}
inline CryptoReplaceFfxFpeConfig::AlphabetCase CryptoReplaceFfxFpeConfig::alphabet_case() const {
  return CryptoReplaceFfxFpeConfig::AlphabetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CryptoKey

// .google.privacy.dlp.v2.TransientCryptoKey transient = 1;
inline bool CryptoKey::has_transient() const {
  return source_case() == kTransient;
}
inline void CryptoKey::set_has_transient() {
  _oneof_case_[0] = kTransient;
}
inline void CryptoKey::clear_transient() {
  if (has_transient()) {
    delete source_.transient_;
    clear_has_source();
  }
}
inline const ::google::privacy::dlp::v2::TransientCryptoKey& CryptoKey::_internal_transient() const {
  return *source_.transient_;
}
inline ::google::privacy::dlp::v2::TransientCryptoKey* CryptoKey::release_transient() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CryptoKey.transient)
  if (has_transient()) {
    clear_has_source();
      ::google::privacy::dlp::v2::TransientCryptoKey* temp = source_.transient_;
    source_.transient_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::TransientCryptoKey& CryptoKey::transient() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CryptoKey.transient)
  return has_transient()
      ? *source_.transient_
      : *reinterpret_cast< ::google::privacy::dlp::v2::TransientCryptoKey*>(&::google::privacy::dlp::v2::_TransientCryptoKey_default_instance_);
}
inline ::google::privacy::dlp::v2::TransientCryptoKey* CryptoKey::mutable_transient() {
  if (!has_transient()) {
    clear_source();
    set_has_transient();
    source_.transient_ = CreateMaybeMessage< ::google::privacy::dlp::v2::TransientCryptoKey >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CryptoKey.transient)
  return source_.transient_;
}

// .google.privacy.dlp.v2.UnwrappedCryptoKey unwrapped = 2;
inline bool CryptoKey::has_unwrapped() const {
  return source_case() == kUnwrapped;
}
inline void CryptoKey::set_has_unwrapped() {
  _oneof_case_[0] = kUnwrapped;
}
inline void CryptoKey::clear_unwrapped() {
  if (has_unwrapped()) {
    delete source_.unwrapped_;
    clear_has_source();
  }
}
inline const ::google::privacy::dlp::v2::UnwrappedCryptoKey& CryptoKey::_internal_unwrapped() const {
  return *source_.unwrapped_;
}
inline ::google::privacy::dlp::v2::UnwrappedCryptoKey* CryptoKey::release_unwrapped() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CryptoKey.unwrapped)
  if (has_unwrapped()) {
    clear_has_source();
      ::google::privacy::dlp::v2::UnwrappedCryptoKey* temp = source_.unwrapped_;
    source_.unwrapped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::UnwrappedCryptoKey& CryptoKey::unwrapped() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CryptoKey.unwrapped)
  return has_unwrapped()
      ? *source_.unwrapped_
      : *reinterpret_cast< ::google::privacy::dlp::v2::UnwrappedCryptoKey*>(&::google::privacy::dlp::v2::_UnwrappedCryptoKey_default_instance_);
}
inline ::google::privacy::dlp::v2::UnwrappedCryptoKey* CryptoKey::mutable_unwrapped() {
  if (!has_unwrapped()) {
    clear_source();
    set_has_unwrapped();
    source_.unwrapped_ = CreateMaybeMessage< ::google::privacy::dlp::v2::UnwrappedCryptoKey >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CryptoKey.unwrapped)
  return source_.unwrapped_;
}

// .google.privacy.dlp.v2.KmsWrappedCryptoKey kms_wrapped = 3;
inline bool CryptoKey::has_kms_wrapped() const {
  return source_case() == kKmsWrapped;
}
inline void CryptoKey::set_has_kms_wrapped() {
  _oneof_case_[0] = kKmsWrapped;
}
inline void CryptoKey::clear_kms_wrapped() {
  if (has_kms_wrapped()) {
    delete source_.kms_wrapped_;
    clear_has_source();
  }
}
inline const ::google::privacy::dlp::v2::KmsWrappedCryptoKey& CryptoKey::_internal_kms_wrapped() const {
  return *source_.kms_wrapped_;
}
inline ::google::privacy::dlp::v2::KmsWrappedCryptoKey* CryptoKey::release_kms_wrapped() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CryptoKey.kms_wrapped)
  if (has_kms_wrapped()) {
    clear_has_source();
      ::google::privacy::dlp::v2::KmsWrappedCryptoKey* temp = source_.kms_wrapped_;
    source_.kms_wrapped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::KmsWrappedCryptoKey& CryptoKey::kms_wrapped() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CryptoKey.kms_wrapped)
  return has_kms_wrapped()
      ? *source_.kms_wrapped_
      : *reinterpret_cast< ::google::privacy::dlp::v2::KmsWrappedCryptoKey*>(&::google::privacy::dlp::v2::_KmsWrappedCryptoKey_default_instance_);
}
inline ::google::privacy::dlp::v2::KmsWrappedCryptoKey* CryptoKey::mutable_kms_wrapped() {
  if (!has_kms_wrapped()) {
    clear_source();
    set_has_kms_wrapped();
    source_.kms_wrapped_ = CreateMaybeMessage< ::google::privacy::dlp::v2::KmsWrappedCryptoKey >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CryptoKey.kms_wrapped)
  return source_.kms_wrapped_;
}

inline bool CryptoKey::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void CryptoKey::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline CryptoKey::SourceCase CryptoKey::source_case() const {
  return CryptoKey::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransientCryptoKey

// string name = 1;
inline void TransientCryptoKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransientCryptoKey::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransientCryptoKey.name)
  return name_.GetNoArena();
}
inline void TransientCryptoKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.TransientCryptoKey.name)
}
#if LANG_CXX11
inline void TransientCryptoKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.TransientCryptoKey.name)
}
#endif
inline void TransientCryptoKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.TransientCryptoKey.name)
}
inline void TransientCryptoKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.TransientCryptoKey.name)
}
inline ::std::string* TransientCryptoKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.TransientCryptoKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransientCryptoKey::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.TransientCryptoKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransientCryptoKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.TransientCryptoKey.name)
}

// -------------------------------------------------------------------

// UnwrappedCryptoKey

// bytes key = 1;
inline void UnwrappedCryptoKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnwrappedCryptoKey::key() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UnwrappedCryptoKey.key)
  return key_.GetNoArena();
}
inline void UnwrappedCryptoKey::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.UnwrappedCryptoKey.key)
}
#if LANG_CXX11
inline void UnwrappedCryptoKey::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.UnwrappedCryptoKey.key)
}
#endif
inline void UnwrappedCryptoKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.UnwrappedCryptoKey.key)
}
inline void UnwrappedCryptoKey::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.UnwrappedCryptoKey.key)
}
inline ::std::string* UnwrappedCryptoKey::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UnwrappedCryptoKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnwrappedCryptoKey::release_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UnwrappedCryptoKey.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnwrappedCryptoKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UnwrappedCryptoKey.key)
}

// -------------------------------------------------------------------

// KmsWrappedCryptoKey

// bytes wrapped_key = 1;
inline void KmsWrappedCryptoKey::clear_wrapped_key() {
  wrapped_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KmsWrappedCryptoKey::wrapped_key() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.KmsWrappedCryptoKey.wrapped_key)
  return wrapped_key_.GetNoArena();
}
inline void KmsWrappedCryptoKey::set_wrapped_key(const ::std::string& value) {
  
  wrapped_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.KmsWrappedCryptoKey.wrapped_key)
}
#if LANG_CXX11
inline void KmsWrappedCryptoKey::set_wrapped_key(::std::string&& value) {
  
  wrapped_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.KmsWrappedCryptoKey.wrapped_key)
}
#endif
inline void KmsWrappedCryptoKey::set_wrapped_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wrapped_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.KmsWrappedCryptoKey.wrapped_key)
}
inline void KmsWrappedCryptoKey::set_wrapped_key(const void* value, size_t size) {
  
  wrapped_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.KmsWrappedCryptoKey.wrapped_key)
}
inline ::std::string* KmsWrappedCryptoKey::mutable_wrapped_key() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.KmsWrappedCryptoKey.wrapped_key)
  return wrapped_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KmsWrappedCryptoKey::release_wrapped_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.KmsWrappedCryptoKey.wrapped_key)
  
  return wrapped_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KmsWrappedCryptoKey::set_allocated_wrapped_key(::std::string* wrapped_key) {
  if (wrapped_key != NULL) {
    
  } else {
    
  }
  wrapped_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wrapped_key);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.KmsWrappedCryptoKey.wrapped_key)
}

// string crypto_key_name = 2;
inline void KmsWrappedCryptoKey::clear_crypto_key_name() {
  crypto_key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KmsWrappedCryptoKey::crypto_key_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name)
  return crypto_key_name_.GetNoArena();
}
inline void KmsWrappedCryptoKey::set_crypto_key_name(const ::std::string& value) {
  
  crypto_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name)
}
#if LANG_CXX11
inline void KmsWrappedCryptoKey::set_crypto_key_name(::std::string&& value) {
  
  crypto_key_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name)
}
#endif
inline void KmsWrappedCryptoKey::set_crypto_key_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  crypto_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name)
}
inline void KmsWrappedCryptoKey::set_crypto_key_name(const char* value, size_t size) {
  
  crypto_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name)
}
inline ::std::string* KmsWrappedCryptoKey::mutable_crypto_key_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name)
  return crypto_key_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KmsWrappedCryptoKey::release_crypto_key_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name)
  
  return crypto_key_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KmsWrappedCryptoKey::set_allocated_crypto_key_name(::std::string* crypto_key_name) {
  if (crypto_key_name != NULL) {
    
  } else {
    
  }
  crypto_key_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crypto_key_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name)
}

// -------------------------------------------------------------------

// DateShiftConfig

// int32 upper_bound_days = 1;
inline void DateShiftConfig::clear_upper_bound_days() {
  upper_bound_days_ = 0;
}
inline ::google::protobuf::int32 DateShiftConfig::upper_bound_days() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DateShiftConfig.upper_bound_days)
  return upper_bound_days_;
}
inline void DateShiftConfig::set_upper_bound_days(::google::protobuf::int32 value) {
  
  upper_bound_days_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DateShiftConfig.upper_bound_days)
}

// int32 lower_bound_days = 2;
inline void DateShiftConfig::clear_lower_bound_days() {
  lower_bound_days_ = 0;
}
inline ::google::protobuf::int32 DateShiftConfig::lower_bound_days() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DateShiftConfig.lower_bound_days)
  return lower_bound_days_;
}
inline void DateShiftConfig::set_lower_bound_days(::google::protobuf::int32 value) {
  
  lower_bound_days_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DateShiftConfig.lower_bound_days)
}

// .google.privacy.dlp.v2.FieldId context = 3;
inline bool DateShiftConfig::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& DateShiftConfig::_internal_context() const {
  return *context_;
}
inline const ::google::privacy::dlp::v2::FieldId& DateShiftConfig::context() const {
  const ::google::privacy::dlp::v2::FieldId* p = context_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DateShiftConfig.context)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* DateShiftConfig::release_context() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DateShiftConfig.context)
  
  ::google::privacy::dlp::v2::FieldId* temp = context_;
  context_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* DateShiftConfig::mutable_context() {
  
  if (context_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    context_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DateShiftConfig.context)
  return context_;
}
inline void DateShiftConfig::set_allocated_context(::google::privacy::dlp::v2::FieldId* context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(context_);
  }
  if (context) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DateShiftConfig.context)
}

// .google.privacy.dlp.v2.CryptoKey crypto_key = 4;
inline bool DateShiftConfig::has_crypto_key() const {
  return method_case() == kCryptoKey;
}
inline void DateShiftConfig::set_has_crypto_key() {
  _oneof_case_[0] = kCryptoKey;
}
inline void DateShiftConfig::clear_crypto_key() {
  if (has_crypto_key()) {
    delete method_.crypto_key_;
    clear_has_method();
  }
}
inline const ::google::privacy::dlp::v2::CryptoKey& DateShiftConfig::_internal_crypto_key() const {
  return *method_.crypto_key_;
}
inline ::google::privacy::dlp::v2::CryptoKey* DateShiftConfig::release_crypto_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DateShiftConfig.crypto_key)
  if (has_crypto_key()) {
    clear_has_method();
      ::google::privacy::dlp::v2::CryptoKey* temp = method_.crypto_key_;
    method_.crypto_key_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::CryptoKey& DateShiftConfig::crypto_key() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DateShiftConfig.crypto_key)
  return has_crypto_key()
      ? *method_.crypto_key_
      : *reinterpret_cast< ::google::privacy::dlp::v2::CryptoKey*>(&::google::privacy::dlp::v2::_CryptoKey_default_instance_);
}
inline ::google::privacy::dlp::v2::CryptoKey* DateShiftConfig::mutable_crypto_key() {
  if (!has_crypto_key()) {
    clear_method();
    set_has_crypto_key();
    method_.crypto_key_ = CreateMaybeMessage< ::google::privacy::dlp::v2::CryptoKey >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DateShiftConfig.crypto_key)
  return method_.crypto_key_;
}

inline bool DateShiftConfig::has_method() const {
  return method_case() != METHOD_NOT_SET;
}
inline void DateShiftConfig::clear_has_method() {
  _oneof_case_[0] = METHOD_NOT_SET;
}
inline DateShiftConfig::MethodCase DateShiftConfig::method_case() const {
  return DateShiftConfig::MethodCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InfoTypeTransformations_InfoTypeTransformation

// repeated .google.privacy.dlp.v2.InfoType info_types = 1;
inline int InfoTypeTransformations_InfoTypeTransformation::info_types_size() const {
  return info_types_.size();
}
inline ::google::privacy::dlp::v2::InfoType* InfoTypeTransformations_InfoTypeTransformation::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.info_types)
  return info_types_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoType >*
InfoTypeTransformations_InfoTypeTransformation::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.info_types)
  return &info_types_;
}
inline const ::google::privacy::dlp::v2::InfoType& InfoTypeTransformations_InfoTypeTransformation::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.info_types)
  return info_types_.Get(index);
}
inline ::google::privacy::dlp::v2::InfoType* InfoTypeTransformations_InfoTypeTransformation::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.info_types)
  return info_types_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoType >&
InfoTypeTransformations_InfoTypeTransformation::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.info_types)
  return info_types_;
}

// .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 2;
inline bool InfoTypeTransformations_InfoTypeTransformation::has_primitive_transformation() const {
  return this != internal_default_instance() && primitive_transformation_ != NULL;
}
inline void InfoTypeTransformations_InfoTypeTransformation::clear_primitive_transformation() {
  if (GetArenaNoVirtual() == NULL && primitive_transformation_ != NULL) {
    delete primitive_transformation_;
  }
  primitive_transformation_ = NULL;
}
inline const ::google::privacy::dlp::v2::PrimitiveTransformation& InfoTypeTransformations_InfoTypeTransformation::_internal_primitive_transformation() const {
  return *primitive_transformation_;
}
inline const ::google::privacy::dlp::v2::PrimitiveTransformation& InfoTypeTransformations_InfoTypeTransformation::primitive_transformation() const {
  const ::google::privacy::dlp::v2::PrimitiveTransformation* p = primitive_transformation_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.primitive_transformation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::PrimitiveTransformation*>(
      &::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_);
}
inline ::google::privacy::dlp::v2::PrimitiveTransformation* InfoTypeTransformations_InfoTypeTransformation::release_primitive_transformation() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.primitive_transformation)
  
  ::google::privacy::dlp::v2::PrimitiveTransformation* temp = primitive_transformation_;
  primitive_transformation_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::PrimitiveTransformation* InfoTypeTransformations_InfoTypeTransformation::mutable_primitive_transformation() {
  
  if (primitive_transformation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::PrimitiveTransformation>(GetArenaNoVirtual());
    primitive_transformation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.primitive_transformation)
  return primitive_transformation_;
}
inline void InfoTypeTransformations_InfoTypeTransformation::set_allocated_primitive_transformation(::google::privacy::dlp::v2::PrimitiveTransformation* primitive_transformation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete primitive_transformation_;
  }
  if (primitive_transformation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      primitive_transformation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, primitive_transformation, submessage_arena);
    }
    
  } else {
    
  }
  primitive_transformation_ = primitive_transformation;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.primitive_transformation)
}

// -------------------------------------------------------------------

// InfoTypeTransformations

// repeated .google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation transformations = 1;
inline int InfoTypeTransformations::transformations_size() const {
  return transformations_.size();
}
inline void InfoTypeTransformations::clear_transformations() {
  transformations_.Clear();
}
inline ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation* InfoTypeTransformations::mutable_transformations(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InfoTypeTransformations.transformations)
  return transformations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation >*
InfoTypeTransformations::mutable_transformations() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.InfoTypeTransformations.transformations)
  return &transformations_;
}
inline const ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation& InfoTypeTransformations::transformations(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InfoTypeTransformations.transformations)
  return transformations_.Get(index);
}
inline ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation* InfoTypeTransformations::add_transformations() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.InfoTypeTransformations.transformations)
  return transformations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation >&
InfoTypeTransformations::transformations() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.InfoTypeTransformations.transformations)
  return transformations_;
}

// -------------------------------------------------------------------

// FieldTransformation

// repeated .google.privacy.dlp.v2.FieldId fields = 1;
inline int FieldTransformation::fields_size() const {
  return fields_.size();
}
inline ::google::privacy::dlp::v2::FieldId* FieldTransformation::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.FieldTransformation.fields)
  return fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >*
FieldTransformation::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.FieldTransformation.fields)
  return &fields_;
}
inline const ::google::privacy::dlp::v2::FieldId& FieldTransformation::fields(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.FieldTransformation.fields)
  return fields_.Get(index);
}
inline ::google::privacy::dlp::v2::FieldId* FieldTransformation::add_fields() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.FieldTransformation.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldId >&
FieldTransformation::fields() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.FieldTransformation.fields)
  return fields_;
}

// .google.privacy.dlp.v2.RecordCondition condition = 3;
inline bool FieldTransformation::has_condition() const {
  return this != internal_default_instance() && condition_ != NULL;
}
inline void FieldTransformation::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
}
inline const ::google::privacy::dlp::v2::RecordCondition& FieldTransformation::_internal_condition() const {
  return *condition_;
}
inline const ::google::privacy::dlp::v2::RecordCondition& FieldTransformation::condition() const {
  const ::google::privacy::dlp::v2::RecordCondition* p = condition_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.FieldTransformation.condition)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::RecordCondition*>(
      &::google::privacy::dlp::v2::_RecordCondition_default_instance_);
}
inline ::google::privacy::dlp::v2::RecordCondition* FieldTransformation::release_condition() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.FieldTransformation.condition)
  
  ::google::privacy::dlp::v2::RecordCondition* temp = condition_;
  condition_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::RecordCondition* FieldTransformation::mutable_condition() {
  
  if (condition_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::RecordCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.FieldTransformation.condition)
  return condition_;
}
inline void FieldTransformation::set_allocated_condition(::google::privacy::dlp::v2::RecordCondition* condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete condition_;
  }
  if (condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.FieldTransformation.condition)
}

// .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 4;
inline bool FieldTransformation::has_primitive_transformation() const {
  return transformation_case() == kPrimitiveTransformation;
}
inline void FieldTransformation::set_has_primitive_transformation() {
  _oneof_case_[0] = kPrimitiveTransformation;
}
inline void FieldTransformation::clear_primitive_transformation() {
  if (has_primitive_transformation()) {
    delete transformation_.primitive_transformation_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::PrimitiveTransformation& FieldTransformation::_internal_primitive_transformation() const {
  return *transformation_.primitive_transformation_;
}
inline ::google::privacy::dlp::v2::PrimitiveTransformation* FieldTransformation::release_primitive_transformation() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.FieldTransformation.primitive_transformation)
  if (has_primitive_transformation()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::PrimitiveTransformation* temp = transformation_.primitive_transformation_;
    transformation_.primitive_transformation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::PrimitiveTransformation& FieldTransformation::primitive_transformation() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.FieldTransformation.primitive_transformation)
  return has_primitive_transformation()
      ? *transformation_.primitive_transformation_
      : *reinterpret_cast< ::google::privacy::dlp::v2::PrimitiveTransformation*>(&::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_);
}
inline ::google::privacy::dlp::v2::PrimitiveTransformation* FieldTransformation::mutable_primitive_transformation() {
  if (!has_primitive_transformation()) {
    clear_transformation();
    set_has_primitive_transformation();
    transformation_.primitive_transformation_ = CreateMaybeMessage< ::google::privacy::dlp::v2::PrimitiveTransformation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.FieldTransformation.primitive_transformation)
  return transformation_.primitive_transformation_;
}

// .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 5;
inline bool FieldTransformation::has_info_type_transformations() const {
  return transformation_case() == kInfoTypeTransformations;
}
inline void FieldTransformation::set_has_info_type_transformations() {
  _oneof_case_[0] = kInfoTypeTransformations;
}
inline void FieldTransformation::clear_info_type_transformations() {
  if (has_info_type_transformations()) {
    delete transformation_.info_type_transformations_;
    clear_has_transformation();
  }
}
inline const ::google::privacy::dlp::v2::InfoTypeTransformations& FieldTransformation::_internal_info_type_transformations() const {
  return *transformation_.info_type_transformations_;
}
inline ::google::privacy::dlp::v2::InfoTypeTransformations* FieldTransformation::release_info_type_transformations() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.FieldTransformation.info_type_transformations)
  if (has_info_type_transformations()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2::InfoTypeTransformations* temp = transformation_.info_type_transformations_;
    transformation_.info_type_transformations_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::InfoTypeTransformations& FieldTransformation::info_type_transformations() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.FieldTransformation.info_type_transformations)
  return has_info_type_transformations()
      ? *transformation_.info_type_transformations_
      : *reinterpret_cast< ::google::privacy::dlp::v2::InfoTypeTransformations*>(&::google::privacy::dlp::v2::_InfoTypeTransformations_default_instance_);
}
inline ::google::privacy::dlp::v2::InfoTypeTransformations* FieldTransformation::mutable_info_type_transformations() {
  if (!has_info_type_transformations()) {
    clear_transformation();
    set_has_info_type_transformations();
    transformation_.info_type_transformations_ = CreateMaybeMessage< ::google::privacy::dlp::v2::InfoTypeTransformations >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.FieldTransformation.info_type_transformations)
  return transformation_.info_type_transformations_;
}

inline bool FieldTransformation::has_transformation() const {
  return transformation_case() != TRANSFORMATION_NOT_SET;
}
inline void FieldTransformation::clear_has_transformation() {
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}
inline FieldTransformation::TransformationCase FieldTransformation::transformation_case() const {
  return FieldTransformation::TransformationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecordTransformations

// repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 1;
inline int RecordTransformations::field_transformations_size() const {
  return field_transformations_.size();
}
inline void RecordTransformations::clear_field_transformations() {
  field_transformations_.Clear();
}
inline ::google::privacy::dlp::v2::FieldTransformation* RecordTransformations::mutable_field_transformations(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RecordTransformations.field_transformations)
  return field_transformations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldTransformation >*
RecordTransformations::mutable_field_transformations() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.RecordTransformations.field_transformations)
  return &field_transformations_;
}
inline const ::google::privacy::dlp::v2::FieldTransformation& RecordTransformations::field_transformations(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordTransformations.field_transformations)
  return field_transformations_.Get(index);
}
inline ::google::privacy::dlp::v2::FieldTransformation* RecordTransformations::add_field_transformations() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.RecordTransformations.field_transformations)
  return field_transformations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldTransformation >&
RecordTransformations::field_transformations() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.RecordTransformations.field_transformations)
  return field_transformations_;
}

// repeated .google.privacy.dlp.v2.RecordSuppression record_suppressions = 2;
inline int RecordTransformations::record_suppressions_size() const {
  return record_suppressions_.size();
}
inline void RecordTransformations::clear_record_suppressions() {
  record_suppressions_.Clear();
}
inline ::google::privacy::dlp::v2::RecordSuppression* RecordTransformations::mutable_record_suppressions(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RecordTransformations.record_suppressions)
  return record_suppressions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RecordSuppression >*
RecordTransformations::mutable_record_suppressions() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.RecordTransformations.record_suppressions)
  return &record_suppressions_;
}
inline const ::google::privacy::dlp::v2::RecordSuppression& RecordTransformations::record_suppressions(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordTransformations.record_suppressions)
  return record_suppressions_.Get(index);
}
inline ::google::privacy::dlp::v2::RecordSuppression* RecordTransformations::add_record_suppressions() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.RecordTransformations.record_suppressions)
  return record_suppressions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RecordSuppression >&
RecordTransformations::record_suppressions() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.RecordTransformations.record_suppressions)
  return record_suppressions_;
}

// -------------------------------------------------------------------

// RecordSuppression

// .google.privacy.dlp.v2.RecordCondition condition = 1;
inline bool RecordSuppression::has_condition() const {
  return this != internal_default_instance() && condition_ != NULL;
}
inline void RecordSuppression::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
}
inline const ::google::privacy::dlp::v2::RecordCondition& RecordSuppression::_internal_condition() const {
  return *condition_;
}
inline const ::google::privacy::dlp::v2::RecordCondition& RecordSuppression::condition() const {
  const ::google::privacy::dlp::v2::RecordCondition* p = condition_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordSuppression.condition)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::RecordCondition*>(
      &::google::privacy::dlp::v2::_RecordCondition_default_instance_);
}
inline ::google::privacy::dlp::v2::RecordCondition* RecordSuppression::release_condition() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RecordSuppression.condition)
  
  ::google::privacy::dlp::v2::RecordCondition* temp = condition_;
  condition_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::RecordCondition* RecordSuppression::mutable_condition() {
  
  if (condition_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::RecordCondition>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RecordSuppression.condition)
  return condition_;
}
inline void RecordSuppression::set_allocated_condition(::google::privacy::dlp::v2::RecordCondition* condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete condition_;
  }
  if (condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RecordSuppression.condition)
}

// -------------------------------------------------------------------

// RecordCondition_Condition

// .google.privacy.dlp.v2.FieldId field = 1;
inline bool RecordCondition_Condition::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& RecordCondition_Condition::_internal_field() const {
  return *field_;
}
inline const ::google::privacy::dlp::v2::FieldId& RecordCondition_Condition::field() const {
  const ::google::privacy::dlp::v2::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordCondition.Condition.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* RecordCondition_Condition::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RecordCondition.Condition.field)
  
  ::google::privacy::dlp::v2::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* RecordCondition_Condition::mutable_field() {
  
  if (field_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RecordCondition.Condition.field)
  return field_;
}
inline void RecordCondition_Condition::set_allocated_field(::google::privacy::dlp::v2::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RecordCondition.Condition.field)
}

// .google.privacy.dlp.v2.RelationalOperator operator = 3;
inline void RecordCondition_Condition::clear_operator_() {
  operator__ = 0;
}
inline ::google::privacy::dlp::v2::RelationalOperator RecordCondition_Condition::operator_() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordCondition.Condition.operator)
  return static_cast< ::google::privacy::dlp::v2::RelationalOperator >(operator__);
}
inline void RecordCondition_Condition::set_operator_(::google::privacy::dlp::v2::RelationalOperator value) {
  
  operator__ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.RecordCondition.Condition.operator)
}

// .google.privacy.dlp.v2.Value value = 4;
inline bool RecordCondition_Condition::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void RecordCondition_Condition::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::privacy::dlp::v2::Value& RecordCondition_Condition::_internal_value() const {
  return *value_;
}
inline const ::google::privacy::dlp::v2::Value& RecordCondition_Condition::value() const {
  const ::google::privacy::dlp::v2::Value* p = value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordCondition.Condition.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::Value*>(
      &::google::privacy::dlp::v2::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2::Value* RecordCondition_Condition::release_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RecordCondition.Condition.value)
  
  ::google::privacy::dlp::v2::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::Value* RecordCondition_Condition::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RecordCondition.Condition.value)
  return value_;
}
inline void RecordCondition_Condition::set_allocated_value(::google::privacy::dlp::v2::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RecordCondition.Condition.value)
}

// -------------------------------------------------------------------

// RecordCondition_Conditions

// repeated .google.privacy.dlp.v2.RecordCondition.Condition conditions = 1;
inline int RecordCondition_Conditions::conditions_size() const {
  return conditions_.size();
}
inline void RecordCondition_Conditions::clear_conditions() {
  conditions_.Clear();
}
inline ::google::privacy::dlp::v2::RecordCondition_Condition* RecordCondition_Conditions::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RecordCondition.Conditions.conditions)
  return conditions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RecordCondition_Condition >*
RecordCondition_Conditions::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.RecordCondition.Conditions.conditions)
  return &conditions_;
}
inline const ::google::privacy::dlp::v2::RecordCondition_Condition& RecordCondition_Conditions::conditions(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordCondition.Conditions.conditions)
  return conditions_.Get(index);
}
inline ::google::privacy::dlp::v2::RecordCondition_Condition* RecordCondition_Conditions::add_conditions() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.RecordCondition.Conditions.conditions)
  return conditions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::RecordCondition_Condition >&
RecordCondition_Conditions::conditions() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.RecordCondition.Conditions.conditions)
  return conditions_;
}

// -------------------------------------------------------------------

// RecordCondition_Expressions

// .google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
inline void RecordCondition_Expressions::clear_logical_operator() {
  logical_operator_ = 0;
}
inline ::google::privacy::dlp::v2::RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions::logical_operator() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordCondition.Expressions.logical_operator)
  return static_cast< ::google::privacy::dlp::v2::RecordCondition_Expressions_LogicalOperator >(logical_operator_);
}
inline void RecordCondition_Expressions::set_logical_operator(::google::privacy::dlp::v2::RecordCondition_Expressions_LogicalOperator value) {
  
  logical_operator_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.RecordCondition.Expressions.logical_operator)
}

// .google.privacy.dlp.v2.RecordCondition.Conditions conditions = 3;
inline bool RecordCondition_Expressions::has_conditions() const {
  return type_case() == kConditions;
}
inline void RecordCondition_Expressions::set_has_conditions() {
  _oneof_case_[0] = kConditions;
}
inline void RecordCondition_Expressions::clear_conditions() {
  if (has_conditions()) {
    delete type_.conditions_;
    clear_has_type();
  }
}
inline const ::google::privacy::dlp::v2::RecordCondition_Conditions& RecordCondition_Expressions::_internal_conditions() const {
  return *type_.conditions_;
}
inline ::google::privacy::dlp::v2::RecordCondition_Conditions* RecordCondition_Expressions::release_conditions() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RecordCondition.Expressions.conditions)
  if (has_conditions()) {
    clear_has_type();
      ::google::privacy::dlp::v2::RecordCondition_Conditions* temp = type_.conditions_;
    type_.conditions_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::RecordCondition_Conditions& RecordCondition_Expressions::conditions() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordCondition.Expressions.conditions)
  return has_conditions()
      ? *type_.conditions_
      : *reinterpret_cast< ::google::privacy::dlp::v2::RecordCondition_Conditions*>(&::google::privacy::dlp::v2::_RecordCondition_Conditions_default_instance_);
}
inline ::google::privacy::dlp::v2::RecordCondition_Conditions* RecordCondition_Expressions::mutable_conditions() {
  if (!has_conditions()) {
    clear_type();
    set_has_conditions();
    type_.conditions_ = CreateMaybeMessage< ::google::privacy::dlp::v2::RecordCondition_Conditions >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RecordCondition.Expressions.conditions)
  return type_.conditions_;
}

inline bool RecordCondition_Expressions::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void RecordCondition_Expressions::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline RecordCondition_Expressions::TypeCase RecordCondition_Expressions::type_case() const {
  return RecordCondition_Expressions::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecordCondition

// .google.privacy.dlp.v2.RecordCondition.Expressions expressions = 3;
inline bool RecordCondition::has_expressions() const {
  return this != internal_default_instance() && expressions_ != NULL;
}
inline void RecordCondition::clear_expressions() {
  if (GetArenaNoVirtual() == NULL && expressions_ != NULL) {
    delete expressions_;
  }
  expressions_ = NULL;
}
inline const ::google::privacy::dlp::v2::RecordCondition_Expressions& RecordCondition::_internal_expressions() const {
  return *expressions_;
}
inline const ::google::privacy::dlp::v2::RecordCondition_Expressions& RecordCondition::expressions() const {
  const ::google::privacy::dlp::v2::RecordCondition_Expressions* p = expressions_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.RecordCondition.expressions)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::RecordCondition_Expressions*>(
      &::google::privacy::dlp::v2::_RecordCondition_Expressions_default_instance_);
}
inline ::google::privacy::dlp::v2::RecordCondition_Expressions* RecordCondition::release_expressions() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.RecordCondition.expressions)
  
  ::google::privacy::dlp::v2::RecordCondition_Expressions* temp = expressions_;
  expressions_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::RecordCondition_Expressions* RecordCondition::mutable_expressions() {
  
  if (expressions_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::RecordCondition_Expressions>(GetArenaNoVirtual());
    expressions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.RecordCondition.expressions)
  return expressions_;
}
inline void RecordCondition::set_allocated_expressions(::google::privacy::dlp::v2::RecordCondition_Expressions* expressions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expressions_;
  }
  if (expressions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expressions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expressions, submessage_arena);
    }
    
  } else {
    
  }
  expressions_ = expressions;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RecordCondition.expressions)
}

// -------------------------------------------------------------------

// TransformationOverview

// int64 transformed_bytes = 2;
inline void TransformationOverview::clear_transformed_bytes() {
  transformed_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransformationOverview::transformed_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationOverview.transformed_bytes)
  return transformed_bytes_;
}
inline void TransformationOverview::set_transformed_bytes(::google::protobuf::int64 value) {
  
  transformed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.TransformationOverview.transformed_bytes)
}

// repeated .google.privacy.dlp.v2.TransformationSummary transformation_summaries = 3;
inline int TransformationOverview::transformation_summaries_size() const {
  return transformation_summaries_.size();
}
inline void TransformationOverview::clear_transformation_summaries() {
  transformation_summaries_.Clear();
}
inline ::google::privacy::dlp::v2::TransformationSummary* TransformationOverview::mutable_transformation_summaries(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.TransformationOverview.transformation_summaries)
  return transformation_summaries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::TransformationSummary >*
TransformationOverview::mutable_transformation_summaries() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.TransformationOverview.transformation_summaries)
  return &transformation_summaries_;
}
inline const ::google::privacy::dlp::v2::TransformationSummary& TransformationOverview::transformation_summaries(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationOverview.transformation_summaries)
  return transformation_summaries_.Get(index);
}
inline ::google::privacy::dlp::v2::TransformationSummary* TransformationOverview::add_transformation_summaries() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.TransformationOverview.transformation_summaries)
  return transformation_summaries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::TransformationSummary >&
TransformationOverview::transformation_summaries() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.TransformationOverview.transformation_summaries)
  return transformation_summaries_;
}

// -------------------------------------------------------------------

// TransformationSummary_SummaryResult

// int64 count = 1;
inline void TransformationSummary_SummaryResult::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransformationSummary_SummaryResult::count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationSummary.SummaryResult.count)
  return count_;
}
inline void TransformationSummary_SummaryResult::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.TransformationSummary.SummaryResult.count)
}

// .google.privacy.dlp.v2.TransformationSummary.TransformationResultCode code = 2;
inline void TransformationSummary_SummaryResult::clear_code() {
  code_ = 0;
}
inline ::google::privacy::dlp::v2::TransformationSummary_TransformationResultCode TransformationSummary_SummaryResult::code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationSummary.SummaryResult.code)
  return static_cast< ::google::privacy::dlp::v2::TransformationSummary_TransformationResultCode >(code_);
}
inline void TransformationSummary_SummaryResult::set_code(::google::privacy::dlp::v2::TransformationSummary_TransformationResultCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.TransformationSummary.SummaryResult.code)
}

// string details = 3;
inline void TransformationSummary_SummaryResult::clear_details() {
  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransformationSummary_SummaryResult::details() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationSummary.SummaryResult.details)
  return details_.GetNoArena();
}
inline void TransformationSummary_SummaryResult::set_details(const ::std::string& value) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.TransformationSummary.SummaryResult.details)
}
#if LANG_CXX11
inline void TransformationSummary_SummaryResult::set_details(::std::string&& value) {
  
  details_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.TransformationSummary.SummaryResult.details)
}
#endif
inline void TransformationSummary_SummaryResult::set_details(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.TransformationSummary.SummaryResult.details)
}
inline void TransformationSummary_SummaryResult::set_details(const char* value, size_t size) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.TransformationSummary.SummaryResult.details)
}
inline ::std::string* TransformationSummary_SummaryResult::mutable_details() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.TransformationSummary.SummaryResult.details)
  return details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransformationSummary_SummaryResult::release_details() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.TransformationSummary.SummaryResult.details)
  
  return details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformationSummary_SummaryResult::set_allocated_details(::std::string* details) {
  if (details != NULL) {
    
  } else {
    
  }
  details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), details);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.TransformationSummary.SummaryResult.details)
}

// -------------------------------------------------------------------

// TransformationSummary

// .google.privacy.dlp.v2.InfoType info_type = 1;
inline bool TransformationSummary::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline const ::google::privacy::dlp::v2::InfoType& TransformationSummary::_internal_info_type() const {
  return *info_type_;
}
inline const ::google::privacy::dlp::v2::InfoType& TransformationSummary::info_type() const {
  const ::google::privacy::dlp::v2::InfoType* p = info_type_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationSummary.info_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InfoType*>(
      &::google::privacy::dlp::v2::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2::InfoType* TransformationSummary::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.TransformationSummary.info_type)
  
  ::google::privacy::dlp::v2::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InfoType* TransformationSummary::mutable_info_type() {
  
  if (info_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InfoType>(GetArenaNoVirtual());
    info_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.TransformationSummary.info_type)
  return info_type_;
}
inline void TransformationSummary::set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_type_);
  }
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    
  } else {
    
  }
  info_type_ = info_type;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.TransformationSummary.info_type)
}

// .google.privacy.dlp.v2.FieldId field = 2;
inline bool TransformationSummary::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2::FieldId& TransformationSummary::_internal_field() const {
  return *field_;
}
inline const ::google::privacy::dlp::v2::FieldId& TransformationSummary::field() const {
  const ::google::privacy::dlp::v2::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationSummary.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::FieldId*>(
      &::google::privacy::dlp::v2::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2::FieldId* TransformationSummary::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.TransformationSummary.field)
  
  ::google::privacy::dlp::v2::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::FieldId* TransformationSummary::mutable_field() {
  
  if (field_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::FieldId>(GetArenaNoVirtual());
    field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.TransformationSummary.field)
  return field_;
}
inline void TransformationSummary::set_allocated_field(::google::privacy::dlp::v2::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.TransformationSummary.field)
}

// .google.privacy.dlp.v2.PrimitiveTransformation transformation = 3;
inline bool TransformationSummary::has_transformation() const {
  return this != internal_default_instance() && transformation_ != NULL;
}
inline void TransformationSummary::clear_transformation() {
  if (GetArenaNoVirtual() == NULL && transformation_ != NULL) {
    delete transformation_;
  }
  transformation_ = NULL;
}
inline const ::google::privacy::dlp::v2::PrimitiveTransformation& TransformationSummary::_internal_transformation() const {
  return *transformation_;
}
inline const ::google::privacy::dlp::v2::PrimitiveTransformation& TransformationSummary::transformation() const {
  const ::google::privacy::dlp::v2::PrimitiveTransformation* p = transformation_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationSummary.transformation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::PrimitiveTransformation*>(
      &::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_);
}
inline ::google::privacy::dlp::v2::PrimitiveTransformation* TransformationSummary::release_transformation() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.TransformationSummary.transformation)
  
  ::google::privacy::dlp::v2::PrimitiveTransformation* temp = transformation_;
  transformation_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::PrimitiveTransformation* TransformationSummary::mutable_transformation() {
  
  if (transformation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::PrimitiveTransformation>(GetArenaNoVirtual());
    transformation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.TransformationSummary.transformation)
  return transformation_;
}
inline void TransformationSummary::set_allocated_transformation(::google::privacy::dlp::v2::PrimitiveTransformation* transformation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transformation_;
  }
  if (transformation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transformation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transformation, submessage_arena);
    }
    
  } else {
    
  }
  transformation_ = transformation;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.TransformationSummary.transformation)
}

// repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 5;
inline int TransformationSummary::field_transformations_size() const {
  return field_transformations_.size();
}
inline void TransformationSummary::clear_field_transformations() {
  field_transformations_.Clear();
}
inline ::google::privacy::dlp::v2::FieldTransformation* TransformationSummary::mutable_field_transformations(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.TransformationSummary.field_transformations)
  return field_transformations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldTransformation >*
TransformationSummary::mutable_field_transformations() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.TransformationSummary.field_transformations)
  return &field_transformations_;
}
inline const ::google::privacy::dlp::v2::FieldTransformation& TransformationSummary::field_transformations(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationSummary.field_transformations)
  return field_transformations_.Get(index);
}
inline ::google::privacy::dlp::v2::FieldTransformation* TransformationSummary::add_field_transformations() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.TransformationSummary.field_transformations)
  return field_transformations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::FieldTransformation >&
TransformationSummary::field_transformations() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.TransformationSummary.field_transformations)
  return field_transformations_;
}

// .google.privacy.dlp.v2.RecordSuppression record_suppress = 6;
inline bool TransformationSummary::has_record_suppress() const {
  return this != internal_default_instance() && record_suppress_ != NULL;
}
inline void TransformationSummary::clear_record_suppress() {
  if (GetArenaNoVirtual() == NULL && record_suppress_ != NULL) {
    delete record_suppress_;
  }
  record_suppress_ = NULL;
}
inline const ::google::privacy::dlp::v2::RecordSuppression& TransformationSummary::_internal_record_suppress() const {
  return *record_suppress_;
}
inline const ::google::privacy::dlp::v2::RecordSuppression& TransformationSummary::record_suppress() const {
  const ::google::privacy::dlp::v2::RecordSuppression* p = record_suppress_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationSummary.record_suppress)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::RecordSuppression*>(
      &::google::privacy::dlp::v2::_RecordSuppression_default_instance_);
}
inline ::google::privacy::dlp::v2::RecordSuppression* TransformationSummary::release_record_suppress() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.TransformationSummary.record_suppress)
  
  ::google::privacy::dlp::v2::RecordSuppression* temp = record_suppress_;
  record_suppress_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::RecordSuppression* TransformationSummary::mutable_record_suppress() {
  
  if (record_suppress_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::RecordSuppression>(GetArenaNoVirtual());
    record_suppress_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.TransformationSummary.record_suppress)
  return record_suppress_;
}
inline void TransformationSummary::set_allocated_record_suppress(::google::privacy::dlp::v2::RecordSuppression* record_suppress) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete record_suppress_;
  }
  if (record_suppress) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      record_suppress = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, record_suppress, submessage_arena);
    }
    
  } else {
    
  }
  record_suppress_ = record_suppress;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.TransformationSummary.record_suppress)
}

// repeated .google.privacy.dlp.v2.TransformationSummary.SummaryResult results = 4;
inline int TransformationSummary::results_size() const {
  return results_.size();
}
inline void TransformationSummary::clear_results() {
  results_.Clear();
}
inline ::google::privacy::dlp::v2::TransformationSummary_SummaryResult* TransformationSummary::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.TransformationSummary.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::TransformationSummary_SummaryResult >*
TransformationSummary::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.TransformationSummary.results)
  return &results_;
}
inline const ::google::privacy::dlp::v2::TransformationSummary_SummaryResult& TransformationSummary::results(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationSummary.results)
  return results_.Get(index);
}
inline ::google::privacy::dlp::v2::TransformationSummary_SummaryResult* TransformationSummary::add_results() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.TransformationSummary.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::TransformationSummary_SummaryResult >&
TransformationSummary::results() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.TransformationSummary.results)
  return results_;
}

// int64 transformed_bytes = 7;
inline void TransformationSummary::clear_transformed_bytes() {
  transformed_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransformationSummary::transformed_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.TransformationSummary.transformed_bytes)
  return transformed_bytes_;
}
inline void TransformationSummary::set_transformed_bytes(::google::protobuf::int64 value) {
  
  transformed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.TransformationSummary.transformed_bytes)
}

// -------------------------------------------------------------------

// Schedule

// .google.protobuf.Duration recurrence_period_duration = 1;
inline bool Schedule::has_recurrence_period_duration() const {
  return option_case() == kRecurrencePeriodDuration;
}
inline void Schedule::set_has_recurrence_period_duration() {
  _oneof_case_[0] = kRecurrencePeriodDuration;
}
inline const ::google::protobuf::Duration& Schedule::_internal_recurrence_period_duration() const {
  return *option_.recurrence_period_duration_;
}
inline ::google::protobuf::Duration* Schedule::release_recurrence_period_duration() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Schedule.recurrence_period_duration)
  if (has_recurrence_period_duration()) {
    clear_has_option();
      ::google::protobuf::Duration* temp = option_.recurrence_period_duration_;
    option_.recurrence_period_duration_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Duration& Schedule::recurrence_period_duration() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Schedule.recurrence_period_duration)
  return has_recurrence_period_duration()
      ? *option_.recurrence_period_duration_
      : *reinterpret_cast< ::google::protobuf::Duration*>(&::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Schedule::mutable_recurrence_period_duration() {
  if (!has_recurrence_period_duration()) {
    clear_option();
    set_has_recurrence_period_duration();
    option_.recurrence_period_duration_ = CreateMaybeMessage< ::google::protobuf::Duration >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Schedule.recurrence_period_duration)
  return option_.recurrence_period_duration_;
}

inline bool Schedule::has_option() const {
  return option_case() != OPTION_NOT_SET;
}
inline void Schedule::clear_has_option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline Schedule::OptionCase Schedule::option_case() const {
  return Schedule::OptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InspectTemplate

// string name = 1;
inline void InspectTemplate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InspectTemplate::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectTemplate.name)
  return name_.GetNoArena();
}
inline void InspectTemplate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectTemplate.name)
}
#if LANG_CXX11
inline void InspectTemplate::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.InspectTemplate.name)
}
#endif
inline void InspectTemplate::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.InspectTemplate.name)
}
inline void InspectTemplate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.InspectTemplate.name)
}
inline ::std::string* InspectTemplate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectTemplate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InspectTemplate::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectTemplate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InspectTemplate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectTemplate.name)
}

// string display_name = 2;
inline void InspectTemplate::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InspectTemplate::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectTemplate.display_name)
  return display_name_.GetNoArena();
}
inline void InspectTemplate::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectTemplate.display_name)
}
#if LANG_CXX11
inline void InspectTemplate::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.InspectTemplate.display_name)
}
#endif
inline void InspectTemplate::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.InspectTemplate.display_name)
}
inline void InspectTemplate::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.InspectTemplate.display_name)
}
inline ::std::string* InspectTemplate::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectTemplate.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InspectTemplate::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectTemplate.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InspectTemplate::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectTemplate.display_name)
}

// string description = 3;
inline void InspectTemplate::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InspectTemplate::description() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectTemplate.description)
  return description_.GetNoArena();
}
inline void InspectTemplate::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectTemplate.description)
}
#if LANG_CXX11
inline void InspectTemplate::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.InspectTemplate.description)
}
#endif
inline void InspectTemplate::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.InspectTemplate.description)
}
inline void InspectTemplate::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.InspectTemplate.description)
}
inline ::std::string* InspectTemplate::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectTemplate.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InspectTemplate::release_description() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectTemplate.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InspectTemplate::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectTemplate.description)
}

// .google.protobuf.Timestamp create_time = 4;
inline bool InspectTemplate::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& InspectTemplate::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& InspectTemplate::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectTemplate.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* InspectTemplate::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectTemplate.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* InspectTemplate::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectTemplate.create_time)
  return create_time_;
}
inline void InspectTemplate::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectTemplate.create_time)
}

// .google.protobuf.Timestamp update_time = 5;
inline bool InspectTemplate::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& InspectTemplate::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& InspectTemplate::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectTemplate.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* InspectTemplate::release_update_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectTemplate.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* InspectTemplate::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectTemplate.update_time)
  return update_time_;
}
inline void InspectTemplate::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectTemplate.update_time)
}

// .google.privacy.dlp.v2.InspectConfig inspect_config = 6;
inline bool InspectTemplate::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void InspectTemplate::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectConfig& InspectTemplate::_internal_inspect_config() const {
  return *inspect_config_;
}
inline const ::google::privacy::dlp::v2::InspectConfig& InspectTemplate::inspect_config() const {
  const ::google::privacy::dlp::v2::InspectConfig* p = inspect_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectTemplate.inspect_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectConfig*>(
      &::google::privacy::dlp::v2::_InspectConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectConfig* InspectTemplate::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectTemplate.inspect_config)
  
  ::google::privacy::dlp::v2::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectConfig* InspectTemplate::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectConfig>(GetArenaNoVirtual());
    inspect_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectTemplate.inspect_config)
  return inspect_config_;
}
inline void InspectTemplate::set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_config_;
  }
  if (inspect_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_config, submessage_arena);
    }
    
  } else {
    
  }
  inspect_config_ = inspect_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectTemplate.inspect_config)
}

// -------------------------------------------------------------------

// DeidentifyTemplate

// string name = 1;
inline void DeidentifyTemplate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeidentifyTemplate::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyTemplate.name)
  return name_.GetNoArena();
}
inline void DeidentifyTemplate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DeidentifyTemplate.name)
}
#if LANG_CXX11
inline void DeidentifyTemplate::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DeidentifyTemplate.name)
}
#endif
inline void DeidentifyTemplate::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DeidentifyTemplate.name)
}
inline void DeidentifyTemplate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DeidentifyTemplate.name)
}
inline ::std::string* DeidentifyTemplate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyTemplate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeidentifyTemplate::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyTemplate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeidentifyTemplate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyTemplate.name)
}

// string display_name = 2;
inline void DeidentifyTemplate::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeidentifyTemplate::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyTemplate.display_name)
  return display_name_.GetNoArena();
}
inline void DeidentifyTemplate::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DeidentifyTemplate.display_name)
}
#if LANG_CXX11
inline void DeidentifyTemplate::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DeidentifyTemplate.display_name)
}
#endif
inline void DeidentifyTemplate::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DeidentifyTemplate.display_name)
}
inline void DeidentifyTemplate::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DeidentifyTemplate.display_name)
}
inline ::std::string* DeidentifyTemplate::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyTemplate.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeidentifyTemplate::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyTemplate.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeidentifyTemplate::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyTemplate.display_name)
}

// string description = 3;
inline void DeidentifyTemplate::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeidentifyTemplate::description() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyTemplate.description)
  return description_.GetNoArena();
}
inline void DeidentifyTemplate::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DeidentifyTemplate.description)
}
#if LANG_CXX11
inline void DeidentifyTemplate::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DeidentifyTemplate.description)
}
#endif
inline void DeidentifyTemplate::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DeidentifyTemplate.description)
}
inline void DeidentifyTemplate::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DeidentifyTemplate.description)
}
inline ::std::string* DeidentifyTemplate::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyTemplate.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeidentifyTemplate::release_description() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyTemplate.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeidentifyTemplate::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyTemplate.description)
}

// .google.protobuf.Timestamp create_time = 4;
inline bool DeidentifyTemplate::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& DeidentifyTemplate::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& DeidentifyTemplate::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyTemplate.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DeidentifyTemplate::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyTemplate.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeidentifyTemplate::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyTemplate.create_time)
  return create_time_;
}
inline void DeidentifyTemplate::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyTemplate.create_time)
}

// .google.protobuf.Timestamp update_time = 5;
inline bool DeidentifyTemplate::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& DeidentifyTemplate::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& DeidentifyTemplate::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyTemplate.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DeidentifyTemplate::release_update_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyTemplate.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeidentifyTemplate::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyTemplate.update_time)
  return update_time_;
}
inline void DeidentifyTemplate::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyTemplate.update_time)
}

// .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 6;
inline bool DeidentifyTemplate::has_deidentify_config() const {
  return this != internal_default_instance() && deidentify_config_ != NULL;
}
inline void DeidentifyTemplate::clear_deidentify_config() {
  if (GetArenaNoVirtual() == NULL && deidentify_config_ != NULL) {
    delete deidentify_config_;
  }
  deidentify_config_ = NULL;
}
inline const ::google::privacy::dlp::v2::DeidentifyConfig& DeidentifyTemplate::_internal_deidentify_config() const {
  return *deidentify_config_;
}
inline const ::google::privacy::dlp::v2::DeidentifyConfig& DeidentifyTemplate::deidentify_config() const {
  const ::google::privacy::dlp::v2::DeidentifyConfig* p = deidentify_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeidentifyTemplate.deidentify_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::DeidentifyConfig*>(
      &::google::privacy::dlp::v2::_DeidentifyConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::DeidentifyConfig* DeidentifyTemplate::release_deidentify_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeidentifyTemplate.deidentify_config)
  
  ::google::privacy::dlp::v2::DeidentifyConfig* temp = deidentify_config_;
  deidentify_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::DeidentifyConfig* DeidentifyTemplate::mutable_deidentify_config() {
  
  if (deidentify_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::DeidentifyConfig>(GetArenaNoVirtual());
    deidentify_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeidentifyTemplate.deidentify_config)
  return deidentify_config_;
}
inline void DeidentifyTemplate::set_allocated_deidentify_config(::google::privacy::dlp::v2::DeidentifyConfig* deidentify_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deidentify_config_;
  }
  if (deidentify_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deidentify_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deidentify_config, submessage_arena);
    }
    
  } else {
    
  }
  deidentify_config_ = deidentify_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyTemplate.deidentify_config)
}

// -------------------------------------------------------------------

// Error

// .google.rpc.Status details = 1;
inline bool Error::has_details() const {
  return this != internal_default_instance() && details_ != NULL;
}
inline const ::google::rpc::Status& Error::_internal_details() const {
  return *details_;
}
inline const ::google::rpc::Status& Error::details() const {
  const ::google::rpc::Status* p = details_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Error.details)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* Error::release_details() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Error.details)
  
  ::google::rpc::Status* temp = details_;
  details_ = NULL;
  return temp;
}
inline ::google::rpc::Status* Error::mutable_details() {
  
  if (details_ == NULL) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Error.details)
  return details_;
}
inline void Error::set_allocated_details(::google::rpc::Status* details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(details_);
  }
  if (details) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Error.details)
}

// repeated .google.protobuf.Timestamp timestamps = 2;
inline int Error::timestamps_size() const {
  return timestamps_.size();
}
inline ::google::protobuf::Timestamp* Error::mutable_timestamps(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Error.timestamps)
  return timestamps_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
Error::mutable_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.Error.timestamps)
  return &timestamps_;
}
inline const ::google::protobuf::Timestamp& Error::timestamps(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Error.timestamps)
  return timestamps_.Get(index);
}
inline ::google::protobuf::Timestamp* Error::add_timestamps() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.Error.timestamps)
  return timestamps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
Error::timestamps() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.Error.timestamps)
  return timestamps_;
}

// -------------------------------------------------------------------

// JobTrigger_Trigger

// .google.privacy.dlp.v2.Schedule schedule = 1;
inline bool JobTrigger_Trigger::has_schedule() const {
  return trigger_case() == kSchedule;
}
inline void JobTrigger_Trigger::set_has_schedule() {
  _oneof_case_[0] = kSchedule;
}
inline void JobTrigger_Trigger::clear_schedule() {
  if (has_schedule()) {
    delete trigger_.schedule_;
    clear_has_trigger();
  }
}
inline const ::google::privacy::dlp::v2::Schedule& JobTrigger_Trigger::_internal_schedule() const {
  return *trigger_.schedule_;
}
inline ::google::privacy::dlp::v2::Schedule* JobTrigger_Trigger::release_schedule() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.JobTrigger.Trigger.schedule)
  if (has_schedule()) {
    clear_has_trigger();
      ::google::privacy::dlp::v2::Schedule* temp = trigger_.schedule_;
    trigger_.schedule_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::Schedule& JobTrigger_Trigger::schedule() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.JobTrigger.Trigger.schedule)
  return has_schedule()
      ? *trigger_.schedule_
      : *reinterpret_cast< ::google::privacy::dlp::v2::Schedule*>(&::google::privacy::dlp::v2::_Schedule_default_instance_);
}
inline ::google::privacy::dlp::v2::Schedule* JobTrigger_Trigger::mutable_schedule() {
  if (!has_schedule()) {
    clear_trigger();
    set_has_schedule();
    trigger_.schedule_ = CreateMaybeMessage< ::google::privacy::dlp::v2::Schedule >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.JobTrigger.Trigger.schedule)
  return trigger_.schedule_;
}

inline bool JobTrigger_Trigger::has_trigger() const {
  return trigger_case() != TRIGGER_NOT_SET;
}
inline void JobTrigger_Trigger::clear_has_trigger() {
  _oneof_case_[0] = TRIGGER_NOT_SET;
}
inline JobTrigger_Trigger::TriggerCase JobTrigger_Trigger::trigger_case() const {
  return JobTrigger_Trigger::TriggerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// JobTrigger

// string name = 1;
inline void JobTrigger::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobTrigger::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.JobTrigger.name)
  return name_.GetNoArena();
}
inline void JobTrigger::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.JobTrigger.name)
}
#if LANG_CXX11
inline void JobTrigger::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.JobTrigger.name)
}
#endif
inline void JobTrigger::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.JobTrigger.name)
}
inline void JobTrigger::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.JobTrigger.name)
}
inline ::std::string* JobTrigger::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.JobTrigger.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobTrigger::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.JobTrigger.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobTrigger::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.JobTrigger.name)
}

// string display_name = 2;
inline void JobTrigger::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobTrigger::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.JobTrigger.display_name)
  return display_name_.GetNoArena();
}
inline void JobTrigger::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.JobTrigger.display_name)
}
#if LANG_CXX11
inline void JobTrigger::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.JobTrigger.display_name)
}
#endif
inline void JobTrigger::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.JobTrigger.display_name)
}
inline void JobTrigger::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.JobTrigger.display_name)
}
inline ::std::string* JobTrigger::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.JobTrigger.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobTrigger::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.JobTrigger.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobTrigger::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.JobTrigger.display_name)
}

// string description = 3;
inline void JobTrigger::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobTrigger::description() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.JobTrigger.description)
  return description_.GetNoArena();
}
inline void JobTrigger::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.JobTrigger.description)
}
#if LANG_CXX11
inline void JobTrigger::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.JobTrigger.description)
}
#endif
inline void JobTrigger::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.JobTrigger.description)
}
inline void JobTrigger::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.JobTrigger.description)
}
inline ::std::string* JobTrigger::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.JobTrigger.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobTrigger::release_description() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.JobTrigger.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobTrigger::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.JobTrigger.description)
}

// .google.privacy.dlp.v2.InspectJobConfig inspect_job = 4;
inline bool JobTrigger::has_inspect_job() const {
  return job_case() == kInspectJob;
}
inline void JobTrigger::set_has_inspect_job() {
  _oneof_case_[0] = kInspectJob;
}
inline void JobTrigger::clear_inspect_job() {
  if (has_inspect_job()) {
    delete job_.inspect_job_;
    clear_has_job();
  }
}
inline const ::google::privacy::dlp::v2::InspectJobConfig& JobTrigger::_internal_inspect_job() const {
  return *job_.inspect_job_;
}
inline ::google::privacy::dlp::v2::InspectJobConfig* JobTrigger::release_inspect_job() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.JobTrigger.inspect_job)
  if (has_inspect_job()) {
    clear_has_job();
      ::google::privacy::dlp::v2::InspectJobConfig* temp = job_.inspect_job_;
    job_.inspect_job_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::InspectJobConfig& JobTrigger::inspect_job() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.JobTrigger.inspect_job)
  return has_inspect_job()
      ? *job_.inspect_job_
      : *reinterpret_cast< ::google::privacy::dlp::v2::InspectJobConfig*>(&::google::privacy::dlp::v2::_InspectJobConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectJobConfig* JobTrigger::mutable_inspect_job() {
  if (!has_inspect_job()) {
    clear_job();
    set_has_inspect_job();
    job_.inspect_job_ = CreateMaybeMessage< ::google::privacy::dlp::v2::InspectJobConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.JobTrigger.inspect_job)
  return job_.inspect_job_;
}

// repeated .google.privacy.dlp.v2.JobTrigger.Trigger triggers = 5;
inline int JobTrigger::triggers_size() const {
  return triggers_.size();
}
inline void JobTrigger::clear_triggers() {
  triggers_.Clear();
}
inline ::google::privacy::dlp::v2::JobTrigger_Trigger* JobTrigger::mutable_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.JobTrigger.triggers)
  return triggers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::JobTrigger_Trigger >*
JobTrigger::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.JobTrigger.triggers)
  return &triggers_;
}
inline const ::google::privacy::dlp::v2::JobTrigger_Trigger& JobTrigger::triggers(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.JobTrigger.triggers)
  return triggers_.Get(index);
}
inline ::google::privacy::dlp::v2::JobTrigger_Trigger* JobTrigger::add_triggers() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.JobTrigger.triggers)
  return triggers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::JobTrigger_Trigger >&
JobTrigger::triggers() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.JobTrigger.triggers)
  return triggers_;
}

// repeated .google.privacy.dlp.v2.Error errors = 6;
inline int JobTrigger::errors_size() const {
  return errors_.size();
}
inline void JobTrigger::clear_errors() {
  errors_.Clear();
}
inline ::google::privacy::dlp::v2::Error* JobTrigger::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.JobTrigger.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >*
JobTrigger::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.JobTrigger.errors)
  return &errors_;
}
inline const ::google::privacy::dlp::v2::Error& JobTrigger::errors(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.JobTrigger.errors)
  return errors_.Get(index);
}
inline ::google::privacy::dlp::v2::Error* JobTrigger::add_errors() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.JobTrigger.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >&
JobTrigger::errors() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.JobTrigger.errors)
  return errors_;
}

// .google.protobuf.Timestamp create_time = 7;
inline bool JobTrigger::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& JobTrigger::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& JobTrigger::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.JobTrigger.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* JobTrigger::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.JobTrigger.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* JobTrigger::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.JobTrigger.create_time)
  return create_time_;
}
inline void JobTrigger::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.JobTrigger.create_time)
}

// .google.protobuf.Timestamp update_time = 8;
inline bool JobTrigger::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& JobTrigger::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& JobTrigger::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.JobTrigger.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* JobTrigger::release_update_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.JobTrigger.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* JobTrigger::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.JobTrigger.update_time)
  return update_time_;
}
inline void JobTrigger::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.JobTrigger.update_time)
}

// .google.protobuf.Timestamp last_run_time = 9;
inline bool JobTrigger::has_last_run_time() const {
  return this != internal_default_instance() && last_run_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& JobTrigger::_internal_last_run_time() const {
  return *last_run_time_;
}
inline const ::google::protobuf::Timestamp& JobTrigger::last_run_time() const {
  const ::google::protobuf::Timestamp* p = last_run_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.JobTrigger.last_run_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* JobTrigger::release_last_run_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.JobTrigger.last_run_time)
  
  ::google::protobuf::Timestamp* temp = last_run_time_;
  last_run_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* JobTrigger::mutable_last_run_time() {
  
  if (last_run_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    last_run_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.JobTrigger.last_run_time)
  return last_run_time_;
}
inline void JobTrigger::set_allocated_last_run_time(::google::protobuf::Timestamp* last_run_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_run_time_);
  }
  if (last_run_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(last_run_time)->GetArena();
    if (message_arena != submessage_arena) {
      last_run_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_run_time, submessage_arena);
    }
    
  } else {
    
  }
  last_run_time_ = last_run_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.JobTrigger.last_run_time)
}

// .google.privacy.dlp.v2.JobTrigger.Status status = 10;
inline void JobTrigger::clear_status() {
  status_ = 0;
}
inline ::google::privacy::dlp::v2::JobTrigger_Status JobTrigger::status() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.JobTrigger.status)
  return static_cast< ::google::privacy::dlp::v2::JobTrigger_Status >(status_);
}
inline void JobTrigger::set_status(::google::privacy::dlp::v2::JobTrigger_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.JobTrigger.status)
}

inline bool JobTrigger::has_job() const {
  return job_case() != JOB_NOT_SET;
}
inline void JobTrigger::clear_has_job() {
  _oneof_case_[0] = JOB_NOT_SET;
}
inline JobTrigger::JobCase JobTrigger::job_case() const {
  return JobTrigger::JobCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Action_SaveFindings

// .google.privacy.dlp.v2.OutputStorageConfig output_config = 1;
inline bool Action_SaveFindings::has_output_config() const {
  return this != internal_default_instance() && output_config_ != NULL;
}
inline void Action_SaveFindings::clear_output_config() {
  if (GetArenaNoVirtual() == NULL && output_config_ != NULL) {
    delete output_config_;
  }
  output_config_ = NULL;
}
inline const ::google::privacy::dlp::v2::OutputStorageConfig& Action_SaveFindings::_internal_output_config() const {
  return *output_config_;
}
inline const ::google::privacy::dlp::v2::OutputStorageConfig& Action_SaveFindings::output_config() const {
  const ::google::privacy::dlp::v2::OutputStorageConfig* p = output_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Action.SaveFindings.output_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::OutputStorageConfig*>(
      &::google::privacy::dlp::v2::_OutputStorageConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::OutputStorageConfig* Action_SaveFindings::release_output_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Action.SaveFindings.output_config)
  
  ::google::privacy::dlp::v2::OutputStorageConfig* temp = output_config_;
  output_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::OutputStorageConfig* Action_SaveFindings::mutable_output_config() {
  
  if (output_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::OutputStorageConfig>(GetArenaNoVirtual());
    output_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Action.SaveFindings.output_config)
  return output_config_;
}
inline void Action_SaveFindings::set_allocated_output_config(::google::privacy::dlp::v2::OutputStorageConfig* output_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete output_config_;
  }
  if (output_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_config, submessage_arena);
    }
    
  } else {
    
  }
  output_config_ = output_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Action.SaveFindings.output_config)
}

// -------------------------------------------------------------------

// Action_PublishToPubSub

// string topic = 1;
inline void Action_PublishToPubSub::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Action_PublishToPubSub::topic() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Action.PublishToPubSub.topic)
  return topic_.GetNoArena();
}
inline void Action_PublishToPubSub::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.Action.PublishToPubSub.topic)
}
#if LANG_CXX11
inline void Action_PublishToPubSub::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.Action.PublishToPubSub.topic)
}
#endif
inline void Action_PublishToPubSub::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.Action.PublishToPubSub.topic)
}
inline void Action_PublishToPubSub::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.Action.PublishToPubSub.topic)
}
inline ::std::string* Action_PublishToPubSub::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Action.PublishToPubSub.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action_PublishToPubSub::release_topic() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Action.PublishToPubSub.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action_PublishToPubSub::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Action.PublishToPubSub.topic)
}

// -------------------------------------------------------------------

// Action_PublishSummaryToCscc

// -------------------------------------------------------------------

// Action

// .google.privacy.dlp.v2.Action.SaveFindings save_findings = 1;
inline bool Action::has_save_findings() const {
  return action_case() == kSaveFindings;
}
inline void Action::set_has_save_findings() {
  _oneof_case_[0] = kSaveFindings;
}
inline void Action::clear_save_findings() {
  if (has_save_findings()) {
    delete action_.save_findings_;
    clear_has_action();
  }
}
inline const ::google::privacy::dlp::v2::Action_SaveFindings& Action::_internal_save_findings() const {
  return *action_.save_findings_;
}
inline ::google::privacy::dlp::v2::Action_SaveFindings* Action::release_save_findings() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Action.save_findings)
  if (has_save_findings()) {
    clear_has_action();
      ::google::privacy::dlp::v2::Action_SaveFindings* temp = action_.save_findings_;
    action_.save_findings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::Action_SaveFindings& Action::save_findings() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Action.save_findings)
  return has_save_findings()
      ? *action_.save_findings_
      : *reinterpret_cast< ::google::privacy::dlp::v2::Action_SaveFindings*>(&::google::privacy::dlp::v2::_Action_SaveFindings_default_instance_);
}
inline ::google::privacy::dlp::v2::Action_SaveFindings* Action::mutable_save_findings() {
  if (!has_save_findings()) {
    clear_action();
    set_has_save_findings();
    action_.save_findings_ = CreateMaybeMessage< ::google::privacy::dlp::v2::Action_SaveFindings >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Action.save_findings)
  return action_.save_findings_;
}

// .google.privacy.dlp.v2.Action.PublishToPubSub pub_sub = 2;
inline bool Action::has_pub_sub() const {
  return action_case() == kPubSub;
}
inline void Action::set_has_pub_sub() {
  _oneof_case_[0] = kPubSub;
}
inline void Action::clear_pub_sub() {
  if (has_pub_sub()) {
    delete action_.pub_sub_;
    clear_has_action();
  }
}
inline const ::google::privacy::dlp::v2::Action_PublishToPubSub& Action::_internal_pub_sub() const {
  return *action_.pub_sub_;
}
inline ::google::privacy::dlp::v2::Action_PublishToPubSub* Action::release_pub_sub() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Action.pub_sub)
  if (has_pub_sub()) {
    clear_has_action();
      ::google::privacy::dlp::v2::Action_PublishToPubSub* temp = action_.pub_sub_;
    action_.pub_sub_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::Action_PublishToPubSub& Action::pub_sub() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Action.pub_sub)
  return has_pub_sub()
      ? *action_.pub_sub_
      : *reinterpret_cast< ::google::privacy::dlp::v2::Action_PublishToPubSub*>(&::google::privacy::dlp::v2::_Action_PublishToPubSub_default_instance_);
}
inline ::google::privacy::dlp::v2::Action_PublishToPubSub* Action::mutable_pub_sub() {
  if (!has_pub_sub()) {
    clear_action();
    set_has_pub_sub();
    action_.pub_sub_ = CreateMaybeMessage< ::google::privacy::dlp::v2::Action_PublishToPubSub >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Action.pub_sub)
  return action_.pub_sub_;
}

// .google.privacy.dlp.v2.Action.PublishSummaryToCscc publish_summary_to_cscc = 3;
inline bool Action::has_publish_summary_to_cscc() const {
  return action_case() == kPublishSummaryToCscc;
}
inline void Action::set_has_publish_summary_to_cscc() {
  _oneof_case_[0] = kPublishSummaryToCscc;
}
inline void Action::clear_publish_summary_to_cscc() {
  if (has_publish_summary_to_cscc()) {
    delete action_.publish_summary_to_cscc_;
    clear_has_action();
  }
}
inline const ::google::privacy::dlp::v2::Action_PublishSummaryToCscc& Action::_internal_publish_summary_to_cscc() const {
  return *action_.publish_summary_to_cscc_;
}
inline ::google::privacy::dlp::v2::Action_PublishSummaryToCscc* Action::release_publish_summary_to_cscc() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.Action.publish_summary_to_cscc)
  if (has_publish_summary_to_cscc()) {
    clear_has_action();
      ::google::privacy::dlp::v2::Action_PublishSummaryToCscc* temp = action_.publish_summary_to_cscc_;
    action_.publish_summary_to_cscc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::Action_PublishSummaryToCscc& Action::publish_summary_to_cscc() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.Action.publish_summary_to_cscc)
  return has_publish_summary_to_cscc()
      ? *action_.publish_summary_to_cscc_
      : *reinterpret_cast< ::google::privacy::dlp::v2::Action_PublishSummaryToCscc*>(&::google::privacy::dlp::v2::_Action_PublishSummaryToCscc_default_instance_);
}
inline ::google::privacy::dlp::v2::Action_PublishSummaryToCscc* Action::mutable_publish_summary_to_cscc() {
  if (!has_publish_summary_to_cscc()) {
    clear_action();
    set_has_publish_summary_to_cscc();
    action_.publish_summary_to_cscc_ = CreateMaybeMessage< ::google::privacy::dlp::v2::Action_PublishSummaryToCscc >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.Action.publish_summary_to_cscc)
  return action_.publish_summary_to_cscc_;
}

inline bool Action::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void Action::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline Action::ActionCase Action::action_case() const {
  return Action::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateInspectTemplateRequest

// string parent = 1;
inline void CreateInspectTemplateRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateInspectTemplateRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateInspectTemplateRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateInspectTemplateRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CreateInspectTemplateRequest.parent)
}
#if LANG_CXX11
inline void CreateInspectTemplateRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CreateInspectTemplateRequest.parent)
}
#endif
inline void CreateInspectTemplateRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CreateInspectTemplateRequest.parent)
}
inline void CreateInspectTemplateRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CreateInspectTemplateRequest.parent)
}
inline ::std::string* CreateInspectTemplateRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateInspectTemplateRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateInspectTemplateRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateInspectTemplateRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateInspectTemplateRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateInspectTemplateRequest.parent)
}

// .google.privacy.dlp.v2.InspectTemplate inspect_template = 2;
inline bool CreateInspectTemplateRequest::has_inspect_template() const {
  return this != internal_default_instance() && inspect_template_ != NULL;
}
inline void CreateInspectTemplateRequest::clear_inspect_template() {
  if (GetArenaNoVirtual() == NULL && inspect_template_ != NULL) {
    delete inspect_template_;
  }
  inspect_template_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectTemplate& CreateInspectTemplateRequest::_internal_inspect_template() const {
  return *inspect_template_;
}
inline const ::google::privacy::dlp::v2::InspectTemplate& CreateInspectTemplateRequest::inspect_template() const {
  const ::google::privacy::dlp::v2::InspectTemplate* p = inspect_template_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateInspectTemplateRequest.inspect_template)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectTemplate*>(
      &::google::privacy::dlp::v2::_InspectTemplate_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectTemplate* CreateInspectTemplateRequest::release_inspect_template() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateInspectTemplateRequest.inspect_template)
  
  ::google::privacy::dlp::v2::InspectTemplate* temp = inspect_template_;
  inspect_template_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectTemplate* CreateInspectTemplateRequest::mutable_inspect_template() {
  
  if (inspect_template_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectTemplate>(GetArenaNoVirtual());
    inspect_template_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateInspectTemplateRequest.inspect_template)
  return inspect_template_;
}
inline void CreateInspectTemplateRequest::set_allocated_inspect_template(::google::privacy::dlp::v2::InspectTemplate* inspect_template) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_template_;
  }
  if (inspect_template) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_template = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_template, submessage_arena);
    }
    
  } else {
    
  }
  inspect_template_ = inspect_template;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateInspectTemplateRequest.inspect_template)
}

// string template_id = 3;
inline void CreateInspectTemplateRequest::clear_template_id() {
  template_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateInspectTemplateRequest::template_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id)
  return template_id_.GetNoArena();
}
inline void CreateInspectTemplateRequest::set_template_id(const ::std::string& value) {
  
  template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id)
}
#if LANG_CXX11
inline void CreateInspectTemplateRequest::set_template_id(::std::string&& value) {
  
  template_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id)
}
#endif
inline void CreateInspectTemplateRequest::set_template_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id)
}
inline void CreateInspectTemplateRequest::set_template_id(const char* value, size_t size) {
  
  template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id)
}
inline ::std::string* CreateInspectTemplateRequest::mutable_template_id() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id)
  return template_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateInspectTemplateRequest::release_template_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id)
  
  return template_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateInspectTemplateRequest::set_allocated_template_id(::std::string* template_id) {
  if (template_id != NULL) {
    
  } else {
    
  }
  template_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), template_id);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id)
}

// -------------------------------------------------------------------

// UpdateInspectTemplateRequest

// string name = 1;
inline void UpdateInspectTemplateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateInspectTemplateRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateInspectTemplateRequest.name)
  return name_.GetNoArena();
}
inline void UpdateInspectTemplateRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.UpdateInspectTemplateRequest.name)
}
#if LANG_CXX11
inline void UpdateInspectTemplateRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.UpdateInspectTemplateRequest.name)
}
#endif
inline void UpdateInspectTemplateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.UpdateInspectTemplateRequest.name)
}
inline void UpdateInspectTemplateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.UpdateInspectTemplateRequest.name)
}
inline ::std::string* UpdateInspectTemplateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateInspectTemplateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateInspectTemplateRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateInspectTemplateRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateInspectTemplateRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateInspectTemplateRequest.name)
}

// .google.privacy.dlp.v2.InspectTemplate inspect_template = 2;
inline bool UpdateInspectTemplateRequest::has_inspect_template() const {
  return this != internal_default_instance() && inspect_template_ != NULL;
}
inline void UpdateInspectTemplateRequest::clear_inspect_template() {
  if (GetArenaNoVirtual() == NULL && inspect_template_ != NULL) {
    delete inspect_template_;
  }
  inspect_template_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectTemplate& UpdateInspectTemplateRequest::_internal_inspect_template() const {
  return *inspect_template_;
}
inline const ::google::privacy::dlp::v2::InspectTemplate& UpdateInspectTemplateRequest::inspect_template() const {
  const ::google::privacy::dlp::v2::InspectTemplate* p = inspect_template_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateInspectTemplateRequest.inspect_template)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectTemplate*>(
      &::google::privacy::dlp::v2::_InspectTemplate_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectTemplate* UpdateInspectTemplateRequest::release_inspect_template() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateInspectTemplateRequest.inspect_template)
  
  ::google::privacy::dlp::v2::InspectTemplate* temp = inspect_template_;
  inspect_template_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectTemplate* UpdateInspectTemplateRequest::mutable_inspect_template() {
  
  if (inspect_template_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectTemplate>(GetArenaNoVirtual());
    inspect_template_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateInspectTemplateRequest.inspect_template)
  return inspect_template_;
}
inline void UpdateInspectTemplateRequest::set_allocated_inspect_template(::google::privacy::dlp::v2::InspectTemplate* inspect_template) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_template_;
  }
  if (inspect_template) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_template = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_template, submessage_arena);
    }
    
  } else {
    
  }
  inspect_template_ = inspect_template;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateInspectTemplateRequest.inspect_template)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateInspectTemplateRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateInspectTemplateRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateInspectTemplateRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateInspectTemplateRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateInspectTemplateRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateInspectTemplateRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateInspectTemplateRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateInspectTemplateRequest.update_mask)
  return update_mask_;
}
inline void UpdateInspectTemplateRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateInspectTemplateRequest.update_mask)
}

// -------------------------------------------------------------------

// GetInspectTemplateRequest

// string name = 1;
inline void GetInspectTemplateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInspectTemplateRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.GetInspectTemplateRequest.name)
  return name_.GetNoArena();
}
inline void GetInspectTemplateRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.GetInspectTemplateRequest.name)
}
#if LANG_CXX11
inline void GetInspectTemplateRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.GetInspectTemplateRequest.name)
}
#endif
inline void GetInspectTemplateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.GetInspectTemplateRequest.name)
}
inline void GetInspectTemplateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.GetInspectTemplateRequest.name)
}
inline ::std::string* GetInspectTemplateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.GetInspectTemplateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInspectTemplateRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.GetInspectTemplateRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInspectTemplateRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.GetInspectTemplateRequest.name)
}

// -------------------------------------------------------------------

// ListInspectTemplatesRequest

// string parent = 1;
inline void ListInspectTemplatesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInspectTemplatesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListInspectTemplatesRequest.parent)
  return parent_.GetNoArena();
}
inline void ListInspectTemplatesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListInspectTemplatesRequest.parent)
}
#if LANG_CXX11
inline void ListInspectTemplatesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListInspectTemplatesRequest.parent)
}
#endif
inline void ListInspectTemplatesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListInspectTemplatesRequest.parent)
}
inline void ListInspectTemplatesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListInspectTemplatesRequest.parent)
}
inline ::std::string* ListInspectTemplatesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListInspectTemplatesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInspectTemplatesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListInspectTemplatesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInspectTemplatesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListInspectTemplatesRequest.parent)
}

// string page_token = 2;
inline void ListInspectTemplatesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInspectTemplatesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListInspectTemplatesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token)
}
#if LANG_CXX11
inline void ListInspectTemplatesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token)
}
#endif
inline void ListInspectTemplatesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token)
}
inline void ListInspectTemplatesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token)
}
inline ::std::string* ListInspectTemplatesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInspectTemplatesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInspectTemplatesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token)
}

// int32 page_size = 3;
inline void ListInspectTemplatesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListInspectTemplatesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListInspectTemplatesRequest.page_size)
  return page_size_;
}
inline void ListInspectTemplatesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListInspectTemplatesRequest.page_size)
}

// -------------------------------------------------------------------

// ListInspectTemplatesResponse

// repeated .google.privacy.dlp.v2.InspectTemplate inspect_templates = 1;
inline int ListInspectTemplatesResponse::inspect_templates_size() const {
  return inspect_templates_.size();
}
inline void ListInspectTemplatesResponse::clear_inspect_templates() {
  inspect_templates_.Clear();
}
inline ::google::privacy::dlp::v2::InspectTemplate* ListInspectTemplatesResponse::mutable_inspect_templates(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListInspectTemplatesResponse.inspect_templates)
  return inspect_templates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InspectTemplate >*
ListInspectTemplatesResponse::mutable_inspect_templates() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.ListInspectTemplatesResponse.inspect_templates)
  return &inspect_templates_;
}
inline const ::google::privacy::dlp::v2::InspectTemplate& ListInspectTemplatesResponse::inspect_templates(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListInspectTemplatesResponse.inspect_templates)
  return inspect_templates_.Get(index);
}
inline ::google::privacy::dlp::v2::InspectTemplate* ListInspectTemplatesResponse::add_inspect_templates() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.ListInspectTemplatesResponse.inspect_templates)
  return inspect_templates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::InspectTemplate >&
ListInspectTemplatesResponse::inspect_templates() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.ListInspectTemplatesResponse.inspect_templates)
  return inspect_templates_;
}

// string next_page_token = 2;
inline void ListInspectTemplatesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInspectTemplatesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListInspectTemplatesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListInspectTemplatesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token)
}
#endif
inline void ListInspectTemplatesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token)
}
inline void ListInspectTemplatesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token)
}
inline ::std::string* ListInspectTemplatesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInspectTemplatesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInspectTemplatesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteInspectTemplateRequest

// string name = 1;
inline void DeleteInspectTemplateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteInspectTemplateRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeleteInspectTemplateRequest.name)
  return name_.GetNoArena();
}
inline void DeleteInspectTemplateRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DeleteInspectTemplateRequest.name)
}
#if LANG_CXX11
inline void DeleteInspectTemplateRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DeleteInspectTemplateRequest.name)
}
#endif
inline void DeleteInspectTemplateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DeleteInspectTemplateRequest.name)
}
inline void DeleteInspectTemplateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DeleteInspectTemplateRequest.name)
}
inline ::std::string* DeleteInspectTemplateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeleteInspectTemplateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteInspectTemplateRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeleteInspectTemplateRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteInspectTemplateRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeleteInspectTemplateRequest.name)
}

// -------------------------------------------------------------------

// CreateJobTriggerRequest

// string parent = 1;
inline void CreateJobTriggerRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateJobTriggerRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateJobTriggerRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateJobTriggerRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CreateJobTriggerRequest.parent)
}
#if LANG_CXX11
inline void CreateJobTriggerRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CreateJobTriggerRequest.parent)
}
#endif
inline void CreateJobTriggerRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CreateJobTriggerRequest.parent)
}
inline void CreateJobTriggerRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CreateJobTriggerRequest.parent)
}
inline ::std::string* CreateJobTriggerRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateJobTriggerRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateJobTriggerRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateJobTriggerRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateJobTriggerRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateJobTriggerRequest.parent)
}

// .google.privacy.dlp.v2.JobTrigger job_trigger = 2;
inline bool CreateJobTriggerRequest::has_job_trigger() const {
  return this != internal_default_instance() && job_trigger_ != NULL;
}
inline void CreateJobTriggerRequest::clear_job_trigger() {
  if (GetArenaNoVirtual() == NULL && job_trigger_ != NULL) {
    delete job_trigger_;
  }
  job_trigger_ = NULL;
}
inline const ::google::privacy::dlp::v2::JobTrigger& CreateJobTriggerRequest::_internal_job_trigger() const {
  return *job_trigger_;
}
inline const ::google::privacy::dlp::v2::JobTrigger& CreateJobTriggerRequest::job_trigger() const {
  const ::google::privacy::dlp::v2::JobTrigger* p = job_trigger_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateJobTriggerRequest.job_trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::JobTrigger*>(
      &::google::privacy::dlp::v2::_JobTrigger_default_instance_);
}
inline ::google::privacy::dlp::v2::JobTrigger* CreateJobTriggerRequest::release_job_trigger() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateJobTriggerRequest.job_trigger)
  
  ::google::privacy::dlp::v2::JobTrigger* temp = job_trigger_;
  job_trigger_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::JobTrigger* CreateJobTriggerRequest::mutable_job_trigger() {
  
  if (job_trigger_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::JobTrigger>(GetArenaNoVirtual());
    job_trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateJobTriggerRequest.job_trigger)
  return job_trigger_;
}
inline void CreateJobTriggerRequest::set_allocated_job_trigger(::google::privacy::dlp::v2::JobTrigger* job_trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_trigger_;
  }
  if (job_trigger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job_trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job_trigger, submessage_arena);
    }
    
  } else {
    
  }
  job_trigger_ = job_trigger;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateJobTriggerRequest.job_trigger)
}

// string trigger_id = 3;
inline void CreateJobTriggerRequest::clear_trigger_id() {
  trigger_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateJobTriggerRequest::trigger_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id)
  return trigger_id_.GetNoArena();
}
inline void CreateJobTriggerRequest::set_trigger_id(const ::std::string& value) {
  
  trigger_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id)
}
#if LANG_CXX11
inline void CreateJobTriggerRequest::set_trigger_id(::std::string&& value) {
  
  trigger_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id)
}
#endif
inline void CreateJobTriggerRequest::set_trigger_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trigger_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id)
}
inline void CreateJobTriggerRequest::set_trigger_id(const char* value, size_t size) {
  
  trigger_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id)
}
inline ::std::string* CreateJobTriggerRequest::mutable_trigger_id() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id)
  return trigger_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateJobTriggerRequest::release_trigger_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id)
  
  return trigger_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateJobTriggerRequest::set_allocated_trigger_id(::std::string* trigger_id) {
  if (trigger_id != NULL) {
    
  } else {
    
  }
  trigger_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_id);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id)
}

// -------------------------------------------------------------------

// UpdateJobTriggerRequest

// string name = 1;
inline void UpdateJobTriggerRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateJobTriggerRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateJobTriggerRequest.name)
  return name_.GetNoArena();
}
inline void UpdateJobTriggerRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.UpdateJobTriggerRequest.name)
}
#if LANG_CXX11
inline void UpdateJobTriggerRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.UpdateJobTriggerRequest.name)
}
#endif
inline void UpdateJobTriggerRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.UpdateJobTriggerRequest.name)
}
inline void UpdateJobTriggerRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.UpdateJobTriggerRequest.name)
}
inline ::std::string* UpdateJobTriggerRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateJobTriggerRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateJobTriggerRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateJobTriggerRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateJobTriggerRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateJobTriggerRequest.name)
}

// .google.privacy.dlp.v2.JobTrigger job_trigger = 2;
inline bool UpdateJobTriggerRequest::has_job_trigger() const {
  return this != internal_default_instance() && job_trigger_ != NULL;
}
inline void UpdateJobTriggerRequest::clear_job_trigger() {
  if (GetArenaNoVirtual() == NULL && job_trigger_ != NULL) {
    delete job_trigger_;
  }
  job_trigger_ = NULL;
}
inline const ::google::privacy::dlp::v2::JobTrigger& UpdateJobTriggerRequest::_internal_job_trigger() const {
  return *job_trigger_;
}
inline const ::google::privacy::dlp::v2::JobTrigger& UpdateJobTriggerRequest::job_trigger() const {
  const ::google::privacy::dlp::v2::JobTrigger* p = job_trigger_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateJobTriggerRequest.job_trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::JobTrigger*>(
      &::google::privacy::dlp::v2::_JobTrigger_default_instance_);
}
inline ::google::privacy::dlp::v2::JobTrigger* UpdateJobTriggerRequest::release_job_trigger() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateJobTriggerRequest.job_trigger)
  
  ::google::privacy::dlp::v2::JobTrigger* temp = job_trigger_;
  job_trigger_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::JobTrigger* UpdateJobTriggerRequest::mutable_job_trigger() {
  
  if (job_trigger_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::JobTrigger>(GetArenaNoVirtual());
    job_trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateJobTriggerRequest.job_trigger)
  return job_trigger_;
}
inline void UpdateJobTriggerRequest::set_allocated_job_trigger(::google::privacy::dlp::v2::JobTrigger* job_trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_trigger_;
  }
  if (job_trigger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job_trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job_trigger, submessage_arena);
    }
    
  } else {
    
  }
  job_trigger_ = job_trigger;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateJobTriggerRequest.job_trigger)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateJobTriggerRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateJobTriggerRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateJobTriggerRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateJobTriggerRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateJobTriggerRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateJobTriggerRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateJobTriggerRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateJobTriggerRequest.update_mask)
  return update_mask_;
}
inline void UpdateJobTriggerRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateJobTriggerRequest.update_mask)
}

// -------------------------------------------------------------------

// GetJobTriggerRequest

// string name = 1;
inline void GetJobTriggerRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetJobTriggerRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.GetJobTriggerRequest.name)
  return name_.GetNoArena();
}
inline void GetJobTriggerRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.GetJobTriggerRequest.name)
}
#if LANG_CXX11
inline void GetJobTriggerRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.GetJobTriggerRequest.name)
}
#endif
inline void GetJobTriggerRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.GetJobTriggerRequest.name)
}
inline void GetJobTriggerRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.GetJobTriggerRequest.name)
}
inline ::std::string* GetJobTriggerRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.GetJobTriggerRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetJobTriggerRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.GetJobTriggerRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJobTriggerRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.GetJobTriggerRequest.name)
}

// -------------------------------------------------------------------

// CreateDlpJobRequest

// string parent = 1;
inline void CreateDlpJobRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDlpJobRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateDlpJobRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateDlpJobRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CreateDlpJobRequest.parent)
}
#if LANG_CXX11
inline void CreateDlpJobRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CreateDlpJobRequest.parent)
}
#endif
inline void CreateDlpJobRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CreateDlpJobRequest.parent)
}
inline void CreateDlpJobRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CreateDlpJobRequest.parent)
}
inline ::std::string* CreateDlpJobRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateDlpJobRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDlpJobRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateDlpJobRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDlpJobRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateDlpJobRequest.parent)
}

// .google.privacy.dlp.v2.InspectJobConfig inspect_job = 2;
inline bool CreateDlpJobRequest::has_inspect_job() const {
  return job_case() == kInspectJob;
}
inline void CreateDlpJobRequest::set_has_inspect_job() {
  _oneof_case_[0] = kInspectJob;
}
inline void CreateDlpJobRequest::clear_inspect_job() {
  if (has_inspect_job()) {
    delete job_.inspect_job_;
    clear_has_job();
  }
}
inline const ::google::privacy::dlp::v2::InspectJobConfig& CreateDlpJobRequest::_internal_inspect_job() const {
  return *job_.inspect_job_;
}
inline ::google::privacy::dlp::v2::InspectJobConfig* CreateDlpJobRequest::release_inspect_job() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateDlpJobRequest.inspect_job)
  if (has_inspect_job()) {
    clear_has_job();
      ::google::privacy::dlp::v2::InspectJobConfig* temp = job_.inspect_job_;
    job_.inspect_job_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::InspectJobConfig& CreateDlpJobRequest::inspect_job() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateDlpJobRequest.inspect_job)
  return has_inspect_job()
      ? *job_.inspect_job_
      : *reinterpret_cast< ::google::privacy::dlp::v2::InspectJobConfig*>(&::google::privacy::dlp::v2::_InspectJobConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectJobConfig* CreateDlpJobRequest::mutable_inspect_job() {
  if (!has_inspect_job()) {
    clear_job();
    set_has_inspect_job();
    job_.inspect_job_ = CreateMaybeMessage< ::google::privacy::dlp::v2::InspectJobConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateDlpJobRequest.inspect_job)
  return job_.inspect_job_;
}

// .google.privacy.dlp.v2.RiskAnalysisJobConfig risk_job = 3;
inline bool CreateDlpJobRequest::has_risk_job() const {
  return job_case() == kRiskJob;
}
inline void CreateDlpJobRequest::set_has_risk_job() {
  _oneof_case_[0] = kRiskJob;
}
inline void CreateDlpJobRequest::clear_risk_job() {
  if (has_risk_job()) {
    delete job_.risk_job_;
    clear_has_job();
  }
}
inline const ::google::privacy::dlp::v2::RiskAnalysisJobConfig& CreateDlpJobRequest::_internal_risk_job() const {
  return *job_.risk_job_;
}
inline ::google::privacy::dlp::v2::RiskAnalysisJobConfig* CreateDlpJobRequest::release_risk_job() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateDlpJobRequest.risk_job)
  if (has_risk_job()) {
    clear_has_job();
      ::google::privacy::dlp::v2::RiskAnalysisJobConfig* temp = job_.risk_job_;
    job_.risk_job_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::RiskAnalysisJobConfig& CreateDlpJobRequest::risk_job() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateDlpJobRequest.risk_job)
  return has_risk_job()
      ? *job_.risk_job_
      : *reinterpret_cast< ::google::privacy::dlp::v2::RiskAnalysisJobConfig*>(&::google::privacy::dlp::v2::_RiskAnalysisJobConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::RiskAnalysisJobConfig* CreateDlpJobRequest::mutable_risk_job() {
  if (!has_risk_job()) {
    clear_job();
    set_has_risk_job();
    job_.risk_job_ = CreateMaybeMessage< ::google::privacy::dlp::v2::RiskAnalysisJobConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateDlpJobRequest.risk_job)
  return job_.risk_job_;
}

// string job_id = 4;
inline void CreateDlpJobRequest::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDlpJobRequest::job_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateDlpJobRequest.job_id)
  return job_id_.GetNoArena();
}
inline void CreateDlpJobRequest::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CreateDlpJobRequest.job_id)
}
#if LANG_CXX11
inline void CreateDlpJobRequest::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CreateDlpJobRequest.job_id)
}
#endif
inline void CreateDlpJobRequest::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CreateDlpJobRequest.job_id)
}
inline void CreateDlpJobRequest::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CreateDlpJobRequest.job_id)
}
inline ::std::string* CreateDlpJobRequest::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateDlpJobRequest.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDlpJobRequest::release_job_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateDlpJobRequest.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDlpJobRequest::set_allocated_job_id(::std::string* job_id) {
  if (job_id != NULL) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateDlpJobRequest.job_id)
}

inline bool CreateDlpJobRequest::has_job() const {
  return job_case() != JOB_NOT_SET;
}
inline void CreateDlpJobRequest::clear_has_job() {
  _oneof_case_[0] = JOB_NOT_SET;
}
inline CreateDlpJobRequest::JobCase CreateDlpJobRequest::job_case() const {
  return CreateDlpJobRequest::JobCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListJobTriggersRequest

// string parent = 1;
inline void ListJobTriggersRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListJobTriggersRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListJobTriggersRequest.parent)
  return parent_.GetNoArena();
}
inline void ListJobTriggersRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListJobTriggersRequest.parent)
}
#if LANG_CXX11
inline void ListJobTriggersRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListJobTriggersRequest.parent)
}
#endif
inline void ListJobTriggersRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListJobTriggersRequest.parent)
}
inline void ListJobTriggersRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListJobTriggersRequest.parent)
}
inline ::std::string* ListJobTriggersRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListJobTriggersRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListJobTriggersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListJobTriggersRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListJobTriggersRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListJobTriggersRequest.parent)
}

// string page_token = 2;
inline void ListJobTriggersRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListJobTriggersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListJobTriggersRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListJobTriggersRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListJobTriggersRequest.page_token)
}
#if LANG_CXX11
inline void ListJobTriggersRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListJobTriggersRequest.page_token)
}
#endif
inline void ListJobTriggersRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListJobTriggersRequest.page_token)
}
inline void ListJobTriggersRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListJobTriggersRequest.page_token)
}
inline ::std::string* ListJobTriggersRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListJobTriggersRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListJobTriggersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListJobTriggersRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListJobTriggersRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListJobTriggersRequest.page_token)
}

// int32 page_size = 3;
inline void ListJobTriggersRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListJobTriggersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListJobTriggersRequest.page_size)
  return page_size_;
}
inline void ListJobTriggersRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListJobTriggersRequest.page_size)
}

// string order_by = 4;
inline void ListJobTriggersRequest::clear_order_by() {
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListJobTriggersRequest::order_by() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListJobTriggersRequest.order_by)
  return order_by_.GetNoArena();
}
inline void ListJobTriggersRequest::set_order_by(const ::std::string& value) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListJobTriggersRequest.order_by)
}
#if LANG_CXX11
inline void ListJobTriggersRequest::set_order_by(::std::string&& value) {
  
  order_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListJobTriggersRequest.order_by)
}
#endif
inline void ListJobTriggersRequest::set_order_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListJobTriggersRequest.order_by)
}
inline void ListJobTriggersRequest::set_order_by(const char* value, size_t size) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListJobTriggersRequest.order_by)
}
inline ::std::string* ListJobTriggersRequest::mutable_order_by() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListJobTriggersRequest.order_by)
  return order_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListJobTriggersRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListJobTriggersRequest.order_by)
  
  return order_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListJobTriggersRequest::set_allocated_order_by(::std::string* order_by) {
  if (order_by != NULL) {
    
  } else {
    
  }
  order_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_by);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListJobTriggersRequest.order_by)
}

// -------------------------------------------------------------------

// ListJobTriggersResponse

// repeated .google.privacy.dlp.v2.JobTrigger job_triggers = 1;
inline int ListJobTriggersResponse::job_triggers_size() const {
  return job_triggers_.size();
}
inline void ListJobTriggersResponse::clear_job_triggers() {
  job_triggers_.Clear();
}
inline ::google::privacy::dlp::v2::JobTrigger* ListJobTriggersResponse::mutable_job_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListJobTriggersResponse.job_triggers)
  return job_triggers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::JobTrigger >*
ListJobTriggersResponse::mutable_job_triggers() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.ListJobTriggersResponse.job_triggers)
  return &job_triggers_;
}
inline const ::google::privacy::dlp::v2::JobTrigger& ListJobTriggersResponse::job_triggers(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListJobTriggersResponse.job_triggers)
  return job_triggers_.Get(index);
}
inline ::google::privacy::dlp::v2::JobTrigger* ListJobTriggersResponse::add_job_triggers() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.ListJobTriggersResponse.job_triggers)
  return job_triggers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::JobTrigger >&
ListJobTriggersResponse::job_triggers() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.ListJobTriggersResponse.job_triggers)
  return job_triggers_;
}

// string next_page_token = 2;
inline void ListJobTriggersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListJobTriggersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListJobTriggersResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token)
}
#if LANG_CXX11
inline void ListJobTriggersResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token)
}
#endif
inline void ListJobTriggersResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token)
}
inline void ListJobTriggersResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token)
}
inline ::std::string* ListJobTriggersResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListJobTriggersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListJobTriggersResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteJobTriggerRequest

// string name = 1;
inline void DeleteJobTriggerRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteJobTriggerRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeleteJobTriggerRequest.name)
  return name_.GetNoArena();
}
inline void DeleteJobTriggerRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DeleteJobTriggerRequest.name)
}
#if LANG_CXX11
inline void DeleteJobTriggerRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DeleteJobTriggerRequest.name)
}
#endif
inline void DeleteJobTriggerRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DeleteJobTriggerRequest.name)
}
inline void DeleteJobTriggerRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DeleteJobTriggerRequest.name)
}
inline ::std::string* DeleteJobTriggerRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeleteJobTriggerRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteJobTriggerRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeleteJobTriggerRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteJobTriggerRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeleteJobTriggerRequest.name)
}

// -------------------------------------------------------------------

// InspectJobConfig

// .google.privacy.dlp.v2.StorageConfig storage_config = 1;
inline bool InspectJobConfig::has_storage_config() const {
  return this != internal_default_instance() && storage_config_ != NULL;
}
inline const ::google::privacy::dlp::v2::StorageConfig& InspectJobConfig::_internal_storage_config() const {
  return *storage_config_;
}
inline const ::google::privacy::dlp::v2::StorageConfig& InspectJobConfig::storage_config() const {
  const ::google::privacy::dlp::v2::StorageConfig* p = storage_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectJobConfig.storage_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::StorageConfig*>(
      &::google::privacy::dlp::v2::_StorageConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::StorageConfig* InspectJobConfig::release_storage_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectJobConfig.storage_config)
  
  ::google::privacy::dlp::v2::StorageConfig* temp = storage_config_;
  storage_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::StorageConfig* InspectJobConfig::mutable_storage_config() {
  
  if (storage_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::StorageConfig>(GetArenaNoVirtual());
    storage_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectJobConfig.storage_config)
  return storage_config_;
}
inline void InspectJobConfig::set_allocated_storage_config(::google::privacy::dlp::v2::StorageConfig* storage_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(storage_config_);
  }
  if (storage_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storage_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storage_config, submessage_arena);
    }
    
  } else {
    
  }
  storage_config_ = storage_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectJobConfig.storage_config)
}

// .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
inline bool InspectJobConfig::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void InspectJobConfig::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2::InspectConfig& InspectJobConfig::_internal_inspect_config() const {
  return *inspect_config_;
}
inline const ::google::privacy::dlp::v2::InspectConfig& InspectJobConfig::inspect_config() const {
  const ::google::privacy::dlp::v2::InspectConfig* p = inspect_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectJobConfig.inspect_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::InspectConfig*>(
      &::google::privacy::dlp::v2::_InspectConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectConfig* InspectJobConfig::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectJobConfig.inspect_config)
  
  ::google::privacy::dlp::v2::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::InspectConfig* InspectJobConfig::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::InspectConfig>(GetArenaNoVirtual());
    inspect_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectJobConfig.inspect_config)
  return inspect_config_;
}
inline void InspectJobConfig::set_allocated_inspect_config(::google::privacy::dlp::v2::InspectConfig* inspect_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_config_;
  }
  if (inspect_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_config, submessage_arena);
    }
    
  } else {
    
  }
  inspect_config_ = inspect_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectJobConfig.inspect_config)
}

// string inspect_template_name = 3;
inline void InspectJobConfig::clear_inspect_template_name() {
  inspect_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InspectJobConfig::inspect_template_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectJobConfig.inspect_template_name)
  return inspect_template_name_.GetNoArena();
}
inline void InspectJobConfig::set_inspect_template_name(const ::std::string& value) {
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.InspectJobConfig.inspect_template_name)
}
#if LANG_CXX11
inline void InspectJobConfig::set_inspect_template_name(::std::string&& value) {
  
  inspect_template_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.InspectJobConfig.inspect_template_name)
}
#endif
inline void InspectJobConfig::set_inspect_template_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.InspectJobConfig.inspect_template_name)
}
inline void InspectJobConfig::set_inspect_template_name(const char* value, size_t size) {
  
  inspect_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.InspectJobConfig.inspect_template_name)
}
inline ::std::string* InspectJobConfig::mutable_inspect_template_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectJobConfig.inspect_template_name)
  return inspect_template_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InspectJobConfig::release_inspect_template_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.InspectJobConfig.inspect_template_name)
  
  return inspect_template_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InspectJobConfig::set_allocated_inspect_template_name(::std::string* inspect_template_name) {
  if (inspect_template_name != NULL) {
    
  } else {
    
  }
  inspect_template_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inspect_template_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectJobConfig.inspect_template_name)
}

// repeated .google.privacy.dlp.v2.Action actions = 4;
inline int InspectJobConfig::actions_size() const {
  return actions_.size();
}
inline void InspectJobConfig::clear_actions() {
  actions_.Clear();
}
inline ::google::privacy::dlp::v2::Action* InspectJobConfig::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.InspectJobConfig.actions)
  return actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Action >*
InspectJobConfig::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.InspectJobConfig.actions)
  return &actions_;
}
inline const ::google::privacy::dlp::v2::Action& InspectJobConfig::actions(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.InspectJobConfig.actions)
  return actions_.Get(index);
}
inline ::google::privacy::dlp::v2::Action* InspectJobConfig::add_actions() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.InspectJobConfig.actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Action >&
InspectJobConfig::actions() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.InspectJobConfig.actions)
  return actions_;
}

// -------------------------------------------------------------------

// DlpJob

// string name = 1;
inline void DlpJob::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DlpJob::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DlpJob.name)
  return name_.GetNoArena();
}
inline void DlpJob::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DlpJob.name)
}
#if LANG_CXX11
inline void DlpJob::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DlpJob.name)
}
#endif
inline void DlpJob::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DlpJob.name)
}
inline void DlpJob::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DlpJob.name)
}
inline ::std::string* DlpJob::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DlpJob.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DlpJob::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DlpJob.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DlpJob::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DlpJob.name)
}

// .google.privacy.dlp.v2.DlpJobType type = 2;
inline void DlpJob::clear_type() {
  type_ = 0;
}
inline ::google::privacy::dlp::v2::DlpJobType DlpJob::type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DlpJob.type)
  return static_cast< ::google::privacy::dlp::v2::DlpJobType >(type_);
}
inline void DlpJob::set_type(::google::privacy::dlp::v2::DlpJobType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DlpJob.type)
}

// .google.privacy.dlp.v2.DlpJob.JobState state = 3;
inline void DlpJob::clear_state() {
  state_ = 0;
}
inline ::google::privacy::dlp::v2::DlpJob_JobState DlpJob::state() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DlpJob.state)
  return static_cast< ::google::privacy::dlp::v2::DlpJob_JobState >(state_);
}
inline void DlpJob::set_state(::google::privacy::dlp::v2::DlpJob_JobState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DlpJob.state)
}

// .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails risk_details = 4;
inline bool DlpJob::has_risk_details() const {
  return details_case() == kRiskDetails;
}
inline void DlpJob::set_has_risk_details() {
  _oneof_case_[0] = kRiskDetails;
}
inline void DlpJob::clear_risk_details() {
  if (has_risk_details()) {
    delete details_.risk_details_;
    clear_has_details();
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails& DlpJob::_internal_risk_details() const {
  return *details_.risk_details_;
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails* DlpJob::release_risk_details() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DlpJob.risk_details)
  if (has_risk_details()) {
    clear_has_details();
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails* temp = details_.risk_details_;
    details_.risk_details_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails& DlpJob::risk_details() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DlpJob.risk_details)
  return has_risk_details()
      ? *details_.risk_details_
      : *reinterpret_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_);
}
inline ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails* DlpJob::mutable_risk_details() {
  if (!has_risk_details()) {
    clear_details();
    set_has_risk_details();
    details_.risk_details_ = CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DlpJob.risk_details)
  return details_.risk_details_;
}

// .google.privacy.dlp.v2.InspectDataSourceDetails inspect_details = 5;
inline bool DlpJob::has_inspect_details() const {
  return details_case() == kInspectDetails;
}
inline void DlpJob::set_has_inspect_details() {
  _oneof_case_[0] = kInspectDetails;
}
inline void DlpJob::clear_inspect_details() {
  if (has_inspect_details()) {
    delete details_.inspect_details_;
    clear_has_details();
  }
}
inline const ::google::privacy::dlp::v2::InspectDataSourceDetails& DlpJob::_internal_inspect_details() const {
  return *details_.inspect_details_;
}
inline ::google::privacy::dlp::v2::InspectDataSourceDetails* DlpJob::release_inspect_details() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DlpJob.inspect_details)
  if (has_inspect_details()) {
    clear_has_details();
      ::google::privacy::dlp::v2::InspectDataSourceDetails* temp = details_.inspect_details_;
    details_.inspect_details_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::InspectDataSourceDetails& DlpJob::inspect_details() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DlpJob.inspect_details)
  return has_inspect_details()
      ? *details_.inspect_details_
      : *reinterpret_cast< ::google::privacy::dlp::v2::InspectDataSourceDetails*>(&::google::privacy::dlp::v2::_InspectDataSourceDetails_default_instance_);
}
inline ::google::privacy::dlp::v2::InspectDataSourceDetails* DlpJob::mutable_inspect_details() {
  if (!has_inspect_details()) {
    clear_details();
    set_has_inspect_details();
    details_.inspect_details_ = CreateMaybeMessage< ::google::privacy::dlp::v2::InspectDataSourceDetails >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DlpJob.inspect_details)
  return details_.inspect_details_;
}

// .google.protobuf.Timestamp create_time = 6;
inline bool DlpJob::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& DlpJob::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& DlpJob::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DlpJob.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DlpJob::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DlpJob.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DlpJob::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DlpJob.create_time)
  return create_time_;
}
inline void DlpJob::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DlpJob.create_time)
}

// .google.protobuf.Timestamp start_time = 7;
inline bool DlpJob::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& DlpJob::_internal_start_time() const {
  return *start_time_;
}
inline const ::google::protobuf::Timestamp& DlpJob::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DlpJob.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DlpJob::release_start_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DlpJob.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DlpJob::mutable_start_time() {
  
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DlpJob.start_time)
  return start_time_;
}
inline void DlpJob::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DlpJob.start_time)
}

// .google.protobuf.Timestamp end_time = 8;
inline bool DlpJob::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& DlpJob::_internal_end_time() const {
  return *end_time_;
}
inline const ::google::protobuf::Timestamp& DlpJob::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DlpJob.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DlpJob::release_end_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DlpJob.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DlpJob::mutable_end_time() {
  
  if (end_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DlpJob.end_time)
  return end_time_;
}
inline void DlpJob::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DlpJob.end_time)
}

// string job_trigger_name = 10;
inline void DlpJob::clear_job_trigger_name() {
  job_trigger_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DlpJob::job_trigger_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DlpJob.job_trigger_name)
  return job_trigger_name_.GetNoArena();
}
inline void DlpJob::set_job_trigger_name(const ::std::string& value) {
  
  job_trigger_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DlpJob.job_trigger_name)
}
#if LANG_CXX11
inline void DlpJob::set_job_trigger_name(::std::string&& value) {
  
  job_trigger_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DlpJob.job_trigger_name)
}
#endif
inline void DlpJob::set_job_trigger_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  job_trigger_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DlpJob.job_trigger_name)
}
inline void DlpJob::set_job_trigger_name(const char* value, size_t size) {
  
  job_trigger_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DlpJob.job_trigger_name)
}
inline ::std::string* DlpJob::mutable_job_trigger_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DlpJob.job_trigger_name)
  return job_trigger_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DlpJob::release_job_trigger_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DlpJob.job_trigger_name)
  
  return job_trigger_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DlpJob::set_allocated_job_trigger_name(::std::string* job_trigger_name) {
  if (job_trigger_name != NULL) {
    
  } else {
    
  }
  job_trigger_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_trigger_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DlpJob.job_trigger_name)
}

// repeated .google.privacy.dlp.v2.Error errors = 11;
inline int DlpJob::errors_size() const {
  return errors_.size();
}
inline void DlpJob::clear_errors() {
  errors_.Clear();
}
inline ::google::privacy::dlp::v2::Error* DlpJob::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DlpJob.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >*
DlpJob::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.DlpJob.errors)
  return &errors_;
}
inline const ::google::privacy::dlp::v2::Error& DlpJob::errors(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DlpJob.errors)
  return errors_.Get(index);
}
inline ::google::privacy::dlp::v2::Error* DlpJob::add_errors() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.DlpJob.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >&
DlpJob::errors() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.DlpJob.errors)
  return errors_;
}

inline bool DlpJob::has_details() const {
  return details_case() != DETAILS_NOT_SET;
}
inline void DlpJob::clear_has_details() {
  _oneof_case_[0] = DETAILS_NOT_SET;
}
inline DlpJob::DetailsCase DlpJob::details_case() const {
  return DlpJob::DetailsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetDlpJobRequest

// string name = 1;
inline void GetDlpJobRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDlpJobRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.GetDlpJobRequest.name)
  return name_.GetNoArena();
}
inline void GetDlpJobRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.GetDlpJobRequest.name)
}
#if LANG_CXX11
inline void GetDlpJobRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.GetDlpJobRequest.name)
}
#endif
inline void GetDlpJobRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.GetDlpJobRequest.name)
}
inline void GetDlpJobRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.GetDlpJobRequest.name)
}
inline ::std::string* GetDlpJobRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.GetDlpJobRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDlpJobRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.GetDlpJobRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDlpJobRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.GetDlpJobRequest.name)
}

// -------------------------------------------------------------------

// ListDlpJobsRequest

// string parent = 4;
inline void ListDlpJobsRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDlpJobsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDlpJobsRequest.parent)
  return parent_.GetNoArena();
}
inline void ListDlpJobsRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListDlpJobsRequest.parent)
}
#if LANG_CXX11
inline void ListDlpJobsRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListDlpJobsRequest.parent)
}
#endif
inline void ListDlpJobsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListDlpJobsRequest.parent)
}
inline void ListDlpJobsRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListDlpJobsRequest.parent)
}
inline ::std::string* ListDlpJobsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListDlpJobsRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDlpJobsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListDlpJobsRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDlpJobsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListDlpJobsRequest.parent)
}

// string filter = 1;
inline void ListDlpJobsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDlpJobsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDlpJobsRequest.filter)
  return filter_.GetNoArena();
}
inline void ListDlpJobsRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListDlpJobsRequest.filter)
}
#if LANG_CXX11
inline void ListDlpJobsRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListDlpJobsRequest.filter)
}
#endif
inline void ListDlpJobsRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListDlpJobsRequest.filter)
}
inline void ListDlpJobsRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListDlpJobsRequest.filter)
}
inline ::std::string* ListDlpJobsRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListDlpJobsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDlpJobsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListDlpJobsRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDlpJobsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListDlpJobsRequest.filter)
}

// int32 page_size = 2;
inline void ListDlpJobsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListDlpJobsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDlpJobsRequest.page_size)
  return page_size_;
}
inline void ListDlpJobsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListDlpJobsRequest.page_size)
}

// string page_token = 3;
inline void ListDlpJobsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDlpJobsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDlpJobsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListDlpJobsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListDlpJobsRequest.page_token)
}
#if LANG_CXX11
inline void ListDlpJobsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListDlpJobsRequest.page_token)
}
#endif
inline void ListDlpJobsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListDlpJobsRequest.page_token)
}
inline void ListDlpJobsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListDlpJobsRequest.page_token)
}
inline ::std::string* ListDlpJobsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListDlpJobsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDlpJobsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListDlpJobsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDlpJobsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListDlpJobsRequest.page_token)
}

// .google.privacy.dlp.v2.DlpJobType type = 5;
inline void ListDlpJobsRequest::clear_type() {
  type_ = 0;
}
inline ::google::privacy::dlp::v2::DlpJobType ListDlpJobsRequest::type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDlpJobsRequest.type)
  return static_cast< ::google::privacy::dlp::v2::DlpJobType >(type_);
}
inline void ListDlpJobsRequest::set_type(::google::privacy::dlp::v2::DlpJobType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListDlpJobsRequest.type)
}

// -------------------------------------------------------------------

// ListDlpJobsResponse

// repeated .google.privacy.dlp.v2.DlpJob jobs = 1;
inline int ListDlpJobsResponse::jobs_size() const {
  return jobs_.size();
}
inline void ListDlpJobsResponse::clear_jobs() {
  jobs_.Clear();
}
inline ::google::privacy::dlp::v2::DlpJob* ListDlpJobsResponse::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListDlpJobsResponse.jobs)
  return jobs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::DlpJob >*
ListDlpJobsResponse::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.ListDlpJobsResponse.jobs)
  return &jobs_;
}
inline const ::google::privacy::dlp::v2::DlpJob& ListDlpJobsResponse::jobs(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDlpJobsResponse.jobs)
  return jobs_.Get(index);
}
inline ::google::privacy::dlp::v2::DlpJob* ListDlpJobsResponse::add_jobs() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.ListDlpJobsResponse.jobs)
  return jobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::DlpJob >&
ListDlpJobsResponse::jobs() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.ListDlpJobsResponse.jobs)
  return jobs_;
}

// string next_page_token = 2;
inline void ListDlpJobsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDlpJobsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListDlpJobsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListDlpJobsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token)
}
#endif
inline void ListDlpJobsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token)
}
inline void ListDlpJobsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token)
}
inline ::std::string* ListDlpJobsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDlpJobsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDlpJobsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token)
}

// -------------------------------------------------------------------

// CancelDlpJobRequest

// string name = 1;
inline void CancelDlpJobRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelDlpJobRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CancelDlpJobRequest.name)
  return name_.GetNoArena();
}
inline void CancelDlpJobRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CancelDlpJobRequest.name)
}
#if LANG_CXX11
inline void CancelDlpJobRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CancelDlpJobRequest.name)
}
#endif
inline void CancelDlpJobRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CancelDlpJobRequest.name)
}
inline void CancelDlpJobRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CancelDlpJobRequest.name)
}
inline ::std::string* CancelDlpJobRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CancelDlpJobRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelDlpJobRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CancelDlpJobRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelDlpJobRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CancelDlpJobRequest.name)
}

// -------------------------------------------------------------------

// DeleteDlpJobRequest

// string name = 1;
inline void DeleteDlpJobRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteDlpJobRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeleteDlpJobRequest.name)
  return name_.GetNoArena();
}
inline void DeleteDlpJobRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DeleteDlpJobRequest.name)
}
#if LANG_CXX11
inline void DeleteDlpJobRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DeleteDlpJobRequest.name)
}
#endif
inline void DeleteDlpJobRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DeleteDlpJobRequest.name)
}
inline void DeleteDlpJobRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DeleteDlpJobRequest.name)
}
inline ::std::string* DeleteDlpJobRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeleteDlpJobRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteDlpJobRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeleteDlpJobRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteDlpJobRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeleteDlpJobRequest.name)
}

// -------------------------------------------------------------------

// CreateDeidentifyTemplateRequest

// string parent = 1;
inline void CreateDeidentifyTemplateRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDeidentifyTemplateRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateDeidentifyTemplateRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent)
}
#if LANG_CXX11
inline void CreateDeidentifyTemplateRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent)
}
#endif
inline void CreateDeidentifyTemplateRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent)
}
inline void CreateDeidentifyTemplateRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent)
}
inline ::std::string* CreateDeidentifyTemplateRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDeidentifyTemplateRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeidentifyTemplateRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent)
}

// .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2;
inline bool CreateDeidentifyTemplateRequest::has_deidentify_template() const {
  return this != internal_default_instance() && deidentify_template_ != NULL;
}
inline void CreateDeidentifyTemplateRequest::clear_deidentify_template() {
  if (GetArenaNoVirtual() == NULL && deidentify_template_ != NULL) {
    delete deidentify_template_;
  }
  deidentify_template_ = NULL;
}
inline const ::google::privacy::dlp::v2::DeidentifyTemplate& CreateDeidentifyTemplateRequest::_internal_deidentify_template() const {
  return *deidentify_template_;
}
inline const ::google::privacy::dlp::v2::DeidentifyTemplate& CreateDeidentifyTemplateRequest::deidentify_template() const {
  const ::google::privacy::dlp::v2::DeidentifyTemplate* p = deidentify_template_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.deidentify_template)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::DeidentifyTemplate*>(
      &::google::privacy::dlp::v2::_DeidentifyTemplate_default_instance_);
}
inline ::google::privacy::dlp::v2::DeidentifyTemplate* CreateDeidentifyTemplateRequest::release_deidentify_template() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.deidentify_template)
  
  ::google::privacy::dlp::v2::DeidentifyTemplate* temp = deidentify_template_;
  deidentify_template_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::DeidentifyTemplate* CreateDeidentifyTemplateRequest::mutable_deidentify_template() {
  
  if (deidentify_template_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::DeidentifyTemplate>(GetArenaNoVirtual());
    deidentify_template_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.deidentify_template)
  return deidentify_template_;
}
inline void CreateDeidentifyTemplateRequest::set_allocated_deidentify_template(::google::privacy::dlp::v2::DeidentifyTemplate* deidentify_template) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deidentify_template_;
  }
  if (deidentify_template) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deidentify_template = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deidentify_template, submessage_arena);
    }
    
  } else {
    
  }
  deidentify_template_ = deidentify_template;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.deidentify_template)
}

// string template_id = 3;
inline void CreateDeidentifyTemplateRequest::clear_template_id() {
  template_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDeidentifyTemplateRequest::template_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id)
  return template_id_.GetNoArena();
}
inline void CreateDeidentifyTemplateRequest::set_template_id(const ::std::string& value) {
  
  template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id)
}
#if LANG_CXX11
inline void CreateDeidentifyTemplateRequest::set_template_id(::std::string&& value) {
  
  template_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id)
}
#endif
inline void CreateDeidentifyTemplateRequest::set_template_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id)
}
inline void CreateDeidentifyTemplateRequest::set_template_id(const char* value, size_t size) {
  
  template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id)
}
inline ::std::string* CreateDeidentifyTemplateRequest::mutable_template_id() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id)
  return template_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDeidentifyTemplateRequest::release_template_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id)
  
  return template_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeidentifyTemplateRequest::set_allocated_template_id(::std::string* template_id) {
  if (template_id != NULL) {
    
  } else {
    
  }
  template_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), template_id);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id)
}

// -------------------------------------------------------------------

// UpdateDeidentifyTemplateRequest

// string name = 1;
inline void UpdateDeidentifyTemplateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDeidentifyTemplateRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name)
  return name_.GetNoArena();
}
inline void UpdateDeidentifyTemplateRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name)
}
#if LANG_CXX11
inline void UpdateDeidentifyTemplateRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name)
}
#endif
inline void UpdateDeidentifyTemplateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name)
}
inline void UpdateDeidentifyTemplateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name)
}
inline ::std::string* UpdateDeidentifyTemplateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDeidentifyTemplateRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDeidentifyTemplateRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name)
}

// .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2;
inline bool UpdateDeidentifyTemplateRequest::has_deidentify_template() const {
  return this != internal_default_instance() && deidentify_template_ != NULL;
}
inline void UpdateDeidentifyTemplateRequest::clear_deidentify_template() {
  if (GetArenaNoVirtual() == NULL && deidentify_template_ != NULL) {
    delete deidentify_template_;
  }
  deidentify_template_ = NULL;
}
inline const ::google::privacy::dlp::v2::DeidentifyTemplate& UpdateDeidentifyTemplateRequest::_internal_deidentify_template() const {
  return *deidentify_template_;
}
inline const ::google::privacy::dlp::v2::DeidentifyTemplate& UpdateDeidentifyTemplateRequest::deidentify_template() const {
  const ::google::privacy::dlp::v2::DeidentifyTemplate* p = deidentify_template_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.deidentify_template)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::DeidentifyTemplate*>(
      &::google::privacy::dlp::v2::_DeidentifyTemplate_default_instance_);
}
inline ::google::privacy::dlp::v2::DeidentifyTemplate* UpdateDeidentifyTemplateRequest::release_deidentify_template() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.deidentify_template)
  
  ::google::privacy::dlp::v2::DeidentifyTemplate* temp = deidentify_template_;
  deidentify_template_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::DeidentifyTemplate* UpdateDeidentifyTemplateRequest::mutable_deidentify_template() {
  
  if (deidentify_template_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::DeidentifyTemplate>(GetArenaNoVirtual());
    deidentify_template_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.deidentify_template)
  return deidentify_template_;
}
inline void UpdateDeidentifyTemplateRequest::set_allocated_deidentify_template(::google::privacy::dlp::v2::DeidentifyTemplate* deidentify_template) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deidentify_template_;
  }
  if (deidentify_template) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deidentify_template = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deidentify_template, submessage_arena);
    }
    
  } else {
    
  }
  deidentify_template_ = deidentify_template;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.deidentify_template)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateDeidentifyTemplateRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateDeidentifyTemplateRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateDeidentifyTemplateRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateDeidentifyTemplateRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateDeidentifyTemplateRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.update_mask)
  return update_mask_;
}
inline void UpdateDeidentifyTemplateRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.update_mask)
}

// -------------------------------------------------------------------

// GetDeidentifyTemplateRequest

// string name = 1;
inline void GetDeidentifyTemplateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDeidentifyTemplateRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name)
  return name_.GetNoArena();
}
inline void GetDeidentifyTemplateRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name)
}
#if LANG_CXX11
inline void GetDeidentifyTemplateRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name)
}
#endif
inline void GetDeidentifyTemplateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name)
}
inline void GetDeidentifyTemplateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name)
}
inline ::std::string* GetDeidentifyTemplateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDeidentifyTemplateRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDeidentifyTemplateRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name)
}

// -------------------------------------------------------------------

// ListDeidentifyTemplatesRequest

// string parent = 1;
inline void ListDeidentifyTemplatesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDeidentifyTemplatesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent)
  return parent_.GetNoArena();
}
inline void ListDeidentifyTemplatesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent)
}
#if LANG_CXX11
inline void ListDeidentifyTemplatesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent)
}
#endif
inline void ListDeidentifyTemplatesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent)
}
inline void ListDeidentifyTemplatesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent)
}
inline ::std::string* ListDeidentifyTemplatesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDeidentifyTemplatesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDeidentifyTemplatesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent)
}

// string page_token = 2;
inline void ListDeidentifyTemplatesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDeidentifyTemplatesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListDeidentifyTemplatesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token)
}
#if LANG_CXX11
inline void ListDeidentifyTemplatesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token)
}
#endif
inline void ListDeidentifyTemplatesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token)
}
inline void ListDeidentifyTemplatesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token)
}
inline ::std::string* ListDeidentifyTemplatesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDeidentifyTemplatesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDeidentifyTemplatesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token)
}

// int32 page_size = 3;
inline void ListDeidentifyTemplatesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListDeidentifyTemplatesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_size)
  return page_size_;
}
inline void ListDeidentifyTemplatesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_size)
}

// -------------------------------------------------------------------

// ListDeidentifyTemplatesResponse

// repeated .google.privacy.dlp.v2.DeidentifyTemplate deidentify_templates = 1;
inline int ListDeidentifyTemplatesResponse::deidentify_templates_size() const {
  return deidentify_templates_.size();
}
inline void ListDeidentifyTemplatesResponse::clear_deidentify_templates() {
  deidentify_templates_.Clear();
}
inline ::google::privacy::dlp::v2::DeidentifyTemplate* ListDeidentifyTemplatesResponse::mutable_deidentify_templates(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.deidentify_templates)
  return deidentify_templates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::DeidentifyTemplate >*
ListDeidentifyTemplatesResponse::mutable_deidentify_templates() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.deidentify_templates)
  return &deidentify_templates_;
}
inline const ::google::privacy::dlp::v2::DeidentifyTemplate& ListDeidentifyTemplatesResponse::deidentify_templates(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.deidentify_templates)
  return deidentify_templates_.Get(index);
}
inline ::google::privacy::dlp::v2::DeidentifyTemplate* ListDeidentifyTemplatesResponse::add_deidentify_templates() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.deidentify_templates)
  return deidentify_templates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::DeidentifyTemplate >&
ListDeidentifyTemplatesResponse::deidentify_templates() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.deidentify_templates)
  return deidentify_templates_;
}

// string next_page_token = 2;
inline void ListDeidentifyTemplatesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDeidentifyTemplatesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListDeidentifyTemplatesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListDeidentifyTemplatesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token)
}
#endif
inline void ListDeidentifyTemplatesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token)
}
inline void ListDeidentifyTemplatesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token)
}
inline ::std::string* ListDeidentifyTemplatesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDeidentifyTemplatesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDeidentifyTemplatesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteDeidentifyTemplateRequest

// string name = 1;
inline void DeleteDeidentifyTemplateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteDeidentifyTemplateRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name)
  return name_.GetNoArena();
}
inline void DeleteDeidentifyTemplateRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name)
}
#if LANG_CXX11
inline void DeleteDeidentifyTemplateRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name)
}
#endif
inline void DeleteDeidentifyTemplateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name)
}
inline void DeleteDeidentifyTemplateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name)
}
inline ::std::string* DeleteDeidentifyTemplateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteDeidentifyTemplateRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteDeidentifyTemplateRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name)
}

// -------------------------------------------------------------------

// LargeCustomDictionaryConfig

// .google.privacy.dlp.v2.CloudStoragePath output_path = 1;
inline bool LargeCustomDictionaryConfig::has_output_path() const {
  return this != internal_default_instance() && output_path_ != NULL;
}
inline const ::google::privacy::dlp::v2::CloudStoragePath& LargeCustomDictionaryConfig::_internal_output_path() const {
  return *output_path_;
}
inline const ::google::privacy::dlp::v2::CloudStoragePath& LargeCustomDictionaryConfig::output_path() const {
  const ::google::privacy::dlp::v2::CloudStoragePath* p = output_path_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.LargeCustomDictionaryConfig.output_path)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::CloudStoragePath*>(
      &::google::privacy::dlp::v2::_CloudStoragePath_default_instance_);
}
inline ::google::privacy::dlp::v2::CloudStoragePath* LargeCustomDictionaryConfig::release_output_path() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.LargeCustomDictionaryConfig.output_path)
  
  ::google::privacy::dlp::v2::CloudStoragePath* temp = output_path_;
  output_path_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::CloudStoragePath* LargeCustomDictionaryConfig::mutable_output_path() {
  
  if (output_path_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::CloudStoragePath>(GetArenaNoVirtual());
    output_path_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.LargeCustomDictionaryConfig.output_path)
  return output_path_;
}
inline void LargeCustomDictionaryConfig::set_allocated_output_path(::google::privacy::dlp::v2::CloudStoragePath* output_path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_path_);
  }
  if (output_path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output_path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_path, submessage_arena);
    }
    
  } else {
    
  }
  output_path_ = output_path;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.LargeCustomDictionaryConfig.output_path)
}

// .google.privacy.dlp.v2.CloudStorageFileSet cloud_storage_file_set = 2;
inline bool LargeCustomDictionaryConfig::has_cloud_storage_file_set() const {
  return source_case() == kCloudStorageFileSet;
}
inline void LargeCustomDictionaryConfig::set_has_cloud_storage_file_set() {
  _oneof_case_[0] = kCloudStorageFileSet;
}
inline const ::google::privacy::dlp::v2::CloudStorageFileSet& LargeCustomDictionaryConfig::_internal_cloud_storage_file_set() const {
  return *source_.cloud_storage_file_set_;
}
inline ::google::privacy::dlp::v2::CloudStorageFileSet* LargeCustomDictionaryConfig::release_cloud_storage_file_set() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.LargeCustomDictionaryConfig.cloud_storage_file_set)
  if (has_cloud_storage_file_set()) {
    clear_has_source();
      ::google::privacy::dlp::v2::CloudStorageFileSet* temp = source_.cloud_storage_file_set_;
    source_.cloud_storage_file_set_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::CloudStorageFileSet& LargeCustomDictionaryConfig::cloud_storage_file_set() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.LargeCustomDictionaryConfig.cloud_storage_file_set)
  return has_cloud_storage_file_set()
      ? *source_.cloud_storage_file_set_
      : *reinterpret_cast< ::google::privacy::dlp::v2::CloudStorageFileSet*>(&::google::privacy::dlp::v2::_CloudStorageFileSet_default_instance_);
}
inline ::google::privacy::dlp::v2::CloudStorageFileSet* LargeCustomDictionaryConfig::mutable_cloud_storage_file_set() {
  if (!has_cloud_storage_file_set()) {
    clear_source();
    set_has_cloud_storage_file_set();
    source_.cloud_storage_file_set_ = CreateMaybeMessage< ::google::privacy::dlp::v2::CloudStorageFileSet >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.LargeCustomDictionaryConfig.cloud_storage_file_set)
  return source_.cloud_storage_file_set_;
}

// .google.privacy.dlp.v2.BigQueryField big_query_field = 3;
inline bool LargeCustomDictionaryConfig::has_big_query_field() const {
  return source_case() == kBigQueryField;
}
inline void LargeCustomDictionaryConfig::set_has_big_query_field() {
  _oneof_case_[0] = kBigQueryField;
}
inline const ::google::privacy::dlp::v2::BigQueryField& LargeCustomDictionaryConfig::_internal_big_query_field() const {
  return *source_.big_query_field_;
}
inline ::google::privacy::dlp::v2::BigQueryField* LargeCustomDictionaryConfig::release_big_query_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.LargeCustomDictionaryConfig.big_query_field)
  if (has_big_query_field()) {
    clear_has_source();
      ::google::privacy::dlp::v2::BigQueryField* temp = source_.big_query_field_;
    source_.big_query_field_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::BigQueryField& LargeCustomDictionaryConfig::big_query_field() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.LargeCustomDictionaryConfig.big_query_field)
  return has_big_query_field()
      ? *source_.big_query_field_
      : *reinterpret_cast< ::google::privacy::dlp::v2::BigQueryField*>(&::google::privacy::dlp::v2::_BigQueryField_default_instance_);
}
inline ::google::privacy::dlp::v2::BigQueryField* LargeCustomDictionaryConfig::mutable_big_query_field() {
  if (!has_big_query_field()) {
    clear_source();
    set_has_big_query_field();
    source_.big_query_field_ = CreateMaybeMessage< ::google::privacy::dlp::v2::BigQueryField >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.LargeCustomDictionaryConfig.big_query_field)
  return source_.big_query_field_;
}

inline bool LargeCustomDictionaryConfig::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void LargeCustomDictionaryConfig::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline LargeCustomDictionaryConfig::SourceCase LargeCustomDictionaryConfig::source_case() const {
  return LargeCustomDictionaryConfig::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StoredInfoTypeConfig

// string display_name = 1;
inline void StoredInfoTypeConfig::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoredInfoTypeConfig::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StoredInfoTypeConfig.display_name)
  return display_name_.GetNoArena();
}
inline void StoredInfoTypeConfig::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.StoredInfoTypeConfig.display_name)
}
#if LANG_CXX11
inline void StoredInfoTypeConfig::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.StoredInfoTypeConfig.display_name)
}
#endif
inline void StoredInfoTypeConfig::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.StoredInfoTypeConfig.display_name)
}
inline void StoredInfoTypeConfig::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.StoredInfoTypeConfig.display_name)
}
inline ::std::string* StoredInfoTypeConfig::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StoredInfoTypeConfig.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoredInfoTypeConfig::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.StoredInfoTypeConfig.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoredInfoTypeConfig::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StoredInfoTypeConfig.display_name)
}

// string description = 2;
inline void StoredInfoTypeConfig::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoredInfoTypeConfig::description() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StoredInfoTypeConfig.description)
  return description_.GetNoArena();
}
inline void StoredInfoTypeConfig::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.StoredInfoTypeConfig.description)
}
#if LANG_CXX11
inline void StoredInfoTypeConfig::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.StoredInfoTypeConfig.description)
}
#endif
inline void StoredInfoTypeConfig::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.StoredInfoTypeConfig.description)
}
inline void StoredInfoTypeConfig::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.StoredInfoTypeConfig.description)
}
inline ::std::string* StoredInfoTypeConfig::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StoredInfoTypeConfig.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoredInfoTypeConfig::release_description() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.StoredInfoTypeConfig.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoredInfoTypeConfig::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StoredInfoTypeConfig.description)
}

// .google.privacy.dlp.v2.LargeCustomDictionaryConfig large_custom_dictionary = 3;
inline bool StoredInfoTypeConfig::has_large_custom_dictionary() const {
  return type_case() == kLargeCustomDictionary;
}
inline void StoredInfoTypeConfig::set_has_large_custom_dictionary() {
  _oneof_case_[0] = kLargeCustomDictionary;
}
inline void StoredInfoTypeConfig::clear_large_custom_dictionary() {
  if (has_large_custom_dictionary()) {
    delete type_.large_custom_dictionary_;
    clear_has_type();
  }
}
inline const ::google::privacy::dlp::v2::LargeCustomDictionaryConfig& StoredInfoTypeConfig::_internal_large_custom_dictionary() const {
  return *type_.large_custom_dictionary_;
}
inline ::google::privacy::dlp::v2::LargeCustomDictionaryConfig* StoredInfoTypeConfig::release_large_custom_dictionary() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.StoredInfoTypeConfig.large_custom_dictionary)
  if (has_large_custom_dictionary()) {
    clear_has_type();
      ::google::privacy::dlp::v2::LargeCustomDictionaryConfig* temp = type_.large_custom_dictionary_;
    type_.large_custom_dictionary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2::LargeCustomDictionaryConfig& StoredInfoTypeConfig::large_custom_dictionary() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StoredInfoTypeConfig.large_custom_dictionary)
  return has_large_custom_dictionary()
      ? *type_.large_custom_dictionary_
      : *reinterpret_cast< ::google::privacy::dlp::v2::LargeCustomDictionaryConfig*>(&::google::privacy::dlp::v2::_LargeCustomDictionaryConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::LargeCustomDictionaryConfig* StoredInfoTypeConfig::mutable_large_custom_dictionary() {
  if (!has_large_custom_dictionary()) {
    clear_type();
    set_has_large_custom_dictionary();
    type_.large_custom_dictionary_ = CreateMaybeMessage< ::google::privacy::dlp::v2::LargeCustomDictionaryConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StoredInfoTypeConfig.large_custom_dictionary)
  return type_.large_custom_dictionary_;
}

inline bool StoredInfoTypeConfig::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void StoredInfoTypeConfig::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline StoredInfoTypeConfig::TypeCase StoredInfoTypeConfig::type_case() const {
  return StoredInfoTypeConfig::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StoredInfoTypeVersion

// .google.privacy.dlp.v2.StoredInfoTypeConfig config = 1;
inline bool StoredInfoTypeVersion::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void StoredInfoTypeVersion::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::google::privacy::dlp::v2::StoredInfoTypeConfig& StoredInfoTypeVersion::_internal_config() const {
  return *config_;
}
inline const ::google::privacy::dlp::v2::StoredInfoTypeConfig& StoredInfoTypeVersion::config() const {
  const ::google::privacy::dlp::v2::StoredInfoTypeConfig* p = config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StoredInfoTypeVersion.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::StoredInfoTypeConfig*>(
      &::google::privacy::dlp::v2::_StoredInfoTypeConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::StoredInfoTypeConfig* StoredInfoTypeVersion::release_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.StoredInfoTypeVersion.config)
  
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::StoredInfoTypeConfig* StoredInfoTypeVersion::mutable_config() {
  
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::StoredInfoTypeConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StoredInfoTypeVersion.config)
  return config_;
}
inline void StoredInfoTypeVersion::set_allocated_config(::google::privacy::dlp::v2::StoredInfoTypeConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StoredInfoTypeVersion.config)
}

// .google.protobuf.Timestamp create_time = 2;
inline bool StoredInfoTypeVersion::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& StoredInfoTypeVersion::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& StoredInfoTypeVersion::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StoredInfoTypeVersion.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* StoredInfoTypeVersion::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.StoredInfoTypeVersion.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* StoredInfoTypeVersion::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StoredInfoTypeVersion.create_time)
  return create_time_;
}
inline void StoredInfoTypeVersion::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StoredInfoTypeVersion.create_time)
}

// .google.privacy.dlp.v2.StoredInfoTypeState state = 3;
inline void StoredInfoTypeVersion::clear_state() {
  state_ = 0;
}
inline ::google::privacy::dlp::v2::StoredInfoTypeState StoredInfoTypeVersion::state() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StoredInfoTypeVersion.state)
  return static_cast< ::google::privacy::dlp::v2::StoredInfoTypeState >(state_);
}
inline void StoredInfoTypeVersion::set_state(::google::privacy::dlp::v2::StoredInfoTypeState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.StoredInfoTypeVersion.state)
}

// repeated .google.privacy.dlp.v2.Error errors = 4;
inline int StoredInfoTypeVersion::errors_size() const {
  return errors_.size();
}
inline void StoredInfoTypeVersion::clear_errors() {
  errors_.Clear();
}
inline ::google::privacy::dlp::v2::Error* StoredInfoTypeVersion::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StoredInfoTypeVersion.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >*
StoredInfoTypeVersion::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.StoredInfoTypeVersion.errors)
  return &errors_;
}
inline const ::google::privacy::dlp::v2::Error& StoredInfoTypeVersion::errors(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StoredInfoTypeVersion.errors)
  return errors_.Get(index);
}
inline ::google::privacy::dlp::v2::Error* StoredInfoTypeVersion::add_errors() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.StoredInfoTypeVersion.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::Error >&
StoredInfoTypeVersion::errors() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.StoredInfoTypeVersion.errors)
  return errors_;
}

// -------------------------------------------------------------------

// StoredInfoType

// string name = 1;
inline void StoredInfoType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoredInfoType::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StoredInfoType.name)
  return name_.GetNoArena();
}
inline void StoredInfoType::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.StoredInfoType.name)
}
#if LANG_CXX11
inline void StoredInfoType::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.StoredInfoType.name)
}
#endif
inline void StoredInfoType::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.StoredInfoType.name)
}
inline void StoredInfoType::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.StoredInfoType.name)
}
inline ::std::string* StoredInfoType::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StoredInfoType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoredInfoType::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.StoredInfoType.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoredInfoType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StoredInfoType.name)
}

// .google.privacy.dlp.v2.StoredInfoTypeVersion current_version = 2;
inline bool StoredInfoType::has_current_version() const {
  return this != internal_default_instance() && current_version_ != NULL;
}
inline void StoredInfoType::clear_current_version() {
  if (GetArenaNoVirtual() == NULL && current_version_ != NULL) {
    delete current_version_;
  }
  current_version_ = NULL;
}
inline const ::google::privacy::dlp::v2::StoredInfoTypeVersion& StoredInfoType::_internal_current_version() const {
  return *current_version_;
}
inline const ::google::privacy::dlp::v2::StoredInfoTypeVersion& StoredInfoType::current_version() const {
  const ::google::privacy::dlp::v2::StoredInfoTypeVersion* p = current_version_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StoredInfoType.current_version)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::StoredInfoTypeVersion*>(
      &::google::privacy::dlp::v2::_StoredInfoTypeVersion_default_instance_);
}
inline ::google::privacy::dlp::v2::StoredInfoTypeVersion* StoredInfoType::release_current_version() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.StoredInfoType.current_version)
  
  ::google::privacy::dlp::v2::StoredInfoTypeVersion* temp = current_version_;
  current_version_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::StoredInfoTypeVersion* StoredInfoType::mutable_current_version() {
  
  if (current_version_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::StoredInfoTypeVersion>(GetArenaNoVirtual());
    current_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StoredInfoType.current_version)
  return current_version_;
}
inline void StoredInfoType::set_allocated_current_version(::google::privacy::dlp::v2::StoredInfoTypeVersion* current_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete current_version_;
  }
  if (current_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      current_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current_version, submessage_arena);
    }
    
  } else {
    
  }
  current_version_ = current_version;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StoredInfoType.current_version)
}

// repeated .google.privacy.dlp.v2.StoredInfoTypeVersion pending_versions = 3;
inline int StoredInfoType::pending_versions_size() const {
  return pending_versions_.size();
}
inline void StoredInfoType::clear_pending_versions() {
  pending_versions_.Clear();
}
inline ::google::privacy::dlp::v2::StoredInfoTypeVersion* StoredInfoType::mutable_pending_versions(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.StoredInfoType.pending_versions)
  return pending_versions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StoredInfoTypeVersion >*
StoredInfoType::mutable_pending_versions() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.StoredInfoType.pending_versions)
  return &pending_versions_;
}
inline const ::google::privacy::dlp::v2::StoredInfoTypeVersion& StoredInfoType::pending_versions(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.StoredInfoType.pending_versions)
  return pending_versions_.Get(index);
}
inline ::google::privacy::dlp::v2::StoredInfoTypeVersion* StoredInfoType::add_pending_versions() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.StoredInfoType.pending_versions)
  return pending_versions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StoredInfoTypeVersion >&
StoredInfoType::pending_versions() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.StoredInfoType.pending_versions)
  return pending_versions_;
}

// -------------------------------------------------------------------

// CreateStoredInfoTypeRequest

// string parent = 1;
inline void CreateStoredInfoTypeRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateStoredInfoTypeRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateStoredInfoTypeRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent)
}
#if LANG_CXX11
inline void CreateStoredInfoTypeRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent)
}
#endif
inline void CreateStoredInfoTypeRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent)
}
inline void CreateStoredInfoTypeRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent)
}
inline ::std::string* CreateStoredInfoTypeRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateStoredInfoTypeRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateStoredInfoTypeRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent)
}

// .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2;
inline bool CreateStoredInfoTypeRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void CreateStoredInfoTypeRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::google::privacy::dlp::v2::StoredInfoTypeConfig& CreateStoredInfoTypeRequest::_internal_config() const {
  return *config_;
}
inline const ::google::privacy::dlp::v2::StoredInfoTypeConfig& CreateStoredInfoTypeRequest::config() const {
  const ::google::privacy::dlp::v2::StoredInfoTypeConfig* p = config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::StoredInfoTypeConfig*>(
      &::google::privacy::dlp::v2::_StoredInfoTypeConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::StoredInfoTypeConfig* CreateStoredInfoTypeRequest::release_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.config)
  
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::StoredInfoTypeConfig* CreateStoredInfoTypeRequest::mutable_config() {
  
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::StoredInfoTypeConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.config)
  return config_;
}
inline void CreateStoredInfoTypeRequest::set_allocated_config(::google::privacy::dlp::v2::StoredInfoTypeConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.config)
}

// string stored_info_type_id = 3;
inline void CreateStoredInfoTypeRequest::clear_stored_info_type_id() {
  stored_info_type_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateStoredInfoTypeRequest::stored_info_type_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id)
  return stored_info_type_id_.GetNoArena();
}
inline void CreateStoredInfoTypeRequest::set_stored_info_type_id(const ::std::string& value) {
  
  stored_info_type_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id)
}
#if LANG_CXX11
inline void CreateStoredInfoTypeRequest::set_stored_info_type_id(::std::string&& value) {
  
  stored_info_type_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id)
}
#endif
inline void CreateStoredInfoTypeRequest::set_stored_info_type_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stored_info_type_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id)
}
inline void CreateStoredInfoTypeRequest::set_stored_info_type_id(const char* value, size_t size) {
  
  stored_info_type_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id)
}
inline ::std::string* CreateStoredInfoTypeRequest::mutable_stored_info_type_id() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id)
  return stored_info_type_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateStoredInfoTypeRequest::release_stored_info_type_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id)
  
  return stored_info_type_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateStoredInfoTypeRequest::set_allocated_stored_info_type_id(::std::string* stored_info_type_id) {
  if (stored_info_type_id != NULL) {
    
  } else {
    
  }
  stored_info_type_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stored_info_type_id);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id)
}

// -------------------------------------------------------------------

// UpdateStoredInfoTypeRequest

// string name = 1;
inline void UpdateStoredInfoTypeRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateStoredInfoTypeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name)
  return name_.GetNoArena();
}
inline void UpdateStoredInfoTypeRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name)
}
#if LANG_CXX11
inline void UpdateStoredInfoTypeRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name)
}
#endif
inline void UpdateStoredInfoTypeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name)
}
inline void UpdateStoredInfoTypeRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name)
}
inline ::std::string* UpdateStoredInfoTypeRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateStoredInfoTypeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateStoredInfoTypeRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name)
}

// .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2;
inline bool UpdateStoredInfoTypeRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void UpdateStoredInfoTypeRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::google::privacy::dlp::v2::StoredInfoTypeConfig& UpdateStoredInfoTypeRequest::_internal_config() const {
  return *config_;
}
inline const ::google::privacy::dlp::v2::StoredInfoTypeConfig& UpdateStoredInfoTypeRequest::config() const {
  const ::google::privacy::dlp::v2::StoredInfoTypeConfig* p = config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2::StoredInfoTypeConfig*>(
      &::google::privacy::dlp::v2::_StoredInfoTypeConfig_default_instance_);
}
inline ::google::privacy::dlp::v2::StoredInfoTypeConfig* UpdateStoredInfoTypeRequest::release_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.config)
  
  ::google::privacy::dlp::v2::StoredInfoTypeConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2::StoredInfoTypeConfig* UpdateStoredInfoTypeRequest::mutable_config() {
  
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::privacy::dlp::v2::StoredInfoTypeConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.config)
  return config_;
}
inline void UpdateStoredInfoTypeRequest::set_allocated_config(::google::privacy::dlp::v2::StoredInfoTypeConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.config)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateStoredInfoTypeRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateStoredInfoTypeRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateStoredInfoTypeRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateStoredInfoTypeRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateStoredInfoTypeRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.update_mask)
  return update_mask_;
}
inline void UpdateStoredInfoTypeRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.update_mask)
}

// -------------------------------------------------------------------

// GetStoredInfoTypeRequest

// string name = 1;
inline void GetStoredInfoTypeRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetStoredInfoTypeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.GetStoredInfoTypeRequest.name)
  return name_.GetNoArena();
}
inline void GetStoredInfoTypeRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.GetStoredInfoTypeRequest.name)
}
#if LANG_CXX11
inline void GetStoredInfoTypeRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.GetStoredInfoTypeRequest.name)
}
#endif
inline void GetStoredInfoTypeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.GetStoredInfoTypeRequest.name)
}
inline void GetStoredInfoTypeRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.GetStoredInfoTypeRequest.name)
}
inline ::std::string* GetStoredInfoTypeRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.GetStoredInfoTypeRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetStoredInfoTypeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.GetStoredInfoTypeRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStoredInfoTypeRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.GetStoredInfoTypeRequest.name)
}

// -------------------------------------------------------------------

// ListStoredInfoTypesRequest

// string parent = 1;
inline void ListStoredInfoTypesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListStoredInfoTypesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent)
  return parent_.GetNoArena();
}
inline void ListStoredInfoTypesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent)
}
#if LANG_CXX11
inline void ListStoredInfoTypesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent)
}
#endif
inline void ListStoredInfoTypesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent)
}
inline void ListStoredInfoTypesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent)
}
inline ::std::string* ListStoredInfoTypesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListStoredInfoTypesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListStoredInfoTypesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent)
}

// string page_token = 2;
inline void ListStoredInfoTypesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListStoredInfoTypesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListStoredInfoTypesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token)
}
#if LANG_CXX11
inline void ListStoredInfoTypesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token)
}
#endif
inline void ListStoredInfoTypesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token)
}
inline void ListStoredInfoTypesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token)
}
inline ::std::string* ListStoredInfoTypesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListStoredInfoTypesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListStoredInfoTypesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token)
}

// int32 page_size = 3;
inline void ListStoredInfoTypesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListStoredInfoTypesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_size)
  return page_size_;
}
inline void ListStoredInfoTypesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_size)
}

// -------------------------------------------------------------------

// ListStoredInfoTypesResponse

// repeated .google.privacy.dlp.v2.StoredInfoType stored_info_types = 1;
inline int ListStoredInfoTypesResponse::stored_info_types_size() const {
  return stored_info_types_.size();
}
inline void ListStoredInfoTypesResponse::clear_stored_info_types() {
  stored_info_types_.Clear();
}
inline ::google::privacy::dlp::v2::StoredInfoType* ListStoredInfoTypesResponse::mutable_stored_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListStoredInfoTypesResponse.stored_info_types)
  return stored_info_types_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StoredInfoType >*
ListStoredInfoTypesResponse::mutable_stored_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2.ListStoredInfoTypesResponse.stored_info_types)
  return &stored_info_types_;
}
inline const ::google::privacy::dlp::v2::StoredInfoType& ListStoredInfoTypesResponse::stored_info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListStoredInfoTypesResponse.stored_info_types)
  return stored_info_types_.Get(index);
}
inline ::google::privacy::dlp::v2::StoredInfoType* ListStoredInfoTypesResponse::add_stored_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2.ListStoredInfoTypesResponse.stored_info_types)
  return stored_info_types_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2::StoredInfoType >&
ListStoredInfoTypesResponse::stored_info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2.ListStoredInfoTypesResponse.stored_info_types)
  return stored_info_types_;
}

// string next_page_token = 2;
inline void ListStoredInfoTypesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListStoredInfoTypesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListStoredInfoTypesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListStoredInfoTypesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token)
}
#endif
inline void ListStoredInfoTypesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token)
}
inline void ListStoredInfoTypesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token)
}
inline ::std::string* ListStoredInfoTypesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListStoredInfoTypesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListStoredInfoTypesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteStoredInfoTypeRequest

// string name = 1;
inline void DeleteStoredInfoTypeRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteStoredInfoTypeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name)
  return name_.GetNoArena();
}
inline void DeleteStoredInfoTypeRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name)
}
#if LANG_CXX11
inline void DeleteStoredInfoTypeRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name)
}
#endif
inline void DeleteStoredInfoTypeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name)
}
inline void DeleteStoredInfoTypeRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name)
}
inline ::std::string* DeleteStoredInfoTypeRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteStoredInfoTypeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteStoredInfoTypeRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace dlp
}  // namespace privacy
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::privacy::dlp::v2::ByteContentItem_BytesType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::ByteContentItem_BytesType>() {
  return ::google::privacy::dlp::v2::ByteContentItem_BytesType_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::OutputStorageConfig_OutputSchema> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::OutputStorageConfig_OutputSchema>() {
  return ::google::privacy::dlp::v2::OutputStorageConfig_OutputSchema_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::TimePartConfig_TimePart> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::TimePartConfig_TimePart>() {
  return ::google::privacy::dlp::v2::TimePartConfig_TimePart_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::CharsToIgnore_CommonCharsToIgnore> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::CharsToIgnore_CommonCharsToIgnore>() {
  return ::google::privacy::dlp::v2::CharsToIgnore_CommonCharsToIgnore_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet>() {
  return ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::RecordCondition_Expressions_LogicalOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::RecordCondition_Expressions_LogicalOperator>() {
  return ::google::privacy::dlp::v2::RecordCondition_Expressions_LogicalOperator_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::TransformationSummary_TransformationResultCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::TransformationSummary_TransformationResultCode>() {
  return ::google::privacy::dlp::v2::TransformationSummary_TransformationResultCode_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::JobTrigger_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::JobTrigger_Status>() {
  return ::google::privacy::dlp::v2::JobTrigger_Status_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::DlpJob_JobState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::DlpJob_JobState>() {
  return ::google::privacy::dlp::v2::DlpJob_JobState_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::ContentOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::ContentOption>() {
  return ::google::privacy::dlp::v2::ContentOption_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::InfoTypeSupportedBy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::InfoTypeSupportedBy>() {
  return ::google::privacy::dlp::v2::InfoTypeSupportedBy_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::RelationalOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::RelationalOperator>() {
  return ::google::privacy::dlp::v2::RelationalOperator_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::DlpJobType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::DlpJobType>() {
  return ::google::privacy::dlp::v2::DlpJobType_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2::StoredInfoTypeState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2::StoredInfoTypeState>() {
  return ::google::privacy::dlp::v2::StoredInfoTypeState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto
