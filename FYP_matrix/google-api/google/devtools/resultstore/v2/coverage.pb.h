// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/coverage.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fresultstore_2fv2_2fcoverage_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fresultstore_2fv2_2fcoverage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fresultstore_2fv2_2fcoverage_2eproto 

namespace protobuf_google_2fdevtools_2fresultstore_2fv2_2fcoverage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fresultstore_2fv2_2fcoverage_2eproto
namespace google {
namespace devtools {
namespace resultstore {
namespace v2 {
class ActionCoverage;
class ActionCoverageDefaultTypeInternal;
extern ActionCoverageDefaultTypeInternal _ActionCoverage_default_instance_;
class BranchCoverage;
class BranchCoverageDefaultTypeInternal;
extern BranchCoverageDefaultTypeInternal _BranchCoverage_default_instance_;
class FileCoverage;
class FileCoverageDefaultTypeInternal;
extern FileCoverageDefaultTypeInternal _FileCoverage_default_instance_;
class LineCoverage;
class LineCoverageDefaultTypeInternal;
extern LineCoverageDefaultTypeInternal _LineCoverage_default_instance_;
}  // namespace v2
}  // namespace resultstore
}  // namespace devtools
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::devtools::resultstore::v2::ActionCoverage* Arena::CreateMaybeMessage<::google::devtools::resultstore::v2::ActionCoverage>(Arena*);
template<> ::google::devtools::resultstore::v2::BranchCoverage* Arena::CreateMaybeMessage<::google::devtools::resultstore::v2::BranchCoverage>(Arena*);
template<> ::google::devtools::resultstore::v2::FileCoverage* Arena::CreateMaybeMessage<::google::devtools::resultstore::v2::FileCoverage>(Arena*);
template<> ::google::devtools::resultstore::v2::LineCoverage* Arena::CreateMaybeMessage<::google::devtools::resultstore::v2::LineCoverage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace devtools {
namespace resultstore {
namespace v2 {

// ===================================================================

class LineCoverage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.resultstore.v2.LineCoverage) */ {
 public:
  LineCoverage();
  virtual ~LineCoverage();

  LineCoverage(const LineCoverage& from);

  inline LineCoverage& operator=(const LineCoverage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LineCoverage(LineCoverage&& from) noexcept
    : LineCoverage() {
    *this = ::std::move(from);
  }

  inline LineCoverage& operator=(LineCoverage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LineCoverage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LineCoverage* internal_default_instance() {
    return reinterpret_cast<const LineCoverage*>(
               &_LineCoverage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LineCoverage* other);
  friend void swap(LineCoverage& a, LineCoverage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LineCoverage* New() const final {
    return CreateMaybeMessage<LineCoverage>(NULL);
  }

  LineCoverage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LineCoverage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LineCoverage& from);
  void MergeFrom(const LineCoverage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineCoverage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes instrumented_lines = 1;
  void clear_instrumented_lines();
  static const int kInstrumentedLinesFieldNumber = 1;
  const ::std::string& instrumented_lines() const;
  void set_instrumented_lines(const ::std::string& value);
  #if LANG_CXX11
  void set_instrumented_lines(::std::string&& value);
  #endif
  void set_instrumented_lines(const char* value);
  void set_instrumented_lines(const void* value, size_t size);
  ::std::string* mutable_instrumented_lines();
  ::std::string* release_instrumented_lines();
  void set_allocated_instrumented_lines(::std::string* instrumented_lines);

  // bytes executed_lines = 2;
  void clear_executed_lines();
  static const int kExecutedLinesFieldNumber = 2;
  const ::std::string& executed_lines() const;
  void set_executed_lines(const ::std::string& value);
  #if LANG_CXX11
  void set_executed_lines(::std::string&& value);
  #endif
  void set_executed_lines(const char* value);
  void set_executed_lines(const void* value, size_t size);
  ::std::string* mutable_executed_lines();
  ::std::string* release_executed_lines();
  void set_allocated_executed_lines(::std::string* executed_lines);

  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.LineCoverage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrumented_lines_;
  ::google::protobuf::internal::ArenaStringPtr executed_lines_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fresultstore_2fv2_2fcoverage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BranchCoverage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.resultstore.v2.BranchCoverage) */ {
 public:
  BranchCoverage();
  virtual ~BranchCoverage();

  BranchCoverage(const BranchCoverage& from);

  inline BranchCoverage& operator=(const BranchCoverage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BranchCoverage(BranchCoverage&& from) noexcept
    : BranchCoverage() {
    *this = ::std::move(from);
  }

  inline BranchCoverage& operator=(BranchCoverage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BranchCoverage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BranchCoverage* internal_default_instance() {
    return reinterpret_cast<const BranchCoverage*>(
               &_BranchCoverage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BranchCoverage* other);
  friend void swap(BranchCoverage& a, BranchCoverage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BranchCoverage* New() const final {
    return CreateMaybeMessage<BranchCoverage>(NULL);
  }

  BranchCoverage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BranchCoverage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BranchCoverage& from);
  void MergeFrom(const BranchCoverage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BranchCoverage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 branches_in_line = 2;
  int branches_in_line_size() const;
  void clear_branches_in_line();
  static const int kBranchesInLineFieldNumber = 2;
  ::google::protobuf::int32 branches_in_line(int index) const;
  void set_branches_in_line(int index, ::google::protobuf::int32 value);
  void add_branches_in_line(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      branches_in_line() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_branches_in_line();

  // bytes branch_present = 1;
  void clear_branch_present();
  static const int kBranchPresentFieldNumber = 1;
  const ::std::string& branch_present() const;
  void set_branch_present(const ::std::string& value);
  #if LANG_CXX11
  void set_branch_present(::std::string&& value);
  #endif
  void set_branch_present(const char* value);
  void set_branch_present(const void* value, size_t size);
  ::std::string* mutable_branch_present();
  ::std::string* release_branch_present();
  void set_allocated_branch_present(::std::string* branch_present);

  // bytes executed = 3;
  void clear_executed();
  static const int kExecutedFieldNumber = 3;
  const ::std::string& executed() const;
  void set_executed(const ::std::string& value);
  #if LANG_CXX11
  void set_executed(::std::string&& value);
  #endif
  void set_executed(const char* value);
  void set_executed(const void* value, size_t size);
  ::std::string* mutable_executed();
  ::std::string* release_executed();
  void set_allocated_executed(::std::string* executed);

  // bytes taken = 4;
  void clear_taken();
  static const int kTakenFieldNumber = 4;
  const ::std::string& taken() const;
  void set_taken(const ::std::string& value);
  #if LANG_CXX11
  void set_taken(::std::string&& value);
  #endif
  void set_taken(const char* value);
  void set_taken(const void* value, size_t size);
  ::std::string* mutable_taken();
  ::std::string* release_taken();
  void set_allocated_taken(::std::string* taken);

  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.BranchCoverage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > branches_in_line_;
  mutable int _branches_in_line_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr branch_present_;
  ::google::protobuf::internal::ArenaStringPtr executed_;
  ::google::protobuf::internal::ArenaStringPtr taken_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fresultstore_2fv2_2fcoverage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileCoverage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.resultstore.v2.FileCoverage) */ {
 public:
  FileCoverage();
  virtual ~FileCoverage();

  FileCoverage(const FileCoverage& from);

  inline FileCoverage& operator=(const FileCoverage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileCoverage(FileCoverage&& from) noexcept
    : FileCoverage() {
    *this = ::std::move(from);
  }

  inline FileCoverage& operator=(FileCoverage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileCoverage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileCoverage* internal_default_instance() {
    return reinterpret_cast<const FileCoverage*>(
               &_FileCoverage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FileCoverage* other);
  friend void swap(FileCoverage& a, FileCoverage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileCoverage* New() const final {
    return CreateMaybeMessage<FileCoverage>(NULL);
  }

  FileCoverage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileCoverage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileCoverage& from);
  void MergeFrom(const FileCoverage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileCoverage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .google.devtools.resultstore.v2.LineCoverage line_coverage = 2;
  bool has_line_coverage() const;
  void clear_line_coverage();
  static const int kLineCoverageFieldNumber = 2;
  private:
  const ::google::devtools::resultstore::v2::LineCoverage& _internal_line_coverage() const;
  public:
  const ::google::devtools::resultstore::v2::LineCoverage& line_coverage() const;
  ::google::devtools::resultstore::v2::LineCoverage* release_line_coverage();
  ::google::devtools::resultstore::v2::LineCoverage* mutable_line_coverage();
  void set_allocated_line_coverage(::google::devtools::resultstore::v2::LineCoverage* line_coverage);

  // .google.devtools.resultstore.v2.BranchCoverage branch_coverage = 3;
  bool has_branch_coverage() const;
  void clear_branch_coverage();
  static const int kBranchCoverageFieldNumber = 3;
  private:
  const ::google::devtools::resultstore::v2::BranchCoverage& _internal_branch_coverage() const;
  public:
  const ::google::devtools::resultstore::v2::BranchCoverage& branch_coverage() const;
  ::google::devtools::resultstore::v2::BranchCoverage* release_branch_coverage();
  ::google::devtools::resultstore::v2::BranchCoverage* mutable_branch_coverage();
  void set_allocated_branch_coverage(::google::devtools::resultstore::v2::BranchCoverage* branch_coverage);

  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.FileCoverage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::devtools::resultstore::v2::LineCoverage* line_coverage_;
  ::google::devtools::resultstore::v2::BranchCoverage* branch_coverage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fresultstore_2fv2_2fcoverage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActionCoverage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.resultstore.v2.ActionCoverage) */ {
 public:
  ActionCoverage();
  virtual ~ActionCoverage();

  ActionCoverage(const ActionCoverage& from);

  inline ActionCoverage& operator=(const ActionCoverage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionCoverage(ActionCoverage&& from) noexcept
    : ActionCoverage() {
    *this = ::std::move(from);
  }

  inline ActionCoverage& operator=(ActionCoverage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionCoverage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionCoverage* internal_default_instance() {
    return reinterpret_cast<const ActionCoverage*>(
               &_ActionCoverage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ActionCoverage* other);
  friend void swap(ActionCoverage& a, ActionCoverage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionCoverage* New() const final {
    return CreateMaybeMessage<ActionCoverage>(NULL);
  }

  ActionCoverage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ActionCoverage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ActionCoverage& from);
  void MergeFrom(const ActionCoverage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionCoverage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.resultstore.v2.FileCoverage file_coverages = 2;
  int file_coverages_size() const;
  void clear_file_coverages();
  static const int kFileCoveragesFieldNumber = 2;
  ::google::devtools::resultstore::v2::FileCoverage* mutable_file_coverages(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::FileCoverage >*
      mutable_file_coverages();
  const ::google::devtools::resultstore::v2::FileCoverage& file_coverages(int index) const;
  ::google::devtools::resultstore::v2::FileCoverage* add_file_coverages();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::FileCoverage >&
      file_coverages() const;

  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.ActionCoverage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::FileCoverage > file_coverages_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fresultstore_2fv2_2fcoverage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LineCoverage

// bytes instrumented_lines = 1;
inline void LineCoverage::clear_instrumented_lines() {
  instrumented_lines_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LineCoverage::instrumented_lines() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.LineCoverage.instrumented_lines)
  return instrumented_lines_.GetNoArena();
}
inline void LineCoverage::set_instrumented_lines(const ::std::string& value) {
  
  instrumented_lines_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.LineCoverage.instrumented_lines)
}
#if LANG_CXX11
inline void LineCoverage::set_instrumented_lines(::std::string&& value) {
  
  instrumented_lines_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.LineCoverage.instrumented_lines)
}
#endif
inline void LineCoverage::set_instrumented_lines(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrumented_lines_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.LineCoverage.instrumented_lines)
}
inline void LineCoverage::set_instrumented_lines(const void* value, size_t size) {
  
  instrumented_lines_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.LineCoverage.instrumented_lines)
}
inline ::std::string* LineCoverage::mutable_instrumented_lines() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.LineCoverage.instrumented_lines)
  return instrumented_lines_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LineCoverage::release_instrumented_lines() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.LineCoverage.instrumented_lines)
  
  return instrumented_lines_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LineCoverage::set_allocated_instrumented_lines(::std::string* instrumented_lines) {
  if (instrumented_lines != NULL) {
    
  } else {
    
  }
  instrumented_lines_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumented_lines);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.LineCoverage.instrumented_lines)
}

// bytes executed_lines = 2;
inline void LineCoverage::clear_executed_lines() {
  executed_lines_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LineCoverage::executed_lines() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.LineCoverage.executed_lines)
  return executed_lines_.GetNoArena();
}
inline void LineCoverage::set_executed_lines(const ::std::string& value) {
  
  executed_lines_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.LineCoverage.executed_lines)
}
#if LANG_CXX11
inline void LineCoverage::set_executed_lines(::std::string&& value) {
  
  executed_lines_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.LineCoverage.executed_lines)
}
#endif
inline void LineCoverage::set_executed_lines(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  executed_lines_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.LineCoverage.executed_lines)
}
inline void LineCoverage::set_executed_lines(const void* value, size_t size) {
  
  executed_lines_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.LineCoverage.executed_lines)
}
inline ::std::string* LineCoverage::mutable_executed_lines() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.LineCoverage.executed_lines)
  return executed_lines_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LineCoverage::release_executed_lines() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.LineCoverage.executed_lines)
  
  return executed_lines_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LineCoverage::set_allocated_executed_lines(::std::string* executed_lines) {
  if (executed_lines != NULL) {
    
  } else {
    
  }
  executed_lines_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), executed_lines);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.LineCoverage.executed_lines)
}

// -------------------------------------------------------------------

// BranchCoverage

// bytes branch_present = 1;
inline void BranchCoverage::clear_branch_present() {
  branch_present_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BranchCoverage::branch_present() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.BranchCoverage.branch_present)
  return branch_present_.GetNoArena();
}
inline void BranchCoverage::set_branch_present(const ::std::string& value) {
  
  branch_present_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.BranchCoverage.branch_present)
}
#if LANG_CXX11
inline void BranchCoverage::set_branch_present(::std::string&& value) {
  
  branch_present_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.BranchCoverage.branch_present)
}
#endif
inline void BranchCoverage::set_branch_present(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  branch_present_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.BranchCoverage.branch_present)
}
inline void BranchCoverage::set_branch_present(const void* value, size_t size) {
  
  branch_present_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.BranchCoverage.branch_present)
}
inline ::std::string* BranchCoverage::mutable_branch_present() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.BranchCoverage.branch_present)
  return branch_present_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BranchCoverage::release_branch_present() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.BranchCoverage.branch_present)
  
  return branch_present_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BranchCoverage::set_allocated_branch_present(::std::string* branch_present) {
  if (branch_present != NULL) {
    
  } else {
    
  }
  branch_present_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branch_present);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.BranchCoverage.branch_present)
}

// repeated int32 branches_in_line = 2;
inline int BranchCoverage::branches_in_line_size() const {
  return branches_in_line_.size();
}
inline void BranchCoverage::clear_branches_in_line() {
  branches_in_line_.Clear();
}
inline ::google::protobuf::int32 BranchCoverage::branches_in_line(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.BranchCoverage.branches_in_line)
  return branches_in_line_.Get(index);
}
inline void BranchCoverage::set_branches_in_line(int index, ::google::protobuf::int32 value) {
  branches_in_line_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.BranchCoverage.branches_in_line)
}
inline void BranchCoverage::add_branches_in_line(::google::protobuf::int32 value) {
  branches_in_line_.Add(value);
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.BranchCoverage.branches_in_line)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BranchCoverage::branches_in_line() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.BranchCoverage.branches_in_line)
  return branches_in_line_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BranchCoverage::mutable_branches_in_line() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.BranchCoverage.branches_in_line)
  return &branches_in_line_;
}

// bytes executed = 3;
inline void BranchCoverage::clear_executed() {
  executed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BranchCoverage::executed() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.BranchCoverage.executed)
  return executed_.GetNoArena();
}
inline void BranchCoverage::set_executed(const ::std::string& value) {
  
  executed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.BranchCoverage.executed)
}
#if LANG_CXX11
inline void BranchCoverage::set_executed(::std::string&& value) {
  
  executed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.BranchCoverage.executed)
}
#endif
inline void BranchCoverage::set_executed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  executed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.BranchCoverage.executed)
}
inline void BranchCoverage::set_executed(const void* value, size_t size) {
  
  executed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.BranchCoverage.executed)
}
inline ::std::string* BranchCoverage::mutable_executed() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.BranchCoverage.executed)
  return executed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BranchCoverage::release_executed() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.BranchCoverage.executed)
  
  return executed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BranchCoverage::set_allocated_executed(::std::string* executed) {
  if (executed != NULL) {
    
  } else {
    
  }
  executed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), executed);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.BranchCoverage.executed)
}

// bytes taken = 4;
inline void BranchCoverage::clear_taken() {
  taken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BranchCoverage::taken() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.BranchCoverage.taken)
  return taken_.GetNoArena();
}
inline void BranchCoverage::set_taken(const ::std::string& value) {
  
  taken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.BranchCoverage.taken)
}
#if LANG_CXX11
inline void BranchCoverage::set_taken(::std::string&& value) {
  
  taken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.BranchCoverage.taken)
}
#endif
inline void BranchCoverage::set_taken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  taken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.BranchCoverage.taken)
}
inline void BranchCoverage::set_taken(const void* value, size_t size) {
  
  taken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.BranchCoverage.taken)
}
inline ::std::string* BranchCoverage::mutable_taken() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.BranchCoverage.taken)
  return taken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BranchCoverage::release_taken() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.BranchCoverage.taken)
  
  return taken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BranchCoverage::set_allocated_taken(::std::string* taken) {
  if (taken != NULL) {
    
  } else {
    
  }
  taken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taken);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.BranchCoverage.taken)
}

// -------------------------------------------------------------------

// FileCoverage

// string path = 1;
inline void FileCoverage::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileCoverage::path() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.FileCoverage.path)
  return path_.GetNoArena();
}
inline void FileCoverage::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.FileCoverage.path)
}
#if LANG_CXX11
inline void FileCoverage::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.FileCoverage.path)
}
#endif
inline void FileCoverage::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.FileCoverage.path)
}
inline void FileCoverage::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.FileCoverage.path)
}
inline ::std::string* FileCoverage::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.FileCoverage.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileCoverage::release_path() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.FileCoverage.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileCoverage::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.FileCoverage.path)
}

// .google.devtools.resultstore.v2.LineCoverage line_coverage = 2;
inline bool FileCoverage::has_line_coverage() const {
  return this != internal_default_instance() && line_coverage_ != NULL;
}
inline void FileCoverage::clear_line_coverage() {
  if (GetArenaNoVirtual() == NULL && line_coverage_ != NULL) {
    delete line_coverage_;
  }
  line_coverage_ = NULL;
}
inline const ::google::devtools::resultstore::v2::LineCoverage& FileCoverage::_internal_line_coverage() const {
  return *line_coverage_;
}
inline const ::google::devtools::resultstore::v2::LineCoverage& FileCoverage::line_coverage() const {
  const ::google::devtools::resultstore::v2::LineCoverage* p = line_coverage_;
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.FileCoverage.line_coverage)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::resultstore::v2::LineCoverage*>(
      &::google::devtools::resultstore::v2::_LineCoverage_default_instance_);
}
inline ::google::devtools::resultstore::v2::LineCoverage* FileCoverage::release_line_coverage() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.FileCoverage.line_coverage)
  
  ::google::devtools::resultstore::v2::LineCoverage* temp = line_coverage_;
  line_coverage_ = NULL;
  return temp;
}
inline ::google::devtools::resultstore::v2::LineCoverage* FileCoverage::mutable_line_coverage() {
  
  if (line_coverage_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::resultstore::v2::LineCoverage>(GetArenaNoVirtual());
    line_coverage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.FileCoverage.line_coverage)
  return line_coverage_;
}
inline void FileCoverage::set_allocated_line_coverage(::google::devtools::resultstore::v2::LineCoverage* line_coverage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete line_coverage_;
  }
  if (line_coverage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      line_coverage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, line_coverage, submessage_arena);
    }
    
  } else {
    
  }
  line_coverage_ = line_coverage;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.FileCoverage.line_coverage)
}

// .google.devtools.resultstore.v2.BranchCoverage branch_coverage = 3;
inline bool FileCoverage::has_branch_coverage() const {
  return this != internal_default_instance() && branch_coverage_ != NULL;
}
inline void FileCoverage::clear_branch_coverage() {
  if (GetArenaNoVirtual() == NULL && branch_coverage_ != NULL) {
    delete branch_coverage_;
  }
  branch_coverage_ = NULL;
}
inline const ::google::devtools::resultstore::v2::BranchCoverage& FileCoverage::_internal_branch_coverage() const {
  return *branch_coverage_;
}
inline const ::google::devtools::resultstore::v2::BranchCoverage& FileCoverage::branch_coverage() const {
  const ::google::devtools::resultstore::v2::BranchCoverage* p = branch_coverage_;
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.FileCoverage.branch_coverage)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::resultstore::v2::BranchCoverage*>(
      &::google::devtools::resultstore::v2::_BranchCoverage_default_instance_);
}
inline ::google::devtools::resultstore::v2::BranchCoverage* FileCoverage::release_branch_coverage() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.FileCoverage.branch_coverage)
  
  ::google::devtools::resultstore::v2::BranchCoverage* temp = branch_coverage_;
  branch_coverage_ = NULL;
  return temp;
}
inline ::google::devtools::resultstore::v2::BranchCoverage* FileCoverage::mutable_branch_coverage() {
  
  if (branch_coverage_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::resultstore::v2::BranchCoverage>(GetArenaNoVirtual());
    branch_coverage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.FileCoverage.branch_coverage)
  return branch_coverage_;
}
inline void FileCoverage::set_allocated_branch_coverage(::google::devtools::resultstore::v2::BranchCoverage* branch_coverage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete branch_coverage_;
  }
  if (branch_coverage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      branch_coverage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, branch_coverage, submessage_arena);
    }
    
  } else {
    
  }
  branch_coverage_ = branch_coverage;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.FileCoverage.branch_coverage)
}

// -------------------------------------------------------------------

// ActionCoverage

// repeated .google.devtools.resultstore.v2.FileCoverage file_coverages = 2;
inline int ActionCoverage::file_coverages_size() const {
  return file_coverages_.size();
}
inline void ActionCoverage::clear_file_coverages() {
  file_coverages_.Clear();
}
inline ::google::devtools::resultstore::v2::FileCoverage* ActionCoverage::mutable_file_coverages(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.ActionCoverage.file_coverages)
  return file_coverages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::FileCoverage >*
ActionCoverage::mutable_file_coverages() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.ActionCoverage.file_coverages)
  return &file_coverages_;
}
inline const ::google::devtools::resultstore::v2::FileCoverage& ActionCoverage::file_coverages(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.ActionCoverage.file_coverages)
  return file_coverages_.Get(index);
}
inline ::google::devtools::resultstore::v2::FileCoverage* ActionCoverage::add_file_coverages() {
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.ActionCoverage.file_coverages)
  return file_coverages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::FileCoverage >&
ActionCoverage::file_coverages() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.ActionCoverage.file_coverages)
  return file_coverages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace resultstore
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fresultstore_2fv2_2fcoverage_2eproto
