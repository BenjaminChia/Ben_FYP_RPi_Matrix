// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/test_suite.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fresultstore_2fv2_2ftest_5fsuite_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fresultstore_2fv2_2ftest_5fsuite_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/devtools/resultstore/v2/common.pb.h"
#include "google/devtools/resultstore/v2/file.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fresultstore_2fv2_2ftest_5fsuite_2eproto 

namespace protobuf_google_2fdevtools_2fresultstore_2fv2_2ftest_5fsuite_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fresultstore_2fv2_2ftest_5fsuite_2eproto
namespace google {
namespace devtools {
namespace resultstore {
namespace v2 {
class Test;
class TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
class TestCase;
class TestCaseDefaultTypeInternal;
extern TestCaseDefaultTypeInternal _TestCase_default_instance_;
class TestError;
class TestErrorDefaultTypeInternal;
extern TestErrorDefaultTypeInternal _TestError_default_instance_;
class TestFailure;
class TestFailureDefaultTypeInternal;
extern TestFailureDefaultTypeInternal _TestFailure_default_instance_;
class TestSuite;
class TestSuiteDefaultTypeInternal;
extern TestSuiteDefaultTypeInternal _TestSuite_default_instance_;
}  // namespace v2
}  // namespace resultstore
}  // namespace devtools
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::devtools::resultstore::v2::Test* Arena::CreateMaybeMessage<::google::devtools::resultstore::v2::Test>(Arena*);
template<> ::google::devtools::resultstore::v2::TestCase* Arena::CreateMaybeMessage<::google::devtools::resultstore::v2::TestCase>(Arena*);
template<> ::google::devtools::resultstore::v2::TestError* Arena::CreateMaybeMessage<::google::devtools::resultstore::v2::TestError>(Arena*);
template<> ::google::devtools::resultstore::v2::TestFailure* Arena::CreateMaybeMessage<::google::devtools::resultstore::v2::TestFailure>(Arena*);
template<> ::google::devtools::resultstore::v2::TestSuite* Arena::CreateMaybeMessage<::google::devtools::resultstore::v2::TestSuite>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace devtools {
namespace resultstore {
namespace v2 {

enum TestCase_Result {
  TestCase_Result_RESULT_UNSPECIFIED = 0,
  TestCase_Result_COMPLETED = 1,
  TestCase_Result_INTERRUPTED = 2,
  TestCase_Result_CANCELLED = 3,
  TestCase_Result_FILTERED = 4,
  TestCase_Result_SKIPPED = 5,
  TestCase_Result_SUPPRESSED = 6,
  TestCase_Result_TestCase_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TestCase_Result_TestCase_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TestCase_Result_IsValid(int value);
const TestCase_Result TestCase_Result_Result_MIN = TestCase_Result_RESULT_UNSPECIFIED;
const TestCase_Result TestCase_Result_Result_MAX = TestCase_Result_SUPPRESSED;
const int TestCase_Result_Result_ARRAYSIZE = TestCase_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestCase_Result_descriptor();
inline const ::std::string& TestCase_Result_Name(TestCase_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestCase_Result_descriptor(), value);
}
inline bool TestCase_Result_Parse(
    const ::std::string& name, TestCase_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestCase_Result>(
    TestCase_Result_descriptor(), name, value);
}
// ===================================================================

class TestSuite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.resultstore.v2.TestSuite) */ {
 public:
  TestSuite();
  virtual ~TestSuite();

  TestSuite(const TestSuite& from);

  inline TestSuite& operator=(const TestSuite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestSuite(TestSuite&& from) noexcept
    : TestSuite() {
    *this = ::std::move(from);
  }

  inline TestSuite& operator=(TestSuite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestSuite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestSuite* internal_default_instance() {
    return reinterpret_cast<const TestSuite*>(
               &_TestSuite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TestSuite* other);
  friend void swap(TestSuite& a, TestSuite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestSuite* New() const final {
    return CreateMaybeMessage<TestSuite>(NULL);
  }

  TestSuite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestSuite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestSuite& from);
  void MergeFrom(const TestSuite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestSuite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.resultstore.v2.Test tests = 2;
  int tests_size() const;
  void clear_tests();
  static const int kTestsFieldNumber = 2;
  ::google::devtools::resultstore::v2::Test* mutable_tests(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Test >*
      mutable_tests();
  const ::google::devtools::resultstore::v2::Test& tests(int index) const;
  ::google::devtools::resultstore::v2::Test* add_tests();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Test >&
      tests() const;

  // repeated .google.devtools.resultstore.v2.TestFailure failures = 3;
  int failures_size() const;
  void clear_failures();
  static const int kFailuresFieldNumber = 3;
  ::google::devtools::resultstore::v2::TestFailure* mutable_failures(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestFailure >*
      mutable_failures();
  const ::google::devtools::resultstore::v2::TestFailure& failures(int index) const;
  ::google::devtools::resultstore::v2::TestFailure* add_failures();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestFailure >&
      failures() const;

  // repeated .google.devtools.resultstore.v2.TestError errors = 4;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 4;
  ::google::devtools::resultstore::v2::TestError* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestError >*
      mutable_errors();
  const ::google::devtools::resultstore::v2::TestError& errors(int index) const;
  ::google::devtools::resultstore::v2::TestError* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestError >&
      errors() const;

  // repeated .google.devtools.resultstore.v2.Property properties = 7;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 7;
  ::google::devtools::resultstore::v2::Property* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Property >*
      mutable_properties();
  const ::google::devtools::resultstore::v2::Property& properties(int index) const;
  ::google::devtools::resultstore::v2::Property* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Property >&
      properties() const;

  // repeated .google.devtools.resultstore.v2.File files = 8;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 8;
  ::google::devtools::resultstore::v2::File* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >*
      mutable_files();
  const ::google::devtools::resultstore::v2::File& files(int index) const;
  ::google::devtools::resultstore::v2::File* add_files();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >&
      files() const;

  // string suite_name = 1;
  void clear_suite_name();
  static const int kSuiteNameFieldNumber = 1;
  const ::std::string& suite_name() const;
  void set_suite_name(const ::std::string& value);
  #if LANG_CXX11
  void set_suite_name(::std::string&& value);
  #endif
  void set_suite_name(const char* value);
  void set_suite_name(const char* value, size_t size);
  ::std::string* mutable_suite_name();
  ::std::string* release_suite_name();
  void set_allocated_suite_name(::std::string* suite_name);

  // .google.devtools.resultstore.v2.Timing timing = 6;
  bool has_timing() const;
  void clear_timing();
  static const int kTimingFieldNumber = 6;
  private:
  const ::google::devtools::resultstore::v2::Timing& _internal_timing() const;
  public:
  const ::google::devtools::resultstore::v2::Timing& timing() const;
  ::google::devtools::resultstore::v2::Timing* release_timing();
  ::google::devtools::resultstore::v2::Timing* mutable_timing();
  void set_allocated_timing(::google::devtools::resultstore::v2::Timing* timing);

  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.TestSuite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Test > tests_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestFailure > failures_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestError > errors_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Property > properties_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File > files_;
  ::google::protobuf::internal::ArenaStringPtr suite_name_;
  ::google::devtools::resultstore::v2::Timing* timing_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fresultstore_2fv2_2ftest_5fsuite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.resultstore.v2.Test) */ {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(Test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  enum TestTypeCase {
    kTestCase = 1,
    kTestSuite = 2,
    TEST_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Test* other);
  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test* New() const final {
    return CreateMaybeMessage<Test>(NULL);
  }

  Test* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.devtools.resultstore.v2.TestCase test_case = 1;
  bool has_test_case() const;
  void clear_test_case();
  static const int kTestCaseFieldNumber = 1;
  private:
  const ::google::devtools::resultstore::v2::TestCase& _internal_test_case() const;
  public:
  const ::google::devtools::resultstore::v2::TestCase& test_case() const;
  ::google::devtools::resultstore::v2::TestCase* release_test_case();
  ::google::devtools::resultstore::v2::TestCase* mutable_test_case();
  void set_allocated_test_case(::google::devtools::resultstore::v2::TestCase* test_case);

  // .google.devtools.resultstore.v2.TestSuite test_suite = 2;
  bool has_test_suite() const;
  void clear_test_suite();
  static const int kTestSuiteFieldNumber = 2;
  private:
  const ::google::devtools::resultstore::v2::TestSuite& _internal_test_suite() const;
  public:
  const ::google::devtools::resultstore::v2::TestSuite& test_suite() const;
  ::google::devtools::resultstore::v2::TestSuite* release_test_suite();
  ::google::devtools::resultstore::v2::TestSuite* mutable_test_suite();
  void set_allocated_test_suite(::google::devtools::resultstore::v2::TestSuite* test_suite);

  void clear_test_type();
  TestTypeCase test_type_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.Test)
 private:
  void set_has_test_case();
  void set_has_test_suite();

  inline bool has_test_type() const;
  inline void clear_has_test_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TestTypeUnion {
    TestTypeUnion() {}
    ::google::devtools::resultstore::v2::TestCase* test_case_;
    ::google::devtools::resultstore::v2::TestSuite* test_suite_;
  } test_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fresultstore_2fv2_2ftest_5fsuite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestCase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.resultstore.v2.TestCase) */ {
 public:
  TestCase();
  virtual ~TestCase();

  TestCase(const TestCase& from);

  inline TestCase& operator=(const TestCase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestCase(TestCase&& from) noexcept
    : TestCase() {
    *this = ::std::move(from);
  }

  inline TestCase& operator=(TestCase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestCase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestCase* internal_default_instance() {
    return reinterpret_cast<const TestCase*>(
               &_TestCase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TestCase* other);
  friend void swap(TestCase& a, TestCase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestCase* New() const final {
    return CreateMaybeMessage<TestCase>(NULL);
  }

  TestCase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestCase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestCase& from);
  void MergeFrom(const TestCase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestCase_Result Result;
  static const Result RESULT_UNSPECIFIED =
    TestCase_Result_RESULT_UNSPECIFIED;
  static const Result COMPLETED =
    TestCase_Result_COMPLETED;
  static const Result INTERRUPTED =
    TestCase_Result_INTERRUPTED;
  static const Result CANCELLED =
    TestCase_Result_CANCELLED;
  static const Result FILTERED =
    TestCase_Result_FILTERED;
  static const Result SKIPPED =
    TestCase_Result_SKIPPED;
  static const Result SUPPRESSED =
    TestCase_Result_SUPPRESSED;
  static inline bool Result_IsValid(int value) {
    return TestCase_Result_IsValid(value);
  }
  static const Result Result_MIN =
    TestCase_Result_Result_MIN;
  static const Result Result_MAX =
    TestCase_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    TestCase_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return TestCase_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return TestCase_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return TestCase_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.devtools.resultstore.v2.TestFailure failures = 4;
  int failures_size() const;
  void clear_failures();
  static const int kFailuresFieldNumber = 4;
  ::google::devtools::resultstore::v2::TestFailure* mutable_failures(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestFailure >*
      mutable_failures();
  const ::google::devtools::resultstore::v2::TestFailure& failures(int index) const;
  ::google::devtools::resultstore::v2::TestFailure* add_failures();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestFailure >&
      failures() const;

  // repeated .google.devtools.resultstore.v2.TestError errors = 5;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 5;
  ::google::devtools::resultstore::v2::TestError* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestError >*
      mutable_errors();
  const ::google::devtools::resultstore::v2::TestError& errors(int index) const;
  ::google::devtools::resultstore::v2::TestError* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestError >&
      errors() const;

  // repeated .google.devtools.resultstore.v2.Property properties = 8;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 8;
  ::google::devtools::resultstore::v2::Property* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Property >*
      mutable_properties();
  const ::google::devtools::resultstore::v2::Property& properties(int index) const;
  ::google::devtools::resultstore::v2::Property* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Property >&
      properties() const;

  // repeated .google.devtools.resultstore.v2.File files = 9;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 9;
  ::google::devtools::resultstore::v2::File* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >*
      mutable_files();
  const ::google::devtools::resultstore::v2::File& files(int index) const;
  ::google::devtools::resultstore::v2::File* add_files();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >&
      files() const;

  // string case_name = 1;
  void clear_case_name();
  static const int kCaseNameFieldNumber = 1;
  const ::std::string& case_name() const;
  void set_case_name(const ::std::string& value);
  #if LANG_CXX11
  void set_case_name(::std::string&& value);
  #endif
  void set_case_name(const char* value);
  void set_case_name(const char* value, size_t size);
  ::std::string* mutable_case_name();
  ::std::string* release_case_name();
  void set_allocated_case_name(::std::string* case_name);

  // string class_name = 2;
  void clear_class_name();
  static const int kClassNameFieldNumber = 2;
  const ::std::string& class_name() const;
  void set_class_name(const ::std::string& value);
  #if LANG_CXX11
  void set_class_name(::std::string&& value);
  #endif
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  ::std::string* mutable_class_name();
  ::std::string* release_class_name();
  void set_allocated_class_name(::std::string* class_name);

  // .google.devtools.resultstore.v2.Timing timing = 7;
  bool has_timing() const;
  void clear_timing();
  static const int kTimingFieldNumber = 7;
  private:
  const ::google::devtools::resultstore::v2::Timing& _internal_timing() const;
  public:
  const ::google::devtools::resultstore::v2::Timing& timing() const;
  ::google::devtools::resultstore::v2::Timing* release_timing();
  ::google::devtools::resultstore::v2::Timing* mutable_timing();
  void set_allocated_timing(::google::devtools::resultstore::v2::Timing* timing);

  // .google.devtools.resultstore.v2.TestCase.Result result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::devtools::resultstore::v2::TestCase_Result result() const;
  void set_result(::google::devtools::resultstore::v2::TestCase_Result value);

  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.TestCase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestFailure > failures_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestError > errors_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Property > properties_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File > files_;
  ::google::protobuf::internal::ArenaStringPtr case_name_;
  ::google::protobuf::internal::ArenaStringPtr class_name_;
  ::google::devtools::resultstore::v2::Timing* timing_;
  int result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fresultstore_2fv2_2ftest_5fsuite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestFailure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.resultstore.v2.TestFailure) */ {
 public:
  TestFailure();
  virtual ~TestFailure();

  TestFailure(const TestFailure& from);

  inline TestFailure& operator=(const TestFailure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestFailure(TestFailure&& from) noexcept
    : TestFailure() {
    *this = ::std::move(from);
  }

  inline TestFailure& operator=(TestFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestFailure* internal_default_instance() {
    return reinterpret_cast<const TestFailure*>(
               &_TestFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TestFailure* other);
  friend void swap(TestFailure& a, TestFailure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestFailure* New() const final {
    return CreateMaybeMessage<TestFailure>(NULL);
  }

  TestFailure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestFailure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestFailure& from);
  void MergeFrom(const TestFailure& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestFailure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string failure_message = 1;
  void clear_failure_message();
  static const int kFailureMessageFieldNumber = 1;
  const ::std::string& failure_message() const;
  void set_failure_message(const ::std::string& value);
  #if LANG_CXX11
  void set_failure_message(::std::string&& value);
  #endif
  void set_failure_message(const char* value);
  void set_failure_message(const char* value, size_t size);
  ::std::string* mutable_failure_message();
  ::std::string* release_failure_message();
  void set_allocated_failure_message(::std::string* failure_message);

  // string exception_type = 2;
  void clear_exception_type();
  static const int kExceptionTypeFieldNumber = 2;
  const ::std::string& exception_type() const;
  void set_exception_type(const ::std::string& value);
  #if LANG_CXX11
  void set_exception_type(::std::string&& value);
  #endif
  void set_exception_type(const char* value);
  void set_exception_type(const char* value, size_t size);
  ::std::string* mutable_exception_type();
  ::std::string* release_exception_type();
  void set_allocated_exception_type(::std::string* exception_type);

  // string stack_trace = 3;
  void clear_stack_trace();
  static const int kStackTraceFieldNumber = 3;
  const ::std::string& stack_trace() const;
  void set_stack_trace(const ::std::string& value);
  #if LANG_CXX11
  void set_stack_trace(::std::string&& value);
  #endif
  void set_stack_trace(const char* value);
  void set_stack_trace(const char* value, size_t size);
  ::std::string* mutable_stack_trace();
  ::std::string* release_stack_trace();
  void set_allocated_stack_trace(::std::string* stack_trace);

  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.TestFailure)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr failure_message_;
  ::google::protobuf::internal::ArenaStringPtr exception_type_;
  ::google::protobuf::internal::ArenaStringPtr stack_trace_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fresultstore_2fv2_2ftest_5fsuite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.resultstore.v2.TestError) */ {
 public:
  TestError();
  virtual ~TestError();

  TestError(const TestError& from);

  inline TestError& operator=(const TestError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestError(TestError&& from) noexcept
    : TestError() {
    *this = ::std::move(from);
  }

  inline TestError& operator=(TestError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestError* internal_default_instance() {
    return reinterpret_cast<const TestError*>(
               &_TestError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TestError* other);
  friend void swap(TestError& a, TestError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestError* New() const final {
    return CreateMaybeMessage<TestError>(NULL);
  }

  TestError* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestError>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestError& from);
  void MergeFrom(const TestError& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 1;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 1;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // string exception_type = 2;
  void clear_exception_type();
  static const int kExceptionTypeFieldNumber = 2;
  const ::std::string& exception_type() const;
  void set_exception_type(const ::std::string& value);
  #if LANG_CXX11
  void set_exception_type(::std::string&& value);
  #endif
  void set_exception_type(const char* value);
  void set_exception_type(const char* value, size_t size);
  ::std::string* mutable_exception_type();
  ::std::string* release_exception_type();
  void set_allocated_exception_type(::std::string* exception_type);

  // string stack_trace = 3;
  void clear_stack_trace();
  static const int kStackTraceFieldNumber = 3;
  const ::std::string& stack_trace() const;
  void set_stack_trace(const ::std::string& value);
  #if LANG_CXX11
  void set_stack_trace(::std::string&& value);
  #endif
  void set_stack_trace(const char* value);
  void set_stack_trace(const char* value, size_t size);
  ::std::string* mutable_stack_trace();
  ::std::string* release_stack_trace();
  void set_allocated_stack_trace(::std::string* stack_trace);

  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.TestError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::internal::ArenaStringPtr exception_type_;
  ::google::protobuf::internal::ArenaStringPtr stack_trace_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fresultstore_2fv2_2ftest_5fsuite_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestSuite

// string suite_name = 1;
inline void TestSuite::clear_suite_name() {
  suite_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestSuite::suite_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestSuite.suite_name)
  return suite_name_.GetNoArena();
}
inline void TestSuite::set_suite_name(const ::std::string& value) {
  
  suite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.TestSuite.suite_name)
}
#if LANG_CXX11
inline void TestSuite::set_suite_name(::std::string&& value) {
  
  suite_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.TestSuite.suite_name)
}
#endif
inline void TestSuite::set_suite_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.TestSuite.suite_name)
}
inline void TestSuite::set_suite_name(const char* value, size_t size) {
  
  suite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.TestSuite.suite_name)
}
inline ::std::string* TestSuite::mutable_suite_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestSuite.suite_name)
  return suite_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestSuite::release_suite_name() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.TestSuite.suite_name)
  
  return suite_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestSuite::set_allocated_suite_name(::std::string* suite_name) {
  if (suite_name != NULL) {
    
  } else {
    
  }
  suite_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suite_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.TestSuite.suite_name)
}

// repeated .google.devtools.resultstore.v2.Test tests = 2;
inline int TestSuite::tests_size() const {
  return tests_.size();
}
inline void TestSuite::clear_tests() {
  tests_.Clear();
}
inline ::google::devtools::resultstore::v2::Test* TestSuite::mutable_tests(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestSuite.tests)
  return tests_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Test >*
TestSuite::mutable_tests() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.TestSuite.tests)
  return &tests_;
}
inline const ::google::devtools::resultstore::v2::Test& TestSuite::tests(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestSuite.tests)
  return tests_.Get(index);
}
inline ::google::devtools::resultstore::v2::Test* TestSuite::add_tests() {
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.TestSuite.tests)
  return tests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Test >&
TestSuite::tests() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.TestSuite.tests)
  return tests_;
}

// repeated .google.devtools.resultstore.v2.TestFailure failures = 3;
inline int TestSuite::failures_size() const {
  return failures_.size();
}
inline void TestSuite::clear_failures() {
  failures_.Clear();
}
inline ::google::devtools::resultstore::v2::TestFailure* TestSuite::mutable_failures(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestSuite.failures)
  return failures_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestFailure >*
TestSuite::mutable_failures() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.TestSuite.failures)
  return &failures_;
}
inline const ::google::devtools::resultstore::v2::TestFailure& TestSuite::failures(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestSuite.failures)
  return failures_.Get(index);
}
inline ::google::devtools::resultstore::v2::TestFailure* TestSuite::add_failures() {
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.TestSuite.failures)
  return failures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestFailure >&
TestSuite::failures() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.TestSuite.failures)
  return failures_;
}

// repeated .google.devtools.resultstore.v2.TestError errors = 4;
inline int TestSuite::errors_size() const {
  return errors_.size();
}
inline void TestSuite::clear_errors() {
  errors_.Clear();
}
inline ::google::devtools::resultstore::v2::TestError* TestSuite::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestSuite.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestError >*
TestSuite::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.TestSuite.errors)
  return &errors_;
}
inline const ::google::devtools::resultstore::v2::TestError& TestSuite::errors(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestSuite.errors)
  return errors_.Get(index);
}
inline ::google::devtools::resultstore::v2::TestError* TestSuite::add_errors() {
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.TestSuite.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestError >&
TestSuite::errors() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.TestSuite.errors)
  return errors_;
}

// .google.devtools.resultstore.v2.Timing timing = 6;
inline bool TestSuite::has_timing() const {
  return this != internal_default_instance() && timing_ != NULL;
}
inline const ::google::devtools::resultstore::v2::Timing& TestSuite::_internal_timing() const {
  return *timing_;
}
inline const ::google::devtools::resultstore::v2::Timing& TestSuite::timing() const {
  const ::google::devtools::resultstore::v2::Timing* p = timing_;
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestSuite.timing)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::resultstore::v2::Timing*>(
      &::google::devtools::resultstore::v2::_Timing_default_instance_);
}
inline ::google::devtools::resultstore::v2::Timing* TestSuite::release_timing() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.TestSuite.timing)
  
  ::google::devtools::resultstore::v2::Timing* temp = timing_;
  timing_ = NULL;
  return temp;
}
inline ::google::devtools::resultstore::v2::Timing* TestSuite::mutable_timing() {
  
  if (timing_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::resultstore::v2::Timing>(GetArenaNoVirtual());
    timing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestSuite.timing)
  return timing_;
}
inline void TestSuite::set_allocated_timing(::google::devtools::resultstore::v2::Timing* timing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timing_);
  }
  if (timing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.TestSuite.timing)
}

// repeated .google.devtools.resultstore.v2.Property properties = 7;
inline int TestSuite::properties_size() const {
  return properties_.size();
}
inline ::google::devtools::resultstore::v2::Property* TestSuite::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestSuite.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Property >*
TestSuite::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.TestSuite.properties)
  return &properties_;
}
inline const ::google::devtools::resultstore::v2::Property& TestSuite::properties(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestSuite.properties)
  return properties_.Get(index);
}
inline ::google::devtools::resultstore::v2::Property* TestSuite::add_properties() {
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.TestSuite.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Property >&
TestSuite::properties() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.TestSuite.properties)
  return properties_;
}

// repeated .google.devtools.resultstore.v2.File files = 8;
inline int TestSuite::files_size() const {
  return files_.size();
}
inline ::google::devtools::resultstore::v2::File* TestSuite::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestSuite.files)
  return files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >*
TestSuite::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.TestSuite.files)
  return &files_;
}
inline const ::google::devtools::resultstore::v2::File& TestSuite::files(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestSuite.files)
  return files_.Get(index);
}
inline ::google::devtools::resultstore::v2::File* TestSuite::add_files() {
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.TestSuite.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >&
TestSuite::files() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.TestSuite.files)
  return files_;
}

// -------------------------------------------------------------------

// Test

// .google.devtools.resultstore.v2.TestCase test_case = 1;
inline bool Test::has_test_case() const {
  return test_type_case() == kTestCase;
}
inline void Test::set_has_test_case() {
  _oneof_case_[0] = kTestCase;
}
inline void Test::clear_test_case() {
  if (has_test_case()) {
    delete test_type_.test_case_;
    clear_has_test_type();
  }
}
inline const ::google::devtools::resultstore::v2::TestCase& Test::_internal_test_case() const {
  return *test_type_.test_case_;
}
inline ::google::devtools::resultstore::v2::TestCase* Test::release_test_case() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.Test.test_case)
  if (has_test_case()) {
    clear_has_test_type();
      ::google::devtools::resultstore::v2::TestCase* temp = test_type_.test_case_;
    test_type_.test_case_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::resultstore::v2::TestCase& Test::test_case() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.Test.test_case)
  return has_test_case()
      ? *test_type_.test_case_
      : *reinterpret_cast< ::google::devtools::resultstore::v2::TestCase*>(&::google::devtools::resultstore::v2::_TestCase_default_instance_);
}
inline ::google::devtools::resultstore::v2::TestCase* Test::mutable_test_case() {
  if (!has_test_case()) {
    clear_test_type();
    set_has_test_case();
    test_type_.test_case_ = CreateMaybeMessage< ::google::devtools::resultstore::v2::TestCase >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.Test.test_case)
  return test_type_.test_case_;
}

// .google.devtools.resultstore.v2.TestSuite test_suite = 2;
inline bool Test::has_test_suite() const {
  return test_type_case() == kTestSuite;
}
inline void Test::set_has_test_suite() {
  _oneof_case_[0] = kTestSuite;
}
inline void Test::clear_test_suite() {
  if (has_test_suite()) {
    delete test_type_.test_suite_;
    clear_has_test_type();
  }
}
inline const ::google::devtools::resultstore::v2::TestSuite& Test::_internal_test_suite() const {
  return *test_type_.test_suite_;
}
inline ::google::devtools::resultstore::v2::TestSuite* Test::release_test_suite() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.Test.test_suite)
  if (has_test_suite()) {
    clear_has_test_type();
      ::google::devtools::resultstore::v2::TestSuite* temp = test_type_.test_suite_;
    test_type_.test_suite_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::resultstore::v2::TestSuite& Test::test_suite() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.Test.test_suite)
  return has_test_suite()
      ? *test_type_.test_suite_
      : *reinterpret_cast< ::google::devtools::resultstore::v2::TestSuite*>(&::google::devtools::resultstore::v2::_TestSuite_default_instance_);
}
inline ::google::devtools::resultstore::v2::TestSuite* Test::mutable_test_suite() {
  if (!has_test_suite()) {
    clear_test_type();
    set_has_test_suite();
    test_type_.test_suite_ = CreateMaybeMessage< ::google::devtools::resultstore::v2::TestSuite >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.Test.test_suite)
  return test_type_.test_suite_;
}

inline bool Test::has_test_type() const {
  return test_type_case() != TEST_TYPE_NOT_SET;
}
inline void Test::clear_has_test_type() {
  _oneof_case_[0] = TEST_TYPE_NOT_SET;
}
inline Test::TestTypeCase Test::test_type_case() const {
  return Test::TestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TestCase

// string case_name = 1;
inline void TestCase::clear_case_name() {
  case_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestCase::case_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestCase.case_name)
  return case_name_.GetNoArena();
}
inline void TestCase::set_case_name(const ::std::string& value) {
  
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.TestCase.case_name)
}
#if LANG_CXX11
inline void TestCase::set_case_name(::std::string&& value) {
  
  case_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.TestCase.case_name)
}
#endif
inline void TestCase::set_case_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.TestCase.case_name)
}
inline void TestCase::set_case_name(const char* value, size_t size) {
  
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.TestCase.case_name)
}
inline ::std::string* TestCase::mutable_case_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestCase.case_name)
  return case_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestCase::release_case_name() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.TestCase.case_name)
  
  return case_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestCase::set_allocated_case_name(::std::string* case_name) {
  if (case_name != NULL) {
    
  } else {
    
  }
  case_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), case_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.TestCase.case_name)
}

// string class_name = 2;
inline void TestCase::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestCase::class_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestCase.class_name)
  return class_name_.GetNoArena();
}
inline void TestCase::set_class_name(const ::std::string& value) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.TestCase.class_name)
}
#if LANG_CXX11
inline void TestCase::set_class_name(::std::string&& value) {
  
  class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.TestCase.class_name)
}
#endif
inline void TestCase::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.TestCase.class_name)
}
inline void TestCase::set_class_name(const char* value, size_t size) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.TestCase.class_name)
}
inline ::std::string* TestCase::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestCase.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestCase::release_class_name() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.TestCase.class_name)
  
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestCase::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.TestCase.class_name)
}

// .google.devtools.resultstore.v2.TestCase.Result result = 3;
inline void TestCase::clear_result() {
  result_ = 0;
}
inline ::google::devtools::resultstore::v2::TestCase_Result TestCase::result() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestCase.result)
  return static_cast< ::google::devtools::resultstore::v2::TestCase_Result >(result_);
}
inline void TestCase::set_result(::google::devtools::resultstore::v2::TestCase_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.TestCase.result)
}

// repeated .google.devtools.resultstore.v2.TestFailure failures = 4;
inline int TestCase::failures_size() const {
  return failures_.size();
}
inline void TestCase::clear_failures() {
  failures_.Clear();
}
inline ::google::devtools::resultstore::v2::TestFailure* TestCase::mutable_failures(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestCase.failures)
  return failures_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestFailure >*
TestCase::mutable_failures() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.TestCase.failures)
  return &failures_;
}
inline const ::google::devtools::resultstore::v2::TestFailure& TestCase::failures(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestCase.failures)
  return failures_.Get(index);
}
inline ::google::devtools::resultstore::v2::TestFailure* TestCase::add_failures() {
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.TestCase.failures)
  return failures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestFailure >&
TestCase::failures() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.TestCase.failures)
  return failures_;
}

// repeated .google.devtools.resultstore.v2.TestError errors = 5;
inline int TestCase::errors_size() const {
  return errors_.size();
}
inline void TestCase::clear_errors() {
  errors_.Clear();
}
inline ::google::devtools::resultstore::v2::TestError* TestCase::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestCase.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestError >*
TestCase::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.TestCase.errors)
  return &errors_;
}
inline const ::google::devtools::resultstore::v2::TestError& TestCase::errors(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestCase.errors)
  return errors_.Get(index);
}
inline ::google::devtools::resultstore::v2::TestError* TestCase::add_errors() {
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.TestCase.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::TestError >&
TestCase::errors() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.TestCase.errors)
  return errors_;
}

// .google.devtools.resultstore.v2.Timing timing = 7;
inline bool TestCase::has_timing() const {
  return this != internal_default_instance() && timing_ != NULL;
}
inline const ::google::devtools::resultstore::v2::Timing& TestCase::_internal_timing() const {
  return *timing_;
}
inline const ::google::devtools::resultstore::v2::Timing& TestCase::timing() const {
  const ::google::devtools::resultstore::v2::Timing* p = timing_;
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestCase.timing)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::resultstore::v2::Timing*>(
      &::google::devtools::resultstore::v2::_Timing_default_instance_);
}
inline ::google::devtools::resultstore::v2::Timing* TestCase::release_timing() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.TestCase.timing)
  
  ::google::devtools::resultstore::v2::Timing* temp = timing_;
  timing_ = NULL;
  return temp;
}
inline ::google::devtools::resultstore::v2::Timing* TestCase::mutable_timing() {
  
  if (timing_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::resultstore::v2::Timing>(GetArenaNoVirtual());
    timing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestCase.timing)
  return timing_;
}
inline void TestCase::set_allocated_timing(::google::devtools::resultstore::v2::Timing* timing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timing_);
  }
  if (timing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.TestCase.timing)
}

// repeated .google.devtools.resultstore.v2.Property properties = 8;
inline int TestCase::properties_size() const {
  return properties_.size();
}
inline ::google::devtools::resultstore::v2::Property* TestCase::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestCase.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Property >*
TestCase::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.TestCase.properties)
  return &properties_;
}
inline const ::google::devtools::resultstore::v2::Property& TestCase::properties(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestCase.properties)
  return properties_.Get(index);
}
inline ::google::devtools::resultstore::v2::Property* TestCase::add_properties() {
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.TestCase.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::Property >&
TestCase::properties() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.TestCase.properties)
  return properties_;
}

// repeated .google.devtools.resultstore.v2.File files = 9;
inline int TestCase::files_size() const {
  return files_.size();
}
inline ::google::devtools::resultstore::v2::File* TestCase::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestCase.files)
  return files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >*
TestCase::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.TestCase.files)
  return &files_;
}
inline const ::google::devtools::resultstore::v2::File& TestCase::files(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestCase.files)
  return files_.Get(index);
}
inline ::google::devtools::resultstore::v2::File* TestCase::add_files() {
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.TestCase.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >&
TestCase::files() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.TestCase.files)
  return files_;
}

// -------------------------------------------------------------------

// TestFailure

// string failure_message = 1;
inline void TestFailure::clear_failure_message() {
  failure_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestFailure::failure_message() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestFailure.failure_message)
  return failure_message_.GetNoArena();
}
inline void TestFailure::set_failure_message(const ::std::string& value) {
  
  failure_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.TestFailure.failure_message)
}
#if LANG_CXX11
inline void TestFailure::set_failure_message(::std::string&& value) {
  
  failure_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.TestFailure.failure_message)
}
#endif
inline void TestFailure::set_failure_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  failure_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.TestFailure.failure_message)
}
inline void TestFailure::set_failure_message(const char* value, size_t size) {
  
  failure_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.TestFailure.failure_message)
}
inline ::std::string* TestFailure::mutable_failure_message() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestFailure.failure_message)
  return failure_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestFailure::release_failure_message() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.TestFailure.failure_message)
  
  return failure_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestFailure::set_allocated_failure_message(::std::string* failure_message) {
  if (failure_message != NULL) {
    
  } else {
    
  }
  failure_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failure_message);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.TestFailure.failure_message)
}

// string exception_type = 2;
inline void TestFailure::clear_exception_type() {
  exception_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestFailure::exception_type() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestFailure.exception_type)
  return exception_type_.GetNoArena();
}
inline void TestFailure::set_exception_type(const ::std::string& value) {
  
  exception_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.TestFailure.exception_type)
}
#if LANG_CXX11
inline void TestFailure::set_exception_type(::std::string&& value) {
  
  exception_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.TestFailure.exception_type)
}
#endif
inline void TestFailure::set_exception_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exception_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.TestFailure.exception_type)
}
inline void TestFailure::set_exception_type(const char* value, size_t size) {
  
  exception_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.TestFailure.exception_type)
}
inline ::std::string* TestFailure::mutable_exception_type() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestFailure.exception_type)
  return exception_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestFailure::release_exception_type() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.TestFailure.exception_type)
  
  return exception_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestFailure::set_allocated_exception_type(::std::string* exception_type) {
  if (exception_type != NULL) {
    
  } else {
    
  }
  exception_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exception_type);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.TestFailure.exception_type)
}

// string stack_trace = 3;
inline void TestFailure::clear_stack_trace() {
  stack_trace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestFailure::stack_trace() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestFailure.stack_trace)
  return stack_trace_.GetNoArena();
}
inline void TestFailure::set_stack_trace(const ::std::string& value) {
  
  stack_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.TestFailure.stack_trace)
}
#if LANG_CXX11
inline void TestFailure::set_stack_trace(::std::string&& value) {
  
  stack_trace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.TestFailure.stack_trace)
}
#endif
inline void TestFailure::set_stack_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stack_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.TestFailure.stack_trace)
}
inline void TestFailure::set_stack_trace(const char* value, size_t size) {
  
  stack_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.TestFailure.stack_trace)
}
inline ::std::string* TestFailure::mutable_stack_trace() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestFailure.stack_trace)
  return stack_trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestFailure::release_stack_trace() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.TestFailure.stack_trace)
  
  return stack_trace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestFailure::set_allocated_stack_trace(::std::string* stack_trace) {
  if (stack_trace != NULL) {
    
  } else {
    
  }
  stack_trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stack_trace);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.TestFailure.stack_trace)
}

// -------------------------------------------------------------------

// TestError

// string error_message = 1;
inline void TestError::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestError::error_message() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestError.error_message)
  return error_message_.GetNoArena();
}
inline void TestError::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.TestError.error_message)
}
#if LANG_CXX11
inline void TestError::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.TestError.error_message)
}
#endif
inline void TestError::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.TestError.error_message)
}
inline void TestError::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.TestError.error_message)
}
inline ::std::string* TestError::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestError.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestError::release_error_message() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.TestError.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestError::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.TestError.error_message)
}

// string exception_type = 2;
inline void TestError::clear_exception_type() {
  exception_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestError::exception_type() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestError.exception_type)
  return exception_type_.GetNoArena();
}
inline void TestError::set_exception_type(const ::std::string& value) {
  
  exception_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.TestError.exception_type)
}
#if LANG_CXX11
inline void TestError::set_exception_type(::std::string&& value) {
  
  exception_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.TestError.exception_type)
}
#endif
inline void TestError::set_exception_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exception_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.TestError.exception_type)
}
inline void TestError::set_exception_type(const char* value, size_t size) {
  
  exception_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.TestError.exception_type)
}
inline ::std::string* TestError::mutable_exception_type() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestError.exception_type)
  return exception_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestError::release_exception_type() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.TestError.exception_type)
  
  return exception_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestError::set_allocated_exception_type(::std::string* exception_type) {
  if (exception_type != NULL) {
    
  } else {
    
  }
  exception_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exception_type);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.TestError.exception_type)
}

// string stack_trace = 3;
inline void TestError::clear_stack_trace() {
  stack_trace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestError::stack_trace() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.TestError.stack_trace)
  return stack_trace_.GetNoArena();
}
inline void TestError::set_stack_trace(const ::std::string& value) {
  
  stack_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.TestError.stack_trace)
}
#if LANG_CXX11
inline void TestError::set_stack_trace(::std::string&& value) {
  
  stack_trace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.TestError.stack_trace)
}
#endif
inline void TestError::set_stack_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stack_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.TestError.stack_trace)
}
inline void TestError::set_stack_trace(const char* value, size_t size) {
  
  stack_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.TestError.stack_trace)
}
inline ::std::string* TestError::mutable_stack_trace() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.TestError.stack_trace)
  return stack_trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestError::release_stack_trace() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.TestError.stack_trace)
  
  return stack_trace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestError::set_allocated_stack_trace(::std::string* stack_trace) {
  if (stack_trace != NULL) {
    
  } else {
    
  }
  stack_trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stack_trace);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.TestError.stack_trace)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace resultstore
}  // namespace devtools
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::devtools::resultstore::v2::TestCase_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::resultstore::v2::TestCase_Result>() {
  return ::google::devtools::resultstore::v2::TestCase_Result_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fresultstore_2fv2_2ftest_5fsuite_2eproto
