// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/file_set.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fresultstore_2fv2_2ffile_5fset_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fresultstore_2fv2_2ffile_5fset_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/devtools/resultstore/v2/file.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fresultstore_2fv2_2ffile_5fset_2eproto 

namespace protobuf_google_2fdevtools_2fresultstore_2fv2_2ffile_5fset_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fresultstore_2fv2_2ffile_5fset_2eproto
namespace google {
namespace devtools {
namespace resultstore {
namespace v2 {
class FileSet;
class FileSetDefaultTypeInternal;
extern FileSetDefaultTypeInternal _FileSet_default_instance_;
class FileSet_Id;
class FileSet_IdDefaultTypeInternal;
extern FileSet_IdDefaultTypeInternal _FileSet_Id_default_instance_;
}  // namespace v2
}  // namespace resultstore
}  // namespace devtools
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::devtools::resultstore::v2::FileSet* Arena::CreateMaybeMessage<::google::devtools::resultstore::v2::FileSet>(Arena*);
template<> ::google::devtools::resultstore::v2::FileSet_Id* Arena::CreateMaybeMessage<::google::devtools::resultstore::v2::FileSet_Id>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace devtools {
namespace resultstore {
namespace v2 {

// ===================================================================

class FileSet_Id : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.resultstore.v2.FileSet.Id) */ {
 public:
  FileSet_Id();
  virtual ~FileSet_Id();

  FileSet_Id(const FileSet_Id& from);

  inline FileSet_Id& operator=(const FileSet_Id& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileSet_Id(FileSet_Id&& from) noexcept
    : FileSet_Id() {
    *this = ::std::move(from);
  }

  inline FileSet_Id& operator=(FileSet_Id&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSet_Id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileSet_Id* internal_default_instance() {
    return reinterpret_cast<const FileSet_Id*>(
               &_FileSet_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FileSet_Id* other);
  friend void swap(FileSet_Id& a, FileSet_Id& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileSet_Id* New() const final {
    return CreateMaybeMessage<FileSet_Id>(NULL);
  }

  FileSet_Id* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileSet_Id>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileSet_Id& from);
  void MergeFrom(const FileSet_Id& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSet_Id* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string invocation_id = 1;
  void clear_invocation_id();
  static const int kInvocationIdFieldNumber = 1;
  const ::std::string& invocation_id() const;
  void set_invocation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_invocation_id(::std::string&& value);
  #endif
  void set_invocation_id(const char* value);
  void set_invocation_id(const char* value, size_t size);
  ::std::string* mutable_invocation_id();
  ::std::string* release_invocation_id();
  void set_allocated_invocation_id(::std::string* invocation_id);

  // string file_set_id = 2;
  void clear_file_set_id();
  static const int kFileSetIdFieldNumber = 2;
  const ::std::string& file_set_id() const;
  void set_file_set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_set_id(::std::string&& value);
  #endif
  void set_file_set_id(const char* value);
  void set_file_set_id(const char* value, size_t size);
  ::std::string* mutable_file_set_id();
  ::std::string* release_file_set_id();
  void set_allocated_file_set_id(::std::string* file_set_id);

  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.FileSet.Id)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr invocation_id_;
  ::google::protobuf::internal::ArenaStringPtr file_set_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fresultstore_2fv2_2ffile_5fset_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.resultstore.v2.FileSet) */ {
 public:
  FileSet();
  virtual ~FileSet();

  FileSet(const FileSet& from);

  inline FileSet& operator=(const FileSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileSet(FileSet&& from) noexcept
    : FileSet() {
    *this = ::std::move(from);
  }

  inline FileSet& operator=(FileSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileSet* internal_default_instance() {
    return reinterpret_cast<const FileSet*>(
               &_FileSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FileSet* other);
  friend void swap(FileSet& a, FileSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileSet* New() const final {
    return CreateMaybeMessage<FileSet>(NULL);
  }

  FileSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileSet& from);
  void MergeFrom(const FileSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FileSet_Id Id;

  // accessors -------------------------------------------------------

  // repeated string file_sets = 3;
  int file_sets_size() const;
  void clear_file_sets();
  static const int kFileSetsFieldNumber = 3;
  const ::std::string& file_sets(int index) const;
  ::std::string* mutable_file_sets(int index);
  void set_file_sets(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_file_sets(int index, ::std::string&& value);
  #endif
  void set_file_sets(int index, const char* value);
  void set_file_sets(int index, const char* value, size_t size);
  ::std::string* add_file_sets();
  void add_file_sets(const ::std::string& value);
  #if LANG_CXX11
  void add_file_sets(::std::string&& value);
  #endif
  void add_file_sets(const char* value);
  void add_file_sets(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& file_sets() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_file_sets();

  // repeated .google.devtools.resultstore.v2.File files = 4;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 4;
  ::google::devtools::resultstore::v2::File* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >*
      mutable_files();
  const ::google::devtools::resultstore::v2::File& files(int index) const;
  ::google::devtools::resultstore::v2::File* add_files();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >&
      files() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.devtools.resultstore.v2.FileSet.Id id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::devtools::resultstore::v2::FileSet_Id& _internal_id() const;
  public:
  const ::google::devtools::resultstore::v2::FileSet_Id& id() const;
  ::google::devtools::resultstore::v2::FileSet_Id* release_id();
  ::google::devtools::resultstore::v2::FileSet_Id* mutable_id();
  void set_allocated_id(::google::devtools::resultstore::v2::FileSet_Id* id);

  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.FileSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> file_sets_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File > files_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::devtools::resultstore::v2::FileSet_Id* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fresultstore_2fv2_2ffile_5fset_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileSet_Id

// string invocation_id = 1;
inline void FileSet_Id::clear_invocation_id() {
  invocation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSet_Id::invocation_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.FileSet.Id.invocation_id)
  return invocation_id_.GetNoArena();
}
inline void FileSet_Id::set_invocation_id(const ::std::string& value) {
  
  invocation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.FileSet.Id.invocation_id)
}
#if LANG_CXX11
inline void FileSet_Id::set_invocation_id(::std::string&& value) {
  
  invocation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.FileSet.Id.invocation_id)
}
#endif
inline void FileSet_Id::set_invocation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  invocation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.FileSet.Id.invocation_id)
}
inline void FileSet_Id::set_invocation_id(const char* value, size_t size) {
  
  invocation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.FileSet.Id.invocation_id)
}
inline ::std::string* FileSet_Id::mutable_invocation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.FileSet.Id.invocation_id)
  return invocation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSet_Id::release_invocation_id() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.FileSet.Id.invocation_id)
  
  return invocation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSet_Id::set_allocated_invocation_id(::std::string* invocation_id) {
  if (invocation_id != NULL) {
    
  } else {
    
  }
  invocation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invocation_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.FileSet.Id.invocation_id)
}

// string file_set_id = 2;
inline void FileSet_Id::clear_file_set_id() {
  file_set_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSet_Id::file_set_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.FileSet.Id.file_set_id)
  return file_set_id_.GetNoArena();
}
inline void FileSet_Id::set_file_set_id(const ::std::string& value) {
  
  file_set_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.FileSet.Id.file_set_id)
}
#if LANG_CXX11
inline void FileSet_Id::set_file_set_id(::std::string&& value) {
  
  file_set_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.FileSet.Id.file_set_id)
}
#endif
inline void FileSet_Id::set_file_set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_set_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.FileSet.Id.file_set_id)
}
inline void FileSet_Id::set_file_set_id(const char* value, size_t size) {
  
  file_set_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.FileSet.Id.file_set_id)
}
inline ::std::string* FileSet_Id::mutable_file_set_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.FileSet.Id.file_set_id)
  return file_set_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSet_Id::release_file_set_id() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.FileSet.Id.file_set_id)
  
  return file_set_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSet_Id::set_allocated_file_set_id(::std::string* file_set_id) {
  if (file_set_id != NULL) {
    
  } else {
    
  }
  file_set_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_set_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.FileSet.Id.file_set_id)
}

// -------------------------------------------------------------------

// FileSet

// string name = 1;
inline void FileSet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSet::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.FileSet.name)
  return name_.GetNoArena();
}
inline void FileSet::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.FileSet.name)
}
#if LANG_CXX11
inline void FileSet::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.resultstore.v2.FileSet.name)
}
#endif
inline void FileSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.FileSet.name)
}
inline void FileSet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.FileSet.name)
}
inline ::std::string* FileSet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.FileSet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSet::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.FileSet.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.FileSet.name)
}

// .google.devtools.resultstore.v2.FileSet.Id id = 2;
inline bool FileSet::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void FileSet::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::devtools::resultstore::v2::FileSet_Id& FileSet::_internal_id() const {
  return *id_;
}
inline const ::google::devtools::resultstore::v2::FileSet_Id& FileSet::id() const {
  const ::google::devtools::resultstore::v2::FileSet_Id* p = id_;
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.FileSet.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::resultstore::v2::FileSet_Id*>(
      &::google::devtools::resultstore::v2::_FileSet_Id_default_instance_);
}
inline ::google::devtools::resultstore::v2::FileSet_Id* FileSet::release_id() {
  // @@protoc_insertion_point(field_release:google.devtools.resultstore.v2.FileSet.id)
  
  ::google::devtools::resultstore::v2::FileSet_Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::devtools::resultstore::v2::FileSet_Id* FileSet::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::resultstore::v2::FileSet_Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.FileSet.id)
  return id_;
}
inline void FileSet::set_allocated_id(::google::devtools::resultstore::v2::FileSet_Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.resultstore.v2.FileSet.id)
}

// repeated string file_sets = 3;
inline int FileSet::file_sets_size() const {
  return file_sets_.size();
}
inline void FileSet::clear_file_sets() {
  file_sets_.Clear();
}
inline const ::std::string& FileSet::file_sets(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.FileSet.file_sets)
  return file_sets_.Get(index);
}
inline ::std::string* FileSet::mutable_file_sets(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.FileSet.file_sets)
  return file_sets_.Mutable(index);
}
inline void FileSet::set_file_sets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.FileSet.file_sets)
  file_sets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FileSet::set_file_sets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.resultstore.v2.FileSet.file_sets)
  file_sets_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FileSet::set_file_sets(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_sets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.resultstore.v2.FileSet.file_sets)
}
inline void FileSet::set_file_sets(int index, const char* value, size_t size) {
  file_sets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.resultstore.v2.FileSet.file_sets)
}
inline ::std::string* FileSet::add_file_sets() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.resultstore.v2.FileSet.file_sets)
  return file_sets_.Add();
}
inline void FileSet::add_file_sets(const ::std::string& value) {
  file_sets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.FileSet.file_sets)
}
#if LANG_CXX11
inline void FileSet::add_file_sets(::std::string&& value) {
  file_sets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.FileSet.file_sets)
}
#endif
inline void FileSet::add_file_sets(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_sets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.resultstore.v2.FileSet.file_sets)
}
inline void FileSet::add_file_sets(const char* value, size_t size) {
  file_sets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.resultstore.v2.FileSet.file_sets)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FileSet::file_sets() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.FileSet.file_sets)
  return file_sets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FileSet::mutable_file_sets() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.FileSet.file_sets)
  return &file_sets_;
}

// repeated .google.devtools.resultstore.v2.File files = 4;
inline int FileSet::files_size() const {
  return files_.size();
}
inline ::google::devtools::resultstore::v2::File* FileSet::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.resultstore.v2.FileSet.files)
  return files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >*
FileSet::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.resultstore.v2.FileSet.files)
  return &files_;
}
inline const ::google::devtools::resultstore::v2::File& FileSet::files(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.resultstore.v2.FileSet.files)
  return files_.Get(index);
}
inline ::google::devtools::resultstore::v2::File* FileSet::add_files() {
  // @@protoc_insertion_point(field_add:google.devtools.resultstore.v2.FileSet.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::resultstore::v2::File >&
FileSet::files() const {
  // @@protoc_insertion_point(field_list:google.devtools.resultstore.v2.FileSet.files)
  return files_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace resultstore
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fresultstore_2fv2_2ffile_5fset_2eproto
