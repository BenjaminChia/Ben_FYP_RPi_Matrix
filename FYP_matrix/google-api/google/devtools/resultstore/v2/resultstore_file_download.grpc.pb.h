// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/devtools/resultstore/v2/resultstore_file_download.proto
// Original file comments:
// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fdevtools_2fresultstore_2fv2_2fresultstore_5ffile_5fdownload_2eproto__INCLUDED
#define GRPC_google_2fdevtools_2fresultstore_2fv2_2fresultstore_5ffile_5fdownload_2eproto__INCLUDED

#include "google/devtools/resultstore/v2/resultstore_file_download.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace devtools {
namespace resultstore {
namespace v2 {

// This API allows download of File messages referenced in
// ResultStore resources.
class ResultStoreFileDownload final {
 public:
  static constexpr char const* service_full_name() {
    return "google.devtools.resultstore.v2.ResultStoreFileDownload";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Retrieves the File with the given uri.
    // returns a stream of bytes to be stitched together in order.
    //
    // An error will be reported in the following cases:
    // - If the File is not found.
    // - If the given File uri is badly formatted.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::devtools::resultstore::v2::GetFileResponse>> GetFile(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::devtools::resultstore::v2::GetFileResponse>>(GetFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::devtools::resultstore::v2::GetFileResponse>> AsyncGetFile(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::devtools::resultstore::v2::GetFileResponse>>(AsyncGetFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::devtools::resultstore::v2::GetFileResponse>> PrepareAsyncGetFile(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::devtools::resultstore::v2::GetFileResponse>>(PrepareAsyncGetFileRaw(context, request, cq));
    }
    // Retrieves the tail of a File with the given uri.
    //
    // An error will be reported in the following cases:
    // - If the File is not found.
    // - If the given File uri is badly formatted.
    virtual ::grpc::Status GetFileTail(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::google::devtools::resultstore::v2::GetFileTailResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::resultstore::v2::GetFileTailResponse>> AsyncGetFileTail(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::resultstore::v2::GetFileTailResponse>>(AsyncGetFileTailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::resultstore::v2::GetFileTailResponse>> PrepareAsyncGetFileTail(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::resultstore::v2::GetFileTailResponse>>(PrepareAsyncGetFileTailRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::google::devtools::resultstore::v2::GetFileResponse>* GetFileRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::devtools::resultstore::v2::GetFileResponse>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::devtools::resultstore::v2::GetFileResponse>* PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::resultstore::v2::GetFileTailResponse>* AsyncGetFileTailRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::resultstore::v2::GetFileTailResponse>* PrepareAsyncGetFileTailRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::google::devtools::resultstore::v2::GetFileResponse>> GetFile(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::devtools::resultstore::v2::GetFileResponse>>(GetFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::devtools::resultstore::v2::GetFileResponse>> AsyncGetFile(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::devtools::resultstore::v2::GetFileResponse>>(AsyncGetFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::devtools::resultstore::v2::GetFileResponse>> PrepareAsyncGetFile(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::devtools::resultstore::v2::GetFileResponse>>(PrepareAsyncGetFileRaw(context, request, cq));
    }
    ::grpc::Status GetFileTail(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::google::devtools::resultstore::v2::GetFileTailResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::resultstore::v2::GetFileTailResponse>> AsyncGetFileTail(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::resultstore::v2::GetFileTailResponse>>(AsyncGetFileTailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::resultstore::v2::GetFileTailResponse>> PrepareAsyncGetFileTail(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::resultstore::v2::GetFileTailResponse>>(PrepareAsyncGetFileTailRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::google::devtools::resultstore::v2::GetFileResponse>* GetFileRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request) override;
    ::grpc::ClientAsyncReader< ::google::devtools::resultstore::v2::GetFileResponse>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::devtools::resultstore::v2::GetFileResponse>* PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::resultstore::v2::GetFileTailResponse>* AsyncGetFileTailRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::resultstore::v2::GetFileTailResponse>* PrepareAsyncGetFileTailRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetFile_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFileTail_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Retrieves the File with the given uri.
    // returns a stream of bytes to be stitched together in order.
    //
    // An error will be reported in the following cases:
    // - If the File is not found.
    // - If the given File uri is badly formatted.
    virtual ::grpc::Status GetFile(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileRequest* request, ::grpc::ServerWriter< ::google::devtools::resultstore::v2::GetFileResponse>* writer);
    // Retrieves the tail of a File with the given uri.
    //
    // An error will be reported in the following cases:
    // - If the File is not found.
    // - If the given File uri is badly formatted.
    virtual ::grpc::Status GetFileTail(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest* request, ::google::devtools::resultstore::v2::GetFileTailResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileRequest* request, ::grpc::ServerWriter< ::google::devtools::resultstore::v2::GetFileResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFile(::grpc::ServerContext* context, ::google::devtools::resultstore::v2::GetFileRequest* request, ::grpc::ServerAsyncWriter< ::google::devtools::resultstore::v2::GetFileResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileTail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetFileTail() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetFileTail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileTail(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest* request, ::google::devtools::resultstore::v2::GetFileTailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileTail(::grpc::ServerContext* context, ::google::devtools::resultstore::v2::GetFileTailRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::resultstore::v2::GetFileTailResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetFile<WithAsyncMethod_GetFileTail<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileRequest* request, ::grpc::ServerWriter< ::google::devtools::resultstore::v2::GetFileResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileTail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetFileTail() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetFileTail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileTail(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest* request, ::google::devtools::resultstore::v2::GetFileTailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileRequest* request, ::grpc::ServerWriter< ::google::devtools::resultstore::v2::GetFileResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFileTail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetFileTail() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetFileTail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileTail(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest* request, ::google::devtools::resultstore::v2::GetFileTailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileTail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFileTail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetFileTail() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::resultstore::v2::GetFileTailRequest, ::google::devtools::resultstore::v2::GetFileTailResponse>(std::bind(&WithStreamedUnaryMethod_GetFileTail<BaseClass>::StreamedGetFileTail, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetFileTail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFileTail(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest* request, ::google::devtools::resultstore::v2::GetFileTailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFileTail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::resultstore::v2::GetFileTailRequest,::google::devtools::resultstore::v2::GetFileTailResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetFileTail<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::google::devtools::resultstore::v2::GetFileRequest, ::google::devtools::resultstore::v2::GetFileResponse>(std::bind(&WithSplitStreamingMethod_GetFile<BaseClass>::StreamedGetFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileRequest* request, ::grpc::ServerWriter< ::google::devtools::resultstore::v2::GetFileResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::devtools::resultstore::v2::GetFileRequest,::google::devtools::resultstore::v2::GetFileResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetFile<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetFile<WithStreamedUnaryMethod_GetFileTail<Service > > StreamedService;
};

}  // namespace v2
}  // namespace resultstore
}  // namespace devtools
}  // namespace google


#endif  // GRPC_google_2fdevtools_2fresultstore_2fv2_2fresultstore_5ffile_5fdownload_2eproto__INCLUDED
