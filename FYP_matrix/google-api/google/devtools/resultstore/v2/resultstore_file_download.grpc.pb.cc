// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/devtools/resultstore/v2/resultstore_file_download.proto

#include "google/devtools/resultstore/v2/resultstore_file_download.pb.h"
#include "google/devtools/resultstore/v2/resultstore_file_download.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace devtools {
namespace resultstore {
namespace v2 {

static const char* ResultStoreFileDownload_method_names[] = {
  "/google.devtools.resultstore.v2.ResultStoreFileDownload/GetFile",
  "/google.devtools.resultstore.v2.ResultStoreFileDownload/GetFileTail",
};

std::unique_ptr< ResultStoreFileDownload::Stub> ResultStoreFileDownload::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ResultStoreFileDownload::Stub> stub(new ResultStoreFileDownload::Stub(channel));
  return stub;
}

ResultStoreFileDownload::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetFile_(ResultStoreFileDownload_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetFileTail_(ResultStoreFileDownload_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::google::devtools::resultstore::v2::GetFileResponse>* ResultStoreFileDownload::Stub::GetFileRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::devtools::resultstore::v2::GetFileResponse>::Create(channel_.get(), rpcmethod_GetFile_, context, request);
}

::grpc::ClientAsyncReader< ::google::devtools::resultstore::v2::GetFileResponse>* ResultStoreFileDownload::Stub::AsyncGetFileRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::devtools::resultstore::v2::GetFileResponse>::Create(channel_.get(), cq, rpcmethod_GetFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::devtools::resultstore::v2::GetFileResponse>* ResultStoreFileDownload::Stub::PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::devtools::resultstore::v2::GetFileResponse>::Create(channel_.get(), cq, rpcmethod_GetFile_, context, request, false, nullptr);
}

::grpc::Status ResultStoreFileDownload::Stub::GetFileTail(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::google::devtools::resultstore::v2::GetFileTailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFileTail_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::devtools::resultstore::v2::GetFileTailResponse>* ResultStoreFileDownload::Stub::AsyncGetFileTailRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::devtools::resultstore::v2::GetFileTailResponse>::Create(channel_.get(), cq, rpcmethod_GetFileTail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::devtools::resultstore::v2::GetFileTailResponse>* ResultStoreFileDownload::Stub::PrepareAsyncGetFileTailRaw(::grpc::ClientContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::devtools::resultstore::v2::GetFileTailResponse>::Create(channel_.get(), cq, rpcmethod_GetFileTail_, context, request, false);
}

ResultStoreFileDownload::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResultStoreFileDownload_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ResultStoreFileDownload::Service, ::google::devtools::resultstore::v2::GetFileRequest, ::google::devtools::resultstore::v2::GetFileResponse>(
          std::mem_fn(&ResultStoreFileDownload::Service::GetFile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResultStoreFileDownload_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResultStoreFileDownload::Service, ::google::devtools::resultstore::v2::GetFileTailRequest, ::google::devtools::resultstore::v2::GetFileTailResponse>(
          std::mem_fn(&ResultStoreFileDownload::Service::GetFileTail), this)));
}

ResultStoreFileDownload::Service::~Service() {
}

::grpc::Status ResultStoreFileDownload::Service::GetFile(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileRequest* request, ::grpc::ServerWriter< ::google::devtools::resultstore::v2::GetFileResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResultStoreFileDownload::Service::GetFileTail(::grpc::ServerContext* context, const ::google::devtools::resultstore::v2::GetFileTailRequest* request, ::google::devtools::resultstore::v2::GetFileTailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace devtools
}  // namespace resultstore
}  // namespace v2

