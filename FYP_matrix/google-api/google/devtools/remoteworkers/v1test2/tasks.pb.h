// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/tasks.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto 

namespace protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {
class AddTaskLogRequest;
class AddTaskLogRequestDefaultTypeInternal;
extern AddTaskLogRequestDefaultTypeInternal _AddTaskLogRequest_default_instance_;
class AddTaskLogResponse;
class AddTaskLogResponseDefaultTypeInternal;
extern AddTaskLogResponseDefaultTypeInternal _AddTaskLogResponse_default_instance_;
class GetTaskRequest;
class GetTaskRequestDefaultTypeInternal;
extern GetTaskRequestDefaultTypeInternal _GetTaskRequest_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskResult;
class TaskResultDefaultTypeInternal;
extern TaskResultDefaultTypeInternal _TaskResult_default_instance_;
class Task_LogsEntry_DoNotUse;
class Task_LogsEntry_DoNotUseDefaultTypeInternal;
extern Task_LogsEntry_DoNotUseDefaultTypeInternal _Task_LogsEntry_DoNotUse_default_instance_;
class UpdateTaskResultRequest;
class UpdateTaskResultRequestDefaultTypeInternal;
extern UpdateTaskResultRequestDefaultTypeInternal _UpdateTaskResultRequest_default_instance_;
}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::AddTaskLogRequest>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::GetTaskRequest* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::GetTaskRequest>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Task* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Task>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::TaskResult* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::TaskResult>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Task_LogsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Task_LogsEntry_DoNotUse>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {

// ===================================================================

class Task_LogsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Task_LogsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Task_LogsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Task_LogsEntry_DoNotUse();
  Task_LogsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Task_LogsEntry_DoNotUse& other);
  static const Task_LogsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Task_LogsEntry_DoNotUse*>(&_Task_LogsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Task* other);
  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(NULL);
  }

  Task* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> logs = 3;
  int logs_size() const;
  void clear_logs();
  static const int kLogsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      logs() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_logs();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Any description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  private:
  const ::google::protobuf::Any& _internal_description() const;
  public:
  const ::google::protobuf::Any& description() const;
  ::google::protobuf::Any* release_description();
  ::google::protobuf::Any* mutable_description();
  void set_allocated_description(::google::protobuf::Any* description);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Task)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Task_LogsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > logs_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Any* description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.TaskResult) */ {
 public:
  TaskResult();
  virtual ~TaskResult();

  TaskResult(const TaskResult& from);

  inline TaskResult& operator=(const TaskResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskResult(TaskResult&& from) noexcept
    : TaskResult() {
    *this = ::std::move(from);
  }

  inline TaskResult& operator=(TaskResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskResult* internal_default_instance() {
    return reinterpret_cast<const TaskResult*>(
               &_TaskResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TaskResult* other);
  friend void swap(TaskResult& a, TaskResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskResult* New() const final {
    return CreateMaybeMessage<TaskResult>(NULL);
  }

  TaskResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskResult& from);
  void MergeFrom(const TaskResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.rpc.Status status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  private:
  const ::google::rpc::Status& _internal_status() const;
  public:
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);

  // .google.protobuf.Any output = 4;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 4;
  private:
  const ::google::protobuf::Any& _internal_output() const;
  public:
  const ::google::protobuf::Any& output() const;
  ::google::protobuf::Any* release_output();
  ::google::protobuf::Any* mutable_output();
  void set_allocated_output(::google::protobuf::Any* output);

  // .google.protobuf.Any meta = 5;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 5;
  private:
  const ::google::protobuf::Any& _internal_meta() const;
  public:
  const ::google::protobuf::Any& meta() const;
  ::google::protobuf::Any* release_meta();
  ::google::protobuf::Any* mutable_meta();
  void set_allocated_meta(::google::protobuf::Any* meta);

  // bool complete = 2;
  void clear_complete();
  static const int kCompleteFieldNumber = 2;
  bool complete() const;
  void set_complete(bool value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.TaskResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::rpc::Status* status_;
  ::google::protobuf::Any* output_;
  ::google::protobuf::Any* meta_;
  bool complete_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.GetTaskRequest) */ {
 public:
  GetTaskRequest();
  virtual ~GetTaskRequest();

  GetTaskRequest(const GetTaskRequest& from);

  inline GetTaskRequest& operator=(const GetTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTaskRequest(GetTaskRequest&& from) noexcept
    : GetTaskRequest() {
    *this = ::std::move(from);
  }

  inline GetTaskRequest& operator=(GetTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTaskRequest* internal_default_instance() {
    return reinterpret_cast<const GetTaskRequest*>(
               &_GetTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetTaskRequest* other);
  friend void swap(GetTaskRequest& a, GetTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTaskRequest* New() const final {
    return CreateMaybeMessage<GetTaskRequest>(NULL);
  }

  GetTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTaskRequest& from);
  void MergeFrom(const GetTaskRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.GetTaskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateTaskResultRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest) */ {
 public:
  UpdateTaskResultRequest();
  virtual ~UpdateTaskResultRequest();

  UpdateTaskResultRequest(const UpdateTaskResultRequest& from);

  inline UpdateTaskResultRequest& operator=(const UpdateTaskResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTaskResultRequest(UpdateTaskResultRequest&& from) noexcept
    : UpdateTaskResultRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTaskResultRequest& operator=(UpdateTaskResultRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTaskResultRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTaskResultRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTaskResultRequest*>(
               &_UpdateTaskResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UpdateTaskResultRequest* other);
  friend void swap(UpdateTaskResultRequest& a, UpdateTaskResultRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTaskResultRequest* New() const final {
    return CreateMaybeMessage<UpdateTaskResultRequest>(NULL);
  }

  UpdateTaskResultRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTaskResultRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTaskResultRequest& from);
  void MergeFrom(const UpdateTaskResultRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTaskResultRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string source = 4;
  void clear_source();
  static const int kSourceFieldNumber = 4;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // .google.devtools.remoteworkers.v1test2.TaskResult result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  private:
  const ::google::devtools::remoteworkers::v1test2::TaskResult& _internal_result() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::TaskResult& result() const;
  ::google::devtools::remoteworkers::v1test2::TaskResult* release_result();
  ::google::devtools::remoteworkers::v1test2::TaskResult* mutable_result();
  void set_allocated_result(::google::devtools::remoteworkers::v1test2::TaskResult* result);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::devtools::remoteworkers::v1test2::TaskResult* result_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddTaskLogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.AddTaskLogRequest) */ {
 public:
  AddTaskLogRequest();
  virtual ~AddTaskLogRequest();

  AddTaskLogRequest(const AddTaskLogRequest& from);

  inline AddTaskLogRequest& operator=(const AddTaskLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddTaskLogRequest(AddTaskLogRequest&& from) noexcept
    : AddTaskLogRequest() {
    *this = ::std::move(from);
  }

  inline AddTaskLogRequest& operator=(AddTaskLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTaskLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddTaskLogRequest* internal_default_instance() {
    return reinterpret_cast<const AddTaskLogRequest*>(
               &_AddTaskLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AddTaskLogRequest* other);
  friend void swap(AddTaskLogRequest& a, AddTaskLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddTaskLogRequest* New() const final {
    return CreateMaybeMessage<AddTaskLogRequest>(NULL);
  }

  AddTaskLogRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddTaskLogRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddTaskLogRequest& from);
  void MergeFrom(const AddTaskLogRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTaskLogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string log_id = 2;
  void clear_log_id();
  static const int kLogIdFieldNumber = 2;
  const ::std::string& log_id() const;
  void set_log_id(const ::std::string& value);
  #if LANG_CXX11
  void set_log_id(::std::string&& value);
  #endif
  void set_log_id(const char* value);
  void set_log_id(const char* value, size_t size);
  ::std::string* mutable_log_id();
  ::std::string* release_log_id();
  void set_allocated_log_id(::std::string* log_id);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.AddTaskLogRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr log_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddTaskLogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.AddTaskLogResponse) */ {
 public:
  AddTaskLogResponse();
  virtual ~AddTaskLogResponse();

  AddTaskLogResponse(const AddTaskLogResponse& from);

  inline AddTaskLogResponse& operator=(const AddTaskLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddTaskLogResponse(AddTaskLogResponse&& from) noexcept
    : AddTaskLogResponse() {
    *this = ::std::move(from);
  }

  inline AddTaskLogResponse& operator=(AddTaskLogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTaskLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddTaskLogResponse* internal_default_instance() {
    return reinterpret_cast<const AddTaskLogResponse*>(
               &_AddTaskLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AddTaskLogResponse* other);
  friend void swap(AddTaskLogResponse& a, AddTaskLogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddTaskLogResponse* New() const final {
    return CreateMaybeMessage<AddTaskLogResponse>(NULL);
  }

  AddTaskLogResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddTaskLogResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddTaskLogResponse& from);
  void MergeFrom(const AddTaskLogResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTaskLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.AddTaskLogResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Task

// string name = 1;
inline void Task::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Task.name)
  return name_.GetNoArena();
}
inline void Task::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Task.name)
}
#if LANG_CXX11
inline void Task::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Task.name)
}
#endif
inline void Task::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Task.name)
}
inline void Task::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Task.name)
}
inline ::std::string* Task::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Task.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Task.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Task.name)
}

// .google.protobuf.Any description = 2;
inline bool Task::has_description() const {
  return this != internal_default_instance() && description_ != NULL;
}
inline const ::google::protobuf::Any& Task::_internal_description() const {
  return *description_;
}
inline const ::google::protobuf::Any& Task::description() const {
  const ::google::protobuf::Any* p = description_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Task.description)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Task::release_description() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Task.description)
  
  ::google::protobuf::Any* temp = description_;
  description_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Task::mutable_description() {
  
  if (description_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Task.description)
  return description_;
}
inline void Task::set_allocated_description(::google::protobuf::Any* description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(description_);
  }
  if (description) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Task.description)
}

// map<string, string> logs = 3;
inline int Task::logs_size() const {
  return logs_.size();
}
inline void Task::clear_logs() {
  logs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Task::logs() const {
  // @@protoc_insertion_point(field_map:google.devtools.remoteworkers.v1test2.Task.logs)
  return logs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Task::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.remoteworkers.v1test2.Task.logs)
  return logs_.MutableMap();
}

// -------------------------------------------------------------------

// TaskResult

// string name = 1;
inline void TaskResult::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResult::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.TaskResult.name)
  return name_.GetNoArena();
}
inline void TaskResult::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.TaskResult.name)
}
#if LANG_CXX11
inline void TaskResult::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.TaskResult.name)
}
#endif
inline void TaskResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.TaskResult.name)
}
inline void TaskResult::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.TaskResult.name)
}
inline ::std::string* TaskResult::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.TaskResult.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResult::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.TaskResult.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResult::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.TaskResult.name)
}

// bool complete = 2;
inline void TaskResult::clear_complete() {
  complete_ = false;
}
inline bool TaskResult::complete() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.TaskResult.complete)
  return complete_;
}
inline void TaskResult::set_complete(bool value) {
  
  complete_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.TaskResult.complete)
}

// .google.rpc.Status status = 3;
inline bool TaskResult::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::google::rpc::Status& TaskResult::_internal_status() const {
  return *status_;
}
inline const ::google::rpc::Status& TaskResult::status() const {
  const ::google::rpc::Status* p = status_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.TaskResult.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* TaskResult::release_status() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.TaskResult.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* TaskResult::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.TaskResult.status)
  return status_;
}
inline void TaskResult::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.TaskResult.status)
}

// .google.protobuf.Any output = 4;
inline bool TaskResult::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
inline const ::google::protobuf::Any& TaskResult::_internal_output() const {
  return *output_;
}
inline const ::google::protobuf::Any& TaskResult::output() const {
  const ::google::protobuf::Any* p = output_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.TaskResult.output)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* TaskResult::release_output() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.TaskResult.output)
  
  ::google::protobuf::Any* temp = output_;
  output_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* TaskResult::mutable_output() {
  
  if (output_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    output_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.TaskResult.output)
  return output_;
}
inline void TaskResult::set_allocated_output(::google::protobuf::Any* output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_);
  }
  if (output) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.TaskResult.output)
}

// .google.protobuf.Any meta = 5;
inline bool TaskResult::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline const ::google::protobuf::Any& TaskResult::_internal_meta() const {
  return *meta_;
}
inline const ::google::protobuf::Any& TaskResult::meta() const {
  const ::google::protobuf::Any* p = meta_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.TaskResult.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* TaskResult::release_meta() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.TaskResult.meta)
  
  ::google::protobuf::Any* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* TaskResult::mutable_meta() {
  
  if (meta_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.TaskResult.meta)
  return meta_;
}
inline void TaskResult::set_allocated_meta(::google::protobuf::Any* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meta_);
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.TaskResult.meta)
}

// -------------------------------------------------------------------

// GetTaskRequest

// string name = 1;
inline void GetTaskRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTaskRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.GetTaskRequest.name)
  return name_.GetNoArena();
}
inline void GetTaskRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.GetTaskRequest.name)
}
#if LANG_CXX11
inline void GetTaskRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.GetTaskRequest.name)
}
#endif
inline void GetTaskRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.GetTaskRequest.name)
}
inline void GetTaskRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.GetTaskRequest.name)
}
inline ::std::string* GetTaskRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.GetTaskRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTaskRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.GetTaskRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTaskRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.GetTaskRequest.name)
}

// -------------------------------------------------------------------

// UpdateTaskResultRequest

// string name = 1;
inline void UpdateTaskResultRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateTaskResultRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.name)
  return name_.GetNoArena();
}
inline void UpdateTaskResultRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.name)
}
#if LANG_CXX11
inline void UpdateTaskResultRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.name)
}
#endif
inline void UpdateTaskResultRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.name)
}
inline void UpdateTaskResultRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.name)
}
inline ::std::string* UpdateTaskResultRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTaskResultRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTaskResultRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.name)
}

// .google.devtools.remoteworkers.v1test2.TaskResult result = 2;
inline bool UpdateTaskResultRequest::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void UpdateTaskResultRequest::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::TaskResult& UpdateTaskResultRequest::_internal_result() const {
  return *result_;
}
inline const ::google::devtools::remoteworkers::v1test2::TaskResult& UpdateTaskResultRequest::result() const {
  const ::google::devtools::remoteworkers::v1test2::TaskResult* p = result_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.result)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::TaskResult*>(
      &::google::devtools::remoteworkers::v1test2::_TaskResult_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::TaskResult* UpdateTaskResultRequest::release_result() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.result)
  
  ::google::devtools::remoteworkers::v1test2::TaskResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::TaskResult* UpdateTaskResultRequest::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::TaskResult>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.result)
  return result_;
}
inline void UpdateTaskResultRequest::set_allocated_result(::google::devtools::remoteworkers::v1test2::TaskResult* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.result)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateTaskResultRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateTaskResultRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateTaskResultRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateTaskResultRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateTaskResultRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.update_mask)
  return update_mask_;
}
inline void UpdateTaskResultRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.update_mask)
}

// string source = 4;
inline void UpdateTaskResultRequest::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateTaskResultRequest::source() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.source)
  return source_.GetNoArena();
}
inline void UpdateTaskResultRequest::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.source)
}
#if LANG_CXX11
inline void UpdateTaskResultRequest::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.source)
}
#endif
inline void UpdateTaskResultRequest::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.source)
}
inline void UpdateTaskResultRequest::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.source)
}
inline ::std::string* UpdateTaskResultRequest::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTaskResultRequest::release_source() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTaskResultRequest::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.UpdateTaskResultRequest.source)
}

// -------------------------------------------------------------------

// AddTaskLogRequest

// string name = 1;
inline void AddTaskLogRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddTaskLogRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.name)
  return name_.GetNoArena();
}
inline void AddTaskLogRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.name)
}
#if LANG_CXX11
inline void AddTaskLogRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.name)
}
#endif
inline void AddTaskLogRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.name)
}
inline void AddTaskLogRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.name)
}
inline ::std::string* AddTaskLogRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddTaskLogRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddTaskLogRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.name)
}

// string log_id = 2;
inline void AddTaskLogRequest::clear_log_id() {
  log_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddTaskLogRequest::log_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.log_id)
  return log_id_.GetNoArena();
}
inline void AddTaskLogRequest::set_log_id(const ::std::string& value) {
  
  log_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.log_id)
}
#if LANG_CXX11
inline void AddTaskLogRequest::set_log_id(::std::string&& value) {
  
  log_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.log_id)
}
#endif
inline void AddTaskLogRequest::set_log_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.log_id)
}
inline void AddTaskLogRequest::set_log_id(const char* value, size_t size) {
  
  log_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.log_id)
}
inline ::std::string* AddTaskLogRequest::mutable_log_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.log_id)
  return log_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddTaskLogRequest::release_log_id() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.log_id)
  
  return log_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddTaskLogRequest::set_allocated_log_id(::std::string* log_id) {
  if (log_id != NULL) {
    
  } else {
    
  }
  log_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.AddTaskLogRequest.log_id)
}

// -------------------------------------------------------------------

// AddTaskLogResponse

// string handle = 1;
inline void AddTaskLogResponse::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddTaskLogResponse::handle() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.AddTaskLogResponse.handle)
  return handle_.GetNoArena();
}
inline void AddTaskLogResponse::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.AddTaskLogResponse.handle)
}
#if LANG_CXX11
inline void AddTaskLogResponse::set_handle(::std::string&& value) {
  
  handle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.AddTaskLogResponse.handle)
}
#endif
inline void AddTaskLogResponse::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.AddTaskLogResponse.handle)
}
inline void AddTaskLogResponse::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.AddTaskLogResponse.handle)
}
inline ::std::string* AddTaskLogResponse::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.AddTaskLogResponse.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddTaskLogResponse::release_handle() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.AddTaskLogResponse.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddTaskLogResponse::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.AddTaskLogResponse.handle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto
