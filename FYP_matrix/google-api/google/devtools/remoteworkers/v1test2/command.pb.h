// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/command.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/duration.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto 

namespace protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {
class CommandOutputs;
class CommandOutputsDefaultTypeInternal;
extern CommandOutputsDefaultTypeInternal _CommandOutputs_default_instance_;
class CommandOverhead;
class CommandOverheadDefaultTypeInternal;
extern CommandOverheadDefaultTypeInternal _CommandOverhead_default_instance_;
class CommandResult;
class CommandResultDefaultTypeInternal;
extern CommandResultDefaultTypeInternal _CommandResult_default_instance_;
class CommandTask;
class CommandTaskDefaultTypeInternal;
extern CommandTaskDefaultTypeInternal _CommandTask_default_instance_;
class CommandTask_Inputs;
class CommandTask_InputsDefaultTypeInternal;
extern CommandTask_InputsDefaultTypeInternal _CommandTask_Inputs_default_instance_;
class CommandTask_Inputs_EnvironmentVariable;
class CommandTask_Inputs_EnvironmentVariableDefaultTypeInternal;
extern CommandTask_Inputs_EnvironmentVariableDefaultTypeInternal _CommandTask_Inputs_EnvironmentVariable_default_instance_;
class CommandTask_Outputs;
class CommandTask_OutputsDefaultTypeInternal;
extern CommandTask_OutputsDefaultTypeInternal _CommandTask_Outputs_default_instance_;
class CommandTask_Timeouts;
class CommandTask_TimeoutsDefaultTypeInternal;
extern CommandTask_TimeoutsDefaultTypeInternal _CommandTask_Timeouts_default_instance_;
class Digest;
class DigestDefaultTypeInternal;
extern DigestDefaultTypeInternal _Digest_default_instance_;
class Directory;
class DirectoryDefaultTypeInternal;
extern DirectoryDefaultTypeInternal _Directory_default_instance_;
class DirectoryMetadata;
class DirectoryMetadataDefaultTypeInternal;
extern DirectoryMetadataDefaultTypeInternal _DirectoryMetadata_default_instance_;
class FileMetadata;
class FileMetadataDefaultTypeInternal;
extern FileMetadataDefaultTypeInternal _FileMetadata_default_instance_;
}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::devtools::remoteworkers::v1test2::CommandOutputs* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CommandOutputs>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::CommandOverhead* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CommandOverhead>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::CommandResult* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CommandResult>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::CommandTask* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CommandTask>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CommandTask_Inputs>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CommandTask_Outputs>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Digest* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Digest>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Directory* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Directory>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::DirectoryMetadata* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::DirectoryMetadata>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::FileMetadata* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::FileMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {

// ===================================================================

class CommandTask_Inputs_EnvironmentVariable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable) */ {
 public:
  CommandTask_Inputs_EnvironmentVariable();
  virtual ~CommandTask_Inputs_EnvironmentVariable();

  CommandTask_Inputs_EnvironmentVariable(const CommandTask_Inputs_EnvironmentVariable& from);

  inline CommandTask_Inputs_EnvironmentVariable& operator=(const CommandTask_Inputs_EnvironmentVariable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandTask_Inputs_EnvironmentVariable(CommandTask_Inputs_EnvironmentVariable&& from) noexcept
    : CommandTask_Inputs_EnvironmentVariable() {
    *this = ::std::move(from);
  }

  inline CommandTask_Inputs_EnvironmentVariable& operator=(CommandTask_Inputs_EnvironmentVariable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandTask_Inputs_EnvironmentVariable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandTask_Inputs_EnvironmentVariable* internal_default_instance() {
    return reinterpret_cast<const CommandTask_Inputs_EnvironmentVariable*>(
               &_CommandTask_Inputs_EnvironmentVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CommandTask_Inputs_EnvironmentVariable* other);
  friend void swap(CommandTask_Inputs_EnvironmentVariable& a, CommandTask_Inputs_EnvironmentVariable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandTask_Inputs_EnvironmentVariable* New() const final {
    return CreateMaybeMessage<CommandTask_Inputs_EnvironmentVariable>(NULL);
  }

  CommandTask_Inputs_EnvironmentVariable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandTask_Inputs_EnvironmentVariable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandTask_Inputs_EnvironmentVariable& from);
  void MergeFrom(const CommandTask_Inputs_EnvironmentVariable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTask_Inputs_EnvironmentVariable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommandTask_Inputs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.CommandTask.Inputs) */ {
 public:
  CommandTask_Inputs();
  virtual ~CommandTask_Inputs();

  CommandTask_Inputs(const CommandTask_Inputs& from);

  inline CommandTask_Inputs& operator=(const CommandTask_Inputs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandTask_Inputs(CommandTask_Inputs&& from) noexcept
    : CommandTask_Inputs() {
    *this = ::std::move(from);
  }

  inline CommandTask_Inputs& operator=(CommandTask_Inputs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandTask_Inputs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandTask_Inputs* internal_default_instance() {
    return reinterpret_cast<const CommandTask_Inputs*>(
               &_CommandTask_Inputs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CommandTask_Inputs* other);
  friend void swap(CommandTask_Inputs& a, CommandTask_Inputs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandTask_Inputs* New() const final {
    return CreateMaybeMessage<CommandTask_Inputs>(NULL);
  }

  CommandTask_Inputs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandTask_Inputs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandTask_Inputs& from);
  void MergeFrom(const CommandTask_Inputs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTask_Inputs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandTask_Inputs_EnvironmentVariable EnvironmentVariable;

  // accessors -------------------------------------------------------

  // repeated string arguments = 1;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 1;
  const ::std::string& arguments(int index) const;
  ::std::string* mutable_arguments(int index);
  void set_arguments(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_arguments(int index, ::std::string&& value);
  #endif
  void set_arguments(int index, const char* value);
  void set_arguments(int index, const char* value, size_t size);
  ::std::string* add_arguments();
  void add_arguments(const ::std::string& value);
  #if LANG_CXX11
  void add_arguments(::std::string&& value);
  #endif
  void add_arguments(const char* value);
  void add_arguments(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& arguments() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_arguments();

  // repeated .google.devtools.remoteworkers.v1test2.Digest files = 2;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 2;
  ::google::devtools::remoteworkers::v1test2::Digest* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Digest >*
      mutable_files();
  const ::google::devtools::remoteworkers::v1test2::Digest& files(int index) const;
  ::google::devtools::remoteworkers::v1test2::Digest* add_files();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Digest >&
      files() const;

  // repeated .google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable environment_variables = 3;
  int environment_variables_size() const;
  void clear_environment_variables();
  static const int kEnvironmentVariablesFieldNumber = 3;
  ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable* mutable_environment_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable >*
      mutable_environment_variables();
  const ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable& environment_variables(int index) const;
  ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable* add_environment_variables();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable >&
      environment_variables() const;

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.CommandTask.Inputs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> arguments_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Digest > files_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable > environment_variables_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommandTask_Outputs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.CommandTask.Outputs) */ {
 public:
  CommandTask_Outputs();
  virtual ~CommandTask_Outputs();

  CommandTask_Outputs(const CommandTask_Outputs& from);

  inline CommandTask_Outputs& operator=(const CommandTask_Outputs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandTask_Outputs(CommandTask_Outputs&& from) noexcept
    : CommandTask_Outputs() {
    *this = ::std::move(from);
  }

  inline CommandTask_Outputs& operator=(CommandTask_Outputs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandTask_Outputs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandTask_Outputs* internal_default_instance() {
    return reinterpret_cast<const CommandTask_Outputs*>(
               &_CommandTask_Outputs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CommandTask_Outputs* other);
  friend void swap(CommandTask_Outputs& a, CommandTask_Outputs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandTask_Outputs* New() const final {
    return CreateMaybeMessage<CommandTask_Outputs>(NULL);
  }

  CommandTask_Outputs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandTask_Outputs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandTask_Outputs& from);
  void MergeFrom(const CommandTask_Outputs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTask_Outputs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string files = 1;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 1;
  const ::std::string& files(int index) const;
  ::std::string* mutable_files(int index);
  void set_files(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_files(int index, ::std::string&& value);
  #endif
  void set_files(int index, const char* value);
  void set_files(int index, const char* value, size_t size);
  ::std::string* add_files();
  void add_files(const ::std::string& value);
  #if LANG_CXX11
  void add_files(::std::string&& value);
  #endif
  void add_files(const char* value);
  void add_files(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& files() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_files();

  // repeated string directories = 2;
  int directories_size() const;
  void clear_directories();
  static const int kDirectoriesFieldNumber = 2;
  const ::std::string& directories(int index) const;
  ::std::string* mutable_directories(int index);
  void set_directories(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_directories(int index, ::std::string&& value);
  #endif
  void set_directories(int index, const char* value);
  void set_directories(int index, const char* value, size_t size);
  ::std::string* add_directories();
  void add_directories(const ::std::string& value);
  #if LANG_CXX11
  void add_directories(::std::string&& value);
  #endif
  void add_directories(const char* value);
  void add_directories(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& directories() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_directories();

  // string stdout_destination = 3;
  void clear_stdout_destination();
  static const int kStdoutDestinationFieldNumber = 3;
  const ::std::string& stdout_destination() const;
  void set_stdout_destination(const ::std::string& value);
  #if LANG_CXX11
  void set_stdout_destination(::std::string&& value);
  #endif
  void set_stdout_destination(const char* value);
  void set_stdout_destination(const char* value, size_t size);
  ::std::string* mutable_stdout_destination();
  ::std::string* release_stdout_destination();
  void set_allocated_stdout_destination(::std::string* stdout_destination);

  // string stderr_destination = 4;
  void clear_stderr_destination();
  static const int kStderrDestinationFieldNumber = 4;
  const ::std::string& stderr_destination() const;
  void set_stderr_destination(const ::std::string& value);
  #if LANG_CXX11
  void set_stderr_destination(::std::string&& value);
  #endif
  void set_stderr_destination(const char* value);
  void set_stderr_destination(const char* value, size_t size);
  ::std::string* mutable_stderr_destination();
  ::std::string* release_stderr_destination();
  void set_allocated_stderr_destination(::std::string* stderr_destination);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.CommandTask.Outputs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> files_;
  ::google::protobuf::RepeatedPtrField< ::std::string> directories_;
  ::google::protobuf::internal::ArenaStringPtr stdout_destination_;
  ::google::protobuf::internal::ArenaStringPtr stderr_destination_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommandTask_Timeouts : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts) */ {
 public:
  CommandTask_Timeouts();
  virtual ~CommandTask_Timeouts();

  CommandTask_Timeouts(const CommandTask_Timeouts& from);

  inline CommandTask_Timeouts& operator=(const CommandTask_Timeouts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandTask_Timeouts(CommandTask_Timeouts&& from) noexcept
    : CommandTask_Timeouts() {
    *this = ::std::move(from);
  }

  inline CommandTask_Timeouts& operator=(CommandTask_Timeouts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandTask_Timeouts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandTask_Timeouts* internal_default_instance() {
    return reinterpret_cast<const CommandTask_Timeouts*>(
               &_CommandTask_Timeouts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CommandTask_Timeouts* other);
  friend void swap(CommandTask_Timeouts& a, CommandTask_Timeouts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandTask_Timeouts* New() const final {
    return CreateMaybeMessage<CommandTask_Timeouts>(NULL);
  }

  CommandTask_Timeouts* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandTask_Timeouts>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandTask_Timeouts& from);
  void MergeFrom(const CommandTask_Timeouts& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTask_Timeouts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration execution = 1;
  bool has_execution() const;
  void clear_execution();
  static const int kExecutionFieldNumber = 1;
  private:
  const ::google::protobuf::Duration& _internal_execution() const;
  public:
  const ::google::protobuf::Duration& execution() const;
  ::google::protobuf::Duration* release_execution();
  ::google::protobuf::Duration* mutable_execution();
  void set_allocated_execution(::google::protobuf::Duration* execution);

  // .google.protobuf.Duration idle = 2;
  bool has_idle() const;
  void clear_idle();
  static const int kIdleFieldNumber = 2;
  private:
  const ::google::protobuf::Duration& _internal_idle() const;
  public:
  const ::google::protobuf::Duration& idle() const;
  ::google::protobuf::Duration* release_idle();
  ::google::protobuf::Duration* mutable_idle();
  void set_allocated_idle(::google::protobuf::Duration* idle);

  // .google.protobuf.Duration shutdown = 3;
  bool has_shutdown() const;
  void clear_shutdown();
  static const int kShutdownFieldNumber = 3;
  private:
  const ::google::protobuf::Duration& _internal_shutdown() const;
  public:
  const ::google::protobuf::Duration& shutdown() const;
  ::google::protobuf::Duration* release_shutdown();
  ::google::protobuf::Duration* mutable_shutdown();
  void set_allocated_shutdown(::google::protobuf::Duration* shutdown);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* execution_;
  ::google::protobuf::Duration* idle_;
  ::google::protobuf::Duration* shutdown_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommandTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.CommandTask) */ {
 public:
  CommandTask();
  virtual ~CommandTask();

  CommandTask(const CommandTask& from);

  inline CommandTask& operator=(const CommandTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandTask(CommandTask&& from) noexcept
    : CommandTask() {
    *this = ::std::move(from);
  }

  inline CommandTask& operator=(CommandTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandTask* internal_default_instance() {
    return reinterpret_cast<const CommandTask*>(
               &_CommandTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CommandTask* other);
  friend void swap(CommandTask& a, CommandTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandTask* New() const final {
    return CreateMaybeMessage<CommandTask>(NULL);
  }

  CommandTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandTask& from);
  void MergeFrom(const CommandTask& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandTask_Inputs Inputs;
  typedef CommandTask_Outputs Outputs;
  typedef CommandTask_Timeouts Timeouts;

  // accessors -------------------------------------------------------

  // .google.devtools.remoteworkers.v1test2.CommandTask.Inputs inputs = 1;
  bool has_inputs() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 1;
  private:
  const ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs& _internal_inputs() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs& inputs() const;
  ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs* release_inputs();
  ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs* mutable_inputs();
  void set_allocated_inputs(::google::devtools::remoteworkers::v1test2::CommandTask_Inputs* inputs);

  // .google.devtools.remoteworkers.v1test2.CommandTask.Outputs expected_outputs = 4;
  bool has_expected_outputs() const;
  void clear_expected_outputs();
  static const int kExpectedOutputsFieldNumber = 4;
  private:
  const ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs& _internal_expected_outputs() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs& expected_outputs() const;
  ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs* release_expected_outputs();
  ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs* mutable_expected_outputs();
  void set_allocated_expected_outputs(::google::devtools::remoteworkers::v1test2::CommandTask_Outputs* expected_outputs);

  // .google.devtools.remoteworkers.v1test2.CommandTask.Timeouts timeouts = 5;
  bool has_timeouts() const;
  void clear_timeouts();
  static const int kTimeoutsFieldNumber = 5;
  private:
  const ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts& _internal_timeouts() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts& timeouts() const;
  ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts* release_timeouts();
  ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts* mutable_timeouts();
  void set_allocated_timeouts(::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts* timeouts);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.CommandTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs* inputs_;
  ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs* expected_outputs_;
  ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts* timeouts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommandOutputs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.CommandOutputs) */ {
 public:
  CommandOutputs();
  virtual ~CommandOutputs();

  CommandOutputs(const CommandOutputs& from);

  inline CommandOutputs& operator=(const CommandOutputs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandOutputs(CommandOutputs&& from) noexcept
    : CommandOutputs() {
    *this = ::std::move(from);
  }

  inline CommandOutputs& operator=(CommandOutputs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandOutputs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandOutputs* internal_default_instance() {
    return reinterpret_cast<const CommandOutputs*>(
               &_CommandOutputs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CommandOutputs* other);
  friend void swap(CommandOutputs& a, CommandOutputs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandOutputs* New() const final {
    return CreateMaybeMessage<CommandOutputs>(NULL);
  }

  CommandOutputs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandOutputs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandOutputs& from);
  void MergeFrom(const CommandOutputs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandOutputs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.devtools.remoteworkers.v1test2.Digest outputs = 2;
  bool has_outputs() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 2;
  private:
  const ::google::devtools::remoteworkers::v1test2::Digest& _internal_outputs() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::Digest& outputs() const;
  ::google::devtools::remoteworkers::v1test2::Digest* release_outputs();
  ::google::devtools::remoteworkers::v1test2::Digest* mutable_outputs();
  void set_allocated_outputs(::google::devtools::remoteworkers::v1test2::Digest* outputs);

  // int32 exit_code = 1;
  void clear_exit_code();
  static const int kExitCodeFieldNumber = 1;
  ::google::protobuf::int32 exit_code() const;
  void set_exit_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.CommandOutputs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::devtools::remoteworkers::v1test2::Digest* outputs_;
  ::google::protobuf::int32 exit_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommandOverhead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.CommandOverhead) */ {
 public:
  CommandOverhead();
  virtual ~CommandOverhead();

  CommandOverhead(const CommandOverhead& from);

  inline CommandOverhead& operator=(const CommandOverhead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandOverhead(CommandOverhead&& from) noexcept
    : CommandOverhead() {
    *this = ::std::move(from);
  }

  inline CommandOverhead& operator=(CommandOverhead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandOverhead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandOverhead* internal_default_instance() {
    return reinterpret_cast<const CommandOverhead*>(
               &_CommandOverhead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CommandOverhead* other);
  friend void swap(CommandOverhead& a, CommandOverhead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandOverhead* New() const final {
    return CreateMaybeMessage<CommandOverhead>(NULL);
  }

  CommandOverhead* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandOverhead>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandOverhead& from);
  void MergeFrom(const CommandOverhead& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandOverhead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration duration = 1;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  private:
  const ::google::protobuf::Duration& _internal_duration() const;
  public:
  const ::google::protobuf::Duration& duration() const;
  ::google::protobuf::Duration* release_duration();
  ::google::protobuf::Duration* mutable_duration();
  void set_allocated_duration(::google::protobuf::Duration* duration);

  // .google.protobuf.Duration overhead = 2;
  bool has_overhead() const;
  void clear_overhead();
  static const int kOverheadFieldNumber = 2;
  private:
  const ::google::protobuf::Duration& _internal_overhead() const;
  public:
  const ::google::protobuf::Duration& overhead() const;
  ::google::protobuf::Duration* release_overhead();
  ::google::protobuf::Duration* mutable_overhead();
  void set_allocated_overhead(::google::protobuf::Duration* overhead);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.CommandOverhead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* duration_;
  ::google::protobuf::Duration* overhead_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommandResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.CommandResult) */ {
 public:
  CommandResult();
  virtual ~CommandResult();

  CommandResult(const CommandResult& from);

  inline CommandResult& operator=(const CommandResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandResult(CommandResult&& from) noexcept
    : CommandResult() {
    *this = ::std::move(from);
  }

  inline CommandResult& operator=(CommandResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandResult* internal_default_instance() {
    return reinterpret_cast<const CommandResult*>(
               &_CommandResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CommandResult* other);
  friend void swap(CommandResult& a, CommandResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandResult* New() const final {
    return CreateMaybeMessage<CommandResult>(NULL);
  }

  CommandResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandResult& from);
  void MergeFrom(const CommandResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any statistics = 6;
  int statistics_size() const;
  void clear_statistics();
  static const int kStatisticsFieldNumber = 6;
  ::google::protobuf::Any* mutable_statistics(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_statistics();
  const ::google::protobuf::Any& statistics(int index) const;
  ::google::protobuf::Any* add_statistics();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      statistics() const;

  // .google.rpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::google::rpc::Status& _internal_status() const;
  public:
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);

  // .google.devtools.remoteworkers.v1test2.Digest outputs = 3;
  bool has_outputs() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 3;
  private:
  const ::google::devtools::remoteworkers::v1test2::Digest& _internal_outputs() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::Digest& outputs() const;
  ::google::devtools::remoteworkers::v1test2::Digest* release_outputs();
  ::google::devtools::remoteworkers::v1test2::Digest* mutable_outputs();
  void set_allocated_outputs(::google::devtools::remoteworkers::v1test2::Digest* outputs);

  // .google.protobuf.Duration duration = 4 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_duration() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_duration();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kDurationFieldNumber = 4;
  private:
  const ::google::protobuf::Duration& _internal_duration() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::Duration& duration() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::Duration* release_duration();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::Duration* mutable_duration();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_duration(::google::protobuf::Duration* duration);

  // .google.protobuf.Duration overhead = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_overhead() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_overhead();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kOverheadFieldNumber = 5;
  private:
  const ::google::protobuf::Duration& _internal_overhead() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::Duration& overhead() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::Duration* release_overhead();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::Duration* mutable_overhead();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_overhead(::google::protobuf::Duration* overhead);

  // int32 exit_code = 2;
  void clear_exit_code();
  static const int kExitCodeFieldNumber = 2;
  ::google::protobuf::int32 exit_code() const;
  void set_exit_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.CommandResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > statistics_;
  ::google::rpc::Status* status_;
  ::google::devtools::remoteworkers::v1test2::Digest* outputs_;
  ::google::protobuf::Duration* duration_;
  ::google::protobuf::Duration* overhead_;
  ::google::protobuf::int32 exit_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.FileMetadata) */ {
 public:
  FileMetadata();
  virtual ~FileMetadata();

  FileMetadata(const FileMetadata& from);

  inline FileMetadata& operator=(const FileMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileMetadata(FileMetadata&& from) noexcept
    : FileMetadata() {
    *this = ::std::move(from);
  }

  inline FileMetadata& operator=(FileMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileMetadata* internal_default_instance() {
    return reinterpret_cast<const FileMetadata*>(
               &_FileMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(FileMetadata* other);
  friend void swap(FileMetadata& a, FileMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileMetadata* New() const final {
    return CreateMaybeMessage<FileMetadata>(NULL);
  }

  FileMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileMetadata& from);
  void MergeFrom(const FileMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bytes contents = 3;
  void clear_contents();
  static const int kContentsFieldNumber = 3;
  const ::std::string& contents() const;
  void set_contents(const ::std::string& value);
  #if LANG_CXX11
  void set_contents(::std::string&& value);
  #endif
  void set_contents(const char* value);
  void set_contents(const void* value, size_t size);
  ::std::string* mutable_contents();
  ::std::string* release_contents();
  void set_allocated_contents(::std::string* contents);

  // .google.devtools.remoteworkers.v1test2.Digest digest = 2;
  bool has_digest() const;
  void clear_digest();
  static const int kDigestFieldNumber = 2;
  private:
  const ::google::devtools::remoteworkers::v1test2::Digest& _internal_digest() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::Digest& digest() const;
  ::google::devtools::remoteworkers::v1test2::Digest* release_digest();
  ::google::devtools::remoteworkers::v1test2::Digest* mutable_digest();
  void set_allocated_digest(::google::devtools::remoteworkers::v1test2::Digest* digest);

  // bool is_executable = 4;
  void clear_is_executable();
  static const int kIsExecutableFieldNumber = 4;
  bool is_executable() const;
  void set_is_executable(bool value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.FileMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr contents_;
  ::google::devtools::remoteworkers::v1test2::Digest* digest_;
  bool is_executable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectoryMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.DirectoryMetadata) */ {
 public:
  DirectoryMetadata();
  virtual ~DirectoryMetadata();

  DirectoryMetadata(const DirectoryMetadata& from);

  inline DirectoryMetadata& operator=(const DirectoryMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectoryMetadata(DirectoryMetadata&& from) noexcept
    : DirectoryMetadata() {
    *this = ::std::move(from);
  }

  inline DirectoryMetadata& operator=(DirectoryMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectoryMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectoryMetadata* internal_default_instance() {
    return reinterpret_cast<const DirectoryMetadata*>(
               &_DirectoryMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DirectoryMetadata* other);
  friend void swap(DirectoryMetadata& a, DirectoryMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectoryMetadata* New() const final {
    return CreateMaybeMessage<DirectoryMetadata>(NULL);
  }

  DirectoryMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DirectoryMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DirectoryMetadata& from);
  void MergeFrom(const DirectoryMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectoryMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .google.devtools.remoteworkers.v1test2.Digest digest = 2;
  bool has_digest() const;
  void clear_digest();
  static const int kDigestFieldNumber = 2;
  private:
  const ::google::devtools::remoteworkers::v1test2::Digest& _internal_digest() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::Digest& digest() const;
  ::google::devtools::remoteworkers::v1test2::Digest* release_digest();
  ::google::devtools::remoteworkers::v1test2::Digest* mutable_digest();
  void set_allocated_digest(::google::devtools::remoteworkers::v1test2::Digest* digest);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.DirectoryMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::devtools::remoteworkers::v1test2::Digest* digest_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Digest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Digest) */ {
 public:
  Digest();
  virtual ~Digest();

  Digest(const Digest& from);

  inline Digest& operator=(const Digest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Digest(Digest&& from) noexcept
    : Digest() {
    *this = ::std::move(from);
  }

  inline Digest& operator=(Digest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Digest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Digest* internal_default_instance() {
    return reinterpret_cast<const Digest*>(
               &_Digest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Digest* other);
  friend void swap(Digest& a, Digest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Digest* New() const final {
    return CreateMaybeMessage<Digest>(NULL);
  }

  Digest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Digest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Digest& from);
  void MergeFrom(const Digest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Digest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // int64 size_bytes = 2;
  void clear_size_bytes();
  static const int kSizeBytesFieldNumber = 2;
  ::google::protobuf::int64 size_bytes() const;
  void set_size_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Digest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::int64 size_bytes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Directory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Directory) */ {
 public:
  Directory();
  virtual ~Directory();

  Directory(const Directory& from);

  inline Directory& operator=(const Directory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Directory(Directory&& from) noexcept
    : Directory() {
    *this = ::std::move(from);
  }

  inline Directory& operator=(Directory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Directory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Directory* internal_default_instance() {
    return reinterpret_cast<const Directory*>(
               &_Directory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Directory* other);
  friend void swap(Directory& a, Directory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Directory* New() const final {
    return CreateMaybeMessage<Directory>(NULL);
  }

  Directory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Directory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Directory& from);
  void MergeFrom(const Directory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Directory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteworkers.v1test2.FileMetadata files = 1;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 1;
  ::google::devtools::remoteworkers::v1test2::FileMetadata* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::FileMetadata >*
      mutable_files();
  const ::google::devtools::remoteworkers::v1test2::FileMetadata& files(int index) const;
  ::google::devtools::remoteworkers::v1test2::FileMetadata* add_files();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::FileMetadata >&
      files() const;

  // repeated .google.devtools.remoteworkers.v1test2.DirectoryMetadata directories = 2;
  int directories_size() const;
  void clear_directories();
  static const int kDirectoriesFieldNumber = 2;
  ::google::devtools::remoteworkers::v1test2::DirectoryMetadata* mutable_directories(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::DirectoryMetadata >*
      mutable_directories();
  const ::google::devtools::remoteworkers::v1test2::DirectoryMetadata& directories(int index) const;
  ::google::devtools::remoteworkers::v1test2::DirectoryMetadata* add_directories();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::DirectoryMetadata >&
      directories() const;

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Directory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::FileMetadata > files_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::DirectoryMetadata > directories_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandTask_Inputs_EnvironmentVariable

// string name = 1;
inline void CommandTask_Inputs_EnvironmentVariable::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandTask_Inputs_EnvironmentVariable::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.name)
  return name_.GetNoArena();
}
inline void CommandTask_Inputs_EnvironmentVariable::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.name)
}
#if LANG_CXX11
inline void CommandTask_Inputs_EnvironmentVariable::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.name)
}
#endif
inline void CommandTask_Inputs_EnvironmentVariable::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.name)
}
inline void CommandTask_Inputs_EnvironmentVariable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.name)
}
inline ::std::string* CommandTask_Inputs_EnvironmentVariable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandTask_Inputs_EnvironmentVariable::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandTask_Inputs_EnvironmentVariable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.name)
}

// string value = 2;
inline void CommandTask_Inputs_EnvironmentVariable::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandTask_Inputs_EnvironmentVariable::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.value)
  return value_.GetNoArena();
}
inline void CommandTask_Inputs_EnvironmentVariable::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.value)
}
#if LANG_CXX11
inline void CommandTask_Inputs_EnvironmentVariable::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.value)
}
#endif
inline void CommandTask_Inputs_EnvironmentVariable::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.value)
}
inline void CommandTask_Inputs_EnvironmentVariable::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.value)
}
inline ::std::string* CommandTask_Inputs_EnvironmentVariable::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandTask_Inputs_EnvironmentVariable::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandTask_Inputs_EnvironmentVariable::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.value)
}

// -------------------------------------------------------------------

// CommandTask_Inputs

// repeated string arguments = 1;
inline int CommandTask_Inputs::arguments_size() const {
  return arguments_.size();
}
inline void CommandTask_Inputs::clear_arguments() {
  arguments_.Clear();
}
inline const ::std::string& CommandTask_Inputs::arguments(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
  return arguments_.Get(index);
}
inline ::std::string* CommandTask_Inputs::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
  return arguments_.Mutable(index);
}
inline void CommandTask_Inputs::set_arguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
  arguments_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CommandTask_Inputs::set_arguments(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
  arguments_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CommandTask_Inputs::set_arguments(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
}
inline void CommandTask_Inputs::set_arguments(int index, const char* value, size_t size) {
  arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
}
inline ::std::string* CommandTask_Inputs::add_arguments() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
  return arguments_.Add();
}
inline void CommandTask_Inputs::add_arguments(const ::std::string& value) {
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
}
#if LANG_CXX11
inline void CommandTask_Inputs::add_arguments(::std::string&& value) {
  arguments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
}
#endif
inline void CommandTask_Inputs::add_arguments(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
}
inline void CommandTask_Inputs::add_arguments(const char* value, size_t size) {
  arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandTask_Inputs::arguments() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
  return arguments_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandTask_Inputs::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.arguments)
  return &arguments_;
}

// repeated .google.devtools.remoteworkers.v1test2.Digest files = 2;
inline int CommandTask_Inputs::files_size() const {
  return files_.size();
}
inline void CommandTask_Inputs::clear_files() {
  files_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::Digest* CommandTask_Inputs::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.files)
  return files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Digest >*
CommandTask_Inputs::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.files)
  return &files_;
}
inline const ::google::devtools::remoteworkers::v1test2::Digest& CommandTask_Inputs::files(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.files)
  return files_.Get(index);
}
inline ::google::devtools::remoteworkers::v1test2::Digest* CommandTask_Inputs::add_files() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Digest >&
CommandTask_Inputs::files() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.files)
  return files_;
}

// repeated .google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable environment_variables = 3;
inline int CommandTask_Inputs::environment_variables_size() const {
  return environment_variables_.size();
}
inline void CommandTask_Inputs::clear_environment_variables() {
  environment_variables_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable* CommandTask_Inputs::mutable_environment_variables(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.environment_variables)
  return environment_variables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable >*
CommandTask_Inputs::mutable_environment_variables() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.environment_variables)
  return &environment_variables_;
}
inline const ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable& CommandTask_Inputs::environment_variables(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.environment_variables)
  return environment_variables_.Get(index);
}
inline ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable* CommandTask_Inputs::add_environment_variables() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.environment_variables)
  return environment_variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs_EnvironmentVariable >&
CommandTask_Inputs::environment_variables() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.CommandTask.Inputs.environment_variables)
  return environment_variables_;
}

// -------------------------------------------------------------------

// CommandTask_Outputs

// repeated string files = 1;
inline int CommandTask_Outputs::files_size() const {
  return files_.size();
}
inline void CommandTask_Outputs::clear_files() {
  files_.Clear();
}
inline const ::std::string& CommandTask_Outputs::files(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
  return files_.Get(index);
}
inline ::std::string* CommandTask_Outputs::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
  return files_.Mutable(index);
}
inline void CommandTask_Outputs::set_files(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
  files_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CommandTask_Outputs::set_files(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
  files_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CommandTask_Outputs::set_files(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
}
inline void CommandTask_Outputs::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
}
inline ::std::string* CommandTask_Outputs::add_files() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
  return files_.Add();
}
inline void CommandTask_Outputs::add_files(const ::std::string& value) {
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
}
#if LANG_CXX11
inline void CommandTask_Outputs::add_files(::std::string&& value) {
  files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
}
#endif
inline void CommandTask_Outputs::add_files(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
}
inline void CommandTask_Outputs::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandTask_Outputs::files() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandTask_Outputs::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.files)
  return &files_;
}

// repeated string directories = 2;
inline int CommandTask_Outputs::directories_size() const {
  return directories_.size();
}
inline void CommandTask_Outputs::clear_directories() {
  directories_.Clear();
}
inline const ::std::string& CommandTask_Outputs::directories(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
  return directories_.Get(index);
}
inline ::std::string* CommandTask_Outputs::mutable_directories(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
  return directories_.Mutable(index);
}
inline void CommandTask_Outputs::set_directories(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
  directories_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CommandTask_Outputs::set_directories(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
  directories_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CommandTask_Outputs::set_directories(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  directories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
}
inline void CommandTask_Outputs::set_directories(int index, const char* value, size_t size) {
  directories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
}
inline ::std::string* CommandTask_Outputs::add_directories() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
  return directories_.Add();
}
inline void CommandTask_Outputs::add_directories(const ::std::string& value) {
  directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
}
#if LANG_CXX11
inline void CommandTask_Outputs::add_directories(::std::string&& value) {
  directories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
}
#endif
inline void CommandTask_Outputs::add_directories(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
}
inline void CommandTask_Outputs::add_directories(const char* value, size_t size) {
  directories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandTask_Outputs::directories() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
  return directories_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandTask_Outputs::mutable_directories() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.directories)
  return &directories_;
}

// string stdout_destination = 3;
inline void CommandTask_Outputs::clear_stdout_destination() {
  stdout_destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandTask_Outputs::stdout_destination() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stdout_destination)
  return stdout_destination_.GetNoArena();
}
inline void CommandTask_Outputs::set_stdout_destination(const ::std::string& value) {
  
  stdout_destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stdout_destination)
}
#if LANG_CXX11
inline void CommandTask_Outputs::set_stdout_destination(::std::string&& value) {
  
  stdout_destination_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stdout_destination)
}
#endif
inline void CommandTask_Outputs::set_stdout_destination(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stdout_destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stdout_destination)
}
inline void CommandTask_Outputs::set_stdout_destination(const char* value, size_t size) {
  
  stdout_destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stdout_destination)
}
inline ::std::string* CommandTask_Outputs::mutable_stdout_destination() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stdout_destination)
  return stdout_destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandTask_Outputs::release_stdout_destination() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stdout_destination)
  
  return stdout_destination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandTask_Outputs::set_allocated_stdout_destination(::std::string* stdout_destination) {
  if (stdout_destination != NULL) {
    
  } else {
    
  }
  stdout_destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stdout_destination);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stdout_destination)
}

// string stderr_destination = 4;
inline void CommandTask_Outputs::clear_stderr_destination() {
  stderr_destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandTask_Outputs::stderr_destination() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stderr_destination)
  return stderr_destination_.GetNoArena();
}
inline void CommandTask_Outputs::set_stderr_destination(const ::std::string& value) {
  
  stderr_destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stderr_destination)
}
#if LANG_CXX11
inline void CommandTask_Outputs::set_stderr_destination(::std::string&& value) {
  
  stderr_destination_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stderr_destination)
}
#endif
inline void CommandTask_Outputs::set_stderr_destination(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stderr_destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stderr_destination)
}
inline void CommandTask_Outputs::set_stderr_destination(const char* value, size_t size) {
  
  stderr_destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stderr_destination)
}
inline ::std::string* CommandTask_Outputs::mutable_stderr_destination() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stderr_destination)
  return stderr_destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandTask_Outputs::release_stderr_destination() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stderr_destination)
  
  return stderr_destination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandTask_Outputs::set_allocated_stderr_destination(::std::string* stderr_destination) {
  if (stderr_destination != NULL) {
    
  } else {
    
  }
  stderr_destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stderr_destination);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandTask.Outputs.stderr_destination)
}

// -------------------------------------------------------------------

// CommandTask_Timeouts

// .google.protobuf.Duration execution = 1;
inline bool CommandTask_Timeouts::has_execution() const {
  return this != internal_default_instance() && execution_ != NULL;
}
inline const ::google::protobuf::Duration& CommandTask_Timeouts::_internal_execution() const {
  return *execution_;
}
inline const ::google::protobuf::Duration& CommandTask_Timeouts::execution() const {
  const ::google::protobuf::Duration* p = execution_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.execution)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CommandTask_Timeouts::release_execution() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.execution)
  
  ::google::protobuf::Duration* temp = execution_;
  execution_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CommandTask_Timeouts::mutable_execution() {
  
  if (execution_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    execution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.execution)
  return execution_;
}
inline void CommandTask_Timeouts::set_allocated_execution(::google::protobuf::Duration* execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(execution_);
  }
  if (execution) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(execution)->GetArena();
    if (message_arena != submessage_arena) {
      execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution, submessage_arena);
    }
    
  } else {
    
  }
  execution_ = execution;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.execution)
}

// .google.protobuf.Duration idle = 2;
inline bool CommandTask_Timeouts::has_idle() const {
  return this != internal_default_instance() && idle_ != NULL;
}
inline const ::google::protobuf::Duration& CommandTask_Timeouts::_internal_idle() const {
  return *idle_;
}
inline const ::google::protobuf::Duration& CommandTask_Timeouts::idle() const {
  const ::google::protobuf::Duration* p = idle_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.idle)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CommandTask_Timeouts::release_idle() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.idle)
  
  ::google::protobuf::Duration* temp = idle_;
  idle_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CommandTask_Timeouts::mutable_idle() {
  
  if (idle_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    idle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.idle)
  return idle_;
}
inline void CommandTask_Timeouts::set_allocated_idle(::google::protobuf::Duration* idle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(idle_);
  }
  if (idle) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(idle)->GetArena();
    if (message_arena != submessage_arena) {
      idle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, idle, submessage_arena);
    }
    
  } else {
    
  }
  idle_ = idle;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.idle)
}

// .google.protobuf.Duration shutdown = 3;
inline bool CommandTask_Timeouts::has_shutdown() const {
  return this != internal_default_instance() && shutdown_ != NULL;
}
inline const ::google::protobuf::Duration& CommandTask_Timeouts::_internal_shutdown() const {
  return *shutdown_;
}
inline const ::google::protobuf::Duration& CommandTask_Timeouts::shutdown() const {
  const ::google::protobuf::Duration* p = shutdown_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.shutdown)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CommandTask_Timeouts::release_shutdown() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.shutdown)
  
  ::google::protobuf::Duration* temp = shutdown_;
  shutdown_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CommandTask_Timeouts::mutable_shutdown() {
  
  if (shutdown_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    shutdown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.shutdown)
  return shutdown_;
}
inline void CommandTask_Timeouts::set_allocated_shutdown(::google::protobuf::Duration* shutdown) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shutdown_);
  }
  if (shutdown) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(shutdown)->GetArena();
    if (message_arena != submessage_arena) {
      shutdown = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shutdown, submessage_arena);
    }
    
  } else {
    
  }
  shutdown_ = shutdown;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.shutdown)
}

// -------------------------------------------------------------------

// CommandTask

// .google.devtools.remoteworkers.v1test2.CommandTask.Inputs inputs = 1;
inline bool CommandTask::has_inputs() const {
  return this != internal_default_instance() && inputs_ != NULL;
}
inline void CommandTask::clear_inputs() {
  if (GetArenaNoVirtual() == NULL && inputs_ != NULL) {
    delete inputs_;
  }
  inputs_ = NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs& CommandTask::_internal_inputs() const {
  return *inputs_;
}
inline const ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs& CommandTask::inputs() const {
  const ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs* p = inputs_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.inputs)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs*>(
      &::google::devtools::remoteworkers::v1test2::_CommandTask_Inputs_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs* CommandTask::release_inputs() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandTask.inputs)
  
  ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs* temp = inputs_;
  inputs_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::CommandTask_Inputs* CommandTask::mutable_inputs() {
  
  if (inputs_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CommandTask_Inputs>(GetArenaNoVirtual());
    inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.inputs)
  return inputs_;
}
inline void CommandTask::set_allocated_inputs(::google::devtools::remoteworkers::v1test2::CommandTask_Inputs* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inputs_;
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandTask.inputs)
}

// .google.devtools.remoteworkers.v1test2.CommandTask.Outputs expected_outputs = 4;
inline bool CommandTask::has_expected_outputs() const {
  return this != internal_default_instance() && expected_outputs_ != NULL;
}
inline void CommandTask::clear_expected_outputs() {
  if (GetArenaNoVirtual() == NULL && expected_outputs_ != NULL) {
    delete expected_outputs_;
  }
  expected_outputs_ = NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs& CommandTask::_internal_expected_outputs() const {
  return *expected_outputs_;
}
inline const ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs& CommandTask::expected_outputs() const {
  const ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs* p = expected_outputs_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.expected_outputs)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs*>(
      &::google::devtools::remoteworkers::v1test2::_CommandTask_Outputs_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs* CommandTask::release_expected_outputs() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandTask.expected_outputs)
  
  ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs* temp = expected_outputs_;
  expected_outputs_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::CommandTask_Outputs* CommandTask::mutable_expected_outputs() {
  
  if (expected_outputs_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CommandTask_Outputs>(GetArenaNoVirtual());
    expected_outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.expected_outputs)
  return expected_outputs_;
}
inline void CommandTask::set_allocated_expected_outputs(::google::devtools::remoteworkers::v1test2::CommandTask_Outputs* expected_outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expected_outputs_;
  }
  if (expected_outputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expected_outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expected_outputs, submessage_arena);
    }
    
  } else {
    
  }
  expected_outputs_ = expected_outputs;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandTask.expected_outputs)
}

// .google.devtools.remoteworkers.v1test2.CommandTask.Timeouts timeouts = 5;
inline bool CommandTask::has_timeouts() const {
  return this != internal_default_instance() && timeouts_ != NULL;
}
inline void CommandTask::clear_timeouts() {
  if (GetArenaNoVirtual() == NULL && timeouts_ != NULL) {
    delete timeouts_;
  }
  timeouts_ = NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts& CommandTask::_internal_timeouts() const {
  return *timeouts_;
}
inline const ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts& CommandTask::timeouts() const {
  const ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts* p = timeouts_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandTask.timeouts)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts*>(
      &::google::devtools::remoteworkers::v1test2::_CommandTask_Timeouts_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts* CommandTask::release_timeouts() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandTask.timeouts)
  
  ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts* temp = timeouts_;
  timeouts_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts* CommandTask::mutable_timeouts() {
  
  if (timeouts_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts>(GetArenaNoVirtual());
    timeouts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandTask.timeouts)
  return timeouts_;
}
inline void CommandTask::set_allocated_timeouts(::google::devtools::remoteworkers::v1test2::CommandTask_Timeouts* timeouts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timeouts_;
  }
  if (timeouts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timeouts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeouts, submessage_arena);
    }
    
  } else {
    
  }
  timeouts_ = timeouts;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandTask.timeouts)
}

// -------------------------------------------------------------------

// CommandOutputs

// int32 exit_code = 1;
inline void CommandOutputs::clear_exit_code() {
  exit_code_ = 0;
}
inline ::google::protobuf::int32 CommandOutputs::exit_code() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandOutputs.exit_code)
  return exit_code_;
}
inline void CommandOutputs::set_exit_code(::google::protobuf::int32 value) {
  
  exit_code_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandOutputs.exit_code)
}

// .google.devtools.remoteworkers.v1test2.Digest outputs = 2;
inline bool CommandOutputs::has_outputs() const {
  return this != internal_default_instance() && outputs_ != NULL;
}
inline void CommandOutputs::clear_outputs() {
  if (GetArenaNoVirtual() == NULL && outputs_ != NULL) {
    delete outputs_;
  }
  outputs_ = NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::Digest& CommandOutputs::_internal_outputs() const {
  return *outputs_;
}
inline const ::google::devtools::remoteworkers::v1test2::Digest& CommandOutputs::outputs() const {
  const ::google::devtools::remoteworkers::v1test2::Digest* p = outputs_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandOutputs.outputs)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::Digest*>(
      &::google::devtools::remoteworkers::v1test2::_Digest_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::Digest* CommandOutputs::release_outputs() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandOutputs.outputs)
  
  ::google::devtools::remoteworkers::v1test2::Digest* temp = outputs_;
  outputs_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::Digest* CommandOutputs::mutable_outputs() {
  
  if (outputs_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Digest>(GetArenaNoVirtual());
    outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandOutputs.outputs)
  return outputs_;
}
inline void CommandOutputs::set_allocated_outputs(::google::devtools::remoteworkers::v1test2::Digest* outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete outputs_;
  }
  if (outputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    
  } else {
    
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandOutputs.outputs)
}

// -------------------------------------------------------------------

// CommandOverhead

// .google.protobuf.Duration duration = 1;
inline bool CommandOverhead::has_duration() const {
  return this != internal_default_instance() && duration_ != NULL;
}
inline const ::google::protobuf::Duration& CommandOverhead::_internal_duration() const {
  return *duration_;
}
inline const ::google::protobuf::Duration& CommandOverhead::duration() const {
  const ::google::protobuf::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandOverhead.duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CommandOverhead::release_duration() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandOverhead.duration)
  
  ::google::protobuf::Duration* temp = duration_;
  duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CommandOverhead::mutable_duration() {
  
  if (duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandOverhead.duration)
  return duration_;
}
inline void CommandOverhead::set_allocated_duration(::google::protobuf::Duration* duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(duration_);
  }
  if (duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandOverhead.duration)
}

// .google.protobuf.Duration overhead = 2;
inline bool CommandOverhead::has_overhead() const {
  return this != internal_default_instance() && overhead_ != NULL;
}
inline const ::google::protobuf::Duration& CommandOverhead::_internal_overhead() const {
  return *overhead_;
}
inline const ::google::protobuf::Duration& CommandOverhead::overhead() const {
  const ::google::protobuf::Duration* p = overhead_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandOverhead.overhead)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CommandOverhead::release_overhead() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandOverhead.overhead)
  
  ::google::protobuf::Duration* temp = overhead_;
  overhead_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CommandOverhead::mutable_overhead() {
  
  if (overhead_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    overhead_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandOverhead.overhead)
  return overhead_;
}
inline void CommandOverhead::set_allocated_overhead(::google::protobuf::Duration* overhead) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(overhead_);
  }
  if (overhead) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(overhead)->GetArena();
    if (message_arena != submessage_arena) {
      overhead = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, overhead, submessage_arena);
    }
    
  } else {
    
  }
  overhead_ = overhead;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandOverhead.overhead)
}

// -------------------------------------------------------------------

// CommandResult

// .google.rpc.Status status = 1;
inline bool CommandResult::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::google::rpc::Status& CommandResult::_internal_status() const {
  return *status_;
}
inline const ::google::rpc::Status& CommandResult::status() const {
  const ::google::rpc::Status* p = status_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandResult.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* CommandResult::release_status() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandResult.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* CommandResult::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandResult.status)
  return status_;
}
inline void CommandResult::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandResult.status)
}

// int32 exit_code = 2;
inline void CommandResult::clear_exit_code() {
  exit_code_ = 0;
}
inline ::google::protobuf::int32 CommandResult::exit_code() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandResult.exit_code)
  return exit_code_;
}
inline void CommandResult::set_exit_code(::google::protobuf::int32 value) {
  
  exit_code_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CommandResult.exit_code)
}

// .google.devtools.remoteworkers.v1test2.Digest outputs = 3;
inline bool CommandResult::has_outputs() const {
  return this != internal_default_instance() && outputs_ != NULL;
}
inline void CommandResult::clear_outputs() {
  if (GetArenaNoVirtual() == NULL && outputs_ != NULL) {
    delete outputs_;
  }
  outputs_ = NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::Digest& CommandResult::_internal_outputs() const {
  return *outputs_;
}
inline const ::google::devtools::remoteworkers::v1test2::Digest& CommandResult::outputs() const {
  const ::google::devtools::remoteworkers::v1test2::Digest* p = outputs_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandResult.outputs)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::Digest*>(
      &::google::devtools::remoteworkers::v1test2::_Digest_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::Digest* CommandResult::release_outputs() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandResult.outputs)
  
  ::google::devtools::remoteworkers::v1test2::Digest* temp = outputs_;
  outputs_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::Digest* CommandResult::mutable_outputs() {
  
  if (outputs_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Digest>(GetArenaNoVirtual());
    outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandResult.outputs)
  return outputs_;
}
inline void CommandResult::set_allocated_outputs(::google::devtools::remoteworkers::v1test2::Digest* outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete outputs_;
  }
  if (outputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    
  } else {
    
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandResult.outputs)
}

// .google.protobuf.Duration duration = 4 [deprecated = true];
inline bool CommandResult::has_duration() const {
  return this != internal_default_instance() && duration_ != NULL;
}
inline const ::google::protobuf::Duration& CommandResult::_internal_duration() const {
  return *duration_;
}
inline const ::google::protobuf::Duration& CommandResult::duration() const {
  const ::google::protobuf::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandResult.duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CommandResult::release_duration() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandResult.duration)
  
  ::google::protobuf::Duration* temp = duration_;
  duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CommandResult::mutable_duration() {
  
  if (duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandResult.duration)
  return duration_;
}
inline void CommandResult::set_allocated_duration(::google::protobuf::Duration* duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(duration_);
  }
  if (duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandResult.duration)
}

// .google.protobuf.Duration overhead = 5 [deprecated = true];
inline bool CommandResult::has_overhead() const {
  return this != internal_default_instance() && overhead_ != NULL;
}
inline const ::google::protobuf::Duration& CommandResult::_internal_overhead() const {
  return *overhead_;
}
inline const ::google::protobuf::Duration& CommandResult::overhead() const {
  const ::google::protobuf::Duration* p = overhead_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandResult.overhead)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CommandResult::release_overhead() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CommandResult.overhead)
  
  ::google::protobuf::Duration* temp = overhead_;
  overhead_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CommandResult::mutable_overhead() {
  
  if (overhead_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    overhead_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandResult.overhead)
  return overhead_;
}
inline void CommandResult::set_allocated_overhead(::google::protobuf::Duration* overhead) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(overhead_);
  }
  if (overhead) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(overhead)->GetArena();
    if (message_arena != submessage_arena) {
      overhead = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, overhead, submessage_arena);
    }
    
  } else {
    
  }
  overhead_ = overhead;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CommandResult.overhead)
}

// repeated .google.protobuf.Any statistics = 6;
inline int CommandResult::statistics_size() const {
  return statistics_.size();
}
inline ::google::protobuf::Any* CommandResult::mutable_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CommandResult.statistics)
  return statistics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
CommandResult::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.CommandResult.statistics)
  return &statistics_;
}
inline const ::google::protobuf::Any& CommandResult::statistics(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CommandResult.statistics)
  return statistics_.Get(index);
}
inline ::google::protobuf::Any* CommandResult::add_statistics() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.CommandResult.statistics)
  return statistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
CommandResult::statistics() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.CommandResult.statistics)
  return statistics_;
}

// -------------------------------------------------------------------

// FileMetadata

// string path = 1;
inline void FileMetadata::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileMetadata::path() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.FileMetadata.path)
  return path_.GetNoArena();
}
inline void FileMetadata::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.FileMetadata.path)
}
#if LANG_CXX11
inline void FileMetadata::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.FileMetadata.path)
}
#endif
inline void FileMetadata::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.FileMetadata.path)
}
inline void FileMetadata::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.FileMetadata.path)
}
inline ::std::string* FileMetadata::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.FileMetadata.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileMetadata::release_path() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.FileMetadata.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileMetadata::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.FileMetadata.path)
}

// .google.devtools.remoteworkers.v1test2.Digest digest = 2;
inline bool FileMetadata::has_digest() const {
  return this != internal_default_instance() && digest_ != NULL;
}
inline void FileMetadata::clear_digest() {
  if (GetArenaNoVirtual() == NULL && digest_ != NULL) {
    delete digest_;
  }
  digest_ = NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::Digest& FileMetadata::_internal_digest() const {
  return *digest_;
}
inline const ::google::devtools::remoteworkers::v1test2::Digest& FileMetadata::digest() const {
  const ::google::devtools::remoteworkers::v1test2::Digest* p = digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.FileMetadata.digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::Digest*>(
      &::google::devtools::remoteworkers::v1test2::_Digest_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::Digest* FileMetadata::release_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.FileMetadata.digest)
  
  ::google::devtools::remoteworkers::v1test2::Digest* temp = digest_;
  digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::Digest* FileMetadata::mutable_digest() {
  
  if (digest_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Digest>(GetArenaNoVirtual());
    digest_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.FileMetadata.digest)
  return digest_;
}
inline void FileMetadata::set_allocated_digest(::google::devtools::remoteworkers::v1test2::Digest* digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete digest_;
  }
  if (digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.FileMetadata.digest)
}

// bytes contents = 3;
inline void FileMetadata::clear_contents() {
  contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileMetadata::contents() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.FileMetadata.contents)
  return contents_.GetNoArena();
}
inline void FileMetadata::set_contents(const ::std::string& value) {
  
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.FileMetadata.contents)
}
#if LANG_CXX11
inline void FileMetadata::set_contents(::std::string&& value) {
  
  contents_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.FileMetadata.contents)
}
#endif
inline void FileMetadata::set_contents(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.FileMetadata.contents)
}
inline void FileMetadata::set_contents(const void* value, size_t size) {
  
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.FileMetadata.contents)
}
inline ::std::string* FileMetadata::mutable_contents() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.FileMetadata.contents)
  return contents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileMetadata::release_contents() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.FileMetadata.contents)
  
  return contents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileMetadata::set_allocated_contents(::std::string* contents) {
  if (contents != NULL) {
    
  } else {
    
  }
  contents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contents);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.FileMetadata.contents)
}

// bool is_executable = 4;
inline void FileMetadata::clear_is_executable() {
  is_executable_ = false;
}
inline bool FileMetadata::is_executable() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.FileMetadata.is_executable)
  return is_executable_;
}
inline void FileMetadata::set_is_executable(bool value) {
  
  is_executable_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.FileMetadata.is_executable)
}

// -------------------------------------------------------------------

// DirectoryMetadata

// string path = 1;
inline void DirectoryMetadata::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirectoryMetadata::path() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.DirectoryMetadata.path)
  return path_.GetNoArena();
}
inline void DirectoryMetadata::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.DirectoryMetadata.path)
}
#if LANG_CXX11
inline void DirectoryMetadata::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.DirectoryMetadata.path)
}
#endif
inline void DirectoryMetadata::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.DirectoryMetadata.path)
}
inline void DirectoryMetadata::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.DirectoryMetadata.path)
}
inline ::std::string* DirectoryMetadata::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.DirectoryMetadata.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirectoryMetadata::release_path() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.DirectoryMetadata.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirectoryMetadata::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.DirectoryMetadata.path)
}

// .google.devtools.remoteworkers.v1test2.Digest digest = 2;
inline bool DirectoryMetadata::has_digest() const {
  return this != internal_default_instance() && digest_ != NULL;
}
inline void DirectoryMetadata::clear_digest() {
  if (GetArenaNoVirtual() == NULL && digest_ != NULL) {
    delete digest_;
  }
  digest_ = NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::Digest& DirectoryMetadata::_internal_digest() const {
  return *digest_;
}
inline const ::google::devtools::remoteworkers::v1test2::Digest& DirectoryMetadata::digest() const {
  const ::google::devtools::remoteworkers::v1test2::Digest* p = digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.DirectoryMetadata.digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::Digest*>(
      &::google::devtools::remoteworkers::v1test2::_Digest_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::Digest* DirectoryMetadata::release_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.DirectoryMetadata.digest)
  
  ::google::devtools::remoteworkers::v1test2::Digest* temp = digest_;
  digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::Digest* DirectoryMetadata::mutable_digest() {
  
  if (digest_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Digest>(GetArenaNoVirtual());
    digest_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.DirectoryMetadata.digest)
  return digest_;
}
inline void DirectoryMetadata::set_allocated_digest(::google::devtools::remoteworkers::v1test2::Digest* digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete digest_;
  }
  if (digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.DirectoryMetadata.digest)
}

// -------------------------------------------------------------------

// Digest

// string hash = 1;
inline void Digest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Digest::hash() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Digest.hash)
  return hash_.GetNoArena();
}
inline void Digest::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Digest.hash)
}
#if LANG_CXX11
inline void Digest::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Digest.hash)
}
#endif
inline void Digest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Digest.hash)
}
inline void Digest::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Digest.hash)
}
inline ::std::string* Digest::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Digest.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Digest::release_hash() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Digest.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Digest::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Digest.hash)
}

// int64 size_bytes = 2;
inline void Digest::clear_size_bytes() {
  size_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Digest::size_bytes() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Digest.size_bytes)
  return size_bytes_;
}
inline void Digest::set_size_bytes(::google::protobuf::int64 value) {
  
  size_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Digest.size_bytes)
}

// -------------------------------------------------------------------

// Directory

// repeated .google.devtools.remoteworkers.v1test2.FileMetadata files = 1;
inline int Directory::files_size() const {
  return files_.size();
}
inline void Directory::clear_files() {
  files_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::FileMetadata* Directory::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Directory.files)
  return files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::FileMetadata >*
Directory::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.Directory.files)
  return &files_;
}
inline const ::google::devtools::remoteworkers::v1test2::FileMetadata& Directory::files(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Directory.files)
  return files_.Get(index);
}
inline ::google::devtools::remoteworkers::v1test2::FileMetadata* Directory::add_files() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.Directory.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::FileMetadata >&
Directory::files() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.Directory.files)
  return files_;
}

// repeated .google.devtools.remoteworkers.v1test2.DirectoryMetadata directories = 2;
inline int Directory::directories_size() const {
  return directories_.size();
}
inline void Directory::clear_directories() {
  directories_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::DirectoryMetadata* Directory::mutable_directories(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Directory.directories)
  return directories_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::DirectoryMetadata >*
Directory::mutable_directories() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.Directory.directories)
  return &directories_;
}
inline const ::google::devtools::remoteworkers::v1test2::DirectoryMetadata& Directory::directories(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Directory.directories)
  return directories_.Get(index);
}
inline ::google::devtools::remoteworkers::v1test2::DirectoryMetadata* Directory::add_directories() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.Directory.directories)
  return directories_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::DirectoryMetadata >&
Directory::directories() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.Directory.directories)
  return directories_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fcommand_2eproto
