// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/devtools/remoteworkers/v1test2/tasks.proto

#include "google/devtools/remoteworkers/v1test2/tasks.pb.h"
#include "google/devtools/remoteworkers/v1test2/tasks.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {

static const char* Tasks_method_names[] = {
  "/google.devtools.remoteworkers.v1test2.Tasks/GetTask",
  "/google.devtools.remoteworkers.v1test2.Tasks/UpdateTaskResult",
  "/google.devtools.remoteworkers.v1test2.Tasks/AddTaskLog",
};

std::unique_ptr< Tasks::Stub> Tasks::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Tasks::Stub> stub(new Tasks::Stub(channel));
  return stub;
}

Tasks::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetTask_(Tasks_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateTaskResult_(Tasks_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddTaskLog_(Tasks_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Tasks::Stub::GetTask(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::google::devtools::remoteworkers::v1test2::Task* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::Task>* Tasks::Stub::AsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::devtools::remoteworkers::v1test2::Task>::Create(channel_.get(), cq, rpcmethod_GetTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::Task>* Tasks::Stub::PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::devtools::remoteworkers::v1test2::Task>::Create(channel_.get(), cq, rpcmethod_GetTask_, context, request, false);
}

::grpc::Status Tasks::Stub::UpdateTaskResult(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::google::devtools::remoteworkers::v1test2::TaskResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateTaskResult_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::TaskResult>* Tasks::Stub::AsyncUpdateTaskResultRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::devtools::remoteworkers::v1test2::TaskResult>::Create(channel_.get(), cq, rpcmethod_UpdateTaskResult_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::TaskResult>* Tasks::Stub::PrepareAsyncUpdateTaskResultRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::devtools::remoteworkers::v1test2::TaskResult>::Create(channel_.get(), cq, rpcmethod_UpdateTaskResult_, context, request, false);
}

::grpc::Status Tasks::Stub::AddTaskLog(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddTaskLog_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>* Tasks::Stub::AsyncAddTaskLogRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>::Create(channel_.get(), cq, rpcmethod_AddTaskLog_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>* Tasks::Stub::PrepareAsyncAddTaskLogRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>::Create(channel_.get(), cq, rpcmethod_AddTaskLog_, context, request, false);
}

Tasks::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tasks_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tasks::Service, ::google::devtools::remoteworkers::v1test2::GetTaskRequest, ::google::devtools::remoteworkers::v1test2::Task>(
          std::mem_fn(&Tasks::Service::GetTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tasks_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tasks::Service, ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest, ::google::devtools::remoteworkers::v1test2::TaskResult>(
          std::mem_fn(&Tasks::Service::UpdateTaskResult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tasks_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tasks::Service, ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest, ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>(
          std::mem_fn(&Tasks::Service::AddTaskLog), this)));
}

Tasks::Service::~Service() {
}

::grpc::Status Tasks::Service::GetTask(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest* request, ::google::devtools::remoteworkers::v1test2::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tasks::Service::UpdateTaskResult(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest* request, ::google::devtools::remoteworkers::v1test2::TaskResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tasks::Service::AddTaskLog(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest* request, ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace devtools
}  // namespace remoteworkers
}  // namespace v1test2

