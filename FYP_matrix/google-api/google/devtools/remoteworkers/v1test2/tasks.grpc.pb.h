// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/devtools/remoteworkers/v1test2/tasks.proto
// Original file comments:
// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto__INCLUDED
#define GRPC_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto__INCLUDED

#include "google/devtools/remoteworkers/v1test2/tasks.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {

// DEPRECATED. GetTask should be replaced by Lease.payload, UpdateTaskResult by
// Lease.result and logs should be precreated prior to sending to the bot (eg,
// via CommandTask.expected_outputs.stdout_destination).
class Tasks final {
 public:
  static constexpr char const* service_full_name() {
    return "google.devtools.remoteworkers.v1test2.Tasks";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // DEPRECATED - use Lease.payload instead.
    // GetTask reads the current state of the task. Tasks must be created through
    // some other interface, and should be immutable once created and exposed to
    // the bots.
    virtual ::grpc::Status GetTask(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::google::devtools::remoteworkers::v1test2::Task* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::Task>> AsyncGetTask(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::Task>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::Task>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::Task>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    // DEPRECATED - use Lease.result instead.
    // UpdateTaskResult updates the result.
    virtual ::grpc::Status UpdateTaskResult(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::google::devtools::remoteworkers::v1test2::TaskResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::TaskResult>> AsyncUpdateTaskResult(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::TaskResult>>(AsyncUpdateTaskResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::TaskResult>> PrepareAsyncUpdateTaskResult(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::TaskResult>>(PrepareAsyncUpdateTaskResultRaw(context, request, cq));
    }
    // DEPRECATED - precreate logs prior to sending to bot.
    // AddTaskLog creates a new streaming log. The log is streamed and marked as
    // completed through other interfaces (i.e., ByteStream). This can be called
    // by the bot if it wants to create a new log; the server can also predefine
    // logs that do not need to be created (e.g. `stdout`).
    virtual ::grpc::Status AddTaskLog(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>> AsyncAddTaskLog(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>>(AsyncAddTaskLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>> PrepareAsyncAddTaskLog(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>>(PrepareAsyncAddTaskLogRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::Task>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::Task>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::TaskResult>* AsyncUpdateTaskResultRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::TaskResult>* PrepareAsyncUpdateTaskResultRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>* AsyncAddTaskLogRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>* PrepareAsyncAddTaskLogRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetTask(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::google::devtools::remoteworkers::v1test2::Task* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::Task>> AsyncGetTask(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::Task>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::Task>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::Task>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    ::grpc::Status UpdateTaskResult(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::google::devtools::remoteworkers::v1test2::TaskResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::TaskResult>> AsyncUpdateTaskResult(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::TaskResult>>(AsyncUpdateTaskResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::TaskResult>> PrepareAsyncUpdateTaskResult(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::TaskResult>>(PrepareAsyncUpdateTaskResultRaw(context, request, cq));
    }
    ::grpc::Status AddTaskLog(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>> AsyncAddTaskLog(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>>(AsyncAddTaskLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>> PrepareAsyncAddTaskLog(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>>(PrepareAsyncAddTaskLogRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::Task>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::Task>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::TaskResult>* AsyncUpdateTaskResultRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::TaskResult>* PrepareAsyncUpdateTaskResultRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>* AsyncAddTaskLogRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>* PrepareAsyncAddTaskLogRaw(::grpc::ClientContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTask_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateTaskResult_;
    const ::grpc::internal::RpcMethod rpcmethod_AddTaskLog_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // DEPRECATED - use Lease.payload instead.
    // GetTask reads the current state of the task. Tasks must be created through
    // some other interface, and should be immutable once created and exposed to
    // the bots.
    virtual ::grpc::Status GetTask(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest* request, ::google::devtools::remoteworkers::v1test2::Task* response);
    // DEPRECATED - use Lease.result instead.
    // UpdateTaskResult updates the result.
    virtual ::grpc::Status UpdateTaskResult(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest* request, ::google::devtools::remoteworkers::v1test2::TaskResult* response);
    // DEPRECATED - precreate logs prior to sending to bot.
    // AddTaskLog creates a new streaming log. The log is streamed and marked as
    // completed through other interfaces (i.e., ByteStream). This can be called
    // by the bot if it wants to create a new log; the server can also predefine
    // logs that do not need to be created (e.g. `stdout`).
    virtual ::grpc::Status AddTaskLog(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest* request, ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTask() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest* request, ::google::devtools::remoteworkers::v1test2::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::google::devtools::remoteworkers::v1test2::GetTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::remoteworkers::v1test2::Task>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateTaskResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateTaskResult() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateTaskResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskResult(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest* request, ::google::devtools::remoteworkers::v1test2::TaskResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTaskResult(::grpc::ServerContext* context, ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::remoteworkers::v1test2::TaskResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTaskLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddTaskLog() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddTaskLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTaskLog(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest* request, ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTaskLog(::grpc::ServerContext* context, ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTask<WithAsyncMethod_UpdateTaskResult<WithAsyncMethod_AddTaskLog<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTask() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest* request, ::google::devtools::remoteworkers::v1test2::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateTaskResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateTaskResult() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateTaskResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskResult(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest* request, ::google::devtools::remoteworkers::v1test2::TaskResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddTaskLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddTaskLog() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddTaskLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTaskLog(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest* request, ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTask() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest* request, ::google::devtools::remoteworkers::v1test2::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateTaskResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateTaskResult() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateTaskResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskResult(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest* request, ::google::devtools::remoteworkers::v1test2::TaskResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTaskResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddTaskLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddTaskLog() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddTaskLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTaskLog(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest* request, ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTaskLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTask() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::remoteworkers::v1test2::GetTaskRequest, ::google::devtools::remoteworkers::v1test2::Task>(std::bind(&WithStreamedUnaryMethod_GetTask<BaseClass>::StreamedGetTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::GetTaskRequest* request, ::google::devtools::remoteworkers::v1test2::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::remoteworkers::v1test2::GetTaskRequest,::google::devtools::remoteworkers::v1test2::Task>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateTaskResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateTaskResult() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest, ::google::devtools::remoteworkers::v1test2::TaskResult>(std::bind(&WithStreamedUnaryMethod_UpdateTaskResult<BaseClass>::StreamedUpdateTaskResult, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateTaskResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateTaskResult(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest* request, ::google::devtools::remoteworkers::v1test2::TaskResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateTaskResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::remoteworkers::v1test2::UpdateTaskResultRequest,::google::devtools::remoteworkers::v1test2::TaskResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddTaskLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddTaskLog() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest, ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>(std::bind(&WithStreamedUnaryMethod_AddTaskLog<BaseClass>::StreamedAddTaskLog, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddTaskLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddTaskLog(::grpc::ServerContext* context, const ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest* request, ::google::devtools::remoteworkers::v1test2::AddTaskLogResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddTaskLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::remoteworkers::v1test2::AddTaskLogRequest,::google::devtools::remoteworkers::v1test2::AddTaskLogResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_UpdateTaskResult<WithStreamedUnaryMethod_AddTaskLog<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_UpdateTaskResult<WithStreamedUnaryMethod_AddTaskLog<Service > > > StreamedService;
};

}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google


#endif  // GRPC_google_2fdevtools_2fremoteworkers_2fv1test2_2ftasks_2eproto__INCLUDED
