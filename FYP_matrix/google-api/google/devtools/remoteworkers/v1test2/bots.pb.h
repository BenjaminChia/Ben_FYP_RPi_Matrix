// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/bots.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/devtools/remoteworkers/v1test2/worker.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto 

namespace protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {
class AdminTemp;
class AdminTempDefaultTypeInternal;
extern AdminTempDefaultTypeInternal _AdminTemp_default_instance_;
class BotSession;
class BotSessionDefaultTypeInternal;
extern BotSessionDefaultTypeInternal _BotSession_default_instance_;
class CreateBotSessionRequest;
class CreateBotSessionRequestDefaultTypeInternal;
extern CreateBotSessionRequestDefaultTypeInternal _CreateBotSessionRequest_default_instance_;
class Lease;
class LeaseDefaultTypeInternal;
extern LeaseDefaultTypeInternal _Lease_default_instance_;
class PostBotEventTempRequest;
class PostBotEventTempRequestDefaultTypeInternal;
extern PostBotEventTempRequestDefaultTypeInternal _PostBotEventTempRequest_default_instance_;
class UpdateBotSessionRequest;
class UpdateBotSessionRequestDefaultTypeInternal;
extern UpdateBotSessionRequestDefaultTypeInternal _UpdateBotSessionRequest_default_instance_;
}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::devtools::remoteworkers::v1test2::AdminTemp* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::AdminTemp>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::BotSession* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::BotSession>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::CreateBotSessionRequest* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CreateBotSessionRequest>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Lease* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Lease>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::PostBotEventTempRequest* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::PostBotEventTempRequest>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {

enum AdminTemp_Command {
  AdminTemp_Command_UNSPECIFIED = 0,
  AdminTemp_Command_BOT_UPDATE = 1,
  AdminTemp_Command_BOT_RESTART = 2,
  AdminTemp_Command_BOT_TERMINATE = 3,
  AdminTemp_Command_HOST_RESTART = 4,
  AdminTemp_Command_AdminTemp_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AdminTemp_Command_AdminTemp_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AdminTemp_Command_IsValid(int value);
const AdminTemp_Command AdminTemp_Command_Command_MIN = AdminTemp_Command_UNSPECIFIED;
const AdminTemp_Command AdminTemp_Command_Command_MAX = AdminTemp_Command_HOST_RESTART;
const int AdminTemp_Command_Command_ARRAYSIZE = AdminTemp_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdminTemp_Command_descriptor();
inline const ::std::string& AdminTemp_Command_Name(AdminTemp_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdminTemp_Command_descriptor(), value);
}
inline bool AdminTemp_Command_Parse(
    const ::std::string& name, AdminTemp_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdminTemp_Command>(
    AdminTemp_Command_descriptor(), name, value);
}
enum PostBotEventTempRequest_Type {
  PostBotEventTempRequest_Type_UNSPECIFIED = 0,
  PostBotEventTempRequest_Type_INFO = 1,
  PostBotEventTempRequest_Type_ERROR = 2,
  PostBotEventTempRequest_Type_PostBotEventTempRequest_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PostBotEventTempRequest_Type_PostBotEventTempRequest_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PostBotEventTempRequest_Type_IsValid(int value);
const PostBotEventTempRequest_Type PostBotEventTempRequest_Type_Type_MIN = PostBotEventTempRequest_Type_UNSPECIFIED;
const PostBotEventTempRequest_Type PostBotEventTempRequest_Type_Type_MAX = PostBotEventTempRequest_Type_ERROR;
const int PostBotEventTempRequest_Type_Type_ARRAYSIZE = PostBotEventTempRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PostBotEventTempRequest_Type_descriptor();
inline const ::std::string& PostBotEventTempRequest_Type_Name(PostBotEventTempRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PostBotEventTempRequest_Type_descriptor(), value);
}
inline bool PostBotEventTempRequest_Type_Parse(
    const ::std::string& name, PostBotEventTempRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PostBotEventTempRequest_Type>(
    PostBotEventTempRequest_Type_descriptor(), name, value);
}
enum BotStatus {
  BOT_STATUS_UNSPECIFIED = 0,
  OK = 1,
  UNHEALTHY = 2,
  HOST_REBOOTING = 3,
  BOT_TERMINATING = 4,
  BotStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BotStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BotStatus_IsValid(int value);
const BotStatus BotStatus_MIN = BOT_STATUS_UNSPECIFIED;
const BotStatus BotStatus_MAX = BOT_TERMINATING;
const int BotStatus_ARRAYSIZE = BotStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* BotStatus_descriptor();
inline const ::std::string& BotStatus_Name(BotStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BotStatus_descriptor(), value);
}
inline bool BotStatus_Parse(
    const ::std::string& name, BotStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BotStatus>(
    BotStatus_descriptor(), name, value);
}
enum LeaseState {
  LEASE_STATE_UNSPECIFIED = 0,
  PENDING = 1,
  ACTIVE = 2,
  COMPLETED = 4,
  CANCELLED = 5,
  LeaseState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LeaseState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LeaseState_IsValid(int value);
const LeaseState LeaseState_MIN = LEASE_STATE_UNSPECIFIED;
const LeaseState LeaseState_MAX = CANCELLED;
const int LeaseState_ARRAYSIZE = LeaseState_MAX + 1;

const ::google::protobuf::EnumDescriptor* LeaseState_descriptor();
inline const ::std::string& LeaseState_Name(LeaseState value) {
  return ::google::protobuf::internal::NameOfEnum(
    LeaseState_descriptor(), value);
}
inline bool LeaseState_Parse(
    const ::std::string& name, LeaseState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LeaseState>(
    LeaseState_descriptor(), name, value);
}
// ===================================================================

class BotSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.BotSession) */ {
 public:
  BotSession();
  virtual ~BotSession();

  BotSession(const BotSession& from);

  inline BotSession& operator=(const BotSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BotSession(BotSession&& from) noexcept
    : BotSession() {
    *this = ::std::move(from);
  }

  inline BotSession& operator=(BotSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BotSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BotSession* internal_default_instance() {
    return reinterpret_cast<const BotSession*>(
               &_BotSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BotSession* other);
  friend void swap(BotSession& a, BotSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BotSession* New() const final {
    return CreateMaybeMessage<BotSession>(NULL);
  }

  BotSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BotSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BotSession& from);
  void MergeFrom(const BotSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;
  int leases_size() const;
  void clear_leases();
  static const int kLeasesFieldNumber = 5;
  ::google::devtools::remoteworkers::v1test2::Lease* mutable_leases(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Lease >*
      mutable_leases();
  const ::google::devtools::remoteworkers::v1test2::Lease& leases(int index) const;
  ::google::devtools::remoteworkers::v1test2::Lease* add_leases();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Lease >&
      leases() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string bot_id = 2;
  void clear_bot_id();
  static const int kBotIdFieldNumber = 2;
  const ::std::string& bot_id() const;
  void set_bot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_bot_id(::std::string&& value);
  #endif
  void set_bot_id(const char* value);
  void set_bot_id(const char* value, size_t size);
  ::std::string* mutable_bot_id();
  ::std::string* release_bot_id();
  void set_allocated_bot_id(::std::string* bot_id);

  // string version = 7;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // .google.devtools.remoteworkers.v1test2.Worker worker = 4;
  bool has_worker() const;
  void clear_worker();
  static const int kWorkerFieldNumber = 4;
  private:
  const ::google::devtools::remoteworkers::v1test2::Worker& _internal_worker() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::Worker& worker() const;
  ::google::devtools::remoteworkers::v1test2::Worker* release_worker();
  ::google::devtools::remoteworkers::v1test2::Worker* mutable_worker();
  void set_allocated_worker(::google::devtools::remoteworkers::v1test2::Worker* worker);

  // .google.protobuf.Timestamp expire_time = 6;
  bool has_expire_time() const;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_expire_time() const;
  public:
  const ::google::protobuf::Timestamp& expire_time() const;
  ::google::protobuf::Timestamp* release_expire_time();
  ::google::protobuf::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::google::protobuf::Timestamp* expire_time);

  // .google.devtools.remoteworkers.v1test2.BotStatus status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::google::devtools::remoteworkers::v1test2::BotStatus status() const;
  void set_status(::google::devtools::remoteworkers::v1test2::BotStatus value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.BotSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Lease > leases_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr bot_id_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::devtools::remoteworkers::v1test2::Worker* worker_;
  ::google::protobuf::Timestamp* expire_time_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lease : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Lease) */ {
 public:
  Lease();
  virtual ~Lease();

  Lease(const Lease& from);

  inline Lease& operator=(const Lease& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lease(Lease&& from) noexcept
    : Lease() {
    *this = ::std::move(from);
  }

  inline Lease& operator=(Lease&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lease& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lease* internal_default_instance() {
    return reinterpret_cast<const Lease*>(
               &_Lease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Lease* other);
  friend void swap(Lease& a, Lease& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lease* New() const final {
    return CreateMaybeMessage<Lease>(NULL);
  }

  Lease* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Lease>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Lease& from);
  void MergeFrom(const Lease& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lease* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string assignment = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_assignment();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAssignmentFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& assignment() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_assignment(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_assignment(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_assignment(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_assignment(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_assignment();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* release_assignment();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_assignment(::std::string* assignment);

  // string id = 7;
  void clear_id();
  static const int kIdFieldNumber = 7;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .google.rpc.Status status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  private:
  const ::google::rpc::Status& _internal_status() const;
  public:
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);

  // .google.devtools.remoteworkers.v1test2.Worker requirements = 4;
  bool has_requirements() const;
  void clear_requirements();
  static const int kRequirementsFieldNumber = 4;
  private:
  const ::google::devtools::remoteworkers::v1test2::Worker& _internal_requirements() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::Worker& requirements() const;
  ::google::devtools::remoteworkers::v1test2::Worker* release_requirements();
  ::google::devtools::remoteworkers::v1test2::Worker* mutable_requirements();
  void set_allocated_requirements(::google::devtools::remoteworkers::v1test2::Worker* requirements);

  // .google.protobuf.Timestamp expire_time = 5;
  bool has_expire_time() const;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_expire_time() const;
  public:
  const ::google::protobuf::Timestamp& expire_time() const;
  ::google::protobuf::Timestamp* release_expire_time();
  ::google::protobuf::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::google::protobuf::Timestamp* expire_time);

  // .google.protobuf.Any inline_assignment = 6 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_inline_assignment() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_inline_assignment();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kInlineAssignmentFieldNumber = 6;
  private:
  const ::google::protobuf::Any& _internal_inline_assignment() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::Any& inline_assignment() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::Any* release_inline_assignment();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::Any* mutable_inline_assignment();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_inline_assignment(::google::protobuf::Any* inline_assignment);

  // .google.protobuf.Any payload = 8;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 8;
  private:
  const ::google::protobuf::Any& _internal_payload() const;
  public:
  const ::google::protobuf::Any& payload() const;
  ::google::protobuf::Any* release_payload();
  ::google::protobuf::Any* mutable_payload();
  void set_allocated_payload(::google::protobuf::Any* payload);

  // .google.protobuf.Any result = 9;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 9;
  private:
  const ::google::protobuf::Any& _internal_result() const;
  public:
  const ::google::protobuf::Any& result() const;
  ::google::protobuf::Any* release_result();
  ::google::protobuf::Any* mutable_result();
  void set_allocated_result(::google::protobuf::Any* result);

  // .google.devtools.remoteworkers.v1test2.LeaseState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::devtools::remoteworkers::v1test2::LeaseState state() const;
  void set_state(::google::devtools::remoteworkers::v1test2::LeaseState value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Lease)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr assignment_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::rpc::Status* status_;
  ::google::devtools::remoteworkers::v1test2::Worker* requirements_;
  ::google::protobuf::Timestamp* expire_time_;
  ::google::protobuf::Any* inline_assignment_;
  ::google::protobuf::Any* payload_;
  ::google::protobuf::Any* result_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminTemp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.AdminTemp) */ {
 public:
  AdminTemp();
  virtual ~AdminTemp();

  AdminTemp(const AdminTemp& from);

  inline AdminTemp& operator=(const AdminTemp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminTemp(AdminTemp&& from) noexcept
    : AdminTemp() {
    *this = ::std::move(from);
  }

  inline AdminTemp& operator=(AdminTemp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminTemp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminTemp* internal_default_instance() {
    return reinterpret_cast<const AdminTemp*>(
               &_AdminTemp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AdminTemp* other);
  friend void swap(AdminTemp& a, AdminTemp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminTemp* New() const final {
    return CreateMaybeMessage<AdminTemp>(NULL);
  }

  AdminTemp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminTemp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdminTemp& from);
  void MergeFrom(const AdminTemp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminTemp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AdminTemp_Command Command;
  static const Command UNSPECIFIED =
    AdminTemp_Command_UNSPECIFIED;
  static const Command BOT_UPDATE =
    AdminTemp_Command_BOT_UPDATE;
  static const Command BOT_RESTART =
    AdminTemp_Command_BOT_RESTART;
  static const Command BOT_TERMINATE =
    AdminTemp_Command_BOT_TERMINATE;
  static const Command HOST_RESTART =
    AdminTemp_Command_HOST_RESTART;
  static inline bool Command_IsValid(int value) {
    return AdminTemp_Command_IsValid(value);
  }
  static const Command Command_MIN =
    AdminTemp_Command_Command_MIN;
  static const Command Command_MAX =
    AdminTemp_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    AdminTemp_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return AdminTemp_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return AdminTemp_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return AdminTemp_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string arg = 2;
  void clear_arg();
  static const int kArgFieldNumber = 2;
  const ::std::string& arg() const;
  void set_arg(const ::std::string& value);
  #if LANG_CXX11
  void set_arg(::std::string&& value);
  #endif
  void set_arg(const char* value);
  void set_arg(const char* value, size_t size);
  ::std::string* mutable_arg();
  ::std::string* release_arg();
  void set_allocated_arg(::std::string* arg);

  // .google.devtools.remoteworkers.v1test2.AdminTemp.Command command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::google::devtools::remoteworkers::v1test2::AdminTemp_Command command() const;
  void set_command(::google::devtools::remoteworkers::v1test2::AdminTemp_Command value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.AdminTemp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr arg_;
  int command_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateBotSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest) */ {
 public:
  CreateBotSessionRequest();
  virtual ~CreateBotSessionRequest();

  CreateBotSessionRequest(const CreateBotSessionRequest& from);

  inline CreateBotSessionRequest& operator=(const CreateBotSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateBotSessionRequest(CreateBotSessionRequest&& from) noexcept
    : CreateBotSessionRequest() {
    *this = ::std::move(from);
  }

  inline CreateBotSessionRequest& operator=(CreateBotSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateBotSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateBotSessionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBotSessionRequest*>(
               &_CreateBotSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateBotSessionRequest* other);
  friend void swap(CreateBotSessionRequest& a, CreateBotSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateBotSessionRequest* New() const final {
    return CreateMaybeMessage<CreateBotSessionRequest>(NULL);
  }

  CreateBotSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateBotSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateBotSessionRequest& from);
  void MergeFrom(const CreateBotSessionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBotSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2;
  bool has_bot_session() const;
  void clear_bot_session();
  static const int kBotSessionFieldNumber = 2;
  private:
  const ::google::devtools::remoteworkers::v1test2::BotSession& _internal_bot_session() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::BotSession& bot_session() const;
  ::google::devtools::remoteworkers::v1test2::BotSession* release_bot_session();
  ::google::devtools::remoteworkers::v1test2::BotSession* mutable_bot_session();
  void set_allocated_bot_session(::google::devtools::remoteworkers::v1test2::BotSession* bot_session);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::devtools::remoteworkers::v1test2::BotSession* bot_session_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateBotSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest) */ {
 public:
  UpdateBotSessionRequest();
  virtual ~UpdateBotSessionRequest();

  UpdateBotSessionRequest(const UpdateBotSessionRequest& from);

  inline UpdateBotSessionRequest& operator=(const UpdateBotSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateBotSessionRequest(UpdateBotSessionRequest&& from) noexcept
    : UpdateBotSessionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBotSessionRequest& operator=(UpdateBotSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateBotSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBotSessionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBotSessionRequest*>(
               &_UpdateBotSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UpdateBotSessionRequest* other);
  friend void swap(UpdateBotSessionRequest& a, UpdateBotSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateBotSessionRequest* New() const final {
    return CreateMaybeMessage<UpdateBotSessionRequest>(NULL);
  }

  UpdateBotSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBotSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateBotSessionRequest& from);
  void MergeFrom(const UpdateBotSessionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBotSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2;
  bool has_bot_session() const;
  void clear_bot_session();
  static const int kBotSessionFieldNumber = 2;
  private:
  const ::google::devtools::remoteworkers::v1test2::BotSession& _internal_bot_session() const;
  public:
  const ::google::devtools::remoteworkers::v1test2::BotSession& bot_session() const;
  ::google::devtools::remoteworkers::v1test2::BotSession* release_bot_session();
  ::google::devtools::remoteworkers::v1test2::BotSession* mutable_bot_session();
  void set_allocated_bot_session(::google::devtools::remoteworkers::v1test2::BotSession* bot_session);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::devtools::remoteworkers::v1test2::BotSession* bot_session_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PostBotEventTempRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest) */ {
 public:
  PostBotEventTempRequest();
  virtual ~PostBotEventTempRequest();

  PostBotEventTempRequest(const PostBotEventTempRequest& from);

  inline PostBotEventTempRequest& operator=(const PostBotEventTempRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PostBotEventTempRequest(PostBotEventTempRequest&& from) noexcept
    : PostBotEventTempRequest() {
    *this = ::std::move(from);
  }

  inline PostBotEventTempRequest& operator=(PostBotEventTempRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PostBotEventTempRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostBotEventTempRequest* internal_default_instance() {
    return reinterpret_cast<const PostBotEventTempRequest*>(
               &_PostBotEventTempRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PostBotEventTempRequest* other);
  friend void swap(PostBotEventTempRequest& a, PostBotEventTempRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PostBotEventTempRequest* New() const final {
    return CreateMaybeMessage<PostBotEventTempRequest>(NULL);
  }

  PostBotEventTempRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PostBotEventTempRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PostBotEventTempRequest& from);
  void MergeFrom(const PostBotEventTempRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostBotEventTempRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PostBotEventTempRequest_Type Type;
  static const Type UNSPECIFIED =
    PostBotEventTempRequest_Type_UNSPECIFIED;
  static const Type INFO =
    PostBotEventTempRequest_Type_INFO;
  static const Type ERROR =
    PostBotEventTempRequest_Type_ERROR;
  static inline bool Type_IsValid(int value) {
    return PostBotEventTempRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PostBotEventTempRequest_Type_Type_MIN;
  static const Type Type_MAX =
    PostBotEventTempRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PostBotEventTempRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PostBotEventTempRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PostBotEventTempRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PostBotEventTempRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string msg = 3;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::devtools::remoteworkers::v1test2::PostBotEventTempRequest_Type type() const;
  void set_type(::google::devtools::remoteworkers::v1test2::PostBotEventTempRequest_Type value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BotSession

// string name = 1;
inline void BotSession::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BotSession::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.name)
  return name_.GetNoArena();
}
inline void BotSession::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.BotSession.name)
}
#if LANG_CXX11
inline void BotSession::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.BotSession.name)
}
#endif
inline void BotSession::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.BotSession.name)
}
inline void BotSession::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.BotSession.name)
}
inline ::std::string* BotSession::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BotSession::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.BotSession.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BotSession::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.name)
}

// string bot_id = 2;
inline void BotSession::clear_bot_id() {
  bot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BotSession::bot_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
  return bot_id_.GetNoArena();
}
inline void BotSession::set_bot_id(const ::std::string& value) {
  
  bot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
}
#if LANG_CXX11
inline void BotSession::set_bot_id(::std::string&& value) {
  
  bot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
}
#endif
inline void BotSession::set_bot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
}
inline void BotSession::set_bot_id(const char* value, size_t size) {
  
  bot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
}
inline ::std::string* BotSession::mutable_bot_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
  return bot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BotSession::release_bot_id() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
  
  return bot_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BotSession::set_allocated_bot_id(::std::string* bot_id) {
  if (bot_id != NULL) {
    
  } else {
    
  }
  bot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bot_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
}

// .google.devtools.remoteworkers.v1test2.BotStatus status = 3;
inline void BotSession::clear_status() {
  status_ = 0;
}
inline ::google::devtools::remoteworkers::v1test2::BotStatus BotSession::status() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.status)
  return static_cast< ::google::devtools::remoteworkers::v1test2::BotStatus >(status_);
}
inline void BotSession::set_status(::google::devtools::remoteworkers::v1test2::BotStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.BotSession.status)
}

// .google.devtools.remoteworkers.v1test2.Worker worker = 4;
inline bool BotSession::has_worker() const {
  return this != internal_default_instance() && worker_ != NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::Worker& BotSession::_internal_worker() const {
  return *worker_;
}
inline const ::google::devtools::remoteworkers::v1test2::Worker& BotSession::worker() const {
  const ::google::devtools::remoteworkers::v1test2::Worker* p = worker_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.worker)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::Worker*>(
      &::google::devtools::remoteworkers::v1test2::_Worker_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::Worker* BotSession::release_worker() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.BotSession.worker)
  
  ::google::devtools::remoteworkers::v1test2::Worker* temp = worker_;
  worker_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::Worker* BotSession::mutable_worker() {
  
  if (worker_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Worker>(GetArenaNoVirtual());
    worker_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.worker)
  return worker_;
}
inline void BotSession::set_allocated_worker(::google::devtools::remoteworkers::v1test2::Worker* worker) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(worker_);
  }
  if (worker) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      worker = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, worker, submessage_arena);
    }
    
  } else {
    
  }
  worker_ = worker;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.worker)
}

// repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;
inline int BotSession::leases_size() const {
  return leases_.size();
}
inline void BotSession::clear_leases() {
  leases_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::Lease* BotSession::mutable_leases(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.leases)
  return leases_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Lease >*
BotSession::mutable_leases() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.BotSession.leases)
  return &leases_;
}
inline const ::google::devtools::remoteworkers::v1test2::Lease& BotSession::leases(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.leases)
  return leases_.Get(index);
}
inline ::google::devtools::remoteworkers::v1test2::Lease* BotSession::add_leases() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.BotSession.leases)
  return leases_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Lease >&
BotSession::leases() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.BotSession.leases)
  return leases_;
}

// .google.protobuf.Timestamp expire_time = 6;
inline bool BotSession::has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& BotSession::_internal_expire_time() const {
  return *expire_time_;
}
inline const ::google::protobuf::Timestamp& BotSession::expire_time() const {
  const ::google::protobuf::Timestamp* p = expire_time_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.expire_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* BotSession::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.BotSession.expire_time)
  
  ::google::protobuf::Timestamp* temp = expire_time_;
  expire_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* BotSession::mutable_expire_time() {
  
  if (expire_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expire_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.expire_time)
  return expire_time_;
}
inline void BotSession::set_allocated_expire_time(::google::protobuf::Timestamp* expire_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      expire_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.expire_time)
}

// string version = 7;
inline void BotSession::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BotSession::version() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.version)
  return version_.GetNoArena();
}
inline void BotSession::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.BotSession.version)
}
#if LANG_CXX11
inline void BotSession::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.BotSession.version)
}
#endif
inline void BotSession::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.BotSession.version)
}
inline void BotSession::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.BotSession.version)
}
inline ::std::string* BotSession::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BotSession::release_version() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.BotSession.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BotSession::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.version)
}

// -------------------------------------------------------------------

// Lease

// string id = 7;
inline void Lease::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lease::id() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.id)
  return id_.GetNoArena();
}
inline void Lease::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Lease.id)
}
#if LANG_CXX11
inline void Lease::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Lease.id)
}
#endif
inline void Lease::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Lease.id)
}
inline void Lease::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Lease.id)
}
inline ::std::string* Lease::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lease::release_id() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lease::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.id)
}

// .google.protobuf.Any payload = 8;
inline bool Lease::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
inline const ::google::protobuf::Any& Lease::_internal_payload() const {
  return *payload_;
}
inline const ::google::protobuf::Any& Lease::payload() const {
  const ::google::protobuf::Any* p = payload_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.payload)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Lease::release_payload() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.payload)
  
  ::google::protobuf::Any* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Lease::mutable_payload() {
  
  if (payload_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    payload_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.payload)
  return payload_;
}
inline void Lease::set_allocated_payload(::google::protobuf::Any* payload) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(payload_);
  }
  if (payload) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      payload = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.payload)
}

// .google.protobuf.Any result = 9;
inline bool Lease::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline const ::google::protobuf::Any& Lease::_internal_result() const {
  return *result_;
}
inline const ::google::protobuf::Any& Lease::result() const {
  const ::google::protobuf::Any* p = result_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.result)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Lease::release_result() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.result)
  
  ::google::protobuf::Any* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Lease::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.result)
  return result_;
}
inline void Lease::set_allocated_result(::google::protobuf::Any* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(result_);
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.result)
}

// .google.devtools.remoteworkers.v1test2.LeaseState state = 2;
inline void Lease::clear_state() {
  state_ = 0;
}
inline ::google::devtools::remoteworkers::v1test2::LeaseState Lease::state() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.state)
  return static_cast< ::google::devtools::remoteworkers::v1test2::LeaseState >(state_);
}
inline void Lease::set_state(::google::devtools::remoteworkers::v1test2::LeaseState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Lease.state)
}

// .google.rpc.Status status = 3;
inline bool Lease::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::google::rpc::Status& Lease::_internal_status() const {
  return *status_;
}
inline const ::google::rpc::Status& Lease::status() const {
  const ::google::rpc::Status* p = status_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* Lease::release_status() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* Lease::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.status)
  return status_;
}
inline void Lease::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.status)
}

// .google.devtools.remoteworkers.v1test2.Worker requirements = 4;
inline bool Lease::has_requirements() const {
  return this != internal_default_instance() && requirements_ != NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::Worker& Lease::_internal_requirements() const {
  return *requirements_;
}
inline const ::google::devtools::remoteworkers::v1test2::Worker& Lease::requirements() const {
  const ::google::devtools::remoteworkers::v1test2::Worker* p = requirements_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.requirements)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::Worker*>(
      &::google::devtools::remoteworkers::v1test2::_Worker_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::Worker* Lease::release_requirements() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.requirements)
  
  ::google::devtools::remoteworkers::v1test2::Worker* temp = requirements_;
  requirements_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::Worker* Lease::mutable_requirements() {
  
  if (requirements_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Worker>(GetArenaNoVirtual());
    requirements_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.requirements)
  return requirements_;
}
inline void Lease::set_allocated_requirements(::google::devtools::remoteworkers::v1test2::Worker* requirements) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(requirements_);
  }
  if (requirements) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      requirements = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requirements, submessage_arena);
    }
    
  } else {
    
  }
  requirements_ = requirements;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.requirements)
}

// .google.protobuf.Timestamp expire_time = 5;
inline bool Lease::has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Lease::_internal_expire_time() const {
  return *expire_time_;
}
inline const ::google::protobuf::Timestamp& Lease::expire_time() const {
  const ::google::protobuf::Timestamp* p = expire_time_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.expire_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Lease::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.expire_time)
  
  ::google::protobuf::Timestamp* temp = expire_time_;
  expire_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Lease::mutable_expire_time() {
  
  if (expire_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expire_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.expire_time)
  return expire_time_;
}
inline void Lease::set_allocated_expire_time(::google::protobuf::Timestamp* expire_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      expire_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.expire_time)
}

// string assignment = 1 [deprecated = true];
inline void Lease::clear_assignment() {
  assignment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lease::assignment() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.assignment)
  return assignment_.GetNoArena();
}
inline void Lease::set_assignment(const ::std::string& value) {
  
  assignment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Lease.assignment)
}
#if LANG_CXX11
inline void Lease::set_assignment(::std::string&& value) {
  
  assignment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Lease.assignment)
}
#endif
inline void Lease::set_assignment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  assignment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Lease.assignment)
}
inline void Lease::set_assignment(const char* value, size_t size) {
  
  assignment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Lease.assignment)
}
inline ::std::string* Lease::mutable_assignment() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.assignment)
  return assignment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lease::release_assignment() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.assignment)
  
  return assignment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lease::set_allocated_assignment(::std::string* assignment) {
  if (assignment != NULL) {
    
  } else {
    
  }
  assignment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assignment);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.assignment)
}

// .google.protobuf.Any inline_assignment = 6 [deprecated = true];
inline bool Lease::has_inline_assignment() const {
  return this != internal_default_instance() && inline_assignment_ != NULL;
}
inline const ::google::protobuf::Any& Lease::_internal_inline_assignment() const {
  return *inline_assignment_;
}
inline const ::google::protobuf::Any& Lease::inline_assignment() const {
  const ::google::protobuf::Any* p = inline_assignment_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.inline_assignment)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Lease::release_inline_assignment() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.inline_assignment)
  
  ::google::protobuf::Any* temp = inline_assignment_;
  inline_assignment_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Lease::mutable_inline_assignment() {
  
  if (inline_assignment_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    inline_assignment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.inline_assignment)
  return inline_assignment_;
}
inline void Lease::set_allocated_inline_assignment(::google::protobuf::Any* inline_assignment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inline_assignment_);
  }
  if (inline_assignment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inline_assignment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inline_assignment, submessage_arena);
    }
    
  } else {
    
  }
  inline_assignment_ = inline_assignment;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.inline_assignment)
}

// -------------------------------------------------------------------

// AdminTemp

// .google.devtools.remoteworkers.v1test2.AdminTemp.Command command = 1;
inline void AdminTemp::clear_command() {
  command_ = 0;
}
inline ::google::devtools::remoteworkers::v1test2::AdminTemp_Command AdminTemp::command() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.AdminTemp.command)
  return static_cast< ::google::devtools::remoteworkers::v1test2::AdminTemp_Command >(command_);
}
inline void AdminTemp::set_command(::google::devtools::remoteworkers::v1test2::AdminTemp_Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.AdminTemp.command)
}

// string arg = 2;
inline void AdminTemp::clear_arg() {
  arg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdminTemp::arg() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
  return arg_.GetNoArena();
}
inline void AdminTemp::set_arg(const ::std::string& value) {
  
  arg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
}
#if LANG_CXX11
inline void AdminTemp::set_arg(::std::string&& value) {
  
  arg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
}
#endif
inline void AdminTemp::set_arg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  arg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
}
inline void AdminTemp::set_arg(const char* value, size_t size) {
  
  arg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
}
inline ::std::string* AdminTemp::mutable_arg() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
  return arg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdminTemp::release_arg() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
  
  return arg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdminTemp::set_allocated_arg(::std::string* arg) {
  if (arg != NULL) {
    
  } else {
    
  }
  arg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
}

// -------------------------------------------------------------------

// CreateBotSessionRequest

// string parent = 1;
inline void CreateBotSessionRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateBotSessionRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateBotSessionRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
}
#if LANG_CXX11
inline void CreateBotSessionRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
}
#endif
inline void CreateBotSessionRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
}
inline void CreateBotSessionRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
}
inline ::std::string* CreateBotSessionRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateBotSessionRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateBotSessionRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
}

// .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2;
inline bool CreateBotSessionRequest::has_bot_session() const {
  return this != internal_default_instance() && bot_session_ != NULL;
}
inline void CreateBotSessionRequest::clear_bot_session() {
  if (GetArenaNoVirtual() == NULL && bot_session_ != NULL) {
    delete bot_session_;
  }
  bot_session_ = NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::BotSession& CreateBotSessionRequest::_internal_bot_session() const {
  return *bot_session_;
}
inline const ::google::devtools::remoteworkers::v1test2::BotSession& CreateBotSessionRequest::bot_session() const {
  const ::google::devtools::remoteworkers::v1test2::BotSession* p = bot_session_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.bot_session)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::BotSession*>(
      &::google::devtools::remoteworkers::v1test2::_BotSession_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* CreateBotSessionRequest::release_bot_session() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.bot_session)
  
  ::google::devtools::remoteworkers::v1test2::BotSession* temp = bot_session_;
  bot_session_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* CreateBotSessionRequest::mutable_bot_session() {
  
  if (bot_session_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::BotSession>(GetArenaNoVirtual());
    bot_session_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.bot_session)
  return bot_session_;
}
inline void CreateBotSessionRequest::set_allocated_bot_session(::google::devtools::remoteworkers::v1test2::BotSession* bot_session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bot_session_;
  }
  if (bot_session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_session, submessage_arena);
    }
    
  } else {
    
  }
  bot_session_ = bot_session;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.bot_session)
}

// -------------------------------------------------------------------

// UpdateBotSessionRequest

// string name = 1;
inline void UpdateBotSessionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateBotSessionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
  return name_.GetNoArena();
}
inline void UpdateBotSessionRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
}
#if LANG_CXX11
inline void UpdateBotSessionRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
}
#endif
inline void UpdateBotSessionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
}
inline void UpdateBotSessionRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
}
inline ::std::string* UpdateBotSessionRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateBotSessionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateBotSessionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
}

// .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2;
inline bool UpdateBotSessionRequest::has_bot_session() const {
  return this != internal_default_instance() && bot_session_ != NULL;
}
inline void UpdateBotSessionRequest::clear_bot_session() {
  if (GetArenaNoVirtual() == NULL && bot_session_ != NULL) {
    delete bot_session_;
  }
  bot_session_ = NULL;
}
inline const ::google::devtools::remoteworkers::v1test2::BotSession& UpdateBotSessionRequest::_internal_bot_session() const {
  return *bot_session_;
}
inline const ::google::devtools::remoteworkers::v1test2::BotSession& UpdateBotSessionRequest::bot_session() const {
  const ::google::devtools::remoteworkers::v1test2::BotSession* p = bot_session_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.bot_session)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::BotSession*>(
      &::google::devtools::remoteworkers::v1test2::_BotSession_default_instance_);
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* UpdateBotSessionRequest::release_bot_session() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.bot_session)
  
  ::google::devtools::remoteworkers::v1test2::BotSession* temp = bot_session_;
  bot_session_ = NULL;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* UpdateBotSessionRequest::mutable_bot_session() {
  
  if (bot_session_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::BotSession>(GetArenaNoVirtual());
    bot_session_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.bot_session)
  return bot_session_;
}
inline void UpdateBotSessionRequest::set_allocated_bot_session(::google::devtools::remoteworkers::v1test2::BotSession* bot_session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bot_session_;
  }
  if (bot_session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bot_session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_session, submessage_arena);
    }
    
  } else {
    
  }
  bot_session_ = bot_session;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.bot_session)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateBotSessionRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateBotSessionRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateBotSessionRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateBotSessionRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateBotSessionRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.update_mask)
  return update_mask_;
}
inline void UpdateBotSessionRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.update_mask)
}

// -------------------------------------------------------------------

// PostBotEventTempRequest

// string name = 1;
inline void PostBotEventTempRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostBotEventTempRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.name)
  return name_.GetNoArena();
}
inline void PostBotEventTempRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.name)
}
#if LANG_CXX11
inline void PostBotEventTempRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.name)
}
#endif
inline void PostBotEventTempRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.name)
}
inline void PostBotEventTempRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.name)
}
inline ::std::string* PostBotEventTempRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostBotEventTempRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostBotEventTempRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.name)
}

// .google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.Type type = 2;
inline void PostBotEventTempRequest::clear_type() {
  type_ = 0;
}
inline ::google::devtools::remoteworkers::v1test2::PostBotEventTempRequest_Type PostBotEventTempRequest::type() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.type)
  return static_cast< ::google::devtools::remoteworkers::v1test2::PostBotEventTempRequest_Type >(type_);
}
inline void PostBotEventTempRequest::set_type(::google::devtools::remoteworkers::v1test2::PostBotEventTempRequest_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.type)
}

// string msg = 3;
inline void PostBotEventTempRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostBotEventTempRequest::msg() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.msg)
  return msg_.GetNoArena();
}
inline void PostBotEventTempRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.msg)
}
#if LANG_CXX11
inline void PostBotEventTempRequest::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.msg)
}
#endif
inline void PostBotEventTempRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.msg)
}
inline void PostBotEventTempRequest::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.msg)
}
inline ::std::string* PostBotEventTempRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostBotEventTempRequest::release_msg() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostBotEventTempRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.PostBotEventTempRequest.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::devtools::remoteworkers::v1test2::AdminTemp_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::remoteworkers::v1test2::AdminTemp_Command>() {
  return ::google::devtools::remoteworkers::v1test2::AdminTemp_Command_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::remoteworkers::v1test2::PostBotEventTempRequest_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::remoteworkers::v1test2::PostBotEventTempRequest_Type>() {
  return ::google::devtools::remoteworkers::v1test2::PostBotEventTempRequest_Type_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::remoteworkers::v1test2::BotStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::remoteworkers::v1test2::BotStatus>() {
  return ::google::devtools::remoteworkers::v1test2::BotStatus_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::remoteworkers::v1test2::LeaseState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::remoteworkers::v1test2::LeaseState>() {
  return ::google::devtools::remoteworkers::v1test2::LeaseState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto
