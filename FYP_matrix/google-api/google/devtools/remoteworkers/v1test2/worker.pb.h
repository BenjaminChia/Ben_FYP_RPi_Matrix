// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/worker.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto 

namespace protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class Device_Property;
class Device_PropertyDefaultTypeInternal;
extern Device_PropertyDefaultTypeInternal _Device_Property_default_instance_;
class Worker;
class WorkerDefaultTypeInternal;
extern WorkerDefaultTypeInternal _Worker_default_instance_;
class Worker_Config;
class Worker_ConfigDefaultTypeInternal;
extern Worker_ConfigDefaultTypeInternal _Worker_Config_default_instance_;
class Worker_Property;
class Worker_PropertyDefaultTypeInternal;
extern Worker_PropertyDefaultTypeInternal _Worker_Property_default_instance_;
}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::devtools::remoteworkers::v1test2::Device* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Device>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Device_Property* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Device_Property>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Worker* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Worker>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Worker_Config* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Worker_Config>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Worker_Property* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Worker_Property>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {

// ===================================================================

class Worker_Property : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Worker.Property) */ {
 public:
  Worker_Property();
  virtual ~Worker_Property();

  Worker_Property(const Worker_Property& from);

  inline Worker_Property& operator=(const Worker_Property& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Worker_Property(Worker_Property&& from) noexcept
    : Worker_Property() {
    *this = ::std::move(from);
  }

  inline Worker_Property& operator=(Worker_Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Worker_Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Worker_Property* internal_default_instance() {
    return reinterpret_cast<const Worker_Property*>(
               &_Worker_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Worker_Property* other);
  friend void swap(Worker_Property& a, Worker_Property& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Worker_Property* New() const final {
    return CreateMaybeMessage<Worker_Property>(NULL);
  }

  Worker_Property* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Worker_Property>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Worker_Property& from);
  void MergeFrom(const Worker_Property& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Worker_Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Worker.Property)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Worker_Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Worker.Config) */ {
 public:
  Worker_Config();
  virtual ~Worker_Config();

  Worker_Config(const Worker_Config& from);

  inline Worker_Config& operator=(const Worker_Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Worker_Config(Worker_Config&& from) noexcept
    : Worker_Config() {
    *this = ::std::move(from);
  }

  inline Worker_Config& operator=(Worker_Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Worker_Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Worker_Config* internal_default_instance() {
    return reinterpret_cast<const Worker_Config*>(
               &_Worker_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Worker_Config* other);
  friend void swap(Worker_Config& a, Worker_Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Worker_Config* New() const final {
    return CreateMaybeMessage<Worker_Config>(NULL);
  }

  Worker_Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Worker_Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Worker_Config& from);
  void MergeFrom(const Worker_Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Worker_Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Worker.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Worker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Worker) */ {
 public:
  Worker();
  virtual ~Worker();

  Worker(const Worker& from);

  inline Worker& operator=(const Worker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Worker(Worker&& from) noexcept
    : Worker() {
    *this = ::std::move(from);
  }

  inline Worker& operator=(Worker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Worker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Worker* internal_default_instance() {
    return reinterpret_cast<const Worker*>(
               &_Worker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Worker* other);
  friend void swap(Worker& a, Worker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Worker* New() const final {
    return CreateMaybeMessage<Worker>(NULL);
  }

  Worker* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Worker>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Worker& from);
  void MergeFrom(const Worker& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Worker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Worker_Property Property;
  typedef Worker_Config Config;

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  ::google::devtools::remoteworkers::v1test2::Device* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device >*
      mutable_devices();
  const ::google::devtools::remoteworkers::v1test2::Device& devices(int index) const;
  ::google::devtools::remoteworkers::v1test2::Device* add_devices();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device >&
      devices() const;

  // repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  ::google::devtools::remoteworkers::v1test2::Worker_Property* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Property >*
      mutable_properties();
  const ::google::devtools::remoteworkers::v1test2::Worker_Property& properties(int index) const;
  ::google::devtools::remoteworkers::v1test2::Worker_Property* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Property >&
      properties() const;

  // repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;
  int configs_size() const;
  void clear_configs();
  static const int kConfigsFieldNumber = 3;
  ::google::devtools::remoteworkers::v1test2::Worker_Config* mutable_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Config >*
      mutable_configs();
  const ::google::devtools::remoteworkers::v1test2::Worker_Config& configs(int index) const;
  ::google::devtools::remoteworkers::v1test2::Worker_Config* add_configs();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Config >&
      configs() const;

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Worker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device > devices_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Property > properties_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Config > configs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Device_Property : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Device.Property) */ {
 public:
  Device_Property();
  virtual ~Device_Property();

  Device_Property(const Device_Property& from);

  inline Device_Property& operator=(const Device_Property& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Device_Property(Device_Property&& from) noexcept
    : Device_Property() {
    *this = ::std::move(from);
  }

  inline Device_Property& operator=(Device_Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Device_Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device_Property* internal_default_instance() {
    return reinterpret_cast<const Device_Property*>(
               &_Device_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Device_Property* other);
  friend void swap(Device_Property& a, Device_Property& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Device_Property* New() const final {
    return CreateMaybeMessage<Device_Property>(NULL);
  }

  Device_Property* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Device_Property>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Device_Property& from);
  void MergeFrom(const Device_Property& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device_Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Device.Property)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Device* other);
  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(NULL);
  }

  Device* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Device_Property Property;

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  ::google::devtools::remoteworkers::v1test2::Device_Property* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device_Property >*
      mutable_properties();
  const ::google::devtools::remoteworkers::v1test2::Device_Property& properties(int index) const;
  ::google::devtools::remoteworkers::v1test2::Device_Property* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device_Property >&
      properties() const;

  // string handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device_Property > properties_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Worker_Property

// string key = 1;
inline void Worker_Property::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker_Property::key() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.Property.key)
  return key_.GetNoArena();
}
inline void Worker_Property::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Worker.Property.key)
}
#if LANG_CXX11
inline void Worker_Property::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Worker.Property.key)
}
#endif
inline void Worker_Property::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Worker.Property.key)
}
inline void Worker_Property::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Worker.Property.key)
}
inline ::std::string* Worker_Property::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.Property.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker_Property::release_key() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Worker.Property.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker_Property::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Worker.Property.key)
}

// string value = 2;
inline void Worker_Property::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker_Property::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.Property.value)
  return value_.GetNoArena();
}
inline void Worker_Property::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Worker.Property.value)
}
#if LANG_CXX11
inline void Worker_Property::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Worker.Property.value)
}
#endif
inline void Worker_Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Worker.Property.value)
}
inline void Worker_Property::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Worker.Property.value)
}
inline ::std::string* Worker_Property::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.Property.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker_Property::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Worker.Property.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker_Property::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Worker.Property.value)
}

// -------------------------------------------------------------------

// Worker_Config

// string key = 1;
inline void Worker_Config::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker_Config::key() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.Config.key)
  return key_.GetNoArena();
}
inline void Worker_Config::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Worker.Config.key)
}
#if LANG_CXX11
inline void Worker_Config::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Worker.Config.key)
}
#endif
inline void Worker_Config::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Worker.Config.key)
}
inline void Worker_Config::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Worker.Config.key)
}
inline ::std::string* Worker_Config::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.Config.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker_Config::release_key() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Worker.Config.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker_Config::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Worker.Config.key)
}

// string value = 2;
inline void Worker_Config::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker_Config::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.Config.value)
  return value_.GetNoArena();
}
inline void Worker_Config::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Worker.Config.value)
}
#if LANG_CXX11
inline void Worker_Config::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Worker.Config.value)
}
#endif
inline void Worker_Config::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Worker.Config.value)
}
inline void Worker_Config::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Worker.Config.value)
}
inline ::std::string* Worker_Config::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.Config.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker_Config::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Worker.Config.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker_Config::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Worker.Config.value)
}

// -------------------------------------------------------------------

// Worker

// repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;
inline int Worker::devices_size() const {
  return devices_.size();
}
inline void Worker::clear_devices() {
  devices_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::Device* Worker::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.devices)
  return devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device >*
Worker::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.Worker.devices)
  return &devices_;
}
inline const ::google::devtools::remoteworkers::v1test2::Device& Worker::devices(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.devices)
  return devices_.Get(index);
}
inline ::google::devtools::remoteworkers::v1test2::Device* Worker::add_devices() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.Worker.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device >&
Worker::devices() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.Worker.devices)
  return devices_;
}

// repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;
inline int Worker::properties_size() const {
  return properties_.size();
}
inline void Worker::clear_properties() {
  properties_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::Worker_Property* Worker::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Property >*
Worker::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.Worker.properties)
  return &properties_;
}
inline const ::google::devtools::remoteworkers::v1test2::Worker_Property& Worker::properties(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.properties)
  return properties_.Get(index);
}
inline ::google::devtools::remoteworkers::v1test2::Worker_Property* Worker::add_properties() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.Worker.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Property >&
Worker::properties() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.Worker.properties)
  return properties_;
}

// repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;
inline int Worker::configs_size() const {
  return configs_.size();
}
inline void Worker::clear_configs() {
  configs_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::Worker_Config* Worker::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.configs)
  return configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Config >*
Worker::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.Worker.configs)
  return &configs_;
}
inline const ::google::devtools::remoteworkers::v1test2::Worker_Config& Worker::configs(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.configs)
  return configs_.Get(index);
}
inline ::google::devtools::remoteworkers::v1test2::Worker_Config* Worker::add_configs() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.Worker.configs)
  return configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Config >&
Worker::configs() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.Worker.configs)
  return configs_;
}

// -------------------------------------------------------------------

// Device_Property

// string key = 1;
inline void Device_Property::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device_Property::key() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Device.Property.key)
  return key_.GetNoArena();
}
inline void Device_Property::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Device.Property.key)
}
#if LANG_CXX11
inline void Device_Property::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Device.Property.key)
}
#endif
inline void Device_Property::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Device.Property.key)
}
inline void Device_Property::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Device.Property.key)
}
inline ::std::string* Device_Property::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Device.Property.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device_Property::release_key() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Device.Property.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device_Property::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Device.Property.key)
}

// string value = 2;
inline void Device_Property::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device_Property::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Device.Property.value)
  return value_.GetNoArena();
}
inline void Device_Property::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Device.Property.value)
}
#if LANG_CXX11
inline void Device_Property::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Device.Property.value)
}
#endif
inline void Device_Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Device.Property.value)
}
inline void Device_Property::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Device.Property.value)
}
inline ::std::string* Device_Property::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Device.Property.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device_Property::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Device.Property.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device_Property::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Device.Property.value)
}

// -------------------------------------------------------------------

// Device

// string handle = 1;
inline void Device::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::handle() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Device.handle)
  return handle_.GetNoArena();
}
inline void Device::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Device.handle)
}
#if LANG_CXX11
inline void Device::set_handle(::std::string&& value) {
  
  handle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Device.handle)
}
#endif
inline void Device::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Device.handle)
}
inline void Device::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Device.handle)
}
inline ::std::string* Device::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Device.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_handle() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Device.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Device.handle)
}

// repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;
inline int Device::properties_size() const {
  return properties_.size();
}
inline void Device::clear_properties() {
  properties_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::Device_Property* Device::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Device.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device_Property >*
Device::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.Device.properties)
  return &properties_;
}
inline const ::google::devtools::remoteworkers::v1test2::Device_Property& Device::properties(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Device.properties)
  return properties_.Get(index);
}
inline ::google::devtools::remoteworkers::v1test2::Device_Property* Device::add_properties() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.Device.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device_Property >&
Device::properties() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.Device.properties)
  return properties_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto
