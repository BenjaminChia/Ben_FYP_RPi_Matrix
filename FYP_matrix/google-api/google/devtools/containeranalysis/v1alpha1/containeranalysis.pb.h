// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1alpha1/containeranalysis.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/devtools/containeranalysis/v1alpha1/bill_of_materials.pb.h"
#include "google/devtools/containeranalysis/v1alpha1/image_basis.pb.h"
#include "google/devtools/containeranalysis/v1alpha1/package_vulnerability.pb.h"
#include "google/devtools/containeranalysis/v1alpha1/provenance.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto 

namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[41];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto
namespace google {
namespace devtools {
namespace containeranalysis {
namespace v1alpha1 {
class AttestationAuthority;
class AttestationAuthorityDefaultTypeInternal;
extern AttestationAuthorityDefaultTypeInternal _AttestationAuthority_default_instance_;
class AttestationAuthority_Attestation;
class AttestationAuthority_AttestationDefaultTypeInternal;
extern AttestationAuthority_AttestationDefaultTypeInternal _AttestationAuthority_Attestation_default_instance_;
class AttestationAuthority_AttestationAuthorityHint;
class AttestationAuthority_AttestationAuthorityHintDefaultTypeInternal;
extern AttestationAuthority_AttestationAuthorityHintDefaultTypeInternal _AttestationAuthority_AttestationAuthorityHint_default_instance_;
class BuildDetails;
class BuildDetailsDefaultTypeInternal;
extern BuildDetailsDefaultTypeInternal _BuildDetails_default_instance_;
class BuildSignature;
class BuildSignatureDefaultTypeInternal;
extern BuildSignatureDefaultTypeInternal _BuildSignature_default_instance_;
class BuildType;
class BuildTypeDefaultTypeInternal;
extern BuildTypeDefaultTypeInternal _BuildType_default_instance_;
class CreateNoteRequest;
class CreateNoteRequestDefaultTypeInternal;
extern CreateNoteRequestDefaultTypeInternal _CreateNoteRequest_default_instance_;
class CreateOccurrenceRequest;
class CreateOccurrenceRequestDefaultTypeInternal;
extern CreateOccurrenceRequestDefaultTypeInternal _CreateOccurrenceRequest_default_instance_;
class CreateOperationRequest;
class CreateOperationRequestDefaultTypeInternal;
extern CreateOperationRequestDefaultTypeInternal _CreateOperationRequest_default_instance_;
class DeleteNoteRequest;
class DeleteNoteRequestDefaultTypeInternal;
extern DeleteNoteRequestDefaultTypeInternal _DeleteNoteRequest_default_instance_;
class DeleteOccurrenceRequest;
class DeleteOccurrenceRequestDefaultTypeInternal;
extern DeleteOccurrenceRequestDefaultTypeInternal _DeleteOccurrenceRequest_default_instance_;
class Deployable;
class DeployableDefaultTypeInternal;
extern DeployableDefaultTypeInternal _Deployable_default_instance_;
class Deployable_Deployment;
class Deployable_DeploymentDefaultTypeInternal;
extern Deployable_DeploymentDefaultTypeInternal _Deployable_Deployment_default_instance_;
class Discovery;
class DiscoveryDefaultTypeInternal;
extern DiscoveryDefaultTypeInternal _Discovery_default_instance_;
class Discovery_Discovered;
class Discovery_DiscoveredDefaultTypeInternal;
extern Discovery_DiscoveredDefaultTypeInternal _Discovery_Discovered_default_instance_;
class GetNoteRequest;
class GetNoteRequestDefaultTypeInternal;
extern GetNoteRequestDefaultTypeInternal _GetNoteRequest_default_instance_;
class GetOccurrenceNoteRequest;
class GetOccurrenceNoteRequestDefaultTypeInternal;
extern GetOccurrenceNoteRequestDefaultTypeInternal _GetOccurrenceNoteRequest_default_instance_;
class GetOccurrenceRequest;
class GetOccurrenceRequestDefaultTypeInternal;
extern GetOccurrenceRequestDefaultTypeInternal _GetOccurrenceRequest_default_instance_;
class GetScanConfigRequest;
class GetScanConfigRequestDefaultTypeInternal;
extern GetScanConfigRequestDefaultTypeInternal _GetScanConfigRequest_default_instance_;
class GetVulnzOccurrencesSummaryRequest;
class GetVulnzOccurrencesSummaryRequestDefaultTypeInternal;
extern GetVulnzOccurrencesSummaryRequestDefaultTypeInternal _GetVulnzOccurrencesSummaryRequest_default_instance_;
class GetVulnzOccurrencesSummaryResponse;
class GetVulnzOccurrencesSummaryResponseDefaultTypeInternal;
extern GetVulnzOccurrencesSummaryResponseDefaultTypeInternal _GetVulnzOccurrencesSummaryResponse_default_instance_;
class GetVulnzOccurrencesSummaryResponse_SeverityCount;
class GetVulnzOccurrencesSummaryResponse_SeverityCountDefaultTypeInternal;
extern GetVulnzOccurrencesSummaryResponse_SeverityCountDefaultTypeInternal _GetVulnzOccurrencesSummaryResponse_SeverityCount_default_instance_;
class ListNoteOccurrencesRequest;
class ListNoteOccurrencesRequestDefaultTypeInternal;
extern ListNoteOccurrencesRequestDefaultTypeInternal _ListNoteOccurrencesRequest_default_instance_;
class ListNoteOccurrencesResponse;
class ListNoteOccurrencesResponseDefaultTypeInternal;
extern ListNoteOccurrencesResponseDefaultTypeInternal _ListNoteOccurrencesResponse_default_instance_;
class ListNotesRequest;
class ListNotesRequestDefaultTypeInternal;
extern ListNotesRequestDefaultTypeInternal _ListNotesRequest_default_instance_;
class ListNotesResponse;
class ListNotesResponseDefaultTypeInternal;
extern ListNotesResponseDefaultTypeInternal _ListNotesResponse_default_instance_;
class ListOccurrencesRequest;
class ListOccurrencesRequestDefaultTypeInternal;
extern ListOccurrencesRequestDefaultTypeInternal _ListOccurrencesRequest_default_instance_;
class ListOccurrencesResponse;
class ListOccurrencesResponseDefaultTypeInternal;
extern ListOccurrencesResponseDefaultTypeInternal _ListOccurrencesResponse_default_instance_;
class ListScanConfigsRequest;
class ListScanConfigsRequestDefaultTypeInternal;
extern ListScanConfigsRequestDefaultTypeInternal _ListScanConfigsRequest_default_instance_;
class ListScanConfigsResponse;
class ListScanConfigsResponseDefaultTypeInternal;
extern ListScanConfigsResponseDefaultTypeInternal _ListScanConfigsResponse_default_instance_;
class Note;
class NoteDefaultTypeInternal;
extern NoteDefaultTypeInternal _Note_default_instance_;
class Note_RelatedUrl;
class Note_RelatedUrlDefaultTypeInternal;
extern Note_RelatedUrlDefaultTypeInternal _Note_RelatedUrl_default_instance_;
class Occurrence;
class OccurrenceDefaultTypeInternal;
extern OccurrenceDefaultTypeInternal _Occurrence_default_instance_;
class OperationMetadata;
class OperationMetadataDefaultTypeInternal;
extern OperationMetadataDefaultTypeInternal _OperationMetadata_default_instance_;
class PgpSignedAttestation;
class PgpSignedAttestationDefaultTypeInternal;
extern PgpSignedAttestationDefaultTypeInternal _PgpSignedAttestation_default_instance_;
class Resource;
class ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class ScanConfig;
class ScanConfigDefaultTypeInternal;
extern ScanConfigDefaultTypeInternal _ScanConfig_default_instance_;
class UpdateNoteRequest;
class UpdateNoteRequestDefaultTypeInternal;
extern UpdateNoteRequestDefaultTypeInternal _UpdateNoteRequest_default_instance_;
class UpdateOccurrenceRequest;
class UpdateOccurrenceRequestDefaultTypeInternal;
extern UpdateOccurrenceRequestDefaultTypeInternal _UpdateOccurrenceRequest_default_instance_;
class UpdateOperationRequest;
class UpdateOperationRequestDefaultTypeInternal;
extern UpdateOperationRequestDefaultTypeInternal _UpdateOperationRequest_default_instance_;
class UpdateScanConfigRequest;
class UpdateScanConfigRequestDefaultTypeInternal;
extern UpdateScanConfigRequestDefaultTypeInternal _UpdateScanConfigRequest_default_instance_;
}  // namespace v1alpha1
}  // namespace containeranalysis
}  // namespace devtools
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::AttestationAuthority>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::BuildDetails* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::BuildDetails>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::BuildSignature* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::BuildSignature>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::BuildType* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::BuildType>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Deployable* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Deployable>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Discovery* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Discovery>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::GetNoteRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::ListNotesRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Note* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Note>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Occurrence* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Occurrence>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::OperationMetadata* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::OperationMetadata>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Resource* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Resource>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::ScanConfig* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::ScanConfig>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace devtools {
namespace containeranalysis {
namespace v1alpha1 {

enum Note_Kind {
  Note_Kind_KIND_UNSPECIFIED = 0,
  Note_Kind_PACKAGE_VULNERABILITY = 2,
  Note_Kind_BUILD_DETAILS = 3,
  Note_Kind_IMAGE_BASIS = 4,
  Note_Kind_PACKAGE_MANAGER = 5,
  Note_Kind_DEPLOYABLE = 6,
  Note_Kind_DISCOVERY = 7,
  Note_Kind_ATTESTATION_AUTHORITY = 8,
  Note_Kind_Note_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Note_Kind_Note_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Note_Kind_IsValid(int value);
const Note_Kind Note_Kind_Kind_MIN = Note_Kind_KIND_UNSPECIFIED;
const Note_Kind Note_Kind_Kind_MAX = Note_Kind_ATTESTATION_AUTHORITY;
const int Note_Kind_Kind_ARRAYSIZE = Note_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Note_Kind_descriptor();
inline const ::std::string& Note_Kind_Name(Note_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Note_Kind_descriptor(), value);
}
inline bool Note_Kind_Parse(
    const ::std::string& name, Note_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Note_Kind>(
    Note_Kind_descriptor(), name, value);
}
enum Deployable_Deployment_Platform {
  Deployable_Deployment_Platform_PLATFORM_UNSPECIFIED = 0,
  Deployable_Deployment_Platform_GKE = 1,
  Deployable_Deployment_Platform_FLEX = 2,
  Deployable_Deployment_Platform_CUSTOM = 3,
  Deployable_Deployment_Platform_Deployable_Deployment_Platform_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Deployable_Deployment_Platform_Deployable_Deployment_Platform_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Deployable_Deployment_Platform_IsValid(int value);
const Deployable_Deployment_Platform Deployable_Deployment_Platform_Platform_MIN = Deployable_Deployment_Platform_PLATFORM_UNSPECIFIED;
const Deployable_Deployment_Platform Deployable_Deployment_Platform_Platform_MAX = Deployable_Deployment_Platform_CUSTOM;
const int Deployable_Deployment_Platform_Platform_ARRAYSIZE = Deployable_Deployment_Platform_Platform_MAX + 1;

const ::google::protobuf::EnumDescriptor* Deployable_Deployment_Platform_descriptor();
inline const ::std::string& Deployable_Deployment_Platform_Name(Deployable_Deployment_Platform value) {
  return ::google::protobuf::internal::NameOfEnum(
    Deployable_Deployment_Platform_descriptor(), value);
}
inline bool Deployable_Deployment_Platform_Parse(
    const ::std::string& name, Deployable_Deployment_Platform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Deployable_Deployment_Platform>(
    Deployable_Deployment_Platform_descriptor(), name, value);
}
enum Discovery_Discovered_AnalysisStatus {
  Discovery_Discovered_AnalysisStatus_ANALYSIS_STATUS_UNSPECIFIED = 0,
  Discovery_Discovered_AnalysisStatus_PENDING = 1,
  Discovery_Discovered_AnalysisStatus_SCANNING = 2,
  Discovery_Discovered_AnalysisStatus_FINISHED_SUCCESS = 3,
  Discovery_Discovered_AnalysisStatus_FINISHED_FAILED = 4,
  Discovery_Discovered_AnalysisStatus_UNSUPPORTED_RESOURCE = 5,
  Discovery_Discovered_AnalysisStatus_Discovery_Discovered_AnalysisStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Discovery_Discovered_AnalysisStatus_Discovery_Discovered_AnalysisStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Discovery_Discovered_AnalysisStatus_IsValid(int value);
const Discovery_Discovered_AnalysisStatus Discovery_Discovered_AnalysisStatus_AnalysisStatus_MIN = Discovery_Discovered_AnalysisStatus_ANALYSIS_STATUS_UNSPECIFIED;
const Discovery_Discovered_AnalysisStatus Discovery_Discovered_AnalysisStatus_AnalysisStatus_MAX = Discovery_Discovered_AnalysisStatus_UNSUPPORTED_RESOURCE;
const int Discovery_Discovered_AnalysisStatus_AnalysisStatus_ARRAYSIZE = Discovery_Discovered_AnalysisStatus_AnalysisStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Discovery_Discovered_AnalysisStatus_descriptor();
inline const ::std::string& Discovery_Discovered_AnalysisStatus_Name(Discovery_Discovered_AnalysisStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Discovery_Discovered_AnalysisStatus_descriptor(), value);
}
inline bool Discovery_Discovered_AnalysisStatus_Parse(
    const ::std::string& name, Discovery_Discovered_AnalysisStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Discovery_Discovered_AnalysisStatus>(
    Discovery_Discovered_AnalysisStatus_descriptor(), name, value);
}
enum BuildSignature_KeyType {
  BuildSignature_KeyType_KEY_TYPE_UNSPECIFIED = 0,
  BuildSignature_KeyType_PGP_ASCII_ARMORED = 1,
  BuildSignature_KeyType_PKIX_PEM = 2,
  BuildSignature_KeyType_BuildSignature_KeyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BuildSignature_KeyType_BuildSignature_KeyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BuildSignature_KeyType_IsValid(int value);
const BuildSignature_KeyType BuildSignature_KeyType_KeyType_MIN = BuildSignature_KeyType_KEY_TYPE_UNSPECIFIED;
const BuildSignature_KeyType BuildSignature_KeyType_KeyType_MAX = BuildSignature_KeyType_PKIX_PEM;
const int BuildSignature_KeyType_KeyType_ARRAYSIZE = BuildSignature_KeyType_KeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BuildSignature_KeyType_descriptor();
inline const ::std::string& BuildSignature_KeyType_Name(BuildSignature_KeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BuildSignature_KeyType_descriptor(), value);
}
inline bool BuildSignature_KeyType_Parse(
    const ::std::string& name, BuildSignature_KeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BuildSignature_KeyType>(
    BuildSignature_KeyType_descriptor(), name, value);
}
enum PgpSignedAttestation_ContentType {
  PgpSignedAttestation_ContentType_CONTENT_TYPE_UNSPECIFIED = 0,
  PgpSignedAttestation_ContentType_SIMPLE_SIGNING_JSON = 1,
  PgpSignedAttestation_ContentType_PgpSignedAttestation_ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PgpSignedAttestation_ContentType_PgpSignedAttestation_ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PgpSignedAttestation_ContentType_IsValid(int value);
const PgpSignedAttestation_ContentType PgpSignedAttestation_ContentType_ContentType_MIN = PgpSignedAttestation_ContentType_CONTENT_TYPE_UNSPECIFIED;
const PgpSignedAttestation_ContentType PgpSignedAttestation_ContentType_ContentType_MAX = PgpSignedAttestation_ContentType_SIMPLE_SIGNING_JSON;
const int PgpSignedAttestation_ContentType_ContentType_ARRAYSIZE = PgpSignedAttestation_ContentType_ContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PgpSignedAttestation_ContentType_descriptor();
inline const ::std::string& PgpSignedAttestation_ContentType_Name(PgpSignedAttestation_ContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PgpSignedAttestation_ContentType_descriptor(), value);
}
inline bool PgpSignedAttestation_ContentType_Parse(
    const ::std::string& name, PgpSignedAttestation_ContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PgpSignedAttestation_ContentType>(
    PgpSignedAttestation_ContentType_descriptor(), name, value);
}
// ===================================================================

class Occurrence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Occurrence) */ {
 public:
  Occurrence();
  virtual ~Occurrence();

  Occurrence(const Occurrence& from);

  inline Occurrence& operator=(const Occurrence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Occurrence(Occurrence&& from) noexcept
    : Occurrence() {
    *this = ::std::move(from);
  }

  inline Occurrence& operator=(Occurrence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Occurrence& default_instance();

  enum DetailsCase {
    kVulnerabilityDetails = 8,
    kBuildDetails = 7,
    kDerivedImage = 11,
    kInstallation = 12,
    kDeployment = 14,
    kDiscovered = 15,
    kAttestation = 16,
    DETAILS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Occurrence* internal_default_instance() {
    return reinterpret_cast<const Occurrence*>(
               &_Occurrence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Occurrence* other);
  friend void swap(Occurrence& a, Occurrence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Occurrence* New() const final {
    return CreateMaybeMessage<Occurrence>(NULL);
  }

  Occurrence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Occurrence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Occurrence& from);
  void MergeFrom(const Occurrence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Occurrence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string resource_url = 2;
  void clear_resource_url();
  static const int kResourceUrlFieldNumber = 2;
  const ::std::string& resource_url() const;
  void set_resource_url(const ::std::string& value);
  #if LANG_CXX11
  void set_resource_url(::std::string&& value);
  #endif
  void set_resource_url(const char* value);
  void set_resource_url(const char* value, size_t size);
  ::std::string* mutable_resource_url();
  ::std::string* release_resource_url();
  void set_allocated_resource_url(::std::string* resource_url);

  // string note_name = 3;
  void clear_note_name();
  static const int kNoteNameFieldNumber = 3;
  const ::std::string& note_name() const;
  void set_note_name(const ::std::string& value);
  #if LANG_CXX11
  void set_note_name(::std::string&& value);
  #endif
  void set_note_name(const char* value);
  void set_note_name(const char* value, size_t size);
  ::std::string* mutable_note_name();
  ::std::string* release_note_name();
  void set_allocated_note_name(::std::string* note_name);

  // string remediation = 5;
  void clear_remediation();
  static const int kRemediationFieldNumber = 5;
  const ::std::string& remediation() const;
  void set_remediation(const ::std::string& value);
  #if LANG_CXX11
  void set_remediation(::std::string&& value);
  #endif
  void set_remediation(const char* value);
  void set_remediation(const char* value, size_t size);
  ::std::string* mutable_remediation();
  ::std::string* release_remediation();
  void set_allocated_remediation(::std::string* remediation);

  // .google.protobuf.Timestamp create_time = 9;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 9;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 10;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 10;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.devtools.containeranalysis.v1alpha1.Resource resource = 17;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 17;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::Resource& _internal_resource() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::Resource& resource() const;
  ::google::devtools::containeranalysis::v1alpha1::Resource* release_resource();
  ::google::devtools::containeranalysis::v1alpha1::Resource* mutable_resource();
  void set_allocated_resource(::google::devtools::containeranalysis::v1alpha1::Resource* resource);

  // .google.devtools.containeranalysis.v1alpha1.Note.Kind kind = 6;
  void clear_kind();
  static const int kKindFieldNumber = 6;
  ::google::devtools::containeranalysis::v1alpha1::Note_Kind kind() const;
  void set_kind(::google::devtools::containeranalysis::v1alpha1::Note_Kind value);

  // .google.devtools.containeranalysis.v1alpha1.VulnerabilityType.VulnerabilityDetails vulnerability_details = 8;
  bool has_vulnerability_details() const;
  void clear_vulnerability_details();
  static const int kVulnerabilityDetailsFieldNumber = 8;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails& _internal_vulnerability_details() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails& vulnerability_details() const;
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails* release_vulnerability_details();
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails* mutable_vulnerability_details();
  void set_allocated_vulnerability_details(::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails* vulnerability_details);

  // .google.devtools.containeranalysis.v1alpha1.BuildDetails build_details = 7;
  bool has_build_details() const;
  void clear_build_details();
  static const int kBuildDetailsFieldNumber = 7;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::BuildDetails& _internal_build_details() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::BuildDetails& build_details() const;
  ::google::devtools::containeranalysis::v1alpha1::BuildDetails* release_build_details();
  ::google::devtools::containeranalysis::v1alpha1::BuildDetails* mutable_build_details();
  void set_allocated_build_details(::google::devtools::containeranalysis::v1alpha1::BuildDetails* build_details);

  // .google.devtools.containeranalysis.v1alpha1.DockerImage.Derived derived_image = 11;
  bool has_derived_image() const;
  void clear_derived_image();
  static const int kDerivedImageFieldNumber = 11;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived& _internal_derived_image() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived& derived_image() const;
  ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived* release_derived_image();
  ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived* mutable_derived_image();
  void set_allocated_derived_image(::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived* derived_image);

  // .google.devtools.containeranalysis.v1alpha1.PackageManager.Installation installation = 12;
  bool has_installation() const;
  void clear_installation();
  static const int kInstallationFieldNumber = 12;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation& _internal_installation() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation& installation() const;
  ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation* release_installation();
  ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation* mutable_installation();
  void set_allocated_installation(::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation* installation);

  // .google.devtools.containeranalysis.v1alpha1.Deployable.Deployment deployment = 14;
  bool has_deployment() const;
  void clear_deployment();
  static const int kDeploymentFieldNumber = 14;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment& _internal_deployment() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment& deployment() const;
  ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment* release_deployment();
  ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment* mutable_deployment();
  void set_allocated_deployment(::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment* deployment);

  // .google.devtools.containeranalysis.v1alpha1.Discovery.Discovered discovered = 15;
  bool has_discovered() const;
  void clear_discovered();
  static const int kDiscoveredFieldNumber = 15;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered& _internal_discovered() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered& discovered() const;
  ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered* release_discovered();
  ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered* mutable_discovered();
  void set_allocated_discovered(::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered* discovered);

  // .google.devtools.containeranalysis.v1alpha1.AttestationAuthority.Attestation attestation = 16;
  bool has_attestation() const;
  void clear_attestation();
  static const int kAttestationFieldNumber = 16;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation& _internal_attestation() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation& attestation() const;
  ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation* release_attestation();
  ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation* mutable_attestation();
  void set_allocated_attestation(::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation* attestation);

  void clear_details();
  DetailsCase details_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Occurrence)
 private:
  void set_has_vulnerability_details();
  void set_has_build_details();
  void set_has_derived_image();
  void set_has_installation();
  void set_has_deployment();
  void set_has_discovered();
  void set_has_attestation();

  inline bool has_details() const;
  inline void clear_has_details();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr resource_url_;
  ::google::protobuf::internal::ArenaStringPtr note_name_;
  ::google::protobuf::internal::ArenaStringPtr remediation_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::devtools::containeranalysis::v1alpha1::Resource* resource_;
  int kind_;
  union DetailsUnion {
    DetailsUnion() {}
    ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails* vulnerability_details_;
    ::google::devtools::containeranalysis::v1alpha1::BuildDetails* build_details_;
    ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived* derived_image_;
    ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation* installation_;
    ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment* deployment_;
    ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered* discovered_;
    ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation* attestation_;
  } details_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Resource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Resource) */ {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(Resource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Resource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Resource* other);
  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Resource* New() const final {
    return CreateMaybeMessage<Resource>(NULL);
  }

  Resource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string uri = 2;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // .google.devtools.containeranalysis.v1alpha1.Hash content_hash = 3;
  bool has_content_hash() const;
  void clear_content_hash();
  static const int kContentHashFieldNumber = 3;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::Hash& _internal_content_hash() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::Hash& content_hash() const;
  ::google::devtools::containeranalysis::v1alpha1::Hash* release_content_hash();
  ::google::devtools::containeranalysis::v1alpha1::Hash* mutable_content_hash();
  void set_allocated_content_hash(::google::devtools::containeranalysis::v1alpha1::Hash* content_hash);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Resource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::devtools::containeranalysis::v1alpha1::Hash* content_hash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Note_RelatedUrl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl) */ {
 public:
  Note_RelatedUrl();
  virtual ~Note_RelatedUrl();

  Note_RelatedUrl(const Note_RelatedUrl& from);

  inline Note_RelatedUrl& operator=(const Note_RelatedUrl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Note_RelatedUrl(Note_RelatedUrl&& from) noexcept
    : Note_RelatedUrl() {
    *this = ::std::move(from);
  }

  inline Note_RelatedUrl& operator=(Note_RelatedUrl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Note_RelatedUrl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Note_RelatedUrl* internal_default_instance() {
    return reinterpret_cast<const Note_RelatedUrl*>(
               &_Note_RelatedUrl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Note_RelatedUrl* other);
  friend void swap(Note_RelatedUrl& a, Note_RelatedUrl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Note_RelatedUrl* New() const final {
    return CreateMaybeMessage<Note_RelatedUrl>(NULL);
  }

  Note_RelatedUrl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Note_RelatedUrl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Note_RelatedUrl& from);
  void MergeFrom(const Note_RelatedUrl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Note_RelatedUrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Note : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Note) */ {
 public:
  Note();
  virtual ~Note();

  Note(const Note& from);

  inline Note& operator=(const Note& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Note(Note&& from) noexcept
    : Note() {
    *this = ::std::move(from);
  }

  inline Note& operator=(Note&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Note& default_instance();

  enum NoteTypeCase {
    kVulnerabilityType = 6,
    kBuildType = 8,
    kBaseImage = 13,
    kPackage = 14,
    kDeployable = 17,
    kDiscovery = 18,
    kAttestationAuthority = 19,
    NOTE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Note* internal_default_instance() {
    return reinterpret_cast<const Note*>(
               &_Note_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Note* other);
  friend void swap(Note& a, Note& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Note* New() const final {
    return CreateMaybeMessage<Note>(NULL);
  }

  Note* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Note>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Note& from);
  void MergeFrom(const Note& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Note* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Note_RelatedUrl RelatedUrl;

  typedef Note_Kind Kind;
  static const Kind KIND_UNSPECIFIED =
    Note_Kind_KIND_UNSPECIFIED;
  static const Kind PACKAGE_VULNERABILITY =
    Note_Kind_PACKAGE_VULNERABILITY;
  static const Kind BUILD_DETAILS =
    Note_Kind_BUILD_DETAILS;
  static const Kind IMAGE_BASIS =
    Note_Kind_IMAGE_BASIS;
  static const Kind PACKAGE_MANAGER =
    Note_Kind_PACKAGE_MANAGER;
  static const Kind DEPLOYABLE =
    Note_Kind_DEPLOYABLE;
  static const Kind DISCOVERY =
    Note_Kind_DISCOVERY;
  static const Kind ATTESTATION_AUTHORITY =
    Note_Kind_ATTESTATION_AUTHORITY;
  static inline bool Kind_IsValid(int value) {
    return Note_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    Note_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    Note_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    Note_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return Note_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return Note_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return Note_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl related_url = 7;
  int related_url_size() const;
  void clear_related_url();
  static const int kRelatedUrlFieldNumber = 7;
  ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl* mutable_related_url(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl >*
      mutable_related_url();
  const ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl& related_url(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl* add_related_url();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl >&
      related_url() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string short_description = 3;
  void clear_short_description();
  static const int kShortDescriptionFieldNumber = 3;
  const ::std::string& short_description() const;
  void set_short_description(const ::std::string& value);
  #if LANG_CXX11
  void set_short_description(::std::string&& value);
  #endif
  void set_short_description(const char* value);
  void set_short_description(const char* value, size_t size);
  ::std::string* mutable_short_description();
  ::std::string* release_short_description();
  void set_allocated_short_description(::std::string* short_description);

  // string long_description = 4;
  void clear_long_description();
  static const int kLongDescriptionFieldNumber = 4;
  const ::std::string& long_description() const;
  void set_long_description(const ::std::string& value);
  #if LANG_CXX11
  void set_long_description(::std::string&& value);
  #endif
  void set_long_description(const char* value);
  void set_long_description(const char* value, size_t size);
  ::std::string* mutable_long_description();
  ::std::string* release_long_description();
  void set_allocated_long_description(::std::string* long_description);

  // .google.protobuf.Timestamp expiration_time = 10;
  bool has_expiration_time() const;
  void clear_expiration_time();
  static const int kExpirationTimeFieldNumber = 10;
  private:
  const ::google::protobuf::Timestamp& _internal_expiration_time() const;
  public:
  const ::google::protobuf::Timestamp& expiration_time() const;
  ::google::protobuf::Timestamp* release_expiration_time();
  ::google::protobuf::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::google::protobuf::Timestamp* expiration_time);

  // .google.protobuf.Timestamp create_time = 11;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 11;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 12;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 12;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.devtools.containeranalysis.v1alpha1.Note.Kind kind = 9;
  void clear_kind();
  static const int kKindFieldNumber = 9;
  ::google::devtools::containeranalysis::v1alpha1::Note_Kind kind() const;
  void set_kind(::google::devtools::containeranalysis::v1alpha1::Note_Kind value);

  // .google.devtools.containeranalysis.v1alpha1.VulnerabilityType vulnerability_type = 6;
  bool has_vulnerability_type() const;
  void clear_vulnerability_type();
  static const int kVulnerabilityTypeFieldNumber = 6;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType& _internal_vulnerability_type() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType& vulnerability_type() const;
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType* release_vulnerability_type();
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType* mutable_vulnerability_type();
  void set_allocated_vulnerability_type(::google::devtools::containeranalysis::v1alpha1::VulnerabilityType* vulnerability_type);

  // .google.devtools.containeranalysis.v1alpha1.BuildType build_type = 8;
  bool has_build_type() const;
  void clear_build_type();
  static const int kBuildTypeFieldNumber = 8;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::BuildType& _internal_build_type() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::BuildType& build_type() const;
  ::google::devtools::containeranalysis::v1alpha1::BuildType* release_build_type();
  ::google::devtools::containeranalysis::v1alpha1::BuildType* mutable_build_type();
  void set_allocated_build_type(::google::devtools::containeranalysis::v1alpha1::BuildType* build_type);

  // .google.devtools.containeranalysis.v1alpha1.DockerImage.Basis base_image = 13;
  bool has_base_image() const;
  void clear_base_image();
  static const int kBaseImageFieldNumber = 13;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis& _internal_base_image() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis& base_image() const;
  ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis* release_base_image();
  ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis* mutable_base_image();
  void set_allocated_base_image(::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis* base_image);

  // .google.devtools.containeranalysis.v1alpha1.PackageManager.Package package = 14;
  bool has_package() const;
  void clear_package();
  static const int kPackageFieldNumber = 14;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package& _internal_package() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package& package() const;
  ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package* release_package();
  ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package* mutable_package();
  void set_allocated_package(::google::devtools::containeranalysis::v1alpha1::PackageManager_Package* package);

  // .google.devtools.containeranalysis.v1alpha1.Deployable deployable = 17;
  bool has_deployable() const;
  void clear_deployable();
  static const int kDeployableFieldNumber = 17;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::Deployable& _internal_deployable() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::Deployable& deployable() const;
  ::google::devtools::containeranalysis::v1alpha1::Deployable* release_deployable();
  ::google::devtools::containeranalysis::v1alpha1::Deployable* mutable_deployable();
  void set_allocated_deployable(::google::devtools::containeranalysis::v1alpha1::Deployable* deployable);

  // .google.devtools.containeranalysis.v1alpha1.Discovery discovery = 18;
  bool has_discovery() const;
  void clear_discovery();
  static const int kDiscoveryFieldNumber = 18;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::Discovery& _internal_discovery() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::Discovery& discovery() const;
  ::google::devtools::containeranalysis::v1alpha1::Discovery* release_discovery();
  ::google::devtools::containeranalysis::v1alpha1::Discovery* mutable_discovery();
  void set_allocated_discovery(::google::devtools::containeranalysis::v1alpha1::Discovery* discovery);

  // .google.devtools.containeranalysis.v1alpha1.AttestationAuthority attestation_authority = 19;
  bool has_attestation_authority() const;
  void clear_attestation_authority();
  static const int kAttestationAuthorityFieldNumber = 19;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority& _internal_attestation_authority() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority& attestation_authority() const;
  ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority* release_attestation_authority();
  ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority* mutable_attestation_authority();
  void set_allocated_attestation_authority(::google::devtools::containeranalysis::v1alpha1::AttestationAuthority* attestation_authority);

  void clear_note_type();
  NoteTypeCase note_type_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Note)
 private:
  void set_has_vulnerability_type();
  void set_has_build_type();
  void set_has_base_image();
  void set_has_package();
  void set_has_deployable();
  void set_has_discovery();
  void set_has_attestation_authority();

  inline bool has_note_type() const;
  inline void clear_has_note_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl > related_url_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr short_description_;
  ::google::protobuf::internal::ArenaStringPtr long_description_;
  ::google::protobuf::Timestamp* expiration_time_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  int kind_;
  union NoteTypeUnion {
    NoteTypeUnion() {}
    ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType* vulnerability_type_;
    ::google::devtools::containeranalysis::v1alpha1::BuildType* build_type_;
    ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis* base_image_;
    ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package* package_;
    ::google::devtools::containeranalysis::v1alpha1::Deployable* deployable_;
    ::google::devtools::containeranalysis::v1alpha1::Discovery* discovery_;
    ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority* attestation_authority_;
  } note_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Deployable_Deployment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment) */ {
 public:
  Deployable_Deployment();
  virtual ~Deployable_Deployment();

  Deployable_Deployment(const Deployable_Deployment& from);

  inline Deployable_Deployment& operator=(const Deployable_Deployment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Deployable_Deployment(Deployable_Deployment&& from) noexcept
    : Deployable_Deployment() {
    *this = ::std::move(from);
  }

  inline Deployable_Deployment& operator=(Deployable_Deployment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Deployable_Deployment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Deployable_Deployment* internal_default_instance() {
    return reinterpret_cast<const Deployable_Deployment*>(
               &_Deployable_Deployment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Deployable_Deployment* other);
  friend void swap(Deployable_Deployment& a, Deployable_Deployment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Deployable_Deployment* New() const final {
    return CreateMaybeMessage<Deployable_Deployment>(NULL);
  }

  Deployable_Deployment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Deployable_Deployment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Deployable_Deployment& from);
  void MergeFrom(const Deployable_Deployment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deployable_Deployment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Deployable_Deployment_Platform Platform;
  static const Platform PLATFORM_UNSPECIFIED =
    Deployable_Deployment_Platform_PLATFORM_UNSPECIFIED;
  static const Platform GKE =
    Deployable_Deployment_Platform_GKE;
  static const Platform FLEX =
    Deployable_Deployment_Platform_FLEX;
  static const Platform CUSTOM =
    Deployable_Deployment_Platform_CUSTOM;
  static inline bool Platform_IsValid(int value) {
    return Deployable_Deployment_Platform_IsValid(value);
  }
  static const Platform Platform_MIN =
    Deployable_Deployment_Platform_Platform_MIN;
  static const Platform Platform_MAX =
    Deployable_Deployment_Platform_Platform_MAX;
  static const int Platform_ARRAYSIZE =
    Deployable_Deployment_Platform_Platform_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Platform_descriptor() {
    return Deployable_Deployment_Platform_descriptor();
  }
  static inline const ::std::string& Platform_Name(Platform value) {
    return Deployable_Deployment_Platform_Name(value);
  }
  static inline bool Platform_Parse(const ::std::string& name,
      Platform* value) {
    return Deployable_Deployment_Platform_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string resource_uri = 6;
  int resource_uri_size() const;
  void clear_resource_uri();
  static const int kResourceUriFieldNumber = 6;
  const ::std::string& resource_uri(int index) const;
  ::std::string* mutable_resource_uri(int index);
  void set_resource_uri(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_resource_uri(int index, ::std::string&& value);
  #endif
  void set_resource_uri(int index, const char* value);
  void set_resource_uri(int index, const char* value, size_t size);
  ::std::string* add_resource_uri();
  void add_resource_uri(const ::std::string& value);
  #if LANG_CXX11
  void add_resource_uri(::std::string&& value);
  #endif
  void add_resource_uri(const char* value);
  void add_resource_uri(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& resource_uri() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resource_uri();

  // string user_email = 1;
  void clear_user_email();
  static const int kUserEmailFieldNumber = 1;
  const ::std::string& user_email() const;
  void set_user_email(const ::std::string& value);
  #if LANG_CXX11
  void set_user_email(::std::string&& value);
  #endif
  void set_user_email(const char* value);
  void set_user_email(const char* value, size_t size);
  ::std::string* mutable_user_email();
  ::std::string* release_user_email();
  void set_allocated_user_email(::std::string* user_email);

  // string address = 5;
  void clear_address();
  static const int kAddressFieldNumber = 5;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string config = 8;
  void clear_config();
  static const int kConfigFieldNumber = 8;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  #if LANG_CXX11
  void set_config(::std::string&& value);
  #endif
  void set_config(const char* value);
  void set_config(const char* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // .google.protobuf.Timestamp deploy_time = 2;
  bool has_deploy_time() const;
  void clear_deploy_time();
  static const int kDeployTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_deploy_time() const;
  public:
  const ::google::protobuf::Timestamp& deploy_time() const;
  ::google::protobuf::Timestamp* release_deploy_time();
  ::google::protobuf::Timestamp* mutable_deploy_time();
  void set_allocated_deploy_time(::google::protobuf::Timestamp* deploy_time);

  // .google.protobuf.Timestamp undeploy_time = 3;
  bool has_undeploy_time() const;
  void clear_undeploy_time();
  static const int kUndeployTimeFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_undeploy_time() const;
  public:
  const ::google::protobuf::Timestamp& undeploy_time() const;
  ::google::protobuf::Timestamp* release_undeploy_time();
  ::google::protobuf::Timestamp* mutable_undeploy_time();
  void set_allocated_undeploy_time(::google::protobuf::Timestamp* undeploy_time);

  // .google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.Platform platform = 7;
  void clear_platform();
  static const int kPlatformFieldNumber = 7;
  ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment_Platform platform() const;
  void set_platform(::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment_Platform value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resource_uri_;
  ::google::protobuf::internal::ArenaStringPtr user_email_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  ::google::protobuf::Timestamp* deploy_time_;
  ::google::protobuf::Timestamp* undeploy_time_;
  int platform_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Deployable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Deployable) */ {
 public:
  Deployable();
  virtual ~Deployable();

  Deployable(const Deployable& from);

  inline Deployable& operator=(const Deployable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Deployable(Deployable&& from) noexcept
    : Deployable() {
    *this = ::std::move(from);
  }

  inline Deployable& operator=(Deployable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Deployable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Deployable* internal_default_instance() {
    return reinterpret_cast<const Deployable*>(
               &_Deployable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Deployable* other);
  friend void swap(Deployable& a, Deployable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Deployable* New() const final {
    return CreateMaybeMessage<Deployable>(NULL);
  }

  Deployable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Deployable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Deployable& from);
  void MergeFrom(const Deployable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deployable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Deployable_Deployment Deployment;

  // accessors -------------------------------------------------------

  // repeated string resource_uri = 1;
  int resource_uri_size() const;
  void clear_resource_uri();
  static const int kResourceUriFieldNumber = 1;
  const ::std::string& resource_uri(int index) const;
  ::std::string* mutable_resource_uri(int index);
  void set_resource_uri(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_resource_uri(int index, ::std::string&& value);
  #endif
  void set_resource_uri(int index, const char* value);
  void set_resource_uri(int index, const char* value, size_t size);
  ::std::string* add_resource_uri();
  void add_resource_uri(const ::std::string& value);
  #if LANG_CXX11
  void add_resource_uri(::std::string&& value);
  #endif
  void add_resource_uri(const char* value);
  void add_resource_uri(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& resource_uri() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resource_uri();

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Deployable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resource_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Discovery_Discovered : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered) */ {
 public:
  Discovery_Discovered();
  virtual ~Discovery_Discovered();

  Discovery_Discovered(const Discovery_Discovered& from);

  inline Discovery_Discovered& operator=(const Discovery_Discovered& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Discovery_Discovered(Discovery_Discovered&& from) noexcept
    : Discovery_Discovered() {
    *this = ::std::move(from);
  }

  inline Discovery_Discovered& operator=(Discovery_Discovered&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Discovery_Discovered& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Discovery_Discovered* internal_default_instance() {
    return reinterpret_cast<const Discovery_Discovered*>(
               &_Discovery_Discovered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Discovery_Discovered* other);
  friend void swap(Discovery_Discovered& a, Discovery_Discovered& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Discovery_Discovered* New() const final {
    return CreateMaybeMessage<Discovery_Discovered>(NULL);
  }

  Discovery_Discovered* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Discovery_Discovered>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Discovery_Discovered& from);
  void MergeFrom(const Discovery_Discovered& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discovery_Discovered* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Discovery_Discovered_AnalysisStatus AnalysisStatus;
  static const AnalysisStatus ANALYSIS_STATUS_UNSPECIFIED =
    Discovery_Discovered_AnalysisStatus_ANALYSIS_STATUS_UNSPECIFIED;
  static const AnalysisStatus PENDING =
    Discovery_Discovered_AnalysisStatus_PENDING;
  static const AnalysisStatus SCANNING =
    Discovery_Discovered_AnalysisStatus_SCANNING;
  static const AnalysisStatus FINISHED_SUCCESS =
    Discovery_Discovered_AnalysisStatus_FINISHED_SUCCESS;
  static const AnalysisStatus FINISHED_FAILED =
    Discovery_Discovered_AnalysisStatus_FINISHED_FAILED;
  static const AnalysisStatus UNSUPPORTED_RESOURCE =
    Discovery_Discovered_AnalysisStatus_UNSUPPORTED_RESOURCE;
  static inline bool AnalysisStatus_IsValid(int value) {
    return Discovery_Discovered_AnalysisStatus_IsValid(value);
  }
  static const AnalysisStatus AnalysisStatus_MIN =
    Discovery_Discovered_AnalysisStatus_AnalysisStatus_MIN;
  static const AnalysisStatus AnalysisStatus_MAX =
    Discovery_Discovered_AnalysisStatus_AnalysisStatus_MAX;
  static const int AnalysisStatus_ARRAYSIZE =
    Discovery_Discovered_AnalysisStatus_AnalysisStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AnalysisStatus_descriptor() {
    return Discovery_Discovered_AnalysisStatus_descriptor();
  }
  static inline const ::std::string& AnalysisStatus_Name(AnalysisStatus value) {
    return Discovery_Discovered_AnalysisStatus_Name(value);
  }
  static inline bool AnalysisStatus_Parse(const ::std::string& name,
      AnalysisStatus* value) {
    return Discovery_Discovered_AnalysisStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.longrunning.Operation operation = 1;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  private:
  const ::google::longrunning::Operation& _internal_operation() const;
  public:
  const ::google::longrunning::Operation& operation() const;
  ::google::longrunning::Operation* release_operation();
  ::google::longrunning::Operation* mutable_operation();
  void set_allocated_operation(::google::longrunning::Operation* operation);

  // .google.rpc.Status analysis_status_error = 6;
  bool has_analysis_status_error() const;
  void clear_analysis_status_error();
  static const int kAnalysisStatusErrorFieldNumber = 6;
  private:
  const ::google::rpc::Status& _internal_analysis_status_error() const;
  public:
  const ::google::rpc::Status& analysis_status_error() const;
  ::google::rpc::Status* release_analysis_status_error();
  ::google::rpc::Status* mutable_analysis_status_error();
  void set_allocated_analysis_status_error(::google::rpc::Status* analysis_status_error);

  // .google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.AnalysisStatus analysis_status = 5;
  void clear_analysis_status();
  static const int kAnalysisStatusFieldNumber = 5;
  ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered_AnalysisStatus analysis_status() const;
  void set_analysis_status(::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered_AnalysisStatus value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::longrunning::Operation* operation_;
  ::google::rpc::Status* analysis_status_error_;
  int analysis_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Discovery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Discovery) */ {
 public:
  Discovery();
  virtual ~Discovery();

  Discovery(const Discovery& from);

  inline Discovery& operator=(const Discovery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Discovery(Discovery&& from) noexcept
    : Discovery() {
    *this = ::std::move(from);
  }

  inline Discovery& operator=(Discovery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Discovery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Discovery* internal_default_instance() {
    return reinterpret_cast<const Discovery*>(
               &_Discovery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Discovery* other);
  friend void swap(Discovery& a, Discovery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Discovery* New() const final {
    return CreateMaybeMessage<Discovery>(NULL);
  }

  Discovery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Discovery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Discovery& from);
  void MergeFrom(const Discovery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discovery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Discovery_Discovered Discovered;

  // accessors -------------------------------------------------------

  // .google.devtools.containeranalysis.v1alpha1.Note.Kind analysis_kind = 1;
  void clear_analysis_kind();
  static const int kAnalysisKindFieldNumber = 1;
  ::google::devtools::containeranalysis::v1alpha1::Note_Kind analysis_kind() const;
  void set_analysis_kind(::google::devtools::containeranalysis::v1alpha1::Note_Kind value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Discovery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int analysis_kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BuildType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.BuildType) */ {
 public:
  BuildType();
  virtual ~BuildType();

  BuildType(const BuildType& from);

  inline BuildType& operator=(const BuildType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuildType(BuildType&& from) noexcept
    : BuildType() {
    *this = ::std::move(from);
  }

  inline BuildType& operator=(BuildType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildType* internal_default_instance() {
    return reinterpret_cast<const BuildType*>(
               &_BuildType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(BuildType* other);
  friend void swap(BuildType& a, BuildType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuildType* New() const final {
    return CreateMaybeMessage<BuildType>(NULL);
  }

  BuildType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuildType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuildType& from);
  void MergeFrom(const BuildType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string builder_version = 1;
  void clear_builder_version();
  static const int kBuilderVersionFieldNumber = 1;
  const ::std::string& builder_version() const;
  void set_builder_version(const ::std::string& value);
  #if LANG_CXX11
  void set_builder_version(::std::string&& value);
  #endif
  void set_builder_version(const char* value);
  void set_builder_version(const char* value, size_t size);
  ::std::string* mutable_builder_version();
  ::std::string* release_builder_version();
  void set_allocated_builder_version(::std::string* builder_version);

  // .google.devtools.containeranalysis.v1alpha1.BuildSignature signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::BuildSignature& _internal_signature() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::BuildSignature& signature() const;
  ::google::devtools::containeranalysis::v1alpha1::BuildSignature* release_signature();
  ::google::devtools::containeranalysis::v1alpha1::BuildSignature* mutable_signature();
  void set_allocated_signature(::google::devtools::containeranalysis::v1alpha1::BuildSignature* signature);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.BuildType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr builder_version_;
  ::google::devtools::containeranalysis::v1alpha1::BuildSignature* signature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BuildSignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.BuildSignature) */ {
 public:
  BuildSignature();
  virtual ~BuildSignature();

  BuildSignature(const BuildSignature& from);

  inline BuildSignature& operator=(const BuildSignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuildSignature(BuildSignature&& from) noexcept
    : BuildSignature() {
    *this = ::std::move(from);
  }

  inline BuildSignature& operator=(BuildSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildSignature* internal_default_instance() {
    return reinterpret_cast<const BuildSignature*>(
               &_BuildSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(BuildSignature* other);
  friend void swap(BuildSignature& a, BuildSignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuildSignature* New() const final {
    return CreateMaybeMessage<BuildSignature>(NULL);
  }

  BuildSignature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuildSignature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuildSignature& from);
  void MergeFrom(const BuildSignature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BuildSignature_KeyType KeyType;
  static const KeyType KEY_TYPE_UNSPECIFIED =
    BuildSignature_KeyType_KEY_TYPE_UNSPECIFIED;
  static const KeyType PGP_ASCII_ARMORED =
    BuildSignature_KeyType_PGP_ASCII_ARMORED;
  static const KeyType PKIX_PEM =
    BuildSignature_KeyType_PKIX_PEM;
  static inline bool KeyType_IsValid(int value) {
    return BuildSignature_KeyType_IsValid(value);
  }
  static const KeyType KeyType_MIN =
    BuildSignature_KeyType_KeyType_MIN;
  static const KeyType KeyType_MAX =
    BuildSignature_KeyType_KeyType_MAX;
  static const int KeyType_ARRAYSIZE =
    BuildSignature_KeyType_KeyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  KeyType_descriptor() {
    return BuildSignature_KeyType_descriptor();
  }
  static inline const ::std::string& KeyType_Name(KeyType value) {
    return BuildSignature_KeyType_Name(value);
  }
  static inline bool KeyType_Parse(const ::std::string& name,
      KeyType* value) {
    return BuildSignature_KeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // string signature = 2;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // string key_id = 3;
  void clear_key_id();
  static const int kKeyIdFieldNumber = 3;
  const ::std::string& key_id() const;
  void set_key_id(const ::std::string& value);
  #if LANG_CXX11
  void set_key_id(::std::string&& value);
  #endif
  void set_key_id(const char* value);
  void set_key_id(const char* value, size_t size);
  ::std::string* mutable_key_id();
  ::std::string* release_key_id();
  void set_allocated_key_id(::std::string* key_id);

  // .google.devtools.containeranalysis.v1alpha1.BuildSignature.KeyType key_type = 4;
  void clear_key_type();
  static const int kKeyTypeFieldNumber = 4;
  ::google::devtools::containeranalysis::v1alpha1::BuildSignature_KeyType key_type() const;
  void set_key_type(::google::devtools::containeranalysis::v1alpha1::BuildSignature_KeyType value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.BuildSignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr key_id_;
  int key_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PgpSignedAttestation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation) */ {
 public:
  PgpSignedAttestation();
  virtual ~PgpSignedAttestation();

  PgpSignedAttestation(const PgpSignedAttestation& from);

  inline PgpSignedAttestation& operator=(const PgpSignedAttestation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PgpSignedAttestation(PgpSignedAttestation&& from) noexcept
    : PgpSignedAttestation() {
    *this = ::std::move(from);
  }

  inline PgpSignedAttestation& operator=(PgpSignedAttestation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PgpSignedAttestation& default_instance();

  enum KeyIdCase {
    kPgpKeyId = 2,
    KEY_ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PgpSignedAttestation* internal_default_instance() {
    return reinterpret_cast<const PgpSignedAttestation*>(
               &_PgpSignedAttestation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(PgpSignedAttestation* other);
  friend void swap(PgpSignedAttestation& a, PgpSignedAttestation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PgpSignedAttestation* New() const final {
    return CreateMaybeMessage<PgpSignedAttestation>(NULL);
  }

  PgpSignedAttestation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PgpSignedAttestation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PgpSignedAttestation& from);
  void MergeFrom(const PgpSignedAttestation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PgpSignedAttestation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PgpSignedAttestation_ContentType ContentType;
  static const ContentType CONTENT_TYPE_UNSPECIFIED =
    PgpSignedAttestation_ContentType_CONTENT_TYPE_UNSPECIFIED;
  static const ContentType SIMPLE_SIGNING_JSON =
    PgpSignedAttestation_ContentType_SIMPLE_SIGNING_JSON;
  static inline bool ContentType_IsValid(int value) {
    return PgpSignedAttestation_ContentType_IsValid(value);
  }
  static const ContentType ContentType_MIN =
    PgpSignedAttestation_ContentType_ContentType_MIN;
  static const ContentType ContentType_MAX =
    PgpSignedAttestation_ContentType_ContentType_MAX;
  static const int ContentType_ARRAYSIZE =
    PgpSignedAttestation_ContentType_ContentType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContentType_descriptor() {
    return PgpSignedAttestation_ContentType_descriptor();
  }
  static inline const ::std::string& ContentType_Name(ContentType value) {
    return PgpSignedAttestation_ContentType_Name(value);
  }
  static inline bool ContentType_Parse(const ::std::string& name,
      ContentType* value) {
    return PgpSignedAttestation_ContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // .google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.ContentType content_type = 3;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 3;
  ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation_ContentType content_type() const;
  void set_content_type(::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation_ContentType value);

  // string pgp_key_id = 2;
  private:
  bool has_pgp_key_id() const;
  public:
  void clear_pgp_key_id();
  static const int kPgpKeyIdFieldNumber = 2;
  const ::std::string& pgp_key_id() const;
  void set_pgp_key_id(const ::std::string& value);
  #if LANG_CXX11
  void set_pgp_key_id(::std::string&& value);
  #endif
  void set_pgp_key_id(const char* value);
  void set_pgp_key_id(const char* value, size_t size);
  ::std::string* mutable_pgp_key_id();
  ::std::string* release_pgp_key_id();
  void set_allocated_pgp_key_id(::std::string* pgp_key_id);

  void clear_key_id();
  KeyIdCase key_id_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation)
 private:
  void set_has_pgp_key_id();

  inline bool has_key_id() const;
  inline void clear_has_key_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  int content_type_;
  union KeyIdUnion {
    KeyIdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr pgp_key_id_;
  } key_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttestationAuthority_AttestationAuthorityHint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint) */ {
 public:
  AttestationAuthority_AttestationAuthorityHint();
  virtual ~AttestationAuthority_AttestationAuthorityHint();

  AttestationAuthority_AttestationAuthorityHint(const AttestationAuthority_AttestationAuthorityHint& from);

  inline AttestationAuthority_AttestationAuthorityHint& operator=(const AttestationAuthority_AttestationAuthorityHint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttestationAuthority_AttestationAuthorityHint(AttestationAuthority_AttestationAuthorityHint&& from) noexcept
    : AttestationAuthority_AttestationAuthorityHint() {
    *this = ::std::move(from);
  }

  inline AttestationAuthority_AttestationAuthorityHint& operator=(AttestationAuthority_AttestationAuthorityHint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttestationAuthority_AttestationAuthorityHint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttestationAuthority_AttestationAuthorityHint* internal_default_instance() {
    return reinterpret_cast<const AttestationAuthority_AttestationAuthorityHint*>(
               &_AttestationAuthority_AttestationAuthorityHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(AttestationAuthority_AttestationAuthorityHint* other);
  friend void swap(AttestationAuthority_AttestationAuthorityHint& a, AttestationAuthority_AttestationAuthorityHint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttestationAuthority_AttestationAuthorityHint* New() const final {
    return CreateMaybeMessage<AttestationAuthority_AttestationAuthorityHint>(NULL);
  }

  AttestationAuthority_AttestationAuthorityHint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttestationAuthority_AttestationAuthorityHint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttestationAuthority_AttestationAuthorityHint& from);
  void MergeFrom(const AttestationAuthority_AttestationAuthorityHint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttestationAuthority_AttestationAuthorityHint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string human_readable_name = 1;
  void clear_human_readable_name();
  static const int kHumanReadableNameFieldNumber = 1;
  const ::std::string& human_readable_name() const;
  void set_human_readable_name(const ::std::string& value);
  #if LANG_CXX11
  void set_human_readable_name(::std::string&& value);
  #endif
  void set_human_readable_name(const char* value);
  void set_human_readable_name(const char* value, size_t size);
  ::std::string* mutable_human_readable_name();
  ::std::string* release_human_readable_name();
  void set_allocated_human_readable_name(::std::string* human_readable_name);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr human_readable_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttestationAuthority_Attestation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.Attestation) */ {
 public:
  AttestationAuthority_Attestation();
  virtual ~AttestationAuthority_Attestation();

  AttestationAuthority_Attestation(const AttestationAuthority_Attestation& from);

  inline AttestationAuthority_Attestation& operator=(const AttestationAuthority_Attestation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttestationAuthority_Attestation(AttestationAuthority_Attestation&& from) noexcept
    : AttestationAuthority_Attestation() {
    *this = ::std::move(from);
  }

  inline AttestationAuthority_Attestation& operator=(AttestationAuthority_Attestation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttestationAuthority_Attestation& default_instance();

  enum SignatureCase {
    kPgpSignedAttestation = 1,
    SIGNATURE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttestationAuthority_Attestation* internal_default_instance() {
    return reinterpret_cast<const AttestationAuthority_Attestation*>(
               &_AttestationAuthority_Attestation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(AttestationAuthority_Attestation* other);
  friend void swap(AttestationAuthority_Attestation& a, AttestationAuthority_Attestation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttestationAuthority_Attestation* New() const final {
    return CreateMaybeMessage<AttestationAuthority_Attestation>(NULL);
  }

  AttestationAuthority_Attestation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttestationAuthority_Attestation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttestationAuthority_Attestation& from);
  void MergeFrom(const AttestationAuthority_Attestation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttestationAuthority_Attestation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation pgp_signed_attestation = 1;
  bool has_pgp_signed_attestation() const;
  void clear_pgp_signed_attestation();
  static const int kPgpSignedAttestationFieldNumber = 1;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation& _internal_pgp_signed_attestation() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation& pgp_signed_attestation() const;
  ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation* release_pgp_signed_attestation();
  ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation* mutable_pgp_signed_attestation();
  void set_allocated_pgp_signed_attestation(::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation* pgp_signed_attestation);

  void clear_signature();
  SignatureCase signature_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.Attestation)
 private:
  void set_has_pgp_signed_attestation();

  inline bool has_signature() const;
  inline void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union SignatureUnion {
    SignatureUnion() {}
    ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation* pgp_signed_attestation_;
  } signature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttestationAuthority : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.AttestationAuthority) */ {
 public:
  AttestationAuthority();
  virtual ~AttestationAuthority();

  AttestationAuthority(const AttestationAuthority& from);

  inline AttestationAuthority& operator=(const AttestationAuthority& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttestationAuthority(AttestationAuthority&& from) noexcept
    : AttestationAuthority() {
    *this = ::std::move(from);
  }

  inline AttestationAuthority& operator=(AttestationAuthority&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttestationAuthority& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttestationAuthority* internal_default_instance() {
    return reinterpret_cast<const AttestationAuthority*>(
               &_AttestationAuthority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(AttestationAuthority* other);
  friend void swap(AttestationAuthority& a, AttestationAuthority& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttestationAuthority* New() const final {
    return CreateMaybeMessage<AttestationAuthority>(NULL);
  }

  AttestationAuthority* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttestationAuthority>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttestationAuthority& from);
  void MergeFrom(const AttestationAuthority& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttestationAuthority* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AttestationAuthority_AttestationAuthorityHint AttestationAuthorityHint;
  typedef AttestationAuthority_Attestation Attestation;

  // accessors -------------------------------------------------------

  // .google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint hint = 1;
  bool has_hint() const;
  void clear_hint();
  static const int kHintFieldNumber = 1;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint& _internal_hint() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint& hint() const;
  ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint* release_hint();
  ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint* mutable_hint();
  void set_allocated_hint(::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint* hint);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.AttestationAuthority)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint* hint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BuildDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.BuildDetails) */ {
 public:
  BuildDetails();
  virtual ~BuildDetails();

  BuildDetails(const BuildDetails& from);

  inline BuildDetails& operator=(const BuildDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuildDetails(BuildDetails&& from) noexcept
    : BuildDetails() {
    *this = ::std::move(from);
  }

  inline BuildDetails& operator=(BuildDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildDetails* internal_default_instance() {
    return reinterpret_cast<const BuildDetails*>(
               &_BuildDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(BuildDetails* other);
  friend void swap(BuildDetails& a, BuildDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuildDetails* New() const final {
    return CreateMaybeMessage<BuildDetails>(NULL);
  }

  BuildDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuildDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuildDetails& from);
  void MergeFrom(const BuildDetails& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string provenance_bytes = 2;
  void clear_provenance_bytes();
  static const int kProvenanceBytesFieldNumber = 2;
  const ::std::string& provenance_bytes() const;
  void set_provenance_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_provenance_bytes(::std::string&& value);
  #endif
  void set_provenance_bytes(const char* value);
  void set_provenance_bytes(const char* value, size_t size);
  ::std::string* mutable_provenance_bytes();
  ::std::string* release_provenance_bytes();
  void set_allocated_provenance_bytes(::std::string* provenance_bytes);

  // .google.devtools.containeranalysis.v1alpha1.BuildProvenance provenance = 1;
  bool has_provenance() const;
  void clear_provenance();
  static const int kProvenanceFieldNumber = 1;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::BuildProvenance& _internal_provenance() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::BuildProvenance& provenance() const;
  ::google::devtools::containeranalysis::v1alpha1::BuildProvenance* release_provenance();
  ::google::devtools::containeranalysis::v1alpha1::BuildProvenance* mutable_provenance();
  void set_allocated_provenance(::google::devtools::containeranalysis::v1alpha1::BuildProvenance* provenance);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.BuildDetails)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr provenance_bytes_;
  ::google::devtools::containeranalysis::v1alpha1::BuildProvenance* provenance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScanConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.ScanConfig) */ {
 public:
  ScanConfig();
  virtual ~ScanConfig();

  ScanConfig(const ScanConfig& from);

  inline ScanConfig& operator=(const ScanConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanConfig(ScanConfig&& from) noexcept
    : ScanConfig() {
    *this = ::std::move(from);
  }

  inline ScanConfig& operator=(ScanConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanConfig* internal_default_instance() {
    return reinterpret_cast<const ScanConfig*>(
               &_ScanConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ScanConfig* other);
  friend void swap(ScanConfig& a, ScanConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanConfig* New() const final {
    return CreateMaybeMessage<ScanConfig>(NULL);
  }

  ScanConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScanConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScanConfig& from);
  void MergeFrom(const ScanConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // bool enabled = 3;
  void clear_enabled();
  static const int kEnabledFieldNumber = 3;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.ScanConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOccurrenceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.GetOccurrenceRequest) */ {
 public:
  GetOccurrenceRequest();
  virtual ~GetOccurrenceRequest();

  GetOccurrenceRequest(const GetOccurrenceRequest& from);

  inline GetOccurrenceRequest& operator=(const GetOccurrenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOccurrenceRequest(GetOccurrenceRequest&& from) noexcept
    : GetOccurrenceRequest() {
    *this = ::std::move(from);
  }

  inline GetOccurrenceRequest& operator=(GetOccurrenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOccurrenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOccurrenceRequest* internal_default_instance() {
    return reinterpret_cast<const GetOccurrenceRequest*>(
               &_GetOccurrenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(GetOccurrenceRequest* other);
  friend void swap(GetOccurrenceRequest& a, GetOccurrenceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOccurrenceRequest* New() const final {
    return CreateMaybeMessage<GetOccurrenceRequest>(NULL);
  }

  GetOccurrenceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetOccurrenceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetOccurrenceRequest& from);
  void MergeFrom(const GetOccurrenceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOccurrenceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.GetOccurrenceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListOccurrencesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest) */ {
 public:
  ListOccurrencesRequest();
  virtual ~ListOccurrencesRequest();

  ListOccurrencesRequest(const ListOccurrencesRequest& from);

  inline ListOccurrencesRequest& operator=(const ListOccurrencesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOccurrencesRequest(ListOccurrencesRequest&& from) noexcept
    : ListOccurrencesRequest() {
    *this = ::std::move(from);
  }

  inline ListOccurrencesRequest& operator=(ListOccurrencesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListOccurrencesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOccurrencesRequest* internal_default_instance() {
    return reinterpret_cast<const ListOccurrencesRequest*>(
               &_ListOccurrencesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ListOccurrencesRequest* other);
  friend void swap(ListOccurrencesRequest& a, ListOccurrencesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOccurrencesRequest* New() const final {
    return CreateMaybeMessage<ListOccurrencesRequest>(NULL);
  }

  ListOccurrencesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListOccurrencesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListOccurrencesRequest& from);
  void MergeFrom(const ListOccurrencesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOccurrencesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string parent = 5;
  void clear_parent();
  static const int kParentFieldNumber = 5;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // .google.devtools.containeranalysis.v1alpha1.Note.Kind kind = 6;
  void clear_kind();
  static const int kKindFieldNumber = 6;
  ::google::devtools::containeranalysis::v1alpha1::Note_Kind kind() const;
  void set_kind(::google::devtools::containeranalysis::v1alpha1::Note_Kind value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::int32 page_size_;
  int kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListOccurrencesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse) */ {
 public:
  ListOccurrencesResponse();
  virtual ~ListOccurrencesResponse();

  ListOccurrencesResponse(const ListOccurrencesResponse& from);

  inline ListOccurrencesResponse& operator=(const ListOccurrencesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOccurrencesResponse(ListOccurrencesResponse&& from) noexcept
    : ListOccurrencesResponse() {
    *this = ::std::move(from);
  }

  inline ListOccurrencesResponse& operator=(ListOccurrencesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListOccurrencesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOccurrencesResponse* internal_default_instance() {
    return reinterpret_cast<const ListOccurrencesResponse*>(
               &_ListOccurrencesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ListOccurrencesResponse* other);
  friend void swap(ListOccurrencesResponse& a, ListOccurrencesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOccurrencesResponse* New() const final {
    return CreateMaybeMessage<ListOccurrencesResponse>(NULL);
  }

  ListOccurrencesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListOccurrencesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListOccurrencesResponse& from);
  void MergeFrom(const ListOccurrencesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOccurrencesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.containeranalysis.v1alpha1.Occurrence occurrences = 1;
  int occurrences_size() const;
  void clear_occurrences();
  static const int kOccurrencesFieldNumber = 1;
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* mutable_occurrences(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Occurrence >*
      mutable_occurrences();
  const ::google::devtools::containeranalysis::v1alpha1::Occurrence& occurrences(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* add_occurrences();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Occurrence >&
      occurrences() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Occurrence > occurrences_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteOccurrenceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.DeleteOccurrenceRequest) */ {
 public:
  DeleteOccurrenceRequest();
  virtual ~DeleteOccurrenceRequest();

  DeleteOccurrenceRequest(const DeleteOccurrenceRequest& from);

  inline DeleteOccurrenceRequest& operator=(const DeleteOccurrenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteOccurrenceRequest(DeleteOccurrenceRequest&& from) noexcept
    : DeleteOccurrenceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteOccurrenceRequest& operator=(DeleteOccurrenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteOccurrenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOccurrenceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteOccurrenceRequest*>(
               &_DeleteOccurrenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(DeleteOccurrenceRequest* other);
  friend void swap(DeleteOccurrenceRequest& a, DeleteOccurrenceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteOccurrenceRequest* New() const final {
    return CreateMaybeMessage<DeleteOccurrenceRequest>(NULL);
  }

  DeleteOccurrenceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOccurrenceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteOccurrenceRequest& from);
  void MergeFrom(const DeleteOccurrenceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOccurrenceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.DeleteOccurrenceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateOccurrenceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest) */ {
 public:
  CreateOccurrenceRequest();
  virtual ~CreateOccurrenceRequest();

  CreateOccurrenceRequest(const CreateOccurrenceRequest& from);

  inline CreateOccurrenceRequest& operator=(const CreateOccurrenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateOccurrenceRequest(CreateOccurrenceRequest&& from) noexcept
    : CreateOccurrenceRequest() {
    *this = ::std::move(from);
  }

  inline CreateOccurrenceRequest& operator=(CreateOccurrenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOccurrenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOccurrenceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOccurrenceRequest*>(
               &_CreateOccurrenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CreateOccurrenceRequest* other);
  friend void swap(CreateOccurrenceRequest& a, CreateOccurrenceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateOccurrenceRequest* New() const final {
    return CreateMaybeMessage<CreateOccurrenceRequest>(NULL);
  }

  CreateOccurrenceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateOccurrenceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateOccurrenceRequest& from);
  void MergeFrom(const CreateOccurrenceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOccurrenceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string parent = 3;
  void clear_parent();
  static const int kParentFieldNumber = 3;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.devtools.containeranalysis.v1alpha1.Occurrence occurrence = 2;
  bool has_occurrence() const;
  void clear_occurrence();
  static const int kOccurrenceFieldNumber = 2;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::Occurrence& _internal_occurrence() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::Occurrence& occurrence() const;
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* release_occurrence();
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* mutable_occurrence();
  void set_allocated_occurrence(::google::devtools::containeranalysis::v1alpha1::Occurrence* occurrence);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* occurrence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateOccurrenceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest) */ {
 public:
  UpdateOccurrenceRequest();
  virtual ~UpdateOccurrenceRequest();

  UpdateOccurrenceRequest(const UpdateOccurrenceRequest& from);

  inline UpdateOccurrenceRequest& operator=(const UpdateOccurrenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateOccurrenceRequest(UpdateOccurrenceRequest&& from) noexcept
    : UpdateOccurrenceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOccurrenceRequest& operator=(UpdateOccurrenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateOccurrenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOccurrenceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOccurrenceRequest*>(
               &_UpdateOccurrenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(UpdateOccurrenceRequest* other);
  friend void swap(UpdateOccurrenceRequest& a, UpdateOccurrenceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateOccurrenceRequest* New() const final {
    return CreateMaybeMessage<UpdateOccurrenceRequest>(NULL);
  }

  UpdateOccurrenceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOccurrenceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateOccurrenceRequest& from);
  void MergeFrom(const UpdateOccurrenceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOccurrenceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.devtools.containeranalysis.v1alpha1.Occurrence occurrence = 2;
  bool has_occurrence() const;
  void clear_occurrence();
  static const int kOccurrenceFieldNumber = 2;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::Occurrence& _internal_occurrence() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::Occurrence& occurrence() const;
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* release_occurrence();
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* mutable_occurrence();
  void set_allocated_occurrence(::google::devtools::containeranalysis::v1alpha1::Occurrence* occurrence);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* occurrence_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.GetNoteRequest) */ {
 public:
  GetNoteRequest();
  virtual ~GetNoteRequest();

  GetNoteRequest(const GetNoteRequest& from);

  inline GetNoteRequest& operator=(const GetNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNoteRequest(GetNoteRequest&& from) noexcept
    : GetNoteRequest() {
    *this = ::std::move(from);
  }

  inline GetNoteRequest& operator=(GetNoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNoteRequest* internal_default_instance() {
    return reinterpret_cast<const GetNoteRequest*>(
               &_GetNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(GetNoteRequest* other);
  friend void swap(GetNoteRequest& a, GetNoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNoteRequest* New() const final {
    return CreateMaybeMessage<GetNoteRequest>(NULL);
  }

  GetNoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNoteRequest& from);
  void MergeFrom(const GetNoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.GetNoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOccurrenceNoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.GetOccurrenceNoteRequest) */ {
 public:
  GetOccurrenceNoteRequest();
  virtual ~GetOccurrenceNoteRequest();

  GetOccurrenceNoteRequest(const GetOccurrenceNoteRequest& from);

  inline GetOccurrenceNoteRequest& operator=(const GetOccurrenceNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOccurrenceNoteRequest(GetOccurrenceNoteRequest&& from) noexcept
    : GetOccurrenceNoteRequest() {
    *this = ::std::move(from);
  }

  inline GetOccurrenceNoteRequest& operator=(GetOccurrenceNoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOccurrenceNoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOccurrenceNoteRequest* internal_default_instance() {
    return reinterpret_cast<const GetOccurrenceNoteRequest*>(
               &_GetOccurrenceNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(GetOccurrenceNoteRequest* other);
  friend void swap(GetOccurrenceNoteRequest& a, GetOccurrenceNoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOccurrenceNoteRequest* New() const final {
    return CreateMaybeMessage<GetOccurrenceNoteRequest>(NULL);
  }

  GetOccurrenceNoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetOccurrenceNoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetOccurrenceNoteRequest& from);
  void MergeFrom(const GetOccurrenceNoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOccurrenceNoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.GetOccurrenceNoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNotesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.ListNotesRequest) */ {
 public:
  ListNotesRequest();
  virtual ~ListNotesRequest();

  ListNotesRequest(const ListNotesRequest& from);

  inline ListNotesRequest& operator=(const ListNotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNotesRequest(ListNotesRequest&& from) noexcept
    : ListNotesRequest() {
    *this = ::std::move(from);
  }

  inline ListNotesRequest& operator=(ListNotesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNotesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNotesRequest* internal_default_instance() {
    return reinterpret_cast<const ListNotesRequest*>(
               &_ListNotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ListNotesRequest* other);
  friend void swap(ListNotesRequest& a, ListNotesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNotesRequest* New() const final {
    return CreateMaybeMessage<ListNotesRequest>(NULL);
  }

  ListNotesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNotesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNotesRequest& from);
  void MergeFrom(const ListNotesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string parent = 5;
  void clear_parent();
  static const int kParentFieldNumber = 5;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.ListNotesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNotesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.ListNotesResponse) */ {
 public:
  ListNotesResponse();
  virtual ~ListNotesResponse();

  ListNotesResponse(const ListNotesResponse& from);

  inline ListNotesResponse& operator=(const ListNotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNotesResponse(ListNotesResponse&& from) noexcept
    : ListNotesResponse() {
    *this = ::std::move(from);
  }

  inline ListNotesResponse& operator=(ListNotesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNotesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNotesResponse* internal_default_instance() {
    return reinterpret_cast<const ListNotesResponse*>(
               &_ListNotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ListNotesResponse* other);
  friend void swap(ListNotesResponse& a, ListNotesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNotesResponse* New() const final {
    return CreateMaybeMessage<ListNotesResponse>(NULL);
  }

  ListNotesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNotesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNotesResponse& from);
  void MergeFrom(const ListNotesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.containeranalysis.v1alpha1.Note notes = 1;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 1;
  ::google::devtools::containeranalysis::v1alpha1::Note* mutable_notes(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Note >*
      mutable_notes();
  const ::google::devtools::containeranalysis::v1alpha1::Note& notes(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::Note* add_notes();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Note >&
      notes() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.ListNotesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Note > notes_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteNoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.DeleteNoteRequest) */ {
 public:
  DeleteNoteRequest();
  virtual ~DeleteNoteRequest();

  DeleteNoteRequest(const DeleteNoteRequest& from);

  inline DeleteNoteRequest& operator=(const DeleteNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteNoteRequest(DeleteNoteRequest&& from) noexcept
    : DeleteNoteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNoteRequest& operator=(DeleteNoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteNoteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNoteRequest*>(
               &_DeleteNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(DeleteNoteRequest* other);
  friend void swap(DeleteNoteRequest& a, DeleteNoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteNoteRequest* New() const final {
    return CreateMaybeMessage<DeleteNoteRequest>(NULL);
  }

  DeleteNoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteNoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteNoteRequest& from);
  void MergeFrom(const DeleteNoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.DeleteNoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateNoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest) */ {
 public:
  CreateNoteRequest();
  virtual ~CreateNoteRequest();

  CreateNoteRequest(const CreateNoteRequest& from);

  inline CreateNoteRequest& operator=(const CreateNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateNoteRequest(CreateNoteRequest&& from) noexcept
    : CreateNoteRequest() {
    *this = ::std::move(from);
  }

  inline CreateNoteRequest& operator=(CreateNoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateNoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateNoteRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNoteRequest*>(
               &_CreateNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CreateNoteRequest* other);
  friend void swap(CreateNoteRequest& a, CreateNoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateNoteRequest* New() const final {
    return CreateMaybeMessage<CreateNoteRequest>(NULL);
  }

  CreateNoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateNoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateNoteRequest& from);
  void MergeFrom(const CreateNoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string note_id = 2;
  void clear_note_id();
  static const int kNoteIdFieldNumber = 2;
  const ::std::string& note_id() const;
  void set_note_id(const ::std::string& value);
  #if LANG_CXX11
  void set_note_id(::std::string&& value);
  #endif
  void set_note_id(const char* value);
  void set_note_id(const char* value, size_t size);
  ::std::string* mutable_note_id();
  ::std::string* release_note_id();
  void set_allocated_note_id(::std::string* note_id);

  // string parent = 4;
  void clear_parent();
  static const int kParentFieldNumber = 4;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.devtools.containeranalysis.v1alpha1.Note note = 3;
  bool has_note() const;
  void clear_note();
  static const int kNoteFieldNumber = 3;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::Note& _internal_note() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::Note& note() const;
  ::google::devtools::containeranalysis::v1alpha1::Note* release_note();
  ::google::devtools::containeranalysis::v1alpha1::Note* mutable_note();
  void set_allocated_note(::google::devtools::containeranalysis::v1alpha1::Note* note);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr note_id_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::devtools::containeranalysis::v1alpha1::Note* note_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateNoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest) */ {
 public:
  UpdateNoteRequest();
  virtual ~UpdateNoteRequest();

  UpdateNoteRequest(const UpdateNoteRequest& from);

  inline UpdateNoteRequest& operator=(const UpdateNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateNoteRequest(UpdateNoteRequest&& from) noexcept
    : UpdateNoteRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNoteRequest& operator=(UpdateNoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateNoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateNoteRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNoteRequest*>(
               &_UpdateNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(UpdateNoteRequest* other);
  friend void swap(UpdateNoteRequest& a, UpdateNoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateNoteRequest* New() const final {
    return CreateMaybeMessage<UpdateNoteRequest>(NULL);
  }

  UpdateNoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateNoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateNoteRequest& from);
  void MergeFrom(const UpdateNoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.devtools.containeranalysis.v1alpha1.Note note = 2;
  bool has_note() const;
  void clear_note();
  static const int kNoteFieldNumber = 2;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::Note& _internal_note() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::Note& note() const;
  ::google::devtools::containeranalysis::v1alpha1::Note* release_note();
  ::google::devtools::containeranalysis::v1alpha1::Note* mutable_note();
  void set_allocated_note(::google::devtools::containeranalysis::v1alpha1::Note* note);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::devtools::containeranalysis::v1alpha1::Note* note_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNoteOccurrencesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest) */ {
 public:
  ListNoteOccurrencesRequest();
  virtual ~ListNoteOccurrencesRequest();

  ListNoteOccurrencesRequest(const ListNoteOccurrencesRequest& from);

  inline ListNoteOccurrencesRequest& operator=(const ListNoteOccurrencesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNoteOccurrencesRequest(ListNoteOccurrencesRequest&& from) noexcept
    : ListNoteOccurrencesRequest() {
    *this = ::std::move(from);
  }

  inline ListNoteOccurrencesRequest& operator=(ListNoteOccurrencesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNoteOccurrencesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNoteOccurrencesRequest* internal_default_instance() {
    return reinterpret_cast<const ListNoteOccurrencesRequest*>(
               &_ListNoteOccurrencesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(ListNoteOccurrencesRequest* other);
  friend void swap(ListNoteOccurrencesRequest& a, ListNoteOccurrencesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNoteOccurrencesRequest* New() const final {
    return CreateMaybeMessage<ListNoteOccurrencesRequest>(NULL);
  }

  ListNoteOccurrencesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNoteOccurrencesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNoteOccurrencesRequest& from);
  void MergeFrom(const ListNoteOccurrencesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNoteOccurrencesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNoteOccurrencesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse) */ {
 public:
  ListNoteOccurrencesResponse();
  virtual ~ListNoteOccurrencesResponse();

  ListNoteOccurrencesResponse(const ListNoteOccurrencesResponse& from);

  inline ListNoteOccurrencesResponse& operator=(const ListNoteOccurrencesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNoteOccurrencesResponse(ListNoteOccurrencesResponse&& from) noexcept
    : ListNoteOccurrencesResponse() {
    *this = ::std::move(from);
  }

  inline ListNoteOccurrencesResponse& operator=(ListNoteOccurrencesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNoteOccurrencesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNoteOccurrencesResponse* internal_default_instance() {
    return reinterpret_cast<const ListNoteOccurrencesResponse*>(
               &_ListNoteOccurrencesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(ListNoteOccurrencesResponse* other);
  friend void swap(ListNoteOccurrencesResponse& a, ListNoteOccurrencesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNoteOccurrencesResponse* New() const final {
    return CreateMaybeMessage<ListNoteOccurrencesResponse>(NULL);
  }

  ListNoteOccurrencesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNoteOccurrencesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNoteOccurrencesResponse& from);
  void MergeFrom(const ListNoteOccurrencesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNoteOccurrencesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.containeranalysis.v1alpha1.Occurrence occurrences = 1;
  int occurrences_size() const;
  void clear_occurrences();
  static const int kOccurrencesFieldNumber = 1;
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* mutable_occurrences(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Occurrence >*
      mutable_occurrences();
  const ::google::devtools::containeranalysis::v1alpha1::Occurrence& occurrences(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* add_occurrences();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Occurrence >&
      occurrences() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Occurrence > occurrences_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateOperationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest) */ {
 public:
  CreateOperationRequest();
  virtual ~CreateOperationRequest();

  CreateOperationRequest(const CreateOperationRequest& from);

  inline CreateOperationRequest& operator=(const CreateOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateOperationRequest(CreateOperationRequest&& from) noexcept
    : CreateOperationRequest() {
    *this = ::std::move(from);
  }

  inline CreateOperationRequest& operator=(CreateOperationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOperationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOperationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOperationRequest*>(
               &_CreateOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(CreateOperationRequest* other);
  friend void swap(CreateOperationRequest& a, CreateOperationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateOperationRequest* New() const final {
    return CreateMaybeMessage<CreateOperationRequest>(NULL);
  }

  CreateOperationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateOperationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateOperationRequest& from);
  void MergeFrom(const CreateOperationRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOperationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string operation_id = 2;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 2;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_operation_id(::std::string&& value);
  #endif
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);

  // .google.longrunning.Operation operation = 3;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 3;
  private:
  const ::google::longrunning::Operation& _internal_operation() const;
  public:
  const ::google::longrunning::Operation& operation() const;
  ::google::longrunning::Operation* release_operation();
  ::google::longrunning::Operation* mutable_operation();
  void set_allocated_operation(::google::longrunning::Operation* operation);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  ::google::longrunning::Operation* operation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateOperationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest) */ {
 public:
  UpdateOperationRequest();
  virtual ~UpdateOperationRequest();

  UpdateOperationRequest(const UpdateOperationRequest& from);

  inline UpdateOperationRequest& operator=(const UpdateOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateOperationRequest(UpdateOperationRequest&& from) noexcept
    : UpdateOperationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOperationRequest& operator=(UpdateOperationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateOperationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOperationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOperationRequest*>(
               &_UpdateOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(UpdateOperationRequest* other);
  friend void swap(UpdateOperationRequest& a, UpdateOperationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateOperationRequest* New() const final {
    return CreateMaybeMessage<UpdateOperationRequest>(NULL);
  }

  UpdateOperationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOperationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateOperationRequest& from);
  void MergeFrom(const UpdateOperationRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOperationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.longrunning.Operation operation = 3;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 3;
  private:
  const ::google::longrunning::Operation& _internal_operation() const;
  public:
  const ::google::longrunning::Operation& operation() const;
  ::google::longrunning::Operation* release_operation();
  ::google::longrunning::Operation* mutable_operation();
  void set_allocated_operation(::google::longrunning::Operation* operation);

  // .google.protobuf.FieldMask update_mask = 4;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 4;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::longrunning::Operation* operation_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OperationMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.OperationMetadata) */ {
 public:
  OperationMetadata();
  virtual ~OperationMetadata();

  OperationMetadata(const OperationMetadata& from);

  inline OperationMetadata& operator=(const OperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperationMetadata(OperationMetadata&& from) noexcept
    : OperationMetadata() {
    *this = ::std::move(from);
  }

  inline OperationMetadata& operator=(OperationMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationMetadata* internal_default_instance() {
    return reinterpret_cast<const OperationMetadata*>(
               &_OperationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(OperationMetadata* other);
  friend void swap(OperationMetadata& a, OperationMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperationMetadata* New() const final {
    return CreateMaybeMessage<OperationMetadata>(NULL);
  }

  OperationMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperationMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperationMetadata& from);
  void MergeFrom(const OperationMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp create_time = 1;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_end_time() const;
  public:
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.OperationMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* end_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVulnzOccurrencesSummaryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest) */ {
 public:
  GetVulnzOccurrencesSummaryRequest();
  virtual ~GetVulnzOccurrencesSummaryRequest();

  GetVulnzOccurrencesSummaryRequest(const GetVulnzOccurrencesSummaryRequest& from);

  inline GetVulnzOccurrencesSummaryRequest& operator=(const GetVulnzOccurrencesSummaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVulnzOccurrencesSummaryRequest(GetVulnzOccurrencesSummaryRequest&& from) noexcept
    : GetVulnzOccurrencesSummaryRequest() {
    *this = ::std::move(from);
  }

  inline GetVulnzOccurrencesSummaryRequest& operator=(GetVulnzOccurrencesSummaryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVulnzOccurrencesSummaryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVulnzOccurrencesSummaryRequest* internal_default_instance() {
    return reinterpret_cast<const GetVulnzOccurrencesSummaryRequest*>(
               &_GetVulnzOccurrencesSummaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(GetVulnzOccurrencesSummaryRequest* other);
  friend void swap(GetVulnzOccurrencesSummaryRequest& a, GetVulnzOccurrencesSummaryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVulnzOccurrencesSummaryRequest* New() const final {
    return CreateMaybeMessage<GetVulnzOccurrencesSummaryRequest>(NULL);
  }

  GetVulnzOccurrencesSummaryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVulnzOccurrencesSummaryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVulnzOccurrencesSummaryRequest& from);
  void MergeFrom(const GetVulnzOccurrencesSummaryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVulnzOccurrencesSummaryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVulnzOccurrencesSummaryResponse_SeverityCount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.SeverityCount) */ {
 public:
  GetVulnzOccurrencesSummaryResponse_SeverityCount();
  virtual ~GetVulnzOccurrencesSummaryResponse_SeverityCount();

  GetVulnzOccurrencesSummaryResponse_SeverityCount(const GetVulnzOccurrencesSummaryResponse_SeverityCount& from);

  inline GetVulnzOccurrencesSummaryResponse_SeverityCount& operator=(const GetVulnzOccurrencesSummaryResponse_SeverityCount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVulnzOccurrencesSummaryResponse_SeverityCount(GetVulnzOccurrencesSummaryResponse_SeverityCount&& from) noexcept
    : GetVulnzOccurrencesSummaryResponse_SeverityCount() {
    *this = ::std::move(from);
  }

  inline GetVulnzOccurrencesSummaryResponse_SeverityCount& operator=(GetVulnzOccurrencesSummaryResponse_SeverityCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVulnzOccurrencesSummaryResponse_SeverityCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVulnzOccurrencesSummaryResponse_SeverityCount* internal_default_instance() {
    return reinterpret_cast<const GetVulnzOccurrencesSummaryResponse_SeverityCount*>(
               &_GetVulnzOccurrencesSummaryResponse_SeverityCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(GetVulnzOccurrencesSummaryResponse_SeverityCount* other);
  friend void swap(GetVulnzOccurrencesSummaryResponse_SeverityCount& a, GetVulnzOccurrencesSummaryResponse_SeverityCount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVulnzOccurrencesSummaryResponse_SeverityCount* New() const final {
    return CreateMaybeMessage<GetVulnzOccurrencesSummaryResponse_SeverityCount>(NULL);
  }

  GetVulnzOccurrencesSummaryResponse_SeverityCount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVulnzOccurrencesSummaryResponse_SeverityCount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVulnzOccurrencesSummaryResponse_SeverityCount& from);
  void MergeFrom(const GetVulnzOccurrencesSummaryResponse_SeverityCount& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVulnzOccurrencesSummaryResponse_SeverityCount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // .google.devtools.containeranalysis.v1alpha1.VulnerabilityType.Severity severity = 1;
  void clear_severity();
  static const int kSeverityFieldNumber = 1;
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Severity severity() const;
  void set_severity(::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Severity value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.SeverityCount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 count_;
  int severity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVulnzOccurrencesSummaryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse) */ {
 public:
  GetVulnzOccurrencesSummaryResponse();
  virtual ~GetVulnzOccurrencesSummaryResponse();

  GetVulnzOccurrencesSummaryResponse(const GetVulnzOccurrencesSummaryResponse& from);

  inline GetVulnzOccurrencesSummaryResponse& operator=(const GetVulnzOccurrencesSummaryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVulnzOccurrencesSummaryResponse(GetVulnzOccurrencesSummaryResponse&& from) noexcept
    : GetVulnzOccurrencesSummaryResponse() {
    *this = ::std::move(from);
  }

  inline GetVulnzOccurrencesSummaryResponse& operator=(GetVulnzOccurrencesSummaryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVulnzOccurrencesSummaryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVulnzOccurrencesSummaryResponse* internal_default_instance() {
    return reinterpret_cast<const GetVulnzOccurrencesSummaryResponse*>(
               &_GetVulnzOccurrencesSummaryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(GetVulnzOccurrencesSummaryResponse* other);
  friend void swap(GetVulnzOccurrencesSummaryResponse& a, GetVulnzOccurrencesSummaryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVulnzOccurrencesSummaryResponse* New() const final {
    return CreateMaybeMessage<GetVulnzOccurrencesSummaryResponse>(NULL);
  }

  GetVulnzOccurrencesSummaryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVulnzOccurrencesSummaryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVulnzOccurrencesSummaryResponse& from);
  void MergeFrom(const GetVulnzOccurrencesSummaryResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVulnzOccurrencesSummaryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetVulnzOccurrencesSummaryResponse_SeverityCount SeverityCount;

  // accessors -------------------------------------------------------

  // repeated .google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.SeverityCount counts = 1;
  int counts_size() const;
  void clear_counts();
  static const int kCountsFieldNumber = 1;
  ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount* mutable_counts(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount >*
      mutable_counts();
  const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount& counts(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount* add_counts();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount >&
      counts() const;

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount > counts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetScanConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.GetScanConfigRequest) */ {
 public:
  GetScanConfigRequest();
  virtual ~GetScanConfigRequest();

  GetScanConfigRequest(const GetScanConfigRequest& from);

  inline GetScanConfigRequest& operator=(const GetScanConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetScanConfigRequest(GetScanConfigRequest&& from) noexcept
    : GetScanConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetScanConfigRequest& operator=(GetScanConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetScanConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetScanConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetScanConfigRequest*>(
               &_GetScanConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(GetScanConfigRequest* other);
  friend void swap(GetScanConfigRequest& a, GetScanConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetScanConfigRequest* New() const final {
    return CreateMaybeMessage<GetScanConfigRequest>(NULL);
  }

  GetScanConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetScanConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetScanConfigRequest& from);
  void MergeFrom(const GetScanConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetScanConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.GetScanConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListScanConfigsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest) */ {
 public:
  ListScanConfigsRequest();
  virtual ~ListScanConfigsRequest();

  ListScanConfigsRequest(const ListScanConfigsRequest& from);

  inline ListScanConfigsRequest& operator=(const ListScanConfigsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListScanConfigsRequest(ListScanConfigsRequest&& from) noexcept
    : ListScanConfigsRequest() {
    *this = ::std::move(from);
  }

  inline ListScanConfigsRequest& operator=(ListScanConfigsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListScanConfigsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListScanConfigsRequest* internal_default_instance() {
    return reinterpret_cast<const ListScanConfigsRequest*>(
               &_ListScanConfigsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(ListScanConfigsRequest* other);
  friend void swap(ListScanConfigsRequest& a, ListScanConfigsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListScanConfigsRequest* New() const final {
    return CreateMaybeMessage<ListScanConfigsRequest>(NULL);
  }

  ListScanConfigsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListScanConfigsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListScanConfigsRequest& from);
  void MergeFrom(const ListScanConfigsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListScanConfigsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListScanConfigsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse) */ {
 public:
  ListScanConfigsResponse();
  virtual ~ListScanConfigsResponse();

  ListScanConfigsResponse(const ListScanConfigsResponse& from);

  inline ListScanConfigsResponse& operator=(const ListScanConfigsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListScanConfigsResponse(ListScanConfigsResponse&& from) noexcept
    : ListScanConfigsResponse() {
    *this = ::std::move(from);
  }

  inline ListScanConfigsResponse& operator=(ListScanConfigsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListScanConfigsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListScanConfigsResponse* internal_default_instance() {
    return reinterpret_cast<const ListScanConfigsResponse*>(
               &_ListScanConfigsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(ListScanConfigsResponse* other);
  friend void swap(ListScanConfigsResponse& a, ListScanConfigsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListScanConfigsResponse* New() const final {
    return CreateMaybeMessage<ListScanConfigsResponse>(NULL);
  }

  ListScanConfigsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListScanConfigsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListScanConfigsResponse& from);
  void MergeFrom(const ListScanConfigsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListScanConfigsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.containeranalysis.v1alpha1.ScanConfig scan_configs = 1;
  int scan_configs_size() const;
  void clear_scan_configs();
  static const int kScanConfigsFieldNumber = 1;
  ::google::devtools::containeranalysis::v1alpha1::ScanConfig* mutable_scan_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::ScanConfig >*
      mutable_scan_configs();
  const ::google::devtools::containeranalysis::v1alpha1::ScanConfig& scan_configs(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::ScanConfig* add_scan_configs();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::ScanConfig >&
      scan_configs() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::ScanConfig > scan_configs_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateScanConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest) */ {
 public:
  UpdateScanConfigRequest();
  virtual ~UpdateScanConfigRequest();

  UpdateScanConfigRequest(const UpdateScanConfigRequest& from);

  inline UpdateScanConfigRequest& operator=(const UpdateScanConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateScanConfigRequest(UpdateScanConfigRequest&& from) noexcept
    : UpdateScanConfigRequest() {
    *this = ::std::move(from);
  }

  inline UpdateScanConfigRequest& operator=(UpdateScanConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateScanConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateScanConfigRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateScanConfigRequest*>(
               &_UpdateScanConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(UpdateScanConfigRequest* other);
  friend void swap(UpdateScanConfigRequest& a, UpdateScanConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateScanConfigRequest* New() const final {
    return CreateMaybeMessage<UpdateScanConfigRequest>(NULL);
  }

  UpdateScanConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateScanConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateScanConfigRequest& from);
  void MergeFrom(const UpdateScanConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateScanConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.devtools.containeranalysis.v1alpha1.ScanConfig scan_config = 2;
  bool has_scan_config() const;
  void clear_scan_config();
  static const int kScanConfigFieldNumber = 2;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::ScanConfig& _internal_scan_config() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::ScanConfig& scan_config() const;
  ::google::devtools::containeranalysis::v1alpha1::ScanConfig* release_scan_config();
  ::google::devtools::containeranalysis::v1alpha1::ScanConfig* mutable_scan_config();
  void set_allocated_scan_config(::google::devtools::containeranalysis::v1alpha1::ScanConfig* scan_config);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::devtools::containeranalysis::v1alpha1::ScanConfig* scan_config_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Occurrence

// string name = 1;
inline void Occurrence::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Occurrence::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.name)
  return name_.GetNoArena();
}
inline void Occurrence::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Occurrence.name)
}
#if LANG_CXX11
inline void Occurrence::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Occurrence.name)
}
#endif
inline void Occurrence::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Occurrence.name)
}
inline void Occurrence::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Occurrence.name)
}
inline ::std::string* Occurrence::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Occurrence::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Occurrence::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Occurrence.name)
}

// string resource_url = 2;
inline void Occurrence::clear_resource_url() {
  resource_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Occurrence::resource_url() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.resource_url)
  return resource_url_.GetNoArena();
}
inline void Occurrence::set_resource_url(const ::std::string& value) {
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Occurrence.resource_url)
}
#if LANG_CXX11
inline void Occurrence::set_resource_url(::std::string&& value) {
  
  resource_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Occurrence.resource_url)
}
#endif
inline void Occurrence::set_resource_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Occurrence.resource_url)
}
inline void Occurrence::set_resource_url(const char* value, size_t size) {
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Occurrence.resource_url)
}
inline ::std::string* Occurrence::mutable_resource_url() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.resource_url)
  return resource_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Occurrence::release_resource_url() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.resource_url)
  
  return resource_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Occurrence::set_allocated_resource_url(::std::string* resource_url) {
  if (resource_url != NULL) {
    
  } else {
    
  }
  resource_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_url);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Occurrence.resource_url)
}

// .google.devtools.containeranalysis.v1alpha1.Resource resource = 17;
inline bool Occurrence::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void Occurrence::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Resource& Occurrence::_internal_resource() const {
  return *resource_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Resource& Occurrence::resource() const {
  const ::google::devtools::containeranalysis::v1alpha1::Resource* p = resource_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::Resource*>(
      &::google::devtools::containeranalysis::v1alpha1::_Resource_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::Resource* Occurrence::release_resource() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.resource)
  
  ::google::devtools::containeranalysis::v1alpha1::Resource* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::Resource* Occurrence::mutable_resource() {
  
  if (resource_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Resource>(GetArenaNoVirtual());
    resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.resource)
  return resource_;
}
inline void Occurrence::set_allocated_resource(::google::devtools::containeranalysis::v1alpha1::Resource* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Occurrence.resource)
}

// string note_name = 3;
inline void Occurrence::clear_note_name() {
  note_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Occurrence::note_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.note_name)
  return note_name_.GetNoArena();
}
inline void Occurrence::set_note_name(const ::std::string& value) {
  
  note_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Occurrence.note_name)
}
#if LANG_CXX11
inline void Occurrence::set_note_name(::std::string&& value) {
  
  note_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Occurrence.note_name)
}
#endif
inline void Occurrence::set_note_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  note_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Occurrence.note_name)
}
inline void Occurrence::set_note_name(const char* value, size_t size) {
  
  note_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Occurrence.note_name)
}
inline ::std::string* Occurrence::mutable_note_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.note_name)
  return note_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Occurrence::release_note_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.note_name)
  
  return note_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Occurrence::set_allocated_note_name(::std::string* note_name) {
  if (note_name != NULL) {
    
  } else {
    
  }
  note_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Occurrence.note_name)
}

// .google.devtools.containeranalysis.v1alpha1.Note.Kind kind = 6;
inline void Occurrence::clear_kind() {
  kind_ = 0;
}
inline ::google::devtools::containeranalysis::v1alpha1::Note_Kind Occurrence::kind() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.kind)
  return static_cast< ::google::devtools::containeranalysis::v1alpha1::Note_Kind >(kind_);
}
inline void Occurrence::set_kind(::google::devtools::containeranalysis::v1alpha1::Note_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Occurrence.kind)
}

// .google.devtools.containeranalysis.v1alpha1.VulnerabilityType.VulnerabilityDetails vulnerability_details = 8;
inline bool Occurrence::has_vulnerability_details() const {
  return details_case() == kVulnerabilityDetails;
}
inline void Occurrence::set_has_vulnerability_details() {
  _oneof_case_[0] = kVulnerabilityDetails;
}
inline const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails& Occurrence::_internal_vulnerability_details() const {
  return *details_.vulnerability_details_;
}
inline ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails* Occurrence::release_vulnerability_details() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.vulnerability_details)
  if (has_vulnerability_details()) {
    clear_has_details();
      ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails* temp = details_.vulnerability_details_;
    details_.vulnerability_details_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails& Occurrence::vulnerability_details() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.vulnerability_details)
  return has_vulnerability_details()
      ? *details_.vulnerability_details_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails*>(&::google::devtools::containeranalysis::v1alpha1::_VulnerabilityType_VulnerabilityDetails_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails* Occurrence::mutable_vulnerability_details() {
  if (!has_vulnerability_details()) {
    clear_details();
    set_has_vulnerability_details();
    details_.vulnerability_details_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_VulnerabilityDetails >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.vulnerability_details)
  return details_.vulnerability_details_;
}

// .google.devtools.containeranalysis.v1alpha1.BuildDetails build_details = 7;
inline bool Occurrence::has_build_details() const {
  return details_case() == kBuildDetails;
}
inline void Occurrence::set_has_build_details() {
  _oneof_case_[0] = kBuildDetails;
}
inline void Occurrence::clear_build_details() {
  if (has_build_details()) {
    delete details_.build_details_;
    clear_has_details();
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::BuildDetails& Occurrence::_internal_build_details() const {
  return *details_.build_details_;
}
inline ::google::devtools::containeranalysis::v1alpha1::BuildDetails* Occurrence::release_build_details() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.build_details)
  if (has_build_details()) {
    clear_has_details();
      ::google::devtools::containeranalysis::v1alpha1::BuildDetails* temp = details_.build_details_;
    details_.build_details_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::BuildDetails& Occurrence::build_details() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.build_details)
  return has_build_details()
      ? *details_.build_details_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::BuildDetails*>(&::google::devtools::containeranalysis::v1alpha1::_BuildDetails_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::BuildDetails* Occurrence::mutable_build_details() {
  if (!has_build_details()) {
    clear_details();
    set_has_build_details();
    details_.build_details_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::BuildDetails >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.build_details)
  return details_.build_details_;
}

// .google.devtools.containeranalysis.v1alpha1.DockerImage.Derived derived_image = 11;
inline bool Occurrence::has_derived_image() const {
  return details_case() == kDerivedImage;
}
inline void Occurrence::set_has_derived_image() {
  _oneof_case_[0] = kDerivedImage;
}
inline const ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived& Occurrence::_internal_derived_image() const {
  return *details_.derived_image_;
}
inline ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived* Occurrence::release_derived_image() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.derived_image)
  if (has_derived_image()) {
    clear_has_details();
      ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived* temp = details_.derived_image_;
    details_.derived_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived& Occurrence::derived_image() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.derived_image)
  return has_derived_image()
      ? *details_.derived_image_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived*>(&::google::devtools::containeranalysis::v1alpha1::_DockerImage_Derived_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived* Occurrence::mutable_derived_image() {
  if (!has_derived_image()) {
    clear_details();
    set_has_derived_image();
    details_.derived_image_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::DockerImage_Derived >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.derived_image)
  return details_.derived_image_;
}

// .google.devtools.containeranalysis.v1alpha1.PackageManager.Installation installation = 12;
inline bool Occurrence::has_installation() const {
  return details_case() == kInstallation;
}
inline void Occurrence::set_has_installation() {
  _oneof_case_[0] = kInstallation;
}
inline const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation& Occurrence::_internal_installation() const {
  return *details_.installation_;
}
inline ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation* Occurrence::release_installation() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.installation)
  if (has_installation()) {
    clear_has_details();
      ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation* temp = details_.installation_;
    details_.installation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation& Occurrence::installation() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.installation)
  return has_installation()
      ? *details_.installation_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation*>(&::google::devtools::containeranalysis::v1alpha1::_PackageManager_Installation_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation* Occurrence::mutable_installation() {
  if (!has_installation()) {
    clear_details();
    set_has_installation();
    details_.installation_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.installation)
  return details_.installation_;
}

// .google.devtools.containeranalysis.v1alpha1.Deployable.Deployment deployment = 14;
inline bool Occurrence::has_deployment() const {
  return details_case() == kDeployment;
}
inline void Occurrence::set_has_deployment() {
  _oneof_case_[0] = kDeployment;
}
inline void Occurrence::clear_deployment() {
  if (has_deployment()) {
    delete details_.deployment_;
    clear_has_details();
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment& Occurrence::_internal_deployment() const {
  return *details_.deployment_;
}
inline ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment* Occurrence::release_deployment() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.deployment)
  if (has_deployment()) {
    clear_has_details();
      ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment* temp = details_.deployment_;
    details_.deployment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment& Occurrence::deployment() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.deployment)
  return has_deployment()
      ? *details_.deployment_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment*>(&::google::devtools::containeranalysis::v1alpha1::_Deployable_Deployment_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment* Occurrence::mutable_deployment() {
  if (!has_deployment()) {
    clear_details();
    set_has_deployment();
    details_.deployment_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.deployment)
  return details_.deployment_;
}

// .google.devtools.containeranalysis.v1alpha1.Discovery.Discovered discovered = 15;
inline bool Occurrence::has_discovered() const {
  return details_case() == kDiscovered;
}
inline void Occurrence::set_has_discovered() {
  _oneof_case_[0] = kDiscovered;
}
inline void Occurrence::clear_discovered() {
  if (has_discovered()) {
    delete details_.discovered_;
    clear_has_details();
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered& Occurrence::_internal_discovered() const {
  return *details_.discovered_;
}
inline ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered* Occurrence::release_discovered() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.discovered)
  if (has_discovered()) {
    clear_has_details();
      ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered* temp = details_.discovered_;
    details_.discovered_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered& Occurrence::discovered() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.discovered)
  return has_discovered()
      ? *details_.discovered_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered*>(&::google::devtools::containeranalysis::v1alpha1::_Discovery_Discovered_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered* Occurrence::mutable_discovered() {
  if (!has_discovered()) {
    clear_details();
    set_has_discovered();
    details_.discovered_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.discovered)
  return details_.discovered_;
}

// .google.devtools.containeranalysis.v1alpha1.AttestationAuthority.Attestation attestation = 16;
inline bool Occurrence::has_attestation() const {
  return details_case() == kAttestation;
}
inline void Occurrence::set_has_attestation() {
  _oneof_case_[0] = kAttestation;
}
inline void Occurrence::clear_attestation() {
  if (has_attestation()) {
    delete details_.attestation_;
    clear_has_details();
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation& Occurrence::_internal_attestation() const {
  return *details_.attestation_;
}
inline ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation* Occurrence::release_attestation() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.attestation)
  if (has_attestation()) {
    clear_has_details();
      ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation* temp = details_.attestation_;
    details_.attestation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation& Occurrence::attestation() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.attestation)
  return has_attestation()
      ? *details_.attestation_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation*>(&::google::devtools::containeranalysis::v1alpha1::_AttestationAuthority_Attestation_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation* Occurrence::mutable_attestation() {
  if (!has_attestation()) {
    clear_details();
    set_has_attestation();
    details_.attestation_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_Attestation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.attestation)
  return details_.attestation_;
}

// string remediation = 5;
inline void Occurrence::clear_remediation() {
  remediation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Occurrence::remediation() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.remediation)
  return remediation_.GetNoArena();
}
inline void Occurrence::set_remediation(const ::std::string& value) {
  
  remediation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Occurrence.remediation)
}
#if LANG_CXX11
inline void Occurrence::set_remediation(::std::string&& value) {
  
  remediation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Occurrence.remediation)
}
#endif
inline void Occurrence::set_remediation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remediation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Occurrence.remediation)
}
inline void Occurrence::set_remediation(const char* value, size_t size) {
  
  remediation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Occurrence.remediation)
}
inline ::std::string* Occurrence::mutable_remediation() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.remediation)
  return remediation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Occurrence::release_remediation() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.remediation)
  
  return remediation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Occurrence::set_allocated_remediation(::std::string* remediation) {
  if (remediation != NULL) {
    
  } else {
    
  }
  remediation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remediation);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Occurrence.remediation)
}

// .google.protobuf.Timestamp create_time = 9;
inline bool Occurrence::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Occurrence::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& Occurrence::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Occurrence::release_create_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Occurrence::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.create_time)
  return create_time_;
}
inline void Occurrence::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Occurrence.create_time)
}

// .google.protobuf.Timestamp update_time = 10;
inline bool Occurrence::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Occurrence::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& Occurrence::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Occurrence.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Occurrence::release_update_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Occurrence.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Occurrence::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Occurrence.update_time)
  return update_time_;
}
inline void Occurrence::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Occurrence.update_time)
}

inline bool Occurrence::has_details() const {
  return details_case() != DETAILS_NOT_SET;
}
inline void Occurrence::clear_has_details() {
  _oneof_case_[0] = DETAILS_NOT_SET;
}
inline Occurrence::DetailsCase Occurrence::details_case() const {
  return Occurrence::DetailsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Resource

// string name = 1;
inline void Resource::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Resource::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Resource.name)
  return name_.GetNoArena();
}
inline void Resource::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Resource.name)
}
#if LANG_CXX11
inline void Resource::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Resource.name)
}
#endif
inline void Resource::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Resource.name)
}
inline void Resource::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Resource.name)
}
inline ::std::string* Resource::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Resource.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Resource::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Resource.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resource::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Resource.name)
}

// string uri = 2;
inline void Resource::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Resource::uri() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Resource.uri)
  return uri_.GetNoArena();
}
inline void Resource::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Resource.uri)
}
#if LANG_CXX11
inline void Resource::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Resource.uri)
}
#endif
inline void Resource::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Resource.uri)
}
inline void Resource::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Resource.uri)
}
inline ::std::string* Resource::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Resource.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Resource::release_uri() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Resource.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resource::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Resource.uri)
}

// .google.devtools.containeranalysis.v1alpha1.Hash content_hash = 3;
inline bool Resource::has_content_hash() const {
  return this != internal_default_instance() && content_hash_ != NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Hash& Resource::_internal_content_hash() const {
  return *content_hash_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Hash& Resource::content_hash() const {
  const ::google::devtools::containeranalysis::v1alpha1::Hash* p = content_hash_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Resource.content_hash)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::Hash*>(
      &::google::devtools::containeranalysis::v1alpha1::_Hash_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::Hash* Resource::release_content_hash() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Resource.content_hash)
  
  ::google::devtools::containeranalysis::v1alpha1::Hash* temp = content_hash_;
  content_hash_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::Hash* Resource::mutable_content_hash() {
  
  if (content_hash_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Hash>(GetArenaNoVirtual());
    content_hash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Resource.content_hash)
  return content_hash_;
}
inline void Resource::set_allocated_content_hash(::google::devtools::containeranalysis::v1alpha1::Hash* content_hash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(content_hash_);
  }
  if (content_hash) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content_hash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content_hash, submessage_arena);
    }
    
  } else {
    
  }
  content_hash_ = content_hash;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Resource.content_hash)
}

// -------------------------------------------------------------------

// Note_RelatedUrl

// string url = 1;
inline void Note_RelatedUrl::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Note_RelatedUrl::url() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.url)
  return url_.GetNoArena();
}
inline void Note_RelatedUrl::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.url)
}
#if LANG_CXX11
inline void Note_RelatedUrl::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.url)
}
#endif
inline void Note_RelatedUrl::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.url)
}
inline void Note_RelatedUrl::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.url)
}
inline ::std::string* Note_RelatedUrl::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Note_RelatedUrl::release_url() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note_RelatedUrl::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.url)
}

// string label = 2;
inline void Note_RelatedUrl::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Note_RelatedUrl::label() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.label)
  return label_.GetNoArena();
}
inline void Note_RelatedUrl::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.label)
}
#if LANG_CXX11
inline void Note_RelatedUrl::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.label)
}
#endif
inline void Note_RelatedUrl::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.label)
}
inline void Note_RelatedUrl::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.label)
}
inline ::std::string* Note_RelatedUrl::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Note_RelatedUrl::release_label() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note_RelatedUrl::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl.label)
}

// -------------------------------------------------------------------

// Note

// string name = 1;
inline void Note::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Note::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.name)
  return name_.GetNoArena();
}
inline void Note::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Note.name)
}
#if LANG_CXX11
inline void Note::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Note.name)
}
#endif
inline void Note::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Note.name)
}
inline void Note::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Note.name)
}
inline ::std::string* Note::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Note::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Note.name)
}

// string short_description = 3;
inline void Note::clear_short_description() {
  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Note::short_description() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.short_description)
  return short_description_.GetNoArena();
}
inline void Note::set_short_description(const ::std::string& value) {
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Note.short_description)
}
#if LANG_CXX11
inline void Note::set_short_description(::std::string&& value) {
  
  short_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Note.short_description)
}
#endif
inline void Note::set_short_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Note.short_description)
}
inline void Note::set_short_description(const char* value, size_t size) {
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Note.short_description)
}
inline ::std::string* Note::mutable_short_description() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.short_description)
  return short_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Note::release_short_description() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.short_description)
  
  return short_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_allocated_short_description(::std::string* short_description) {
  if (short_description != NULL) {
    
  } else {
    
  }
  short_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_description);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Note.short_description)
}

// string long_description = 4;
inline void Note::clear_long_description() {
  long_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Note::long_description() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.long_description)
  return long_description_.GetNoArena();
}
inline void Note::set_long_description(const ::std::string& value) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Note.long_description)
}
#if LANG_CXX11
inline void Note::set_long_description(::std::string&& value) {
  
  long_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Note.long_description)
}
#endif
inline void Note::set_long_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Note.long_description)
}
inline void Note::set_long_description(const char* value, size_t size) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Note.long_description)
}
inline ::std::string* Note::mutable_long_description() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.long_description)
  return long_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Note::release_long_description() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.long_description)
  
  return long_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_allocated_long_description(::std::string* long_description) {
  if (long_description != NULL) {
    
  } else {
    
  }
  long_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), long_description);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Note.long_description)
}

// .google.devtools.containeranalysis.v1alpha1.Note.Kind kind = 9;
inline void Note::clear_kind() {
  kind_ = 0;
}
inline ::google::devtools::containeranalysis::v1alpha1::Note_Kind Note::kind() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.kind)
  return static_cast< ::google::devtools::containeranalysis::v1alpha1::Note_Kind >(kind_);
}
inline void Note::set_kind(::google::devtools::containeranalysis::v1alpha1::Note_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Note.kind)
}

// .google.devtools.containeranalysis.v1alpha1.VulnerabilityType vulnerability_type = 6;
inline bool Note::has_vulnerability_type() const {
  return note_type_case() == kVulnerabilityType;
}
inline void Note::set_has_vulnerability_type() {
  _oneof_case_[0] = kVulnerabilityType;
}
inline const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType& Note::_internal_vulnerability_type() const {
  return *note_type_.vulnerability_type_;
}
inline ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType* Note::release_vulnerability_type() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.vulnerability_type)
  if (has_vulnerability_type()) {
    clear_has_note_type();
      ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType* temp = note_type_.vulnerability_type_;
    note_type_.vulnerability_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType& Note::vulnerability_type() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.vulnerability_type)
  return has_vulnerability_type()
      ? *note_type_.vulnerability_type_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType*>(&::google::devtools::containeranalysis::v1alpha1::_VulnerabilityType_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType* Note::mutable_vulnerability_type() {
  if (!has_vulnerability_type()) {
    clear_note_type();
    set_has_vulnerability_type();
    note_type_.vulnerability_type_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.vulnerability_type)
  return note_type_.vulnerability_type_;
}

// .google.devtools.containeranalysis.v1alpha1.BuildType build_type = 8;
inline bool Note::has_build_type() const {
  return note_type_case() == kBuildType;
}
inline void Note::set_has_build_type() {
  _oneof_case_[0] = kBuildType;
}
inline void Note::clear_build_type() {
  if (has_build_type()) {
    delete note_type_.build_type_;
    clear_has_note_type();
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::BuildType& Note::_internal_build_type() const {
  return *note_type_.build_type_;
}
inline ::google::devtools::containeranalysis::v1alpha1::BuildType* Note::release_build_type() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.build_type)
  if (has_build_type()) {
    clear_has_note_type();
      ::google::devtools::containeranalysis::v1alpha1::BuildType* temp = note_type_.build_type_;
    note_type_.build_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::BuildType& Note::build_type() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.build_type)
  return has_build_type()
      ? *note_type_.build_type_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::BuildType*>(&::google::devtools::containeranalysis::v1alpha1::_BuildType_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::BuildType* Note::mutable_build_type() {
  if (!has_build_type()) {
    clear_note_type();
    set_has_build_type();
    note_type_.build_type_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::BuildType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.build_type)
  return note_type_.build_type_;
}

// .google.devtools.containeranalysis.v1alpha1.DockerImage.Basis base_image = 13;
inline bool Note::has_base_image() const {
  return note_type_case() == kBaseImage;
}
inline void Note::set_has_base_image() {
  _oneof_case_[0] = kBaseImage;
}
inline const ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis& Note::_internal_base_image() const {
  return *note_type_.base_image_;
}
inline ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis* Note::release_base_image() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.base_image)
  if (has_base_image()) {
    clear_has_note_type();
      ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis* temp = note_type_.base_image_;
    note_type_.base_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis& Note::base_image() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.base_image)
  return has_base_image()
      ? *note_type_.base_image_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis*>(&::google::devtools::containeranalysis::v1alpha1::_DockerImage_Basis_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis* Note::mutable_base_image() {
  if (!has_base_image()) {
    clear_note_type();
    set_has_base_image();
    note_type_.base_image_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::DockerImage_Basis >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.base_image)
  return note_type_.base_image_;
}

// .google.devtools.containeranalysis.v1alpha1.PackageManager.Package package = 14;
inline bool Note::has_package() const {
  return note_type_case() == kPackage;
}
inline void Note::set_has_package() {
  _oneof_case_[0] = kPackage;
}
inline const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package& Note::_internal_package() const {
  return *note_type_.package_;
}
inline ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package* Note::release_package() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.package)
  if (has_package()) {
    clear_has_note_type();
      ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package* temp = note_type_.package_;
    note_type_.package_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package& Note::package() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.package)
  return has_package()
      ? *note_type_.package_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package*>(&::google::devtools::containeranalysis::v1alpha1::_PackageManager_Package_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package* Note::mutable_package() {
  if (!has_package()) {
    clear_note_type();
    set_has_package();
    note_type_.package_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.package)
  return note_type_.package_;
}

// .google.devtools.containeranalysis.v1alpha1.Deployable deployable = 17;
inline bool Note::has_deployable() const {
  return note_type_case() == kDeployable;
}
inline void Note::set_has_deployable() {
  _oneof_case_[0] = kDeployable;
}
inline void Note::clear_deployable() {
  if (has_deployable()) {
    delete note_type_.deployable_;
    clear_has_note_type();
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::Deployable& Note::_internal_deployable() const {
  return *note_type_.deployable_;
}
inline ::google::devtools::containeranalysis::v1alpha1::Deployable* Note::release_deployable() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.deployable)
  if (has_deployable()) {
    clear_has_note_type();
      ::google::devtools::containeranalysis::v1alpha1::Deployable* temp = note_type_.deployable_;
    note_type_.deployable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::Deployable& Note::deployable() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.deployable)
  return has_deployable()
      ? *note_type_.deployable_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::Deployable*>(&::google::devtools::containeranalysis::v1alpha1::_Deployable_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::Deployable* Note::mutable_deployable() {
  if (!has_deployable()) {
    clear_note_type();
    set_has_deployable();
    note_type_.deployable_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::Deployable >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.deployable)
  return note_type_.deployable_;
}

// .google.devtools.containeranalysis.v1alpha1.Discovery discovery = 18;
inline bool Note::has_discovery() const {
  return note_type_case() == kDiscovery;
}
inline void Note::set_has_discovery() {
  _oneof_case_[0] = kDiscovery;
}
inline void Note::clear_discovery() {
  if (has_discovery()) {
    delete note_type_.discovery_;
    clear_has_note_type();
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::Discovery& Note::_internal_discovery() const {
  return *note_type_.discovery_;
}
inline ::google::devtools::containeranalysis::v1alpha1::Discovery* Note::release_discovery() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.discovery)
  if (has_discovery()) {
    clear_has_note_type();
      ::google::devtools::containeranalysis::v1alpha1::Discovery* temp = note_type_.discovery_;
    note_type_.discovery_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::Discovery& Note::discovery() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.discovery)
  return has_discovery()
      ? *note_type_.discovery_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::Discovery*>(&::google::devtools::containeranalysis::v1alpha1::_Discovery_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::Discovery* Note::mutable_discovery() {
  if (!has_discovery()) {
    clear_note_type();
    set_has_discovery();
    note_type_.discovery_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::Discovery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.discovery)
  return note_type_.discovery_;
}

// .google.devtools.containeranalysis.v1alpha1.AttestationAuthority attestation_authority = 19;
inline bool Note::has_attestation_authority() const {
  return note_type_case() == kAttestationAuthority;
}
inline void Note::set_has_attestation_authority() {
  _oneof_case_[0] = kAttestationAuthority;
}
inline void Note::clear_attestation_authority() {
  if (has_attestation_authority()) {
    delete note_type_.attestation_authority_;
    clear_has_note_type();
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority& Note::_internal_attestation_authority() const {
  return *note_type_.attestation_authority_;
}
inline ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority* Note::release_attestation_authority() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.attestation_authority)
  if (has_attestation_authority()) {
    clear_has_note_type();
      ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority* temp = note_type_.attestation_authority_;
    note_type_.attestation_authority_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority& Note::attestation_authority() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.attestation_authority)
  return has_attestation_authority()
      ? *note_type_.attestation_authority_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority*>(&::google::devtools::containeranalysis::v1alpha1::_AttestationAuthority_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority* Note::mutable_attestation_authority() {
  if (!has_attestation_authority()) {
    clear_note_type();
    set_has_attestation_authority();
    note_type_.attestation_authority_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.attestation_authority)
  return note_type_.attestation_authority_;
}

// repeated .google.devtools.containeranalysis.v1alpha1.Note.RelatedUrl related_url = 7;
inline int Note::related_url_size() const {
  return related_url_.size();
}
inline void Note::clear_related_url() {
  related_url_.Clear();
}
inline ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl* Note::mutable_related_url(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.related_url)
  return related_url_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl >*
Note::mutable_related_url() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.Note.related_url)
  return &related_url_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl& Note::related_url(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.related_url)
  return related_url_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl* Note::add_related_url() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Note.related_url)
  return related_url_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Note_RelatedUrl >&
Note::related_url() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.Note.related_url)
  return related_url_;
}

// .google.protobuf.Timestamp expiration_time = 10;
inline bool Note::has_expiration_time() const {
  return this != internal_default_instance() && expiration_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Note::_internal_expiration_time() const {
  return *expiration_time_;
}
inline const ::google::protobuf::Timestamp& Note::expiration_time() const {
  const ::google::protobuf::Timestamp* p = expiration_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.expiration_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Note::release_expiration_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.expiration_time)
  
  ::google::protobuf::Timestamp* temp = expiration_time_;
  expiration_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Note::mutable_expiration_time() {
  
  if (expiration_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expiration_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.expiration_time)
  return expiration_time_;
}
inline void Note::set_allocated_expiration_time(::google::protobuf::Timestamp* expiration_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expiration_time_);
  }
  if (expiration_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expiration_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiration_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Note.expiration_time)
}

// .google.protobuf.Timestamp create_time = 11;
inline bool Note::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Note::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& Note::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Note::release_create_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Note::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.create_time)
  return create_time_;
}
inline void Note::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Note.create_time)
}

// .google.protobuf.Timestamp update_time = 12;
inline bool Note::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Note::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& Note::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Note.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Note::release_update_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Note.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Note::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Note.update_time)
  return update_time_;
}
inline void Note::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Note.update_time)
}

inline bool Note::has_note_type() const {
  return note_type_case() != NOTE_TYPE_NOT_SET;
}
inline void Note::clear_has_note_type() {
  _oneof_case_[0] = NOTE_TYPE_NOT_SET;
}
inline Note::NoteTypeCase Note::note_type_case() const {
  return Note::NoteTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Deployable_Deployment

// string user_email = 1;
inline void Deployable_Deployment::clear_user_email() {
  user_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Deployable_Deployment::user_email() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.user_email)
  return user_email_.GetNoArena();
}
inline void Deployable_Deployment::set_user_email(const ::std::string& value) {
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.user_email)
}
#if LANG_CXX11
inline void Deployable_Deployment::set_user_email(::std::string&& value) {
  
  user_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.user_email)
}
#endif
inline void Deployable_Deployment::set_user_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.user_email)
}
inline void Deployable_Deployment::set_user_email(const char* value, size_t size) {
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.user_email)
}
inline ::std::string* Deployable_Deployment::mutable_user_email() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.user_email)
  return user_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Deployable_Deployment::release_user_email() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.user_email)
  
  return user_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Deployable_Deployment::set_allocated_user_email(::std::string* user_email) {
  if (user_email != NULL) {
    
  } else {
    
  }
  user_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_email);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.user_email)
}

// .google.protobuf.Timestamp deploy_time = 2;
inline bool Deployable_Deployment::has_deploy_time() const {
  return this != internal_default_instance() && deploy_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Deployable_Deployment::_internal_deploy_time() const {
  return *deploy_time_;
}
inline const ::google::protobuf::Timestamp& Deployable_Deployment::deploy_time() const {
  const ::google::protobuf::Timestamp* p = deploy_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.deploy_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Deployable_Deployment::release_deploy_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.deploy_time)
  
  ::google::protobuf::Timestamp* temp = deploy_time_;
  deploy_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Deployable_Deployment::mutable_deploy_time() {
  
  if (deploy_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    deploy_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.deploy_time)
  return deploy_time_;
}
inline void Deployable_Deployment::set_allocated_deploy_time(::google::protobuf::Timestamp* deploy_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(deploy_time_);
  }
  if (deploy_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(deploy_time)->GetArena();
    if (message_arena != submessage_arena) {
      deploy_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deploy_time, submessage_arena);
    }
    
  } else {
    
  }
  deploy_time_ = deploy_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.deploy_time)
}

// .google.protobuf.Timestamp undeploy_time = 3;
inline bool Deployable_Deployment::has_undeploy_time() const {
  return this != internal_default_instance() && undeploy_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Deployable_Deployment::_internal_undeploy_time() const {
  return *undeploy_time_;
}
inline const ::google::protobuf::Timestamp& Deployable_Deployment::undeploy_time() const {
  const ::google::protobuf::Timestamp* p = undeploy_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.undeploy_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Deployable_Deployment::release_undeploy_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.undeploy_time)
  
  ::google::protobuf::Timestamp* temp = undeploy_time_;
  undeploy_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Deployable_Deployment::mutable_undeploy_time() {
  
  if (undeploy_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    undeploy_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.undeploy_time)
  return undeploy_time_;
}
inline void Deployable_Deployment::set_allocated_undeploy_time(::google::protobuf::Timestamp* undeploy_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(undeploy_time_);
  }
  if (undeploy_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(undeploy_time)->GetArena();
    if (message_arena != submessage_arena) {
      undeploy_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, undeploy_time, submessage_arena);
    }
    
  } else {
    
  }
  undeploy_time_ = undeploy_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.undeploy_time)
}

// string config = 8;
inline void Deployable_Deployment::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Deployable_Deployment::config() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.config)
  return config_.GetNoArena();
}
inline void Deployable_Deployment::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.config)
}
#if LANG_CXX11
inline void Deployable_Deployment::set_config(::std::string&& value) {
  
  config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.config)
}
#endif
inline void Deployable_Deployment::set_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.config)
}
inline void Deployable_Deployment::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.config)
}
inline ::std::string* Deployable_Deployment::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Deployable_Deployment::release_config() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Deployable_Deployment::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.config)
}

// string address = 5;
inline void Deployable_Deployment::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Deployable_Deployment::address() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.address)
  return address_.GetNoArena();
}
inline void Deployable_Deployment::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.address)
}
#if LANG_CXX11
inline void Deployable_Deployment::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.address)
}
#endif
inline void Deployable_Deployment::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.address)
}
inline void Deployable_Deployment::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.address)
}
inline ::std::string* Deployable_Deployment::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Deployable_Deployment::release_address() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Deployable_Deployment::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.address)
}

// repeated string resource_uri = 6;
inline int Deployable_Deployment::resource_uri_size() const {
  return resource_uri_.size();
}
inline void Deployable_Deployment::clear_resource_uri() {
  resource_uri_.Clear();
}
inline const ::std::string& Deployable_Deployment::resource_uri(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
  return resource_uri_.Get(index);
}
inline ::std::string* Deployable_Deployment::mutable_resource_uri(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
  return resource_uri_.Mutable(index);
}
inline void Deployable_Deployment::set_resource_uri(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
  resource_uri_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Deployable_Deployment::set_resource_uri(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
  resource_uri_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Deployable_Deployment::set_resource_uri(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  resource_uri_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
}
inline void Deployable_Deployment::set_resource_uri(int index, const char* value, size_t size) {
  resource_uri_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
}
inline ::std::string* Deployable_Deployment::add_resource_uri() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
  return resource_uri_.Add();
}
inline void Deployable_Deployment::add_resource_uri(const ::std::string& value) {
  resource_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
}
#if LANG_CXX11
inline void Deployable_Deployment::add_resource_uri(::std::string&& value) {
  resource_uri_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
}
#endif
inline void Deployable_Deployment::add_resource_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  resource_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
}
inline void Deployable_Deployment::add_resource_uri(const char* value, size_t size) {
  resource_uri_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Deployable_Deployment::resource_uri() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
  return resource_uri_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Deployable_Deployment::mutable_resource_uri() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.resource_uri)
  return &resource_uri_;
}

// .google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.Platform platform = 7;
inline void Deployable_Deployment::clear_platform() {
  platform_ = 0;
}
inline ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment_Platform Deployable_Deployment::platform() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.platform)
  return static_cast< ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment_Platform >(platform_);
}
inline void Deployable_Deployment::set_platform(::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment_Platform value) {
  
  platform_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Deployable.Deployment.platform)
}

// -------------------------------------------------------------------

// Deployable

// repeated string resource_uri = 1;
inline int Deployable::resource_uri_size() const {
  return resource_uri_.size();
}
inline void Deployable::clear_resource_uri() {
  resource_uri_.Clear();
}
inline const ::std::string& Deployable::resource_uri(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
  return resource_uri_.Get(index);
}
inline ::std::string* Deployable::mutable_resource_uri(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
  return resource_uri_.Mutable(index);
}
inline void Deployable::set_resource_uri(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
  resource_uri_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Deployable::set_resource_uri(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
  resource_uri_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Deployable::set_resource_uri(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  resource_uri_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
}
inline void Deployable::set_resource_uri(int index, const char* value, size_t size) {
  resource_uri_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
}
inline ::std::string* Deployable::add_resource_uri() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
  return resource_uri_.Add();
}
inline void Deployable::add_resource_uri(const ::std::string& value) {
  resource_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
}
#if LANG_CXX11
inline void Deployable::add_resource_uri(::std::string&& value) {
  resource_uri_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
}
#endif
inline void Deployable::add_resource_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  resource_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
}
inline void Deployable::add_resource_uri(const char* value, size_t size) {
  resource_uri_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Deployable::resource_uri() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
  return resource_uri_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Deployable::mutable_resource_uri() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.Deployable.resource_uri)
  return &resource_uri_;
}

// -------------------------------------------------------------------

// Discovery_Discovered

// .google.longrunning.Operation operation = 1;
inline bool Discovery_Discovered::has_operation() const {
  return this != internal_default_instance() && operation_ != NULL;
}
inline const ::google::longrunning::Operation& Discovery_Discovered::_internal_operation() const {
  return *operation_;
}
inline const ::google::longrunning::Operation& Discovery_Discovered::operation() const {
  const ::google::longrunning::Operation* p = operation_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.operation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::longrunning::Operation*>(
      &::google::longrunning::_Operation_default_instance_);
}
inline ::google::longrunning::Operation* Discovery_Discovered::release_operation() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.operation)
  
  ::google::longrunning::Operation* temp = operation_;
  operation_ = NULL;
  return temp;
}
inline ::google::longrunning::Operation* Discovery_Discovered::mutable_operation() {
  
  if (operation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::longrunning::Operation>(GetArenaNoVirtual());
    operation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.operation)
  return operation_;
}
inline void Discovery_Discovered::set_allocated_operation(::google::longrunning::Operation* operation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(operation_);
  }
  if (operation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    
  } else {
    
  }
  operation_ = operation;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.operation)
}

// .google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.AnalysisStatus analysis_status = 5;
inline void Discovery_Discovered::clear_analysis_status() {
  analysis_status_ = 0;
}
inline ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered_AnalysisStatus Discovery_Discovered::analysis_status() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.analysis_status)
  return static_cast< ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered_AnalysisStatus >(analysis_status_);
}
inline void Discovery_Discovered::set_analysis_status(::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered_AnalysisStatus value) {
  
  analysis_status_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.analysis_status)
}

// .google.rpc.Status analysis_status_error = 6;
inline bool Discovery_Discovered::has_analysis_status_error() const {
  return this != internal_default_instance() && analysis_status_error_ != NULL;
}
inline const ::google::rpc::Status& Discovery_Discovered::_internal_analysis_status_error() const {
  return *analysis_status_error_;
}
inline const ::google::rpc::Status& Discovery_Discovered::analysis_status_error() const {
  const ::google::rpc::Status* p = analysis_status_error_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.analysis_status_error)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* Discovery_Discovered::release_analysis_status_error() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.analysis_status_error)
  
  ::google::rpc::Status* temp = analysis_status_error_;
  analysis_status_error_ = NULL;
  return temp;
}
inline ::google::rpc::Status* Discovery_Discovered::mutable_analysis_status_error() {
  
  if (analysis_status_error_ == NULL) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    analysis_status_error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.analysis_status_error)
  return analysis_status_error_;
}
inline void Discovery_Discovered::set_allocated_analysis_status_error(::google::rpc::Status* analysis_status_error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(analysis_status_error_);
  }
  if (analysis_status_error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      analysis_status_error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, analysis_status_error, submessage_arena);
    }
    
  } else {
    
  }
  analysis_status_error_ = analysis_status_error;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Discovery.Discovered.analysis_status_error)
}

// -------------------------------------------------------------------

// Discovery

// .google.devtools.containeranalysis.v1alpha1.Note.Kind analysis_kind = 1;
inline void Discovery::clear_analysis_kind() {
  analysis_kind_ = 0;
}
inline ::google::devtools::containeranalysis::v1alpha1::Note_Kind Discovery::analysis_kind() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Discovery.analysis_kind)
  return static_cast< ::google::devtools::containeranalysis::v1alpha1::Note_Kind >(analysis_kind_);
}
inline void Discovery::set_analysis_kind(::google::devtools::containeranalysis::v1alpha1::Note_Kind value) {
  
  analysis_kind_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Discovery.analysis_kind)
}

// -------------------------------------------------------------------

// BuildType

// string builder_version = 1;
inline void BuildType::clear_builder_version() {
  builder_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildType::builder_version() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildType.builder_version)
  return builder_version_.GetNoArena();
}
inline void BuildType::set_builder_version(const ::std::string& value) {
  
  builder_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildType.builder_version)
}
#if LANG_CXX11
inline void BuildType::set_builder_version(::std::string&& value) {
  
  builder_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.BuildType.builder_version)
}
#endif
inline void BuildType::set_builder_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  builder_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.BuildType.builder_version)
}
inline void BuildType::set_builder_version(const char* value, size_t size) {
  
  builder_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.BuildType.builder_version)
}
inline ::std::string* BuildType::mutable_builder_version() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildType.builder_version)
  return builder_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildType::release_builder_version() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildType.builder_version)
  
  return builder_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildType::set_allocated_builder_version(::std::string* builder_version) {
  if (builder_version != NULL) {
    
  } else {
    
  }
  builder_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), builder_version);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildType.builder_version)
}

// .google.devtools.containeranalysis.v1alpha1.BuildSignature signature = 2;
inline bool BuildType::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
inline void BuildType::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) {
    delete signature_;
  }
  signature_ = NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::BuildSignature& BuildType::_internal_signature() const {
  return *signature_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::BuildSignature& BuildType::signature() const {
  const ::google::devtools::containeranalysis::v1alpha1::BuildSignature* p = signature_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildType.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::BuildSignature*>(
      &::google::devtools::containeranalysis::v1alpha1::_BuildSignature_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::BuildSignature* BuildType::release_signature() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildType.signature)
  
  ::google::devtools::containeranalysis::v1alpha1::BuildSignature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::BuildSignature* BuildType::mutable_signature() {
  
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::BuildSignature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildType.signature)
  return signature_;
}
inline void BuildType::set_allocated_signature(::google::devtools::containeranalysis::v1alpha1::BuildSignature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildType.signature)
}

// -------------------------------------------------------------------

// BuildSignature

// string public_key = 1;
inline void BuildSignature::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildSignature::public_key() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildSignature.public_key)
  return public_key_.GetNoArena();
}
inline void BuildSignature::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildSignature.public_key)
}
#if LANG_CXX11
inline void BuildSignature::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.BuildSignature.public_key)
}
#endif
inline void BuildSignature::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.BuildSignature.public_key)
}
inline void BuildSignature::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.BuildSignature.public_key)
}
inline ::std::string* BuildSignature::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildSignature.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildSignature::release_public_key() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildSignature.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildSignature::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildSignature.public_key)
}

// string signature = 2;
inline void BuildSignature::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildSignature::signature() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildSignature.signature)
  return signature_.GetNoArena();
}
inline void BuildSignature::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildSignature.signature)
}
#if LANG_CXX11
inline void BuildSignature::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.BuildSignature.signature)
}
#endif
inline void BuildSignature::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.BuildSignature.signature)
}
inline void BuildSignature::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.BuildSignature.signature)
}
inline ::std::string* BuildSignature::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildSignature.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildSignature::release_signature() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildSignature.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildSignature::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildSignature.signature)
}

// string key_id = 3;
inline void BuildSignature::clear_key_id() {
  key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildSignature::key_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildSignature.key_id)
  return key_id_.GetNoArena();
}
inline void BuildSignature::set_key_id(const ::std::string& value) {
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildSignature.key_id)
}
#if LANG_CXX11
inline void BuildSignature::set_key_id(::std::string&& value) {
  
  key_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.BuildSignature.key_id)
}
#endif
inline void BuildSignature::set_key_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.BuildSignature.key_id)
}
inline void BuildSignature::set_key_id(const char* value, size_t size) {
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.BuildSignature.key_id)
}
inline ::std::string* BuildSignature::mutable_key_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildSignature.key_id)
  return key_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildSignature::release_key_id() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildSignature.key_id)
  
  return key_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildSignature::set_allocated_key_id(::std::string* key_id) {
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildSignature.key_id)
}

// .google.devtools.containeranalysis.v1alpha1.BuildSignature.KeyType key_type = 4;
inline void BuildSignature::clear_key_type() {
  key_type_ = 0;
}
inline ::google::devtools::containeranalysis::v1alpha1::BuildSignature_KeyType BuildSignature::key_type() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildSignature.key_type)
  return static_cast< ::google::devtools::containeranalysis::v1alpha1::BuildSignature_KeyType >(key_type_);
}
inline void BuildSignature::set_key_type(::google::devtools::containeranalysis::v1alpha1::BuildSignature_KeyType value) {
  
  key_type_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildSignature.key_type)
}

// -------------------------------------------------------------------

// PgpSignedAttestation

// string signature = 1;
inline void PgpSignedAttestation::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PgpSignedAttestation::signature() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.signature)
  return signature_.GetNoArena();
}
inline void PgpSignedAttestation::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.signature)
}
#if LANG_CXX11
inline void PgpSignedAttestation::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.signature)
}
#endif
inline void PgpSignedAttestation::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.signature)
}
inline void PgpSignedAttestation::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.signature)
}
inline ::std::string* PgpSignedAttestation::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PgpSignedAttestation::release_signature() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PgpSignedAttestation::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.signature)
}

// .google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.ContentType content_type = 3;
inline void PgpSignedAttestation::clear_content_type() {
  content_type_ = 0;
}
inline ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation_ContentType PgpSignedAttestation::content_type() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.content_type)
  return static_cast< ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation_ContentType >(content_type_);
}
inline void PgpSignedAttestation::set_content_type(::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation_ContentType value) {
  
  content_type_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.content_type)
}

// string pgp_key_id = 2;
inline bool PgpSignedAttestation::has_pgp_key_id() const {
  return key_id_case() == kPgpKeyId;
}
inline void PgpSignedAttestation::set_has_pgp_key_id() {
  _oneof_case_[0] = kPgpKeyId;
}
inline void PgpSignedAttestation::clear_pgp_key_id() {
  if (has_pgp_key_id()) {
    key_id_.pgp_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_key_id();
  }
}
inline const ::std::string& PgpSignedAttestation::pgp_key_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.pgp_key_id)
  if (has_pgp_key_id()) {
    return key_id_.pgp_key_id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void PgpSignedAttestation::set_pgp_key_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.pgp_key_id)
  if (!has_pgp_key_id()) {
    clear_key_id();
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_id_.pgp_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.pgp_key_id)
}
#if LANG_CXX11
inline void PgpSignedAttestation::set_pgp_key_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.pgp_key_id)
  if (!has_pgp_key_id()) {
    clear_key_id();
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_id_.pgp_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.pgp_key_id)
}
#endif
inline void PgpSignedAttestation::set_pgp_key_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_pgp_key_id()) {
    clear_key_id();
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_id_.pgp_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.pgp_key_id)
}
inline void PgpSignedAttestation::set_pgp_key_id(const char* value, size_t size) {
  if (!has_pgp_key_id()) {
    clear_key_id();
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_id_.pgp_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.pgp_key_id)
}
inline ::std::string* PgpSignedAttestation::mutable_pgp_key_id() {
  if (!has_pgp_key_id()) {
    clear_key_id();
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.pgp_key_id)
  return key_id_.pgp_key_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PgpSignedAttestation::release_pgp_key_id() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.pgp_key_id)
  if (has_pgp_key_id()) {
    clear_has_key_id();
    return key_id_.pgp_key_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void PgpSignedAttestation::set_allocated_pgp_key_id(::std::string* pgp_key_id) {
  if (!has_pgp_key_id()) {
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_key_id();
  if (pgp_key_id != NULL) {
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pgp_key_id);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation.pgp_key_id)
}

inline bool PgpSignedAttestation::has_key_id() const {
  return key_id_case() != KEY_ID_NOT_SET;
}
inline void PgpSignedAttestation::clear_has_key_id() {
  _oneof_case_[0] = KEY_ID_NOT_SET;
}
inline PgpSignedAttestation::KeyIdCase PgpSignedAttestation::key_id_case() const {
  return PgpSignedAttestation::KeyIdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AttestationAuthority_AttestationAuthorityHint

// string human_readable_name = 1;
inline void AttestationAuthority_AttestationAuthorityHint::clear_human_readable_name() {
  human_readable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttestationAuthority_AttestationAuthorityHint::human_readable_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint.human_readable_name)
  return human_readable_name_.GetNoArena();
}
inline void AttestationAuthority_AttestationAuthorityHint::set_human_readable_name(const ::std::string& value) {
  
  human_readable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint.human_readable_name)
}
#if LANG_CXX11
inline void AttestationAuthority_AttestationAuthorityHint::set_human_readable_name(::std::string&& value) {
  
  human_readable_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint.human_readable_name)
}
#endif
inline void AttestationAuthority_AttestationAuthorityHint::set_human_readable_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  human_readable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint.human_readable_name)
}
inline void AttestationAuthority_AttestationAuthorityHint::set_human_readable_name(const char* value, size_t size) {
  
  human_readable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint.human_readable_name)
}
inline ::std::string* AttestationAuthority_AttestationAuthorityHint::mutable_human_readable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint.human_readable_name)
  return human_readable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttestationAuthority_AttestationAuthorityHint::release_human_readable_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint.human_readable_name)
  
  return human_readable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttestationAuthority_AttestationAuthorityHint::set_allocated_human_readable_name(::std::string* human_readable_name) {
  if (human_readable_name != NULL) {
    
  } else {
    
  }
  human_readable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), human_readable_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint.human_readable_name)
}

// -------------------------------------------------------------------

// AttestationAuthority_Attestation

// .google.devtools.containeranalysis.v1alpha1.PgpSignedAttestation pgp_signed_attestation = 1;
inline bool AttestationAuthority_Attestation::has_pgp_signed_attestation() const {
  return signature_case() == kPgpSignedAttestation;
}
inline void AttestationAuthority_Attestation::set_has_pgp_signed_attestation() {
  _oneof_case_[0] = kPgpSignedAttestation;
}
inline void AttestationAuthority_Attestation::clear_pgp_signed_attestation() {
  if (has_pgp_signed_attestation()) {
    delete signature_.pgp_signed_attestation_;
    clear_has_signature();
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation& AttestationAuthority_Attestation::_internal_pgp_signed_attestation() const {
  return *signature_.pgp_signed_attestation_;
}
inline ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation* AttestationAuthority_Attestation::release_pgp_signed_attestation() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.Attestation.pgp_signed_attestation)
  if (has_pgp_signed_attestation()) {
    clear_has_signature();
      ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation* temp = signature_.pgp_signed_attestation_;
    signature_.pgp_signed_attestation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation& AttestationAuthority_Attestation::pgp_signed_attestation() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.Attestation.pgp_signed_attestation)
  return has_pgp_signed_attestation()
      ? *signature_.pgp_signed_attestation_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation*>(&::google::devtools::containeranalysis::v1alpha1::_PgpSignedAttestation_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation* AttestationAuthority_Attestation::mutable_pgp_signed_attestation() {
  if (!has_pgp_signed_attestation()) {
    clear_signature();
    set_has_pgp_signed_attestation();
    signature_.pgp_signed_attestation_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.Attestation.pgp_signed_attestation)
  return signature_.pgp_signed_attestation_;
}

inline bool AttestationAuthority_Attestation::has_signature() const {
  return signature_case() != SIGNATURE_NOT_SET;
}
inline void AttestationAuthority_Attestation::clear_has_signature() {
  _oneof_case_[0] = SIGNATURE_NOT_SET;
}
inline AttestationAuthority_Attestation::SignatureCase AttestationAuthority_Attestation::signature_case() const {
  return AttestationAuthority_Attestation::SignatureCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AttestationAuthority

// .google.devtools.containeranalysis.v1alpha1.AttestationAuthority.AttestationAuthorityHint hint = 1;
inline bool AttestationAuthority::has_hint() const {
  return this != internal_default_instance() && hint_ != NULL;
}
inline void AttestationAuthority::clear_hint() {
  if (GetArenaNoVirtual() == NULL && hint_ != NULL) {
    delete hint_;
  }
  hint_ = NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint& AttestationAuthority::_internal_hint() const {
  return *hint_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint& AttestationAuthority::hint() const {
  const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint* p = hint_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.hint)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint*>(
      &::google::devtools::containeranalysis::v1alpha1::_AttestationAuthority_AttestationAuthorityHint_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint* AttestationAuthority::release_hint() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.hint)
  
  ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint* temp = hint_;
  hint_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint* AttestationAuthority::mutable_hint() {
  
  if (hint_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint>(GetArenaNoVirtual());
    hint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.hint)
  return hint_;
}
inline void AttestationAuthority::set_allocated_hint(::google::devtools::containeranalysis::v1alpha1::AttestationAuthority_AttestationAuthorityHint* hint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hint_;
  }
  if (hint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hint, submessage_arena);
    }
    
  } else {
    
  }
  hint_ = hint;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.AttestationAuthority.hint)
}

// -------------------------------------------------------------------

// BuildDetails

// .google.devtools.containeranalysis.v1alpha1.BuildProvenance provenance = 1;
inline bool BuildDetails::has_provenance() const {
  return this != internal_default_instance() && provenance_ != NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::BuildProvenance& BuildDetails::_internal_provenance() const {
  return *provenance_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::BuildProvenance& BuildDetails::provenance() const {
  const ::google::devtools::containeranalysis::v1alpha1::BuildProvenance* p = provenance_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::BuildProvenance*>(
      &::google::devtools::containeranalysis::v1alpha1::_BuildProvenance_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::BuildProvenance* BuildDetails::release_provenance() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance)
  
  ::google::devtools::containeranalysis::v1alpha1::BuildProvenance* temp = provenance_;
  provenance_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::BuildProvenance* BuildDetails::mutable_provenance() {
  
  if (provenance_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::BuildProvenance>(GetArenaNoVirtual());
    provenance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance)
  return provenance_;
}
inline void BuildDetails::set_allocated_provenance(::google::devtools::containeranalysis::v1alpha1::BuildProvenance* provenance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(provenance_);
  }
  if (provenance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      provenance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, provenance, submessage_arena);
    }
    
  } else {
    
  }
  provenance_ = provenance;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance)
}

// string provenance_bytes = 2;
inline void BuildDetails::clear_provenance_bytes() {
  provenance_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildDetails::provenance_bytes() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes)
  return provenance_bytes_.GetNoArena();
}
inline void BuildDetails::set_provenance_bytes(const ::std::string& value) {
  
  provenance_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes)
}
#if LANG_CXX11
inline void BuildDetails::set_provenance_bytes(::std::string&& value) {
  
  provenance_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes)
}
#endif
inline void BuildDetails::set_provenance_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  provenance_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes)
}
inline void BuildDetails::set_provenance_bytes(const char* value, size_t size) {
  
  provenance_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes)
}
inline ::std::string* BuildDetails::mutable_provenance_bytes() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes)
  return provenance_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildDetails::release_provenance_bytes() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes)
  
  return provenance_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildDetails::set_allocated_provenance_bytes(::std::string* provenance_bytes) {
  if (provenance_bytes != NULL) {
    
  } else {
    
  }
  provenance_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provenance_bytes);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes)
}

// -------------------------------------------------------------------

// ScanConfig

// string name = 1;
inline void ScanConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanConfig::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ScanConfig.name)
  return name_.GetNoArena();
}
inline void ScanConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ScanConfig.name)
}
#if LANG_CXX11
inline void ScanConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ScanConfig.name)
}
#endif
inline void ScanConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ScanConfig.name)
}
inline void ScanConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ScanConfig.name)
}
inline ::std::string* ScanConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ScanConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanConfig::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ScanConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ScanConfig.name)
}

// string description = 2;
inline void ScanConfig::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanConfig::description() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ScanConfig.description)
  return description_.GetNoArena();
}
inline void ScanConfig::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ScanConfig.description)
}
#if LANG_CXX11
inline void ScanConfig::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ScanConfig.description)
}
#endif
inline void ScanConfig::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ScanConfig.description)
}
inline void ScanConfig::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ScanConfig.description)
}
inline ::std::string* ScanConfig::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ScanConfig.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanConfig::release_description() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ScanConfig.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanConfig::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ScanConfig.description)
}

// bool enabled = 3;
inline void ScanConfig::clear_enabled() {
  enabled_ = false;
}
inline bool ScanConfig::enabled() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ScanConfig.enabled)
  return enabled_;
}
inline void ScanConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ScanConfig.enabled)
}

// -------------------------------------------------------------------

// GetOccurrenceRequest

// string name = 1;
inline void GetOccurrenceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOccurrenceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.GetOccurrenceRequest.name)
  return name_.GetNoArena();
}
inline void GetOccurrenceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.GetOccurrenceRequest.name)
}
#if LANG_CXX11
inline void GetOccurrenceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.GetOccurrenceRequest.name)
}
#endif
inline void GetOccurrenceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.GetOccurrenceRequest.name)
}
inline void GetOccurrenceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.GetOccurrenceRequest.name)
}
inline ::std::string* GetOccurrenceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.GetOccurrenceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOccurrenceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.GetOccurrenceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOccurrenceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.GetOccurrenceRequest.name)
}

// -------------------------------------------------------------------

// ListOccurrencesRequest

// string name = 1;
inline void ListOccurrencesRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOccurrencesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.name)
  return name_.GetNoArena();
}
inline void ListOccurrencesRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.name)
}
#if LANG_CXX11
inline void ListOccurrencesRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.name)
}
#endif
inline void ListOccurrencesRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.name)
}
inline void ListOccurrencesRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.name)
}
inline ::std::string* ListOccurrencesRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOccurrencesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOccurrencesRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.name)
}

// string parent = 5;
inline void ListOccurrencesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOccurrencesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.parent)
  return parent_.GetNoArena();
}
inline void ListOccurrencesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.parent)
}
#if LANG_CXX11
inline void ListOccurrencesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.parent)
}
#endif
inline void ListOccurrencesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.parent)
}
inline void ListOccurrencesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.parent)
}
inline ::std::string* ListOccurrencesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOccurrencesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOccurrencesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.parent)
}

// string filter = 2;
inline void ListOccurrencesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOccurrencesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.filter)
  return filter_.GetNoArena();
}
inline void ListOccurrencesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.filter)
}
#if LANG_CXX11
inline void ListOccurrencesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.filter)
}
#endif
inline void ListOccurrencesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.filter)
}
inline void ListOccurrencesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.filter)
}
inline ::std::string* ListOccurrencesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOccurrencesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOccurrencesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.filter)
}

// int32 page_size = 3;
inline void ListOccurrencesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListOccurrencesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.page_size)
  return page_size_;
}
inline void ListOccurrencesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.page_size)
}

// string page_token = 4;
inline void ListOccurrencesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOccurrencesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListOccurrencesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.page_token)
}
#if LANG_CXX11
inline void ListOccurrencesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.page_token)
}
#endif
inline void ListOccurrencesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.page_token)
}
inline void ListOccurrencesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.page_token)
}
inline ::std::string* ListOccurrencesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOccurrencesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOccurrencesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.page_token)
}

// .google.devtools.containeranalysis.v1alpha1.Note.Kind kind = 6;
inline void ListOccurrencesRequest::clear_kind() {
  kind_ = 0;
}
inline ::google::devtools::containeranalysis::v1alpha1::Note_Kind ListOccurrencesRequest::kind() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.kind)
  return static_cast< ::google::devtools::containeranalysis::v1alpha1::Note_Kind >(kind_);
}
inline void ListOccurrencesRequest::set_kind(::google::devtools::containeranalysis::v1alpha1::Note_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListOccurrencesRequest.kind)
}

// -------------------------------------------------------------------

// ListOccurrencesResponse

// repeated .google.devtools.containeranalysis.v1alpha1.Occurrence occurrences = 1;
inline int ListOccurrencesResponse::occurrences_size() const {
  return occurrences_.size();
}
inline void ListOccurrencesResponse::clear_occurrences() {
  occurrences_.Clear();
}
inline ::google::devtools::containeranalysis::v1alpha1::Occurrence* ListOccurrencesResponse::mutable_occurrences(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.occurrences)
  return occurrences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Occurrence >*
ListOccurrencesResponse::mutable_occurrences() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.occurrences)
  return &occurrences_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Occurrence& ListOccurrencesResponse::occurrences(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.occurrences)
  return occurrences_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::Occurrence* ListOccurrencesResponse::add_occurrences() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.occurrences)
  return occurrences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Occurrence >&
ListOccurrencesResponse::occurrences() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.occurrences)
  return occurrences_;
}

// string next_page_token = 2;
inline void ListOccurrencesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOccurrencesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListOccurrencesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListOccurrencesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.next_page_token)
}
#endif
inline void ListOccurrencesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.next_page_token)
}
inline void ListOccurrencesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.next_page_token)
}
inline ::std::string* ListOccurrencesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOccurrencesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOccurrencesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListOccurrencesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteOccurrenceRequest

// string name = 1;
inline void DeleteOccurrenceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteOccurrenceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.DeleteOccurrenceRequest.name)
  return name_.GetNoArena();
}
inline void DeleteOccurrenceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.DeleteOccurrenceRequest.name)
}
#if LANG_CXX11
inline void DeleteOccurrenceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.DeleteOccurrenceRequest.name)
}
#endif
inline void DeleteOccurrenceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.DeleteOccurrenceRequest.name)
}
inline void DeleteOccurrenceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.DeleteOccurrenceRequest.name)
}
inline ::std::string* DeleteOccurrenceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.DeleteOccurrenceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteOccurrenceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.DeleteOccurrenceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteOccurrenceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.DeleteOccurrenceRequest.name)
}

// -------------------------------------------------------------------

// CreateOccurrenceRequest

// string name = 1;
inline void CreateOccurrenceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateOccurrenceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.name)
  return name_.GetNoArena();
}
inline void CreateOccurrenceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.name)
}
#if LANG_CXX11
inline void CreateOccurrenceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.name)
}
#endif
inline void CreateOccurrenceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.name)
}
inline void CreateOccurrenceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.name)
}
inline ::std::string* CreateOccurrenceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateOccurrenceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateOccurrenceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.name)
}

// string parent = 3;
inline void CreateOccurrenceRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateOccurrenceRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateOccurrenceRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.parent)
}
#if LANG_CXX11
inline void CreateOccurrenceRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.parent)
}
#endif
inline void CreateOccurrenceRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.parent)
}
inline void CreateOccurrenceRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.parent)
}
inline ::std::string* CreateOccurrenceRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateOccurrenceRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateOccurrenceRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.parent)
}

// .google.devtools.containeranalysis.v1alpha1.Occurrence occurrence = 2;
inline bool CreateOccurrenceRequest::has_occurrence() const {
  return this != internal_default_instance() && occurrence_ != NULL;
}
inline void CreateOccurrenceRequest::clear_occurrence() {
  if (GetArenaNoVirtual() == NULL && occurrence_ != NULL) {
    delete occurrence_;
  }
  occurrence_ = NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Occurrence& CreateOccurrenceRequest::_internal_occurrence() const {
  return *occurrence_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Occurrence& CreateOccurrenceRequest::occurrence() const {
  const ::google::devtools::containeranalysis::v1alpha1::Occurrence* p = occurrence_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.occurrence)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::Occurrence*>(
      &::google::devtools::containeranalysis::v1alpha1::_Occurrence_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::Occurrence* CreateOccurrenceRequest::release_occurrence() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.occurrence)
  
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* temp = occurrence_;
  occurrence_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::Occurrence* CreateOccurrenceRequest::mutable_occurrence() {
  
  if (occurrence_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Occurrence>(GetArenaNoVirtual());
    occurrence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.occurrence)
  return occurrence_;
}
inline void CreateOccurrenceRequest::set_allocated_occurrence(::google::devtools::containeranalysis::v1alpha1::Occurrence* occurrence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete occurrence_;
  }
  if (occurrence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      occurrence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurrence, submessage_arena);
    }
    
  } else {
    
  }
  occurrence_ = occurrence;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.CreateOccurrenceRequest.occurrence)
}

// -------------------------------------------------------------------

// UpdateOccurrenceRequest

// string name = 1;
inline void UpdateOccurrenceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateOccurrenceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.name)
  return name_.GetNoArena();
}
inline void UpdateOccurrenceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.name)
}
#if LANG_CXX11
inline void UpdateOccurrenceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.name)
}
#endif
inline void UpdateOccurrenceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.name)
}
inline void UpdateOccurrenceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.name)
}
inline ::std::string* UpdateOccurrenceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateOccurrenceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateOccurrenceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.name)
}

// .google.devtools.containeranalysis.v1alpha1.Occurrence occurrence = 2;
inline bool UpdateOccurrenceRequest::has_occurrence() const {
  return this != internal_default_instance() && occurrence_ != NULL;
}
inline void UpdateOccurrenceRequest::clear_occurrence() {
  if (GetArenaNoVirtual() == NULL && occurrence_ != NULL) {
    delete occurrence_;
  }
  occurrence_ = NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Occurrence& UpdateOccurrenceRequest::_internal_occurrence() const {
  return *occurrence_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Occurrence& UpdateOccurrenceRequest::occurrence() const {
  const ::google::devtools::containeranalysis::v1alpha1::Occurrence* p = occurrence_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.occurrence)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::Occurrence*>(
      &::google::devtools::containeranalysis::v1alpha1::_Occurrence_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::Occurrence* UpdateOccurrenceRequest::release_occurrence() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.occurrence)
  
  ::google::devtools::containeranalysis::v1alpha1::Occurrence* temp = occurrence_;
  occurrence_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::Occurrence* UpdateOccurrenceRequest::mutable_occurrence() {
  
  if (occurrence_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Occurrence>(GetArenaNoVirtual());
    occurrence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.occurrence)
  return occurrence_;
}
inline void UpdateOccurrenceRequest::set_allocated_occurrence(::google::devtools::containeranalysis::v1alpha1::Occurrence* occurrence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete occurrence_;
  }
  if (occurrence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      occurrence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurrence, submessage_arena);
    }
    
  } else {
    
  }
  occurrence_ = occurrence;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.occurrence)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateOccurrenceRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateOccurrenceRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateOccurrenceRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateOccurrenceRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateOccurrenceRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.update_mask)
  return update_mask_;
}
inline void UpdateOccurrenceRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateOccurrenceRequest.update_mask)
}

// -------------------------------------------------------------------

// GetNoteRequest

// string name = 1;
inline void GetNoteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNoteRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.GetNoteRequest.name)
  return name_.GetNoArena();
}
inline void GetNoteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.GetNoteRequest.name)
}
#if LANG_CXX11
inline void GetNoteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.GetNoteRequest.name)
}
#endif
inline void GetNoteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.GetNoteRequest.name)
}
inline void GetNoteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.GetNoteRequest.name)
}
inline ::std::string* GetNoteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.GetNoteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNoteRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.GetNoteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNoteRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.GetNoteRequest.name)
}

// -------------------------------------------------------------------

// GetOccurrenceNoteRequest

// string name = 1;
inline void GetOccurrenceNoteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOccurrenceNoteRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.GetOccurrenceNoteRequest.name)
  return name_.GetNoArena();
}
inline void GetOccurrenceNoteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.GetOccurrenceNoteRequest.name)
}
#if LANG_CXX11
inline void GetOccurrenceNoteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.GetOccurrenceNoteRequest.name)
}
#endif
inline void GetOccurrenceNoteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.GetOccurrenceNoteRequest.name)
}
inline void GetOccurrenceNoteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.GetOccurrenceNoteRequest.name)
}
inline ::std::string* GetOccurrenceNoteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.GetOccurrenceNoteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOccurrenceNoteRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.GetOccurrenceNoteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOccurrenceNoteRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.GetOccurrenceNoteRequest.name)
}

// -------------------------------------------------------------------

// ListNotesRequest

// string name = 1;
inline void ListNotesRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.name)
  return name_.GetNoArena();
}
inline void ListNotesRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.name)
}
#if LANG_CXX11
inline void ListNotesRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.name)
}
#endif
inline void ListNotesRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.name)
}
inline void ListNotesRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.name)
}
inline ::std::string* ListNotesRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotesRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.name)
}

// string parent = 5;
inline void ListNotesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.parent)
  return parent_.GetNoArena();
}
inline void ListNotesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.parent)
}
#if LANG_CXX11
inline void ListNotesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.parent)
}
#endif
inline void ListNotesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.parent)
}
inline void ListNotesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.parent)
}
inline ::std::string* ListNotesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.parent)
}

// string filter = 2;
inline void ListNotesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.filter)
  return filter_.GetNoArena();
}
inline void ListNotesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.filter)
}
#if LANG_CXX11
inline void ListNotesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.filter)
}
#endif
inline void ListNotesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.filter)
}
inline void ListNotesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.filter)
}
inline ::std::string* ListNotesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.filter)
}

// int32 page_size = 3;
inline void ListNotesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListNotesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.page_size)
  return page_size_;
}
inline void ListNotesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.page_size)
}

// string page_token = 4;
inline void ListNotesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListNotesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.page_token)
}
#if LANG_CXX11
inline void ListNotesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.page_token)
}
#endif
inline void ListNotesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.page_token)
}
inline void ListNotesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.page_token)
}
inline ::std::string* ListNotesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListNotesRequest.page_token)
}

// -------------------------------------------------------------------

// ListNotesResponse

// repeated .google.devtools.containeranalysis.v1alpha1.Note notes = 1;
inline int ListNotesResponse::notes_size() const {
  return notes_.size();
}
inline void ListNotesResponse::clear_notes() {
  notes_.Clear();
}
inline ::google::devtools::containeranalysis::v1alpha1::Note* ListNotesResponse::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.notes)
  return notes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Note >*
ListNotesResponse::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.notes)
  return &notes_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Note& ListNotesResponse::notes(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.notes)
  return notes_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::Note* ListNotesResponse::add_notes() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.notes)
  return notes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Note >&
ListNotesResponse::notes() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.notes)
  return notes_;
}

// string next_page_token = 2;
inline void ListNotesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListNotesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListNotesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.next_page_token)
}
#endif
inline void ListNotesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.next_page_token)
}
inline void ListNotesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.next_page_token)
}
inline ::std::string* ListNotesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListNotesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteNoteRequest

// string name = 1;
inline void DeleteNoteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNoteRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.DeleteNoteRequest.name)
  return name_.GetNoArena();
}
inline void DeleteNoteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.DeleteNoteRequest.name)
}
#if LANG_CXX11
inline void DeleteNoteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.DeleteNoteRequest.name)
}
#endif
inline void DeleteNoteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.DeleteNoteRequest.name)
}
inline void DeleteNoteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.DeleteNoteRequest.name)
}
inline ::std::string* DeleteNoteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.DeleteNoteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNoteRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.DeleteNoteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNoteRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.DeleteNoteRequest.name)
}

// -------------------------------------------------------------------

// CreateNoteRequest

// string name = 1;
inline void CreateNoteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNoteRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.name)
  return name_.GetNoArena();
}
inline void CreateNoteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.name)
}
#if LANG_CXX11
inline void CreateNoteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.name)
}
#endif
inline void CreateNoteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.name)
}
inline void CreateNoteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.name)
}
inline ::std::string* CreateNoteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNoteRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNoteRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.name)
}

// string parent = 4;
inline void CreateNoteRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNoteRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateNoteRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.parent)
}
#if LANG_CXX11
inline void CreateNoteRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.parent)
}
#endif
inline void CreateNoteRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.parent)
}
inline void CreateNoteRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.parent)
}
inline ::std::string* CreateNoteRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNoteRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNoteRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.parent)
}

// string note_id = 2;
inline void CreateNoteRequest::clear_note_id() {
  note_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNoteRequest::note_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note_id)
  return note_id_.GetNoArena();
}
inline void CreateNoteRequest::set_note_id(const ::std::string& value) {
  
  note_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note_id)
}
#if LANG_CXX11
inline void CreateNoteRequest::set_note_id(::std::string&& value) {
  
  note_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note_id)
}
#endif
inline void CreateNoteRequest::set_note_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  note_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note_id)
}
inline void CreateNoteRequest::set_note_id(const char* value, size_t size) {
  
  note_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note_id)
}
inline ::std::string* CreateNoteRequest::mutable_note_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note_id)
  return note_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNoteRequest::release_note_id() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note_id)
  
  return note_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNoteRequest::set_allocated_note_id(::std::string* note_id) {
  if (note_id != NULL) {
    
  } else {
    
  }
  note_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note_id)
}

// .google.devtools.containeranalysis.v1alpha1.Note note = 3;
inline bool CreateNoteRequest::has_note() const {
  return this != internal_default_instance() && note_ != NULL;
}
inline void CreateNoteRequest::clear_note() {
  if (GetArenaNoVirtual() == NULL && note_ != NULL) {
    delete note_;
  }
  note_ = NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Note& CreateNoteRequest::_internal_note() const {
  return *note_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Note& CreateNoteRequest::note() const {
  const ::google::devtools::containeranalysis::v1alpha1::Note* p = note_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::Note*>(
      &::google::devtools::containeranalysis::v1alpha1::_Note_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::Note* CreateNoteRequest::release_note() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note)
  
  ::google::devtools::containeranalysis::v1alpha1::Note* temp = note_;
  note_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::Note* CreateNoteRequest::mutable_note() {
  
  if (note_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Note>(GetArenaNoVirtual());
    note_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note)
  return note_;
}
inline void CreateNoteRequest::set_allocated_note(::google::devtools::containeranalysis::v1alpha1::Note* note) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete note_;
  }
  if (note) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      note = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, note, submessage_arena);
    }
    
  } else {
    
  }
  note_ = note;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.CreateNoteRequest.note)
}

// -------------------------------------------------------------------

// UpdateNoteRequest

// string name = 1;
inline void UpdateNoteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNoteRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.name)
  return name_.GetNoArena();
}
inline void UpdateNoteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.name)
}
#if LANG_CXX11
inline void UpdateNoteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.name)
}
#endif
inline void UpdateNoteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.name)
}
inline void UpdateNoteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.name)
}
inline ::std::string* UpdateNoteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNoteRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNoteRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.name)
}

// .google.devtools.containeranalysis.v1alpha1.Note note = 2;
inline bool UpdateNoteRequest::has_note() const {
  return this != internal_default_instance() && note_ != NULL;
}
inline void UpdateNoteRequest::clear_note() {
  if (GetArenaNoVirtual() == NULL && note_ != NULL) {
    delete note_;
  }
  note_ = NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Note& UpdateNoteRequest::_internal_note() const {
  return *note_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Note& UpdateNoteRequest::note() const {
  const ::google::devtools::containeranalysis::v1alpha1::Note* p = note_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.note)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::Note*>(
      &::google::devtools::containeranalysis::v1alpha1::_Note_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::Note* UpdateNoteRequest::release_note() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.note)
  
  ::google::devtools::containeranalysis::v1alpha1::Note* temp = note_;
  note_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::Note* UpdateNoteRequest::mutable_note() {
  
  if (note_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Note>(GetArenaNoVirtual());
    note_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.note)
  return note_;
}
inline void UpdateNoteRequest::set_allocated_note(::google::devtools::containeranalysis::v1alpha1::Note* note) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete note_;
  }
  if (note) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      note = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, note, submessage_arena);
    }
    
  } else {
    
  }
  note_ = note;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.note)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateNoteRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateNoteRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateNoteRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateNoteRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateNoteRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.update_mask)
  return update_mask_;
}
inline void UpdateNoteRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateNoteRequest.update_mask)
}

// -------------------------------------------------------------------

// ListNoteOccurrencesRequest

// string name = 1;
inline void ListNoteOccurrencesRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNoteOccurrencesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.name)
  return name_.GetNoArena();
}
inline void ListNoteOccurrencesRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.name)
}
#if LANG_CXX11
inline void ListNoteOccurrencesRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.name)
}
#endif
inline void ListNoteOccurrencesRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.name)
}
inline void ListNoteOccurrencesRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.name)
}
inline ::std::string* ListNoteOccurrencesRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNoteOccurrencesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNoteOccurrencesRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.name)
}

// string filter = 2;
inline void ListNoteOccurrencesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNoteOccurrencesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.filter)
  return filter_.GetNoArena();
}
inline void ListNoteOccurrencesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.filter)
}
#if LANG_CXX11
inline void ListNoteOccurrencesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.filter)
}
#endif
inline void ListNoteOccurrencesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.filter)
}
inline void ListNoteOccurrencesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.filter)
}
inline ::std::string* ListNoteOccurrencesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNoteOccurrencesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNoteOccurrencesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.filter)
}

// int32 page_size = 3;
inline void ListNoteOccurrencesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListNoteOccurrencesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.page_size)
  return page_size_;
}
inline void ListNoteOccurrencesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.page_size)
}

// string page_token = 4;
inline void ListNoteOccurrencesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNoteOccurrencesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListNoteOccurrencesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.page_token)
}
#if LANG_CXX11
inline void ListNoteOccurrencesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.page_token)
}
#endif
inline void ListNoteOccurrencesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.page_token)
}
inline void ListNoteOccurrencesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.page_token)
}
inline ::std::string* ListNoteOccurrencesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNoteOccurrencesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNoteOccurrencesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesRequest.page_token)
}

// -------------------------------------------------------------------

// ListNoteOccurrencesResponse

// repeated .google.devtools.containeranalysis.v1alpha1.Occurrence occurrences = 1;
inline int ListNoteOccurrencesResponse::occurrences_size() const {
  return occurrences_.size();
}
inline void ListNoteOccurrencesResponse::clear_occurrences() {
  occurrences_.Clear();
}
inline ::google::devtools::containeranalysis::v1alpha1::Occurrence* ListNoteOccurrencesResponse::mutable_occurrences(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.occurrences)
  return occurrences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Occurrence >*
ListNoteOccurrencesResponse::mutable_occurrences() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.occurrences)
  return &occurrences_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Occurrence& ListNoteOccurrencesResponse::occurrences(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.occurrences)
  return occurrences_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::Occurrence* ListNoteOccurrencesResponse::add_occurrences() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.occurrences)
  return occurrences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Occurrence >&
ListNoteOccurrencesResponse::occurrences() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.occurrences)
  return occurrences_;
}

// string next_page_token = 2;
inline void ListNoteOccurrencesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNoteOccurrencesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListNoteOccurrencesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListNoteOccurrencesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.next_page_token)
}
#endif
inline void ListNoteOccurrencesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.next_page_token)
}
inline void ListNoteOccurrencesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.next_page_token)
}
inline ::std::string* ListNoteOccurrencesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNoteOccurrencesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNoteOccurrencesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListNoteOccurrencesResponse.next_page_token)
}

// -------------------------------------------------------------------

// CreateOperationRequest

// string parent = 1;
inline void CreateOperationRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateOperationRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateOperationRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.parent)
}
#if LANG_CXX11
inline void CreateOperationRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.parent)
}
#endif
inline void CreateOperationRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.parent)
}
inline void CreateOperationRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.parent)
}
inline ::std::string* CreateOperationRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateOperationRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateOperationRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.parent)
}

// string operation_id = 2;
inline void CreateOperationRequest::clear_operation_id() {
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateOperationRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation_id)
  return operation_id_.GetNoArena();
}
inline void CreateOperationRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation_id)
}
#if LANG_CXX11
inline void CreateOperationRequest::set_operation_id(::std::string&& value) {
  
  operation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation_id)
}
#endif
inline void CreateOperationRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation_id)
}
inline void CreateOperationRequest::set_operation_id(const char* value, size_t size) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation_id)
}
inline ::std::string* CreateOperationRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation_id)
  return operation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateOperationRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation_id)
  
  return operation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateOperationRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation_id)
}

// .google.longrunning.Operation operation = 3;
inline bool CreateOperationRequest::has_operation() const {
  return this != internal_default_instance() && operation_ != NULL;
}
inline const ::google::longrunning::Operation& CreateOperationRequest::_internal_operation() const {
  return *operation_;
}
inline const ::google::longrunning::Operation& CreateOperationRequest::operation() const {
  const ::google::longrunning::Operation* p = operation_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::longrunning::Operation*>(
      &::google::longrunning::_Operation_default_instance_);
}
inline ::google::longrunning::Operation* CreateOperationRequest::release_operation() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation)
  
  ::google::longrunning::Operation* temp = operation_;
  operation_ = NULL;
  return temp;
}
inline ::google::longrunning::Operation* CreateOperationRequest::mutable_operation() {
  
  if (operation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::longrunning::Operation>(GetArenaNoVirtual());
    operation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation)
  return operation_;
}
inline void CreateOperationRequest::set_allocated_operation(::google::longrunning::Operation* operation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(operation_);
  }
  if (operation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    
  } else {
    
  }
  operation_ = operation;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.CreateOperationRequest.operation)
}

// -------------------------------------------------------------------

// UpdateOperationRequest

// string name = 1;
inline void UpdateOperationRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateOperationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.name)
  return name_.GetNoArena();
}
inline void UpdateOperationRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.name)
}
#if LANG_CXX11
inline void UpdateOperationRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.name)
}
#endif
inline void UpdateOperationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.name)
}
inline void UpdateOperationRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.name)
}
inline ::std::string* UpdateOperationRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateOperationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateOperationRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.name)
}

// .google.longrunning.Operation operation = 3;
inline bool UpdateOperationRequest::has_operation() const {
  return this != internal_default_instance() && operation_ != NULL;
}
inline const ::google::longrunning::Operation& UpdateOperationRequest::_internal_operation() const {
  return *operation_;
}
inline const ::google::longrunning::Operation& UpdateOperationRequest::operation() const {
  const ::google::longrunning::Operation* p = operation_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.operation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::longrunning::Operation*>(
      &::google::longrunning::_Operation_default_instance_);
}
inline ::google::longrunning::Operation* UpdateOperationRequest::release_operation() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.operation)
  
  ::google::longrunning::Operation* temp = operation_;
  operation_ = NULL;
  return temp;
}
inline ::google::longrunning::Operation* UpdateOperationRequest::mutable_operation() {
  
  if (operation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::longrunning::Operation>(GetArenaNoVirtual());
    operation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.operation)
  return operation_;
}
inline void UpdateOperationRequest::set_allocated_operation(::google::longrunning::Operation* operation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(operation_);
  }
  if (operation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    
  } else {
    
  }
  operation_ = operation;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.operation)
}

// .google.protobuf.FieldMask update_mask = 4;
inline bool UpdateOperationRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateOperationRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateOperationRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateOperationRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateOperationRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.update_mask)
  return update_mask_;
}
inline void UpdateOperationRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateOperationRequest.update_mask)
}

// -------------------------------------------------------------------

// OperationMetadata

// .google.protobuf.Timestamp create_time = 1;
inline bool OperationMetadata::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& OperationMetadata::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& OperationMetadata::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.OperationMetadata.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* OperationMetadata::release_create_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.OperationMetadata.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* OperationMetadata::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.OperationMetadata.create_time)
  return create_time_;
}
inline void OperationMetadata::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.OperationMetadata.create_time)
}

// .google.protobuf.Timestamp end_time = 2;
inline bool OperationMetadata::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& OperationMetadata::_internal_end_time() const {
  return *end_time_;
}
inline const ::google::protobuf::Timestamp& OperationMetadata::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.OperationMetadata.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* OperationMetadata::release_end_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.OperationMetadata.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* OperationMetadata::mutable_end_time() {
  
  if (end_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.OperationMetadata.end_time)
  return end_time_;
}
inline void OperationMetadata::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.OperationMetadata.end_time)
}

// -------------------------------------------------------------------

// GetVulnzOccurrencesSummaryRequest

// string parent = 1;
inline void GetVulnzOccurrencesSummaryRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVulnzOccurrencesSummaryRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.parent)
  return parent_.GetNoArena();
}
inline void GetVulnzOccurrencesSummaryRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.parent)
}
#if LANG_CXX11
inline void GetVulnzOccurrencesSummaryRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.parent)
}
#endif
inline void GetVulnzOccurrencesSummaryRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.parent)
}
inline void GetVulnzOccurrencesSummaryRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.parent)
}
inline ::std::string* GetVulnzOccurrencesSummaryRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVulnzOccurrencesSummaryRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVulnzOccurrencesSummaryRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.parent)
}

// string filter = 2;
inline void GetVulnzOccurrencesSummaryRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVulnzOccurrencesSummaryRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.filter)
  return filter_.GetNoArena();
}
inline void GetVulnzOccurrencesSummaryRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.filter)
}
#if LANG_CXX11
inline void GetVulnzOccurrencesSummaryRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.filter)
}
#endif
inline void GetVulnzOccurrencesSummaryRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.filter)
}
inline void GetVulnzOccurrencesSummaryRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.filter)
}
inline ::std::string* GetVulnzOccurrencesSummaryRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVulnzOccurrencesSummaryRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVulnzOccurrencesSummaryRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryRequest.filter)
}

// -------------------------------------------------------------------

// GetVulnzOccurrencesSummaryResponse_SeverityCount

// .google.devtools.containeranalysis.v1alpha1.VulnerabilityType.Severity severity = 1;
inline void GetVulnzOccurrencesSummaryResponse_SeverityCount::clear_severity() {
  severity_ = 0;
}
inline ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Severity GetVulnzOccurrencesSummaryResponse_SeverityCount::severity() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.SeverityCount.severity)
  return static_cast< ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Severity >(severity_);
}
inline void GetVulnzOccurrencesSummaryResponse_SeverityCount::set_severity(::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Severity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.SeverityCount.severity)
}

// int64 count = 2;
inline void GetVulnzOccurrencesSummaryResponse_SeverityCount::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetVulnzOccurrencesSummaryResponse_SeverityCount::count() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.SeverityCount.count)
  return count_;
}
inline void GetVulnzOccurrencesSummaryResponse_SeverityCount::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.SeverityCount.count)
}

// -------------------------------------------------------------------

// GetVulnzOccurrencesSummaryResponse

// repeated .google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.SeverityCount counts = 1;
inline int GetVulnzOccurrencesSummaryResponse::counts_size() const {
  return counts_.size();
}
inline void GetVulnzOccurrencesSummaryResponse::clear_counts() {
  counts_.Clear();
}
inline ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount* GetVulnzOccurrencesSummaryResponse::mutable_counts(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.counts)
  return counts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount >*
GetVulnzOccurrencesSummaryResponse::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.counts)
  return &counts_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount& GetVulnzOccurrencesSummaryResponse::counts(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.counts)
  return counts_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount* GetVulnzOccurrencesSummaryResponse::add_counts() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.counts)
  return counts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse_SeverityCount >&
GetVulnzOccurrencesSummaryResponse::counts() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.GetVulnzOccurrencesSummaryResponse.counts)
  return counts_;
}

// -------------------------------------------------------------------

// GetScanConfigRequest

// string name = 1;
inline void GetScanConfigRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetScanConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.GetScanConfigRequest.name)
  return name_.GetNoArena();
}
inline void GetScanConfigRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.GetScanConfigRequest.name)
}
#if LANG_CXX11
inline void GetScanConfigRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.GetScanConfigRequest.name)
}
#endif
inline void GetScanConfigRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.GetScanConfigRequest.name)
}
inline void GetScanConfigRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.GetScanConfigRequest.name)
}
inline ::std::string* GetScanConfigRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.GetScanConfigRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetScanConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.GetScanConfigRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetScanConfigRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.GetScanConfigRequest.name)
}

// -------------------------------------------------------------------

// ListScanConfigsRequest

// string parent = 1;
inline void ListScanConfigsRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListScanConfigsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.parent)
  return parent_.GetNoArena();
}
inline void ListScanConfigsRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.parent)
}
#if LANG_CXX11
inline void ListScanConfigsRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.parent)
}
#endif
inline void ListScanConfigsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.parent)
}
inline void ListScanConfigsRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.parent)
}
inline ::std::string* ListScanConfigsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListScanConfigsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListScanConfigsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.parent)
}

// string filter = 2;
inline void ListScanConfigsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListScanConfigsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.filter)
  return filter_.GetNoArena();
}
inline void ListScanConfigsRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.filter)
}
#if LANG_CXX11
inline void ListScanConfigsRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.filter)
}
#endif
inline void ListScanConfigsRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.filter)
}
inline void ListScanConfigsRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.filter)
}
inline ::std::string* ListScanConfigsRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListScanConfigsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListScanConfigsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.filter)
}

// int32 page_size = 3;
inline void ListScanConfigsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListScanConfigsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.page_size)
  return page_size_;
}
inline void ListScanConfigsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.page_size)
}

// string page_token = 4;
inline void ListScanConfigsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListScanConfigsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListScanConfigsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.page_token)
}
#if LANG_CXX11
inline void ListScanConfigsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.page_token)
}
#endif
inline void ListScanConfigsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.page_token)
}
inline void ListScanConfigsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.page_token)
}
inline ::std::string* ListScanConfigsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListScanConfigsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListScanConfigsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListScanConfigsRequest.page_token)
}

// -------------------------------------------------------------------

// ListScanConfigsResponse

// repeated .google.devtools.containeranalysis.v1alpha1.ScanConfig scan_configs = 1;
inline int ListScanConfigsResponse::scan_configs_size() const {
  return scan_configs_.size();
}
inline void ListScanConfigsResponse::clear_scan_configs() {
  scan_configs_.Clear();
}
inline ::google::devtools::containeranalysis::v1alpha1::ScanConfig* ListScanConfigsResponse::mutable_scan_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.scan_configs)
  return scan_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::ScanConfig >*
ListScanConfigsResponse::mutable_scan_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.scan_configs)
  return &scan_configs_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::ScanConfig& ListScanConfigsResponse::scan_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.scan_configs)
  return scan_configs_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::ScanConfig* ListScanConfigsResponse::add_scan_configs() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.scan_configs)
  return scan_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::ScanConfig >&
ListScanConfigsResponse::scan_configs() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.scan_configs)
  return scan_configs_;
}

// string next_page_token = 2;
inline void ListScanConfigsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListScanConfigsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListScanConfigsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListScanConfigsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.next_page_token)
}
#endif
inline void ListScanConfigsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.next_page_token)
}
inline void ListScanConfigsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.next_page_token)
}
inline ::std::string* ListScanConfigsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListScanConfigsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListScanConfigsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.ListScanConfigsResponse.next_page_token)
}

// -------------------------------------------------------------------

// UpdateScanConfigRequest

// string name = 1;
inline void UpdateScanConfigRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateScanConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.name)
  return name_.GetNoArena();
}
inline void UpdateScanConfigRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.name)
}
#if LANG_CXX11
inline void UpdateScanConfigRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.name)
}
#endif
inline void UpdateScanConfigRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.name)
}
inline void UpdateScanConfigRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.name)
}
inline ::std::string* UpdateScanConfigRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateScanConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateScanConfigRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.name)
}

// .google.devtools.containeranalysis.v1alpha1.ScanConfig scan_config = 2;
inline bool UpdateScanConfigRequest::has_scan_config() const {
  return this != internal_default_instance() && scan_config_ != NULL;
}
inline void UpdateScanConfigRequest::clear_scan_config() {
  if (GetArenaNoVirtual() == NULL && scan_config_ != NULL) {
    delete scan_config_;
  }
  scan_config_ = NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::ScanConfig& UpdateScanConfigRequest::_internal_scan_config() const {
  return *scan_config_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::ScanConfig& UpdateScanConfigRequest::scan_config() const {
  const ::google::devtools::containeranalysis::v1alpha1::ScanConfig* p = scan_config_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.scan_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::ScanConfig*>(
      &::google::devtools::containeranalysis::v1alpha1::_ScanConfig_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::ScanConfig* UpdateScanConfigRequest::release_scan_config() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.scan_config)
  
  ::google::devtools::containeranalysis::v1alpha1::ScanConfig* temp = scan_config_;
  scan_config_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::ScanConfig* UpdateScanConfigRequest::mutable_scan_config() {
  
  if (scan_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::ScanConfig>(GetArenaNoVirtual());
    scan_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.scan_config)
  return scan_config_;
}
inline void UpdateScanConfigRequest::set_allocated_scan_config(::google::devtools::containeranalysis::v1alpha1::ScanConfig* scan_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scan_config_;
  }
  if (scan_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scan_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scan_config, submessage_arena);
    }
    
  } else {
    
  }
  scan_config_ = scan_config;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.scan_config)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateScanConfigRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateScanConfigRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateScanConfigRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateScanConfigRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateScanConfigRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.update_mask)
  return update_mask_;
}
inline void UpdateScanConfigRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.UpdateScanConfigRequest.update_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace containeranalysis
}  // namespace devtools
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::devtools::containeranalysis::v1alpha1::Note_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::containeranalysis::v1alpha1::Note_Kind>() {
  return ::google::devtools::containeranalysis::v1alpha1::Note_Kind_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment_Platform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment_Platform>() {
  return ::google::devtools::containeranalysis::v1alpha1::Deployable_Deployment_Platform_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered_AnalysisStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered_AnalysisStatus>() {
  return ::google::devtools::containeranalysis::v1alpha1::Discovery_Discovered_AnalysisStatus_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::containeranalysis::v1alpha1::BuildSignature_KeyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::containeranalysis::v1alpha1::BuildSignature_KeyType>() {
  return ::google::devtools::containeranalysis::v1alpha1::BuildSignature_KeyType_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation_ContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation_ContentType>() {
  return ::google::devtools::containeranalysis::v1alpha1::PgpSignedAttestation_ContentType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto
