// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1alpha1/provenance.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/devtools/containeranalysis/v1alpha1/source_context.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto 

namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto
namespace google {
namespace devtools {
namespace containeranalysis {
namespace v1alpha1 {
class Artifact;
class ArtifactDefaultTypeInternal;
extern ArtifactDefaultTypeInternal _Artifact_default_instance_;
class BuildProvenance;
class BuildProvenanceDefaultTypeInternal;
extern BuildProvenanceDefaultTypeInternal _BuildProvenance_default_instance_;
class BuildProvenance_BuildOptionsEntry_DoNotUse;
class BuildProvenance_BuildOptionsEntry_DoNotUseDefaultTypeInternal;
extern BuildProvenance_BuildOptionsEntry_DoNotUseDefaultTypeInternal _BuildProvenance_BuildOptionsEntry_DoNotUse_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class FileHashes;
class FileHashesDefaultTypeInternal;
extern FileHashesDefaultTypeInternal _FileHashes_default_instance_;
class Hash;
class HashDefaultTypeInternal;
extern HashDefaultTypeInternal _Hash_default_instance_;
class RepoSource;
class RepoSourceDefaultTypeInternal;
extern RepoSourceDefaultTypeInternal _RepoSource_default_instance_;
class Source;
class SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
class Source_FileHashesEntry_DoNotUse;
class Source_FileHashesEntry_DoNotUseDefaultTypeInternal;
extern Source_FileHashesEntry_DoNotUseDefaultTypeInternal _Source_FileHashesEntry_DoNotUse_default_instance_;
class StorageSource;
class StorageSourceDefaultTypeInternal;
extern StorageSourceDefaultTypeInternal _StorageSource_default_instance_;
}  // namespace v1alpha1
}  // namespace containeranalysis
}  // namespace devtools
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::devtools::containeranalysis::v1alpha1::Artifact* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Artifact>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::BuildProvenance* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::BuildProvenance>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::BuildProvenance_BuildOptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::BuildProvenance_BuildOptionsEntry_DoNotUse>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Command* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Command>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::FileHashes* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::FileHashes>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Hash* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Hash>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::RepoSource* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::RepoSource>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Source* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Source>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::Source_FileHashesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Source_FileHashesEntry_DoNotUse>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::StorageSource* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::StorageSource>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace devtools {
namespace containeranalysis {
namespace v1alpha1 {

enum Hash_HashType {
  Hash_HashType_NONE = 0,
  Hash_HashType_SHA256 = 1,
  Hash_HashType_Hash_HashType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Hash_HashType_Hash_HashType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Hash_HashType_IsValid(int value);
const Hash_HashType Hash_HashType_HashType_MIN = Hash_HashType_NONE;
const Hash_HashType Hash_HashType_HashType_MAX = Hash_HashType_SHA256;
const int Hash_HashType_HashType_ARRAYSIZE = Hash_HashType_HashType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Hash_HashType_descriptor();
inline const ::std::string& Hash_HashType_Name(Hash_HashType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Hash_HashType_descriptor(), value);
}
inline bool Hash_HashType_Parse(
    const ::std::string& name, Hash_HashType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Hash_HashType>(
    Hash_HashType_descriptor(), name, value);
}
// ===================================================================

class BuildProvenance_BuildOptionsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<BuildProvenance_BuildOptionsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<BuildProvenance_BuildOptionsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  BuildProvenance_BuildOptionsEntry_DoNotUse();
  BuildProvenance_BuildOptionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const BuildProvenance_BuildOptionsEntry_DoNotUse& other);
  static const BuildProvenance_BuildOptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BuildProvenance_BuildOptionsEntry_DoNotUse*>(&_BuildProvenance_BuildOptionsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class BuildProvenance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.BuildProvenance) */ {
 public:
  BuildProvenance();
  virtual ~BuildProvenance();

  BuildProvenance(const BuildProvenance& from);

  inline BuildProvenance& operator=(const BuildProvenance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuildProvenance(BuildProvenance&& from) noexcept
    : BuildProvenance() {
    *this = ::std::move(from);
  }

  inline BuildProvenance& operator=(BuildProvenance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildProvenance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildProvenance* internal_default_instance() {
    return reinterpret_cast<const BuildProvenance*>(
               &_BuildProvenance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BuildProvenance* other);
  friend void swap(BuildProvenance& a, BuildProvenance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuildProvenance* New() const final {
    return CreateMaybeMessage<BuildProvenance>(NULL);
  }

  BuildProvenance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuildProvenance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuildProvenance& from);
  void MergeFrom(const BuildProvenance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildProvenance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .google.devtools.containeranalysis.v1alpha1.Command commands = 5;
  int commands_size() const;
  void clear_commands();
  static const int kCommandsFieldNumber = 5;
  ::google::devtools::containeranalysis::v1alpha1::Command* mutable_commands(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Command >*
      mutable_commands();
  const ::google::devtools::containeranalysis::v1alpha1::Command& commands(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::Command* add_commands();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Command >&
      commands() const;

  // repeated .google.devtools.containeranalysis.v1alpha1.Artifact built_artifacts = 6;
  int built_artifacts_size() const;
  void clear_built_artifacts();
  static const int kBuiltArtifactsFieldNumber = 6;
  ::google::devtools::containeranalysis::v1alpha1::Artifact* mutable_built_artifacts(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Artifact >*
      mutable_built_artifacts();
  const ::google::devtools::containeranalysis::v1alpha1::Artifact& built_artifacts(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::Artifact* add_built_artifacts();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Artifact >&
      built_artifacts() const;

  // map<string, string> build_options = 16;
  int build_options_size() const;
  void clear_build_options();
  static const int kBuildOptionsFieldNumber = 16;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      build_options() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_build_options();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string project_id = 2;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 2;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string creator = 11;
  void clear_creator();
  static const int kCreatorFieldNumber = 11;
  const ::std::string& creator() const;
  void set_creator(const ::std::string& value);
  #if LANG_CXX11
  void set_creator(::std::string&& value);
  #endif
  void set_creator(const char* value);
  void set_creator(const char* value, size_t size);
  ::std::string* mutable_creator();
  ::std::string* release_creator();
  void set_allocated_creator(::std::string* creator);

  // string logs_bucket = 13;
  void clear_logs_bucket();
  static const int kLogsBucketFieldNumber = 13;
  const ::std::string& logs_bucket() const;
  void set_logs_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_logs_bucket(::std::string&& value);
  #endif
  void set_logs_bucket(const char* value);
  void set_logs_bucket(const char* value, size_t size);
  ::std::string* mutable_logs_bucket();
  ::std::string* release_logs_bucket();
  void set_allocated_logs_bucket(::std::string* logs_bucket);

  // string trigger_id = 15;
  void clear_trigger_id();
  static const int kTriggerIdFieldNumber = 15;
  const ::std::string& trigger_id() const;
  void set_trigger_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_id(::std::string&& value);
  #endif
  void set_trigger_id(const char* value);
  void set_trigger_id(const char* value, size_t size);
  ::std::string* mutable_trigger_id();
  ::std::string* release_trigger_id();
  void set_allocated_trigger_id(::std::string* trigger_id);

  // string builder_version = 17;
  void clear_builder_version();
  static const int kBuilderVersionFieldNumber = 17;
  const ::std::string& builder_version() const;
  void set_builder_version(const ::std::string& value);
  #if LANG_CXX11
  void set_builder_version(::std::string&& value);
  #endif
  void set_builder_version(const char* value);
  void set_builder_version(const char* value, size_t size);
  ::std::string* mutable_builder_version();
  ::std::string* release_builder_version();
  void set_allocated_builder_version(::std::string* builder_version);

  // .google.protobuf.Timestamp create_time = 7;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp start_time = 8;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  public:
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp finish_time = 9;
  bool has_finish_time() const;
  void clear_finish_time();
  static const int kFinishTimeFieldNumber = 9;
  private:
  const ::google::protobuf::Timestamp& _internal_finish_time() const;
  public:
  const ::google::protobuf::Timestamp& finish_time() const;
  ::google::protobuf::Timestamp* release_finish_time();
  ::google::protobuf::Timestamp* mutable_finish_time();
  void set_allocated_finish_time(::google::protobuf::Timestamp* finish_time);

  // .google.devtools.containeranalysis.v1alpha1.Source source_provenance = 14;
  bool has_source_provenance() const;
  void clear_source_provenance();
  static const int kSourceProvenanceFieldNumber = 14;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::Source& _internal_source_provenance() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::Source& source_provenance() const;
  ::google::devtools::containeranalysis::v1alpha1::Source* release_source_provenance();
  ::google::devtools::containeranalysis::v1alpha1::Source* mutable_source_provenance();
  void set_allocated_source_provenance(::google::devtools::containeranalysis::v1alpha1::Source* source_provenance);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.BuildProvenance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Command > commands_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Artifact > built_artifacts_;
  ::google::protobuf::internal::MapField<
      BuildProvenance_BuildOptionsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > build_options_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr creator_;
  ::google::protobuf::internal::ArenaStringPtr logs_bucket_;
  ::google::protobuf::internal::ArenaStringPtr trigger_id_;
  ::google::protobuf::internal::ArenaStringPtr builder_version_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* finish_time_;
  ::google::devtools::containeranalysis::v1alpha1::Source* source_provenance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Source_FileHashesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Source_FileHashesEntry_DoNotUse, 
    ::std::string, ::google::devtools::containeranalysis::v1alpha1::FileHashes,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Source_FileHashesEntry_DoNotUse, 
    ::std::string, ::google::devtools::containeranalysis::v1alpha1::FileHashes,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Source_FileHashesEntry_DoNotUse();
  Source_FileHashesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Source_FileHashesEntry_DoNotUse& other);
  static const Source_FileHashesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Source_FileHashesEntry_DoNotUse*>(&_Source_FileHashesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Source : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Source) */ {
 public:
  Source();
  virtual ~Source();

  Source(const Source& from);

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(Source&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Source& default_instance();

  enum SourceCase {
    kStorageSource = 1,
    kRepoSource = 2,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Source* other);
  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Source* New() const final {
    return CreateMaybeMessage<Source>(NULL);
  }

  Source* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Source* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .google.devtools.containeranalysis.v1alpha1.FileHashes> file_hashes = 3;
  int file_hashes_size() const;
  void clear_file_hashes();
  static const int kFileHashesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::google::devtools::containeranalysis::v1alpha1::FileHashes >&
      file_hashes() const;
  ::google::protobuf::Map< ::std::string, ::google::devtools::containeranalysis::v1alpha1::FileHashes >*
      mutable_file_hashes();

  // repeated .google.devtools.containeranalysis.v1alpha1.SourceContext additional_contexts = 8;
  int additional_contexts_size() const;
  void clear_additional_contexts();
  static const int kAdditionalContextsFieldNumber = 8;
  ::google::devtools::containeranalysis::v1alpha1::SourceContext* mutable_additional_contexts(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::SourceContext >*
      mutable_additional_contexts();
  const ::google::devtools::containeranalysis::v1alpha1::SourceContext& additional_contexts(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::SourceContext* add_additional_contexts();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::SourceContext >&
      additional_contexts() const;

  // .google.devtools.containeranalysis.v1alpha1.StorageSource artifact_storage_source = 4;
  bool has_artifact_storage_source() const;
  void clear_artifact_storage_source();
  static const int kArtifactStorageSourceFieldNumber = 4;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::StorageSource& _internal_artifact_storage_source() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::StorageSource& artifact_storage_source() const;
  ::google::devtools::containeranalysis::v1alpha1::StorageSource* release_artifact_storage_source();
  ::google::devtools::containeranalysis::v1alpha1::StorageSource* mutable_artifact_storage_source();
  void set_allocated_artifact_storage_source(::google::devtools::containeranalysis::v1alpha1::StorageSource* artifact_storage_source);

  // .google.devtools.containeranalysis.v1alpha1.SourceContext context = 7;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 7;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::SourceContext& _internal_context() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::SourceContext& context() const;
  ::google::devtools::containeranalysis::v1alpha1::SourceContext* release_context();
  ::google::devtools::containeranalysis::v1alpha1::SourceContext* mutable_context();
  void set_allocated_context(::google::devtools::containeranalysis::v1alpha1::SourceContext* context);

  // .google.devtools.containeranalysis.v1alpha1.StorageSource storage_source = 1;
  bool has_storage_source() const;
  void clear_storage_source();
  static const int kStorageSourceFieldNumber = 1;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::StorageSource& _internal_storage_source() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::StorageSource& storage_source() const;
  ::google::devtools::containeranalysis::v1alpha1::StorageSource* release_storage_source();
  ::google::devtools::containeranalysis::v1alpha1::StorageSource* mutable_storage_source();
  void set_allocated_storage_source(::google::devtools::containeranalysis::v1alpha1::StorageSource* storage_source);

  // .google.devtools.containeranalysis.v1alpha1.RepoSource repo_source = 2;
  bool has_repo_source() const;
  void clear_repo_source();
  static const int kRepoSourceFieldNumber = 2;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::RepoSource& _internal_repo_source() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::RepoSource& repo_source() const;
  ::google::devtools::containeranalysis::v1alpha1::RepoSource* release_repo_source();
  ::google::devtools::containeranalysis::v1alpha1::RepoSource* mutable_repo_source();
  void set_allocated_repo_source(::google::devtools::containeranalysis::v1alpha1::RepoSource* repo_source);

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Source)
 private:
  void set_has_storage_source();
  void set_has_repo_source();

  inline bool has_source() const;
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Source_FileHashesEntry_DoNotUse,
      ::std::string, ::google::devtools::containeranalysis::v1alpha1::FileHashes,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > file_hashes_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::SourceContext > additional_contexts_;
  ::google::devtools::containeranalysis::v1alpha1::StorageSource* artifact_storage_source_;
  ::google::devtools::containeranalysis::v1alpha1::SourceContext* context_;
  union SourceUnion {
    SourceUnion() {}
    ::google::devtools::containeranalysis::v1alpha1::StorageSource* storage_source_;
    ::google::devtools::containeranalysis::v1alpha1::RepoSource* repo_source_;
  } source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileHashes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.FileHashes) */ {
 public:
  FileHashes();
  virtual ~FileHashes();

  FileHashes(const FileHashes& from);

  inline FileHashes& operator=(const FileHashes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileHashes(FileHashes&& from) noexcept
    : FileHashes() {
    *this = ::std::move(from);
  }

  inline FileHashes& operator=(FileHashes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileHashes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileHashes* internal_default_instance() {
    return reinterpret_cast<const FileHashes*>(
               &_FileHashes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FileHashes* other);
  friend void swap(FileHashes& a, FileHashes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileHashes* New() const final {
    return CreateMaybeMessage<FileHashes>(NULL);
  }

  FileHashes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileHashes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileHashes& from);
  void MergeFrom(const FileHashes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileHashes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.containeranalysis.v1alpha1.Hash file_hash = 1;
  int file_hash_size() const;
  void clear_file_hash();
  static const int kFileHashFieldNumber = 1;
  ::google::devtools::containeranalysis::v1alpha1::Hash* mutable_file_hash(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Hash >*
      mutable_file_hash();
  const ::google::devtools::containeranalysis::v1alpha1::Hash& file_hash(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::Hash* add_file_hash();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Hash >&
      file_hash() const;

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.FileHashes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Hash > file_hash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Hash : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Hash) */ {
 public:
  Hash();
  virtual ~Hash();

  Hash(const Hash& from);

  inline Hash& operator=(const Hash& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hash(Hash&& from) noexcept
    : Hash() {
    *this = ::std::move(from);
  }

  inline Hash& operator=(Hash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Hash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hash* internal_default_instance() {
    return reinterpret_cast<const Hash*>(
               &_Hash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Hash* other);
  friend void swap(Hash& a, Hash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hash* New() const final {
    return CreateMaybeMessage<Hash>(NULL);
  }

  Hash* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Hash>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Hash& from);
  void MergeFrom(const Hash& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Hash_HashType HashType;
  static const HashType NONE =
    Hash_HashType_NONE;
  static const HashType SHA256 =
    Hash_HashType_SHA256;
  static inline bool HashType_IsValid(int value) {
    return Hash_HashType_IsValid(value);
  }
  static const HashType HashType_MIN =
    Hash_HashType_HashType_MIN;
  static const HashType HashType_MAX =
    Hash_HashType_HashType_MAX;
  static const int HashType_ARRAYSIZE =
    Hash_HashType_HashType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HashType_descriptor() {
    return Hash_HashType_descriptor();
  }
  static inline const ::std::string& HashType_Name(HashType value) {
    return Hash_HashType_Name(value);
  }
  static inline bool HashType_Parse(const ::std::string& name,
      HashType* value) {
    return Hash_HashType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.devtools.containeranalysis.v1alpha1.Hash.HashType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::devtools::containeranalysis::v1alpha1::Hash_HashType type() const;
  void set_type(::google::devtools::containeranalysis::v1alpha1::Hash_HashType value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Hash)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.StorageSource) */ {
 public:
  StorageSource();
  virtual ~StorageSource();

  StorageSource(const StorageSource& from);

  inline StorageSource& operator=(const StorageSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StorageSource(StorageSource&& from) noexcept
    : StorageSource() {
    *this = ::std::move(from);
  }

  inline StorageSource& operator=(StorageSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StorageSource* internal_default_instance() {
    return reinterpret_cast<const StorageSource*>(
               &_StorageSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(StorageSource* other);
  friend void swap(StorageSource& a, StorageSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StorageSource* New() const final {
    return CreateMaybeMessage<StorageSource>(NULL);
  }

  StorageSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StorageSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StorageSource& from);
  void MergeFrom(const StorageSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_bucket(::std::string&& value);
  #endif
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // string object = 2;
  void clear_object();
  static const int kObjectFieldNumber = 2;
  const ::std::string& object() const;
  void set_object(const ::std::string& value);
  #if LANG_CXX11
  void set_object(::std::string&& value);
  #endif
  void set_object(const char* value);
  void set_object(const char* value, size_t size);
  ::std::string* mutable_object();
  ::std::string* release_object();
  void set_allocated_object(::std::string* object);

  // int64 generation = 3;
  void clear_generation();
  static const int kGenerationFieldNumber = 3;
  ::google::protobuf::int64 generation() const;
  void set_generation(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.StorageSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr object_;
  ::google::protobuf::int64 generation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RepoSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.RepoSource) */ {
 public:
  RepoSource();
  virtual ~RepoSource();

  RepoSource(const RepoSource& from);

  inline RepoSource& operator=(const RepoSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RepoSource(RepoSource&& from) noexcept
    : RepoSource() {
    *this = ::std::move(from);
  }

  inline RepoSource& operator=(RepoSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RepoSource& default_instance();

  enum RevisionCase {
    kBranchName = 3,
    kTagName = 4,
    kCommitSha = 5,
    REVISION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepoSource* internal_default_instance() {
    return reinterpret_cast<const RepoSource*>(
               &_RepoSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RepoSource* other);
  friend void swap(RepoSource& a, RepoSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RepoSource* New() const final {
    return CreateMaybeMessage<RepoSource>(NULL);
  }

  RepoSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RepoSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RepoSource& from);
  void MergeFrom(const RepoSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepoSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string repo_name = 2;
  void clear_repo_name();
  static const int kRepoNameFieldNumber = 2;
  const ::std::string& repo_name() const;
  void set_repo_name(const ::std::string& value);
  #if LANG_CXX11
  void set_repo_name(::std::string&& value);
  #endif
  void set_repo_name(const char* value);
  void set_repo_name(const char* value, size_t size);
  ::std::string* mutable_repo_name();
  ::std::string* release_repo_name();
  void set_allocated_repo_name(::std::string* repo_name);

  // string branch_name = 3;
  private:
  bool has_branch_name() const;
  public:
  void clear_branch_name();
  static const int kBranchNameFieldNumber = 3;
  const ::std::string& branch_name() const;
  void set_branch_name(const ::std::string& value);
  #if LANG_CXX11
  void set_branch_name(::std::string&& value);
  #endif
  void set_branch_name(const char* value);
  void set_branch_name(const char* value, size_t size);
  ::std::string* mutable_branch_name();
  ::std::string* release_branch_name();
  void set_allocated_branch_name(::std::string* branch_name);

  // string tag_name = 4;
  private:
  bool has_tag_name() const;
  public:
  void clear_tag_name();
  static const int kTagNameFieldNumber = 4;
  const ::std::string& tag_name() const;
  void set_tag_name(const ::std::string& value);
  #if LANG_CXX11
  void set_tag_name(::std::string&& value);
  #endif
  void set_tag_name(const char* value);
  void set_tag_name(const char* value, size_t size);
  ::std::string* mutable_tag_name();
  ::std::string* release_tag_name();
  void set_allocated_tag_name(::std::string* tag_name);

  // string commit_sha = 5;
  private:
  bool has_commit_sha() const;
  public:
  void clear_commit_sha();
  static const int kCommitShaFieldNumber = 5;
  const ::std::string& commit_sha() const;
  void set_commit_sha(const ::std::string& value);
  #if LANG_CXX11
  void set_commit_sha(::std::string&& value);
  #endif
  void set_commit_sha(const char* value);
  void set_commit_sha(const char* value, size_t size);
  ::std::string* mutable_commit_sha();
  ::std::string* release_commit_sha();
  void set_allocated_commit_sha(::std::string* commit_sha);

  void clear_revision();
  RevisionCase revision_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.RepoSource)
 private:
  void set_has_branch_name();
  void set_has_tag_name();
  void set_has_commit_sha();

  inline bool has_revision() const;
  inline void clear_has_revision();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr repo_name_;
  union RevisionUnion {
    RevisionUnion() {}
    ::google::protobuf::internal::ArenaStringPtr branch_name_;
    ::google::protobuf::internal::ArenaStringPtr tag_name_;
    ::google::protobuf::internal::ArenaStringPtr commit_sha_;
  } revision_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(NULL);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string env = 2;
  int env_size() const;
  void clear_env();
  static const int kEnvFieldNumber = 2;
  const ::std::string& env(int index) const;
  ::std::string* mutable_env(int index);
  void set_env(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_env(int index, ::std::string&& value);
  #endif
  void set_env(int index, const char* value);
  void set_env(int index, const char* value, size_t size);
  ::std::string* add_env();
  void add_env(const ::std::string& value);
  #if LANG_CXX11
  void add_env(::std::string&& value);
  #endif
  void add_env(const char* value);
  void add_env(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& env() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_env();

  // repeated string args = 3;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_args(int index, ::std::string&& value);
  #endif
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  #if LANG_CXX11
  void add_args(::std::string&& value);
  #endif
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // repeated string wait_for = 6;
  int wait_for_size() const;
  void clear_wait_for();
  static const int kWaitForFieldNumber = 6;
  const ::std::string& wait_for(int index) const;
  ::std::string* mutable_wait_for(int index);
  void set_wait_for(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_wait_for(int index, ::std::string&& value);
  #endif
  void set_wait_for(int index, const char* value);
  void set_wait_for(int index, const char* value, size_t size);
  ::std::string* add_wait_for();
  void add_wait_for(const ::std::string& value);
  #if LANG_CXX11
  void add_wait_for(::std::string&& value);
  #endif
  void add_wait_for(const char* value);
  void add_wait_for(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& wait_for() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_wait_for();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string dir = 4;
  void clear_dir();
  static const int kDirFieldNumber = 4;
  const ::std::string& dir() const;
  void set_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_dir(::std::string&& value);
  #endif
  void set_dir(const char* value);
  void set_dir(const char* value, size_t size);
  ::std::string* mutable_dir();
  ::std::string* release_dir();
  void set_allocated_dir(::std::string* dir);

  // string id = 5;
  void clear_id();
  static const int kIdFieldNumber = 5;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> env_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::RepeatedPtrField< ::std::string> wait_for_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr dir_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Artifact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.Artifact) */ {
 public:
  Artifact();
  virtual ~Artifact();

  Artifact(const Artifact& from);

  inline Artifact& operator=(const Artifact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Artifact(Artifact&& from) noexcept
    : Artifact() {
    *this = ::std::move(from);
  }

  inline Artifact& operator=(Artifact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Artifact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Artifact* internal_default_instance() {
    return reinterpret_cast<const Artifact*>(
               &_Artifact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Artifact* other);
  friend void swap(Artifact& a, Artifact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Artifact* New() const final {
    return CreateMaybeMessage<Artifact>(NULL);
  }

  Artifact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Artifact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Artifact& from);
  void MergeFrom(const Artifact& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Artifact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 4;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 4;
  const ::std::string& names(int index) const;
  ::std::string* mutable_names(int index);
  void set_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_names(int index, ::std::string&& value);
  #endif
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  ::std::string* add_names();
  void add_names(const ::std::string& value);
  #if LANG_CXX11
  void add_names(::std::string&& value);
  #endif
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string checksum = 2;
  void clear_checksum();
  static const int kChecksumFieldNumber = 2;
  const ::std::string& checksum() const;
  void set_checksum(const ::std::string& value);
  #if LANG_CXX11
  void set_checksum(::std::string&& value);
  #endif
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  ::std::string* mutable_checksum();
  ::std::string* release_checksum();
  void set_allocated_checksum(::std::string* checksum);

  // string id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.Artifact)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr checksum_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BuildProvenance

// string id = 1;
inline void BuildProvenance::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildProvenance::id() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.id)
  return id_.GetNoArena();
}
inline void BuildProvenance::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildProvenance.id)
}
#if LANG_CXX11
inline void BuildProvenance::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.BuildProvenance.id)
}
#endif
inline void BuildProvenance::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.BuildProvenance.id)
}
inline void BuildProvenance::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.BuildProvenance.id)
}
inline ::std::string* BuildProvenance::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildProvenance::release_id() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildProvenance.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildProvenance::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildProvenance.id)
}

// string project_id = 2;
inline void BuildProvenance::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildProvenance::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.project_id)
  return project_id_.GetNoArena();
}
inline void BuildProvenance::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildProvenance.project_id)
}
#if LANG_CXX11
inline void BuildProvenance::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.BuildProvenance.project_id)
}
#endif
inline void BuildProvenance::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.BuildProvenance.project_id)
}
inline void BuildProvenance::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.BuildProvenance.project_id)
}
inline ::std::string* BuildProvenance::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildProvenance::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildProvenance.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildProvenance::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildProvenance.project_id)
}

// repeated .google.devtools.containeranalysis.v1alpha1.Command commands = 5;
inline int BuildProvenance::commands_size() const {
  return commands_.size();
}
inline void BuildProvenance::clear_commands() {
  commands_.Clear();
}
inline ::google::devtools::containeranalysis::v1alpha1::Command* BuildProvenance::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.commands)
  return commands_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Command >*
BuildProvenance::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.BuildProvenance.commands)
  return &commands_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Command& BuildProvenance::commands(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.commands)
  return commands_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::Command* BuildProvenance::add_commands() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.BuildProvenance.commands)
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Command >&
BuildProvenance::commands() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.BuildProvenance.commands)
  return commands_;
}

// repeated .google.devtools.containeranalysis.v1alpha1.Artifact built_artifacts = 6;
inline int BuildProvenance::built_artifacts_size() const {
  return built_artifacts_.size();
}
inline void BuildProvenance::clear_built_artifacts() {
  built_artifacts_.Clear();
}
inline ::google::devtools::containeranalysis::v1alpha1::Artifact* BuildProvenance::mutable_built_artifacts(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.built_artifacts)
  return built_artifacts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Artifact >*
BuildProvenance::mutable_built_artifacts() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.BuildProvenance.built_artifacts)
  return &built_artifacts_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Artifact& BuildProvenance::built_artifacts(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.built_artifacts)
  return built_artifacts_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::Artifact* BuildProvenance::add_built_artifacts() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.BuildProvenance.built_artifacts)
  return built_artifacts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Artifact >&
BuildProvenance::built_artifacts() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.BuildProvenance.built_artifacts)
  return built_artifacts_;
}

// .google.protobuf.Timestamp create_time = 7;
inline bool BuildProvenance::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& BuildProvenance::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& BuildProvenance::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* BuildProvenance::release_create_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildProvenance.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* BuildProvenance::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.create_time)
  return create_time_;
}
inline void BuildProvenance::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildProvenance.create_time)
}

// .google.protobuf.Timestamp start_time = 8;
inline bool BuildProvenance::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& BuildProvenance::_internal_start_time() const {
  return *start_time_;
}
inline const ::google::protobuf::Timestamp& BuildProvenance::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* BuildProvenance::release_start_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildProvenance.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* BuildProvenance::mutable_start_time() {
  
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.start_time)
  return start_time_;
}
inline void BuildProvenance::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildProvenance.start_time)
}

// .google.protobuf.Timestamp finish_time = 9;
inline bool BuildProvenance::has_finish_time() const {
  return this != internal_default_instance() && finish_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& BuildProvenance::_internal_finish_time() const {
  return *finish_time_;
}
inline const ::google::protobuf::Timestamp& BuildProvenance::finish_time() const {
  const ::google::protobuf::Timestamp* p = finish_time_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.finish_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* BuildProvenance::release_finish_time() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildProvenance.finish_time)
  
  ::google::protobuf::Timestamp* temp = finish_time_;
  finish_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* BuildProvenance::mutable_finish_time() {
  
  if (finish_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    finish_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.finish_time)
  return finish_time_;
}
inline void BuildProvenance::set_allocated_finish_time(::google::protobuf::Timestamp* finish_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(finish_time_);
  }
  if (finish_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(finish_time)->GetArena();
    if (message_arena != submessage_arena) {
      finish_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, finish_time, submessage_arena);
    }
    
  } else {
    
  }
  finish_time_ = finish_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildProvenance.finish_time)
}

// string creator = 11;
inline void BuildProvenance::clear_creator() {
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildProvenance::creator() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.creator)
  return creator_.GetNoArena();
}
inline void BuildProvenance::set_creator(const ::std::string& value) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildProvenance.creator)
}
#if LANG_CXX11
inline void BuildProvenance::set_creator(::std::string&& value) {
  
  creator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.BuildProvenance.creator)
}
#endif
inline void BuildProvenance::set_creator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.BuildProvenance.creator)
}
inline void BuildProvenance::set_creator(const char* value, size_t size) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.BuildProvenance.creator)
}
inline ::std::string* BuildProvenance::mutable_creator() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.creator)
  return creator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildProvenance::release_creator() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildProvenance.creator)
  
  return creator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildProvenance::set_allocated_creator(::std::string* creator) {
  if (creator != NULL) {
    
  } else {
    
  }
  creator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildProvenance.creator)
}

// string logs_bucket = 13;
inline void BuildProvenance::clear_logs_bucket() {
  logs_bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildProvenance::logs_bucket() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.logs_bucket)
  return logs_bucket_.GetNoArena();
}
inline void BuildProvenance::set_logs_bucket(const ::std::string& value) {
  
  logs_bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildProvenance.logs_bucket)
}
#if LANG_CXX11
inline void BuildProvenance::set_logs_bucket(::std::string&& value) {
  
  logs_bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.BuildProvenance.logs_bucket)
}
#endif
inline void BuildProvenance::set_logs_bucket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logs_bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.BuildProvenance.logs_bucket)
}
inline void BuildProvenance::set_logs_bucket(const char* value, size_t size) {
  
  logs_bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.BuildProvenance.logs_bucket)
}
inline ::std::string* BuildProvenance::mutable_logs_bucket() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.logs_bucket)
  return logs_bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildProvenance::release_logs_bucket() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildProvenance.logs_bucket)
  
  return logs_bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildProvenance::set_allocated_logs_bucket(::std::string* logs_bucket) {
  if (logs_bucket != NULL) {
    
  } else {
    
  }
  logs_bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logs_bucket);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildProvenance.logs_bucket)
}

// .google.devtools.containeranalysis.v1alpha1.Source source_provenance = 14;
inline bool BuildProvenance::has_source_provenance() const {
  return this != internal_default_instance() && source_provenance_ != NULL;
}
inline void BuildProvenance::clear_source_provenance() {
  if (GetArenaNoVirtual() == NULL && source_provenance_ != NULL) {
    delete source_provenance_;
  }
  source_provenance_ = NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Source& BuildProvenance::_internal_source_provenance() const {
  return *source_provenance_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Source& BuildProvenance::source_provenance() const {
  const ::google::devtools::containeranalysis::v1alpha1::Source* p = source_provenance_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.source_provenance)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::Source*>(
      &::google::devtools::containeranalysis::v1alpha1::_Source_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::Source* BuildProvenance::release_source_provenance() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildProvenance.source_provenance)
  
  ::google::devtools::containeranalysis::v1alpha1::Source* temp = source_provenance_;
  source_provenance_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::Source* BuildProvenance::mutable_source_provenance() {
  
  if (source_provenance_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::Source>(GetArenaNoVirtual());
    source_provenance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.source_provenance)
  return source_provenance_;
}
inline void BuildProvenance::set_allocated_source_provenance(::google::devtools::containeranalysis::v1alpha1::Source* source_provenance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_provenance_;
  }
  if (source_provenance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_provenance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_provenance, submessage_arena);
    }
    
  } else {
    
  }
  source_provenance_ = source_provenance;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildProvenance.source_provenance)
}

// string trigger_id = 15;
inline void BuildProvenance::clear_trigger_id() {
  trigger_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildProvenance::trigger_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.trigger_id)
  return trigger_id_.GetNoArena();
}
inline void BuildProvenance::set_trigger_id(const ::std::string& value) {
  
  trigger_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildProvenance.trigger_id)
}
#if LANG_CXX11
inline void BuildProvenance::set_trigger_id(::std::string&& value) {
  
  trigger_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.BuildProvenance.trigger_id)
}
#endif
inline void BuildProvenance::set_trigger_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trigger_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.BuildProvenance.trigger_id)
}
inline void BuildProvenance::set_trigger_id(const char* value, size_t size) {
  
  trigger_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.BuildProvenance.trigger_id)
}
inline ::std::string* BuildProvenance::mutable_trigger_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.trigger_id)
  return trigger_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildProvenance::release_trigger_id() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildProvenance.trigger_id)
  
  return trigger_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildProvenance::set_allocated_trigger_id(::std::string* trigger_id) {
  if (trigger_id != NULL) {
    
  } else {
    
  }
  trigger_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildProvenance.trigger_id)
}

// map<string, string> build_options = 16;
inline int BuildProvenance::build_options_size() const {
  return build_options_.size();
}
inline void BuildProvenance::clear_build_options() {
  build_options_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
BuildProvenance::build_options() const {
  // @@protoc_insertion_point(field_map:google.devtools.containeranalysis.v1alpha1.BuildProvenance.build_options)
  return build_options_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
BuildProvenance::mutable_build_options() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.containeranalysis.v1alpha1.BuildProvenance.build_options)
  return build_options_.MutableMap();
}

// string builder_version = 17;
inline void BuildProvenance::clear_builder_version() {
  builder_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildProvenance::builder_version() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.BuildProvenance.builder_version)
  return builder_version_.GetNoArena();
}
inline void BuildProvenance::set_builder_version(const ::std::string& value) {
  
  builder_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.BuildProvenance.builder_version)
}
#if LANG_CXX11
inline void BuildProvenance::set_builder_version(::std::string&& value) {
  
  builder_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.BuildProvenance.builder_version)
}
#endif
inline void BuildProvenance::set_builder_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  builder_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.BuildProvenance.builder_version)
}
inline void BuildProvenance::set_builder_version(const char* value, size_t size) {
  
  builder_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.BuildProvenance.builder_version)
}
inline ::std::string* BuildProvenance::mutable_builder_version() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.BuildProvenance.builder_version)
  return builder_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildProvenance::release_builder_version() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.BuildProvenance.builder_version)
  
  return builder_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildProvenance::set_allocated_builder_version(::std::string* builder_version) {
  if (builder_version != NULL) {
    
  } else {
    
  }
  builder_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), builder_version);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.BuildProvenance.builder_version)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Source

// .google.devtools.containeranalysis.v1alpha1.StorageSource storage_source = 1;
inline bool Source::has_storage_source() const {
  return source_case() == kStorageSource;
}
inline void Source::set_has_storage_source() {
  _oneof_case_[0] = kStorageSource;
}
inline void Source::clear_storage_source() {
  if (has_storage_source()) {
    delete source_.storage_source_;
    clear_has_source();
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::StorageSource& Source::_internal_storage_source() const {
  return *source_.storage_source_;
}
inline ::google::devtools::containeranalysis::v1alpha1::StorageSource* Source::release_storage_source() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Source.storage_source)
  if (has_storage_source()) {
    clear_has_source();
      ::google::devtools::containeranalysis::v1alpha1::StorageSource* temp = source_.storage_source_;
    source_.storage_source_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::StorageSource& Source::storage_source() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Source.storage_source)
  return has_storage_source()
      ? *source_.storage_source_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::StorageSource*>(&::google::devtools::containeranalysis::v1alpha1::_StorageSource_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::StorageSource* Source::mutable_storage_source() {
  if (!has_storage_source()) {
    clear_source();
    set_has_storage_source();
    source_.storage_source_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::StorageSource >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Source.storage_source)
  return source_.storage_source_;
}

// .google.devtools.containeranalysis.v1alpha1.RepoSource repo_source = 2;
inline bool Source::has_repo_source() const {
  return source_case() == kRepoSource;
}
inline void Source::set_has_repo_source() {
  _oneof_case_[0] = kRepoSource;
}
inline void Source::clear_repo_source() {
  if (has_repo_source()) {
    delete source_.repo_source_;
    clear_has_source();
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::RepoSource& Source::_internal_repo_source() const {
  return *source_.repo_source_;
}
inline ::google::devtools::containeranalysis::v1alpha1::RepoSource* Source::release_repo_source() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Source.repo_source)
  if (has_repo_source()) {
    clear_has_source();
      ::google::devtools::containeranalysis::v1alpha1::RepoSource* temp = source_.repo_source_;
    source_.repo_source_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::containeranalysis::v1alpha1::RepoSource& Source::repo_source() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Source.repo_source)
  return has_repo_source()
      ? *source_.repo_source_
      : *reinterpret_cast< ::google::devtools::containeranalysis::v1alpha1::RepoSource*>(&::google::devtools::containeranalysis::v1alpha1::_RepoSource_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::RepoSource* Source::mutable_repo_source() {
  if (!has_repo_source()) {
    clear_source();
    set_has_repo_source();
    source_.repo_source_ = CreateMaybeMessage< ::google::devtools::containeranalysis::v1alpha1::RepoSource >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Source.repo_source)
  return source_.repo_source_;
}

// .google.devtools.containeranalysis.v1alpha1.StorageSource artifact_storage_source = 4;
inline bool Source::has_artifact_storage_source() const {
  return this != internal_default_instance() && artifact_storage_source_ != NULL;
}
inline void Source::clear_artifact_storage_source() {
  if (GetArenaNoVirtual() == NULL && artifact_storage_source_ != NULL) {
    delete artifact_storage_source_;
  }
  artifact_storage_source_ = NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::StorageSource& Source::_internal_artifact_storage_source() const {
  return *artifact_storage_source_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::StorageSource& Source::artifact_storage_source() const {
  const ::google::devtools::containeranalysis::v1alpha1::StorageSource* p = artifact_storage_source_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Source.artifact_storage_source)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::StorageSource*>(
      &::google::devtools::containeranalysis::v1alpha1::_StorageSource_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::StorageSource* Source::release_artifact_storage_source() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Source.artifact_storage_source)
  
  ::google::devtools::containeranalysis::v1alpha1::StorageSource* temp = artifact_storage_source_;
  artifact_storage_source_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::StorageSource* Source::mutable_artifact_storage_source() {
  
  if (artifact_storage_source_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::StorageSource>(GetArenaNoVirtual());
    artifact_storage_source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Source.artifact_storage_source)
  return artifact_storage_source_;
}
inline void Source::set_allocated_artifact_storage_source(::google::devtools::containeranalysis::v1alpha1::StorageSource* artifact_storage_source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete artifact_storage_source_;
  }
  if (artifact_storage_source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      artifact_storage_source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_storage_source, submessage_arena);
    }
    
  } else {
    
  }
  artifact_storage_source_ = artifact_storage_source;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Source.artifact_storage_source)
}

// map<string, .google.devtools.containeranalysis.v1alpha1.FileHashes> file_hashes = 3;
inline int Source::file_hashes_size() const {
  return file_hashes_.size();
}
inline void Source::clear_file_hashes() {
  file_hashes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::devtools::containeranalysis::v1alpha1::FileHashes >&
Source::file_hashes() const {
  // @@protoc_insertion_point(field_map:google.devtools.containeranalysis.v1alpha1.Source.file_hashes)
  return file_hashes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::devtools::containeranalysis::v1alpha1::FileHashes >*
Source::mutable_file_hashes() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.containeranalysis.v1alpha1.Source.file_hashes)
  return file_hashes_.MutableMap();
}

// .google.devtools.containeranalysis.v1alpha1.SourceContext context = 7;
inline bool Source::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::SourceContext& Source::_internal_context() const {
  return *context_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::SourceContext& Source::context() const {
  const ::google::devtools::containeranalysis::v1alpha1::SourceContext* p = context_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Source.context)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::SourceContext*>(
      &::google::devtools::containeranalysis::v1alpha1::_SourceContext_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::SourceContext* Source::release_context() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Source.context)
  
  ::google::devtools::containeranalysis::v1alpha1::SourceContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::SourceContext* Source::mutable_context() {
  
  if (context_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::SourceContext>(GetArenaNoVirtual());
    context_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Source.context)
  return context_;
}
inline void Source::set_allocated_context(::google::devtools::containeranalysis::v1alpha1::SourceContext* context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(context_);
  }
  if (context) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Source.context)
}

// repeated .google.devtools.containeranalysis.v1alpha1.SourceContext additional_contexts = 8;
inline int Source::additional_contexts_size() const {
  return additional_contexts_.size();
}
inline ::google::devtools::containeranalysis::v1alpha1::SourceContext* Source::mutable_additional_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Source.additional_contexts)
  return additional_contexts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::SourceContext >*
Source::mutable_additional_contexts() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.Source.additional_contexts)
  return &additional_contexts_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::SourceContext& Source::additional_contexts(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Source.additional_contexts)
  return additional_contexts_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::SourceContext* Source::add_additional_contexts() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Source.additional_contexts)
  return additional_contexts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::SourceContext >&
Source::additional_contexts() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.Source.additional_contexts)
  return additional_contexts_;
}

inline bool Source::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void Source::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline Source::SourceCase Source::source_case() const {
  return Source::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileHashes

// repeated .google.devtools.containeranalysis.v1alpha1.Hash file_hash = 1;
inline int FileHashes::file_hash_size() const {
  return file_hash_.size();
}
inline void FileHashes::clear_file_hash() {
  file_hash_.Clear();
}
inline ::google::devtools::containeranalysis::v1alpha1::Hash* FileHashes::mutable_file_hash(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.FileHashes.file_hash)
  return file_hash_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Hash >*
FileHashes::mutable_file_hash() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.FileHashes.file_hash)
  return &file_hash_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::Hash& FileHashes::file_hash(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.FileHashes.file_hash)
  return file_hash_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::Hash* FileHashes::add_file_hash() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.FileHashes.file_hash)
  return file_hash_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::Hash >&
FileHashes::file_hash() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.FileHashes.file_hash)
  return file_hash_;
}

// -------------------------------------------------------------------

// Hash

// .google.devtools.containeranalysis.v1alpha1.Hash.HashType type = 1;
inline void Hash::clear_type() {
  type_ = 0;
}
inline ::google::devtools::containeranalysis::v1alpha1::Hash_HashType Hash::type() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Hash.type)
  return static_cast< ::google::devtools::containeranalysis::v1alpha1::Hash_HashType >(type_);
}
inline void Hash::set_type(::google::devtools::containeranalysis::v1alpha1::Hash_HashType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Hash.type)
}

// bytes value = 2;
inline void Hash::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Hash::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Hash.value)
  return value_.GetNoArena();
}
inline void Hash::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Hash.value)
}
#if LANG_CXX11
inline void Hash::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Hash.value)
}
#endif
inline void Hash::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Hash.value)
}
inline void Hash::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Hash.value)
}
inline ::std::string* Hash::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Hash.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hash::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Hash.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hash::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Hash.value)
}

// -------------------------------------------------------------------

// StorageSource

// string bucket = 1;
inline void StorageSource::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageSource::bucket() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.StorageSource.bucket)
  return bucket_.GetNoArena();
}
inline void StorageSource::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.StorageSource.bucket)
}
#if LANG_CXX11
inline void StorageSource::set_bucket(::std::string&& value) {
  
  bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.StorageSource.bucket)
}
#endif
inline void StorageSource::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.StorageSource.bucket)
}
inline void StorageSource::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.StorageSource.bucket)
}
inline ::std::string* StorageSource::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.StorageSource.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageSource::release_bucket() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.StorageSource.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageSource::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.StorageSource.bucket)
}

// string object = 2;
inline void StorageSource::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageSource::object() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.StorageSource.object)
  return object_.GetNoArena();
}
inline void StorageSource::set_object(const ::std::string& value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.StorageSource.object)
}
#if LANG_CXX11
inline void StorageSource::set_object(::std::string&& value) {
  
  object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.StorageSource.object)
}
#endif
inline void StorageSource::set_object(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.StorageSource.object)
}
inline void StorageSource::set_object(const char* value, size_t size) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.StorageSource.object)
}
inline ::std::string* StorageSource::mutable_object() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.StorageSource.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageSource::release_object() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.StorageSource.object)
  
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageSource::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    
  } else {
    
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.StorageSource.object)
}

// int64 generation = 3;
inline void StorageSource::clear_generation() {
  generation_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StorageSource::generation() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.StorageSource.generation)
  return generation_;
}
inline void StorageSource::set_generation(::google::protobuf::int64 value) {
  
  generation_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.StorageSource.generation)
}

// -------------------------------------------------------------------

// RepoSource

// string project_id = 1;
inline void RepoSource::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RepoSource::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.RepoSource.project_id)
  return project_id_.GetNoArena();
}
inline void RepoSource::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.RepoSource.project_id)
}
#if LANG_CXX11
inline void RepoSource::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.RepoSource.project_id)
}
#endif
inline void RepoSource::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.RepoSource.project_id)
}
inline void RepoSource::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.RepoSource.project_id)
}
inline ::std::string* RepoSource::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.RepoSource.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepoSource::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.RepoSource.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepoSource::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.RepoSource.project_id)
}

// string repo_name = 2;
inline void RepoSource::clear_repo_name() {
  repo_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RepoSource::repo_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.RepoSource.repo_name)
  return repo_name_.GetNoArena();
}
inline void RepoSource::set_repo_name(const ::std::string& value) {
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.RepoSource.repo_name)
}
#if LANG_CXX11
inline void RepoSource::set_repo_name(::std::string&& value) {
  
  repo_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.RepoSource.repo_name)
}
#endif
inline void RepoSource::set_repo_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.RepoSource.repo_name)
}
inline void RepoSource::set_repo_name(const char* value, size_t size) {
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.RepoSource.repo_name)
}
inline ::std::string* RepoSource::mutable_repo_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.RepoSource.repo_name)
  return repo_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepoSource::release_repo_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.RepoSource.repo_name)
  
  return repo_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepoSource::set_allocated_repo_name(::std::string* repo_name) {
  if (repo_name != NULL) {
    
  } else {
    
  }
  repo_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repo_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.RepoSource.repo_name)
}

// string branch_name = 3;
inline bool RepoSource::has_branch_name() const {
  return revision_case() == kBranchName;
}
inline void RepoSource::set_has_branch_name() {
  _oneof_case_[0] = kBranchName;
}
inline void RepoSource::clear_branch_name() {
  if (has_branch_name()) {
    revision_.branch_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_revision();
  }
}
inline const ::std::string& RepoSource::branch_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.RepoSource.branch_name)
  if (has_branch_name()) {
    return revision_.branch_name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RepoSource::set_branch_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.RepoSource.branch_name)
  if (!has_branch_name()) {
    clear_revision();
    set_has_branch_name();
    revision_.branch_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.branch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.RepoSource.branch_name)
}
#if LANG_CXX11
inline void RepoSource::set_branch_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.RepoSource.branch_name)
  if (!has_branch_name()) {
    clear_revision();
    set_has_branch_name();
    revision_.branch_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.branch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.RepoSource.branch_name)
}
#endif
inline void RepoSource::set_branch_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_branch_name()) {
    clear_revision();
    set_has_branch_name();
    revision_.branch_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.branch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.RepoSource.branch_name)
}
inline void RepoSource::set_branch_name(const char* value, size_t size) {
  if (!has_branch_name()) {
    clear_revision();
    set_has_branch_name();
    revision_.branch_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.branch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.RepoSource.branch_name)
}
inline ::std::string* RepoSource::mutable_branch_name() {
  if (!has_branch_name()) {
    clear_revision();
    set_has_branch_name();
    revision_.branch_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.RepoSource.branch_name)
  return revision_.branch_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepoSource::release_branch_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.RepoSource.branch_name)
  if (has_branch_name()) {
    clear_has_revision();
    return revision_.branch_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RepoSource::set_allocated_branch_name(::std::string* branch_name) {
  if (!has_branch_name()) {
    revision_.branch_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_revision();
  if (branch_name != NULL) {
    set_has_branch_name();
    revision_.branch_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branch_name);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.RepoSource.branch_name)
}

// string tag_name = 4;
inline bool RepoSource::has_tag_name() const {
  return revision_case() == kTagName;
}
inline void RepoSource::set_has_tag_name() {
  _oneof_case_[0] = kTagName;
}
inline void RepoSource::clear_tag_name() {
  if (has_tag_name()) {
    revision_.tag_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_revision();
  }
}
inline const ::std::string& RepoSource::tag_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.RepoSource.tag_name)
  if (has_tag_name()) {
    return revision_.tag_name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RepoSource::set_tag_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.RepoSource.tag_name)
  if (!has_tag_name()) {
    clear_revision();
    set_has_tag_name();
    revision_.tag_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.RepoSource.tag_name)
}
#if LANG_CXX11
inline void RepoSource::set_tag_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.RepoSource.tag_name)
  if (!has_tag_name()) {
    clear_revision();
    set_has_tag_name();
    revision_.tag_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.RepoSource.tag_name)
}
#endif
inline void RepoSource::set_tag_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_tag_name()) {
    clear_revision();
    set_has_tag_name();
    revision_.tag_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.RepoSource.tag_name)
}
inline void RepoSource::set_tag_name(const char* value, size_t size) {
  if (!has_tag_name()) {
    clear_revision();
    set_has_tag_name();
    revision_.tag_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.RepoSource.tag_name)
}
inline ::std::string* RepoSource::mutable_tag_name() {
  if (!has_tag_name()) {
    clear_revision();
    set_has_tag_name();
    revision_.tag_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.RepoSource.tag_name)
  return revision_.tag_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepoSource::release_tag_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.RepoSource.tag_name)
  if (has_tag_name()) {
    clear_has_revision();
    return revision_.tag_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RepoSource::set_allocated_tag_name(::std::string* tag_name) {
  if (!has_tag_name()) {
    revision_.tag_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_revision();
  if (tag_name != NULL) {
    set_has_tag_name();
    revision_.tag_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag_name);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.RepoSource.tag_name)
}

// string commit_sha = 5;
inline bool RepoSource::has_commit_sha() const {
  return revision_case() == kCommitSha;
}
inline void RepoSource::set_has_commit_sha() {
  _oneof_case_[0] = kCommitSha;
}
inline void RepoSource::clear_commit_sha() {
  if (has_commit_sha()) {
    revision_.commit_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_revision();
  }
}
inline const ::std::string& RepoSource::commit_sha() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.RepoSource.commit_sha)
  if (has_commit_sha()) {
    return revision_.commit_sha_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RepoSource::set_commit_sha(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.RepoSource.commit_sha)
  if (!has_commit_sha()) {
    clear_revision();
    set_has_commit_sha();
    revision_.commit_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.commit_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.RepoSource.commit_sha)
}
#if LANG_CXX11
inline void RepoSource::set_commit_sha(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.RepoSource.commit_sha)
  if (!has_commit_sha()) {
    clear_revision();
    set_has_commit_sha();
    revision_.commit_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.commit_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.RepoSource.commit_sha)
}
#endif
inline void RepoSource::set_commit_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_commit_sha()) {
    clear_revision();
    set_has_commit_sha();
    revision_.commit_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.commit_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.RepoSource.commit_sha)
}
inline void RepoSource::set_commit_sha(const char* value, size_t size) {
  if (!has_commit_sha()) {
    clear_revision();
    set_has_commit_sha();
    revision_.commit_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.commit_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.RepoSource.commit_sha)
}
inline ::std::string* RepoSource::mutable_commit_sha() {
  if (!has_commit_sha()) {
    clear_revision();
    set_has_commit_sha();
    revision_.commit_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.RepoSource.commit_sha)
  return revision_.commit_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepoSource::release_commit_sha() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.RepoSource.commit_sha)
  if (has_commit_sha()) {
    clear_has_revision();
    return revision_.commit_sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RepoSource::set_allocated_commit_sha(::std::string* commit_sha) {
  if (!has_commit_sha()) {
    revision_.commit_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_revision();
  if (commit_sha != NULL) {
    set_has_commit_sha();
    revision_.commit_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commit_sha);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.RepoSource.commit_sha)
}

inline bool RepoSource::has_revision() const {
  return revision_case() != REVISION_NOT_SET;
}
inline void RepoSource::clear_has_revision() {
  _oneof_case_[0] = REVISION_NOT_SET;
}
inline RepoSource::RevisionCase RepoSource::revision_case() const {
  return RepoSource::RevisionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Command

// string name = 1;
inline void Command::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Command.name)
  return name_.GetNoArena();
}
inline void Command::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Command.name)
}
#if LANG_CXX11
inline void Command::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Command.name)
}
#endif
inline void Command::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Command.name)
}
inline void Command::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Command.name)
}
inline ::std::string* Command::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Command.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Command.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Command.name)
}

// repeated string env = 2;
inline int Command::env_size() const {
  return env_.size();
}
inline void Command::clear_env() {
  env_.Clear();
}
inline const ::std::string& Command::env(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Command.env)
  return env_.Get(index);
}
inline ::std::string* Command::mutable_env(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Command.env)
  return env_.Mutable(index);
}
inline void Command::set_env(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Command.env)
  env_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Command::set_env(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Command.env)
  env_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Command::set_env(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  env_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Command.env)
}
inline void Command::set_env(int index, const char* value, size_t size) {
  env_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Command.env)
}
inline ::std::string* Command::add_env() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.containeranalysis.v1alpha1.Command.env)
  return env_.Add();
}
inline void Command::add_env(const ::std::string& value) {
  env_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Command.env)
}
#if LANG_CXX11
inline void Command::add_env(::std::string&& value) {
  env_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Command.env)
}
#endif
inline void Command::add_env(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  env_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.containeranalysis.v1alpha1.Command.env)
}
inline void Command::add_env(const char* value, size_t size) {
  env_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.containeranalysis.v1alpha1.Command.env)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Command::env() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.Command.env)
  return env_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Command::mutable_env() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.Command.env)
  return &env_;
}

// repeated string args = 3;
inline int Command::args_size() const {
  return args_.size();
}
inline void Command::clear_args() {
  args_.Clear();
}
inline const ::std::string& Command::args(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Command.args)
  return args_.Get(index);
}
inline ::std::string* Command::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Command.args)
  return args_.Mutable(index);
}
inline void Command::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Command.args)
  args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Command::set_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Command.args)
  args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Command::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Command.args)
}
inline void Command::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Command.args)
}
inline ::std::string* Command::add_args() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.containeranalysis.v1alpha1.Command.args)
  return args_.Add();
}
inline void Command::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Command.args)
}
#if LANG_CXX11
inline void Command::add_args(::std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Command.args)
}
#endif
inline void Command::add_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.containeranalysis.v1alpha1.Command.args)
}
inline void Command::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.containeranalysis.v1alpha1.Command.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Command::args() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.Command.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Command::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.Command.args)
  return &args_;
}

// string dir = 4;
inline void Command::clear_dir() {
  dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::dir() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Command.dir)
  return dir_.GetNoArena();
}
inline void Command::set_dir(const ::std::string& value) {
  
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Command.dir)
}
#if LANG_CXX11
inline void Command::set_dir(::std::string&& value) {
  
  dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Command.dir)
}
#endif
inline void Command::set_dir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Command.dir)
}
inline void Command::set_dir(const char* value, size_t size) {
  
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Command.dir)
}
inline ::std::string* Command::mutable_dir() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Command.dir)
  return dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_dir() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Command.dir)
  
  return dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_dir(::std::string* dir) {
  if (dir != NULL) {
    
  } else {
    
  }
  dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dir);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Command.dir)
}

// string id = 5;
inline void Command::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::id() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Command.id)
  return id_.GetNoArena();
}
inline void Command::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Command.id)
}
#if LANG_CXX11
inline void Command::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Command.id)
}
#endif
inline void Command::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Command.id)
}
inline void Command::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Command.id)
}
inline ::std::string* Command::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Command.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_id() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Command.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Command.id)
}

// repeated string wait_for = 6;
inline int Command::wait_for_size() const {
  return wait_for_.size();
}
inline void Command::clear_wait_for() {
  wait_for_.Clear();
}
inline const ::std::string& Command::wait_for(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
  return wait_for_.Get(index);
}
inline ::std::string* Command::mutable_wait_for(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
  return wait_for_.Mutable(index);
}
inline void Command::set_wait_for(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
  wait_for_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Command::set_wait_for(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
  wait_for_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Command::set_wait_for(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  wait_for_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
}
inline void Command::set_wait_for(int index, const char* value, size_t size) {
  wait_for_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
}
inline ::std::string* Command::add_wait_for() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
  return wait_for_.Add();
}
inline void Command::add_wait_for(const ::std::string& value) {
  wait_for_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
}
#if LANG_CXX11
inline void Command::add_wait_for(::std::string&& value) {
  wait_for_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
}
#endif
inline void Command::add_wait_for(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  wait_for_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
}
inline void Command::add_wait_for(const char* value, size_t size) {
  wait_for_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Command::wait_for() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
  return wait_for_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Command::mutable_wait_for() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.Command.wait_for)
  return &wait_for_;
}

// -------------------------------------------------------------------

// Artifact

// string name = 1;
inline void Artifact::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Artifact::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Artifact.name)
  return name_.GetNoArena();
}
inline void Artifact::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Artifact.name)
}
#if LANG_CXX11
inline void Artifact::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Artifact.name)
}
#endif
inline void Artifact::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Artifact.name)
}
inline void Artifact::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Artifact.name)
}
inline ::std::string* Artifact::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Artifact.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Artifact::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Artifact.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Artifact::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Artifact.name)
}

// string checksum = 2;
inline void Artifact::clear_checksum() {
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Artifact::checksum() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Artifact.checksum)
  return checksum_.GetNoArena();
}
inline void Artifact::set_checksum(const ::std::string& value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Artifact.checksum)
}
#if LANG_CXX11
inline void Artifact::set_checksum(::std::string&& value) {
  
  checksum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Artifact.checksum)
}
#endif
inline void Artifact::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Artifact.checksum)
}
inline void Artifact::set_checksum(const char* value, size_t size) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Artifact.checksum)
}
inline ::std::string* Artifact::mutable_checksum() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Artifact.checksum)
  return checksum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Artifact::release_checksum() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Artifact.checksum)
  
  return checksum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Artifact::set_allocated_checksum(::std::string* checksum) {
  if (checksum != NULL) {
    
  } else {
    
  }
  checksum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Artifact.checksum)
}

// string id = 3;
inline void Artifact::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Artifact::id() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Artifact.id)
  return id_.GetNoArena();
}
inline void Artifact::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Artifact.id)
}
#if LANG_CXX11
inline void Artifact::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.Artifact.id)
}
#endif
inline void Artifact::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Artifact.id)
}
inline void Artifact::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Artifact.id)
}
inline ::std::string* Artifact::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Artifact.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Artifact::release_id() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.Artifact.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Artifact::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.Artifact.id)
}

// repeated string names = 4;
inline int Artifact::names_size() const {
  return names_.size();
}
inline void Artifact::clear_names() {
  names_.Clear();
}
inline const ::std::string& Artifact::names(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.Artifact.names)
  return names_.Get(index);
}
inline ::std::string* Artifact::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.Artifact.names)
  return names_.Mutable(index);
}
inline void Artifact::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Artifact.names)
  names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Artifact::set_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.Artifact.names)
  names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Artifact::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.Artifact.names)
}
inline void Artifact::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.Artifact.names)
}
inline ::std::string* Artifact::add_names() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.containeranalysis.v1alpha1.Artifact.names)
  return names_.Add();
}
inline void Artifact::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Artifact.names)
}
#if LANG_CXX11
inline void Artifact::add_names(::std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.Artifact.names)
}
#endif
inline void Artifact::add_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.containeranalysis.v1alpha1.Artifact.names)
}
inline void Artifact::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.containeranalysis.v1alpha1.Artifact.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Artifact::names() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.Artifact.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Artifact::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.Artifact.names)
  return &names_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace containeranalysis
}  // namespace devtools
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::devtools::containeranalysis::v1alpha1::Hash_HashType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::containeranalysis::v1alpha1::Hash_HashType>() {
  return ::google::devtools::containeranalysis::v1alpha1::Hash_HashType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fprovenance_2eproto
