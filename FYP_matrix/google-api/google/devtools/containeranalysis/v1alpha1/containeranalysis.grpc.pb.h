// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/devtools/containeranalysis/v1alpha1/containeranalysis.proto
// Original file comments:
// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto__INCLUDED
#define GRPC_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto__INCLUDED

#include "google/devtools/containeranalysis/v1alpha1/containeranalysis.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace devtools {
namespace containeranalysis {
namespace v1alpha1 {

// Retrieves the results of vulnerability scanning of cloud components such as
// container images. The Container Analysis API is an implementation of the
// [Grafeas](grafeas.io) API.
//
// The vulnerability results are stored as a series of Occurrences.
// An `Occurrence` contains information about a specific vulnerability in a
// resource. An `Occurrence` references a `Note`. A `Note` contains details
// about the vulnerability and is stored in a stored in a separate project.
// Multiple `Occurrences` can reference the same `Note`. For example, an SSL
// vulnerability could affect multiple packages in an image. In this case,
// there would be one `Note` for the vulnerability and an `Occurrence` for
// each package with the vulnerability referencing that `Note`.
class ContainerAnalysis final {
 public:
  static constexpr char const* service_full_name() {
    return "google.devtools.containeranalysis.v1alpha1.ContainerAnalysis";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Returns the requested `Occurrence`.
    virtual ::grpc::Status GetOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest& request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> AsyncGetOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(AsyncGetOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> PrepareAsyncGetOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(PrepareAsyncGetOccurrenceRaw(context, request, cq));
    }
    // Lists active `Occurrences` for a given project matching the filters.
    virtual ::grpc::Status ListOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest& request, ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>> AsyncListOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>>(AsyncListOccurrencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>> PrepareAsyncListOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>>(PrepareAsyncListOccurrencesRaw(context, request, cq));
    }
    // Deletes the given `Occurrence` from the system. Use this when
    // an `Occurrence` is no longer applicable for the given resource.
    virtual ::grpc::Status DeleteOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteOccurrenceRaw(context, request, cq));
    }
    // Creates a new `Occurrence`. Use this method to create `Occurrences`
    // for a resource.
    virtual ::grpc::Status CreateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest& request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> AsyncCreateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(AsyncCreateOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> PrepareAsyncCreateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(PrepareAsyncCreateOccurrenceRaw(context, request, cq));
    }
    // Updates an existing occurrence.
    virtual ::grpc::Status UpdateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest& request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> AsyncUpdateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(AsyncUpdateOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> PrepareAsyncUpdateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(PrepareAsyncUpdateOccurrenceRaw(context, request, cq));
    }
    // Gets the `Note` attached to the given `Occurrence`.
    virtual ::grpc::Status GetOccurrenceNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest& request, ::google::devtools::containeranalysis::v1alpha1::Note* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>> AsyncGetOccurrenceNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>>(AsyncGetOccurrenceNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>> PrepareAsyncGetOccurrenceNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>>(PrepareAsyncGetOccurrenceNoteRaw(context, request, cq));
    }
    // Returns the requested `Note`.
    virtual ::grpc::Status GetNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest& request, ::google::devtools::containeranalysis::v1alpha1::Note* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>> AsyncGetNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>>(AsyncGetNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>> PrepareAsyncGetNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>>(PrepareAsyncGetNoteRaw(context, request, cq));
    }
    // Lists all `Notes` for a given project.
    virtual ::grpc::Status ListNotes(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest& request, ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>> AsyncListNotes(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>>(AsyncListNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>> PrepareAsyncListNotes(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>>(PrepareAsyncListNotesRaw(context, request, cq));
    }
    // Deletes the given `Note` from the system.
    virtual ::grpc::Status DeleteNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteNoteRaw(context, request, cq));
    }
    // Creates a new `Note`.
    virtual ::grpc::Status CreateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest& request, ::google::devtools::containeranalysis::v1alpha1::Note* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>> AsyncCreateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>>(AsyncCreateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>> PrepareAsyncCreateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>>(PrepareAsyncCreateNoteRaw(context, request, cq));
    }
    // Updates an existing `Note`.
    virtual ::grpc::Status UpdateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest& request, ::google::devtools::containeranalysis::v1alpha1::Note* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>> AsyncUpdateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>>(AsyncUpdateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>> PrepareAsyncUpdateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>>(PrepareAsyncUpdateNoteRaw(context, request, cq));
    }
    // Lists `Occurrences` referencing the specified `Note`. Use this method to
    // get all occurrences referencing your `Note` across all your customer
    // projects.
    virtual ::grpc::Status ListNoteOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest& request, ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>> AsyncListNoteOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>>(AsyncListNoteOccurrencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>> PrepareAsyncListNoteOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>>(PrepareAsyncListNoteOccurrencesRaw(context, request, cq));
    }
    // Gets a summary of the number and severity of occurrences.
    virtual ::grpc::Status GetVulnzOccurrencesSummary(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest& request, ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>> AsyncGetVulnzOccurrencesSummary(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>>(AsyncGetVulnzOccurrencesSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>> PrepareAsyncGetVulnzOccurrencesSummary(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>>(PrepareAsyncGetVulnzOccurrencesSummaryRaw(context, request, cq));
    }
    // Sets the access control policy on the specified `Note` or `Occurrence`.
    // Requires `containeranalysis.notes.setIamPolicy` or
    // `containeranalysis.occurrences.setIamPolicy` permission if the resource is
    // a `Note` or an `Occurrence`, respectively.
    // Attempting to call this method without these permissions will result in a `
    // `PERMISSION_DENIED` error.
    // Attempting to call this method on a non-existent resource will result in a
    // `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
    // on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
    // a `PERMISSION_DENIED` error otherwise. The resource takes the following
    // formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
    // and projects/{projectid}/notes/{noteid} for notes
    virtual ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    // Gets the access control policy for a note or an `Occurrence` resource.
    // Requires `containeranalysis.notes.setIamPolicy` or
    // `containeranalysis.occurrences.setIamPolicy` permission if the resource is
    // a note or occurrence, respectively.
    // Attempting to call this method on a resource without the required
    // permission will result in a `PERMISSION_DENIED` error. Attempting to call
    // this method on a non-existent resource will result in a `NOT_FOUND` error
    // if the user has list permission on the project, or a `PERMISSION_DENIED`
    // error otherwise. The resource takes the following formats:
    // `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
    // projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
    virtual ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    // Returns the permissions that a caller has on the specified note or
    // occurrence resource. Requires list permission on the project (for example,
    // "storage.objects.list" on the containing bucket for testing permission of
    // an object). Attempting to call this method on a non-existent resource will
    // result in a `NOT_FOUND` error if the user has list permission on the
    // project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
    // following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
    // `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
    virtual ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    // Creates a new `Operation`.
    virtual ::grpc::Status CreateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateOperationRaw(context, request, cq));
    }
    // Updates an existing operation returns an error if operation
    //  does not exist. The only valid operations are to update mark the done bit
    // change the result.
    virtual ::grpc::Status UpdateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUpdateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUpdateOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncUpdateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncUpdateOperationRaw(context, request, cq));
    }
    // Gets a specific scan configuration for a project.
    virtual ::grpc::Status GetScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest& request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>> AsyncGetScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>>(AsyncGetScanConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>> PrepareAsyncGetScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>>(PrepareAsyncGetScanConfigRaw(context, request, cq));
    }
    // Lists scan configurations for a project.
    virtual ::grpc::Status ListScanConfigs(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest& request, ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>> AsyncListScanConfigs(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>>(AsyncListScanConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>> PrepareAsyncListScanConfigs(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>>(PrepareAsyncListScanConfigsRaw(context, request, cq));
    }
    // Updates the scan configuration to a new value.
    virtual ::grpc::Status UpdateScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest& request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>> AsyncUpdateScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>>(AsyncUpdateScanConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>> PrepareAsyncUpdateScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>>(PrepareAsyncUpdateScanConfigRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* AsyncGetOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* PrepareAsyncGetOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>* AsyncListOccurrencesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>* PrepareAsyncListOccurrencesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* AsyncCreateOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* PrepareAsyncCreateOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* AsyncUpdateOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* PrepareAsyncUpdateOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>* AsyncGetOccurrenceNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>* PrepareAsyncGetOccurrenceNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>* AsyncGetNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>* PrepareAsyncGetNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>* AsyncListNotesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>* PrepareAsyncListNotesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>* AsyncCreateNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>* PrepareAsyncCreateNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>* AsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::Note>* PrepareAsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>* AsyncListNoteOccurrencesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>* PrepareAsyncListNoteOccurrencesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>* AsyncGetVulnzOccurrencesSummaryRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>* PrepareAsyncGetVulnzOccurrencesSummaryRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateOperationRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateOperationRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUpdateOperationRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncUpdateOperationRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>* AsyncGetScanConfigRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>* PrepareAsyncGetScanConfigRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>* AsyncListScanConfigsRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>* PrepareAsyncListScanConfigsRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>* AsyncUpdateScanConfigRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>* PrepareAsyncUpdateScanConfigRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest& request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> AsyncGetOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(AsyncGetOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> PrepareAsyncGetOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(PrepareAsyncGetOccurrenceRaw(context, request, cq));
    }
    ::grpc::Status ListOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest& request, ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>> AsyncListOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>>(AsyncListOccurrencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>> PrepareAsyncListOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>>(PrepareAsyncListOccurrencesRaw(context, request, cq));
    }
    ::grpc::Status DeleteOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteOccurrenceRaw(context, request, cq));
    }
    ::grpc::Status CreateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest& request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> AsyncCreateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(AsyncCreateOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> PrepareAsyncCreateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(PrepareAsyncCreateOccurrenceRaw(context, request, cq));
    }
    ::grpc::Status UpdateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest& request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> AsyncUpdateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(AsyncUpdateOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>> PrepareAsyncUpdateOccurrence(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>>(PrepareAsyncUpdateOccurrenceRaw(context, request, cq));
    }
    ::grpc::Status GetOccurrenceNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest& request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>> AsyncGetOccurrenceNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>>(AsyncGetOccurrenceNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>> PrepareAsyncGetOccurrenceNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>>(PrepareAsyncGetOccurrenceNoteRaw(context, request, cq));
    }
    ::grpc::Status GetNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest& request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>> AsyncGetNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>>(AsyncGetNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>> PrepareAsyncGetNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>>(PrepareAsyncGetNoteRaw(context, request, cq));
    }
    ::grpc::Status ListNotes(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest& request, ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>> AsyncListNotes(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>>(AsyncListNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>> PrepareAsyncListNotes(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>>(PrepareAsyncListNotesRaw(context, request, cq));
    }
    ::grpc::Status DeleteNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteNoteRaw(context, request, cq));
    }
    ::grpc::Status CreateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest& request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>> AsyncCreateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>>(AsyncCreateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>> PrepareAsyncCreateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>>(PrepareAsyncCreateNoteRaw(context, request, cq));
    }
    ::grpc::Status UpdateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest& request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>> AsyncUpdateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>>(AsyncUpdateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>> PrepareAsyncUpdateNote(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>>(PrepareAsyncUpdateNoteRaw(context, request, cq));
    }
    ::grpc::Status ListNoteOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest& request, ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>> AsyncListNoteOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>>(AsyncListNoteOccurrencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>> PrepareAsyncListNoteOccurrences(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>>(PrepareAsyncListNoteOccurrencesRaw(context, request, cq));
    }
    ::grpc::Status GetVulnzOccurrencesSummary(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest& request, ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>> AsyncGetVulnzOccurrencesSummary(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>>(AsyncGetVulnzOccurrencesSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>> PrepareAsyncGetVulnzOccurrencesSummary(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>>(PrepareAsyncGetVulnzOccurrencesSummaryRaw(context, request, cq));
    }
    ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    ::grpc::Status CreateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateOperationRaw(context, request, cq));
    }
    ::grpc::Status UpdateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUpdateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUpdateOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncUpdateOperation(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncUpdateOperationRaw(context, request, cq));
    }
    ::grpc::Status GetScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest& request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>> AsyncGetScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>>(AsyncGetScanConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>> PrepareAsyncGetScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>>(PrepareAsyncGetScanConfigRaw(context, request, cq));
    }
    ::grpc::Status ListScanConfigs(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest& request, ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>> AsyncListScanConfigs(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>>(AsyncListScanConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>> PrepareAsyncListScanConfigs(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>>(PrepareAsyncListScanConfigsRaw(context, request, cq));
    }
    ::grpc::Status UpdateScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest& request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>> AsyncUpdateScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>>(AsyncUpdateScanConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>> PrepareAsyncUpdateScanConfig(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>>(PrepareAsyncUpdateScanConfigRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* AsyncGetOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* PrepareAsyncGetOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>* AsyncListOccurrencesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>* PrepareAsyncListOccurrencesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* AsyncCreateOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* PrepareAsyncCreateOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* AsyncUpdateOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* PrepareAsyncUpdateOccurrenceRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>* AsyncGetOccurrenceNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>* PrepareAsyncGetOccurrenceNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>* AsyncGetNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>* PrepareAsyncGetNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>* AsyncListNotesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>* PrepareAsyncListNotesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>* AsyncCreateNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>* PrepareAsyncCreateNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>* AsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::Note>* PrepareAsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>* AsyncListNoteOccurrencesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>* PrepareAsyncListNoteOccurrencesRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>* AsyncGetVulnzOccurrencesSummaryRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>* PrepareAsyncGetVulnzOccurrencesSummaryRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateOperationRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateOperationRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUpdateOperationRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncUpdateOperationRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>* AsyncGetScanConfigRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>* PrepareAsyncGetScanConfigRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>* AsyncListScanConfigsRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>* PrepareAsyncListScanConfigsRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>* AsyncUpdateScanConfigRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>* PrepareAsyncUpdateScanConfigRaw(::grpc::ClientContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetOccurrence_;
    const ::grpc::internal::RpcMethod rpcmethod_ListOccurrences_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOccurrence_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOccurrence_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOccurrence_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOccurrenceNote_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNote_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNotes_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNote_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNote_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNote_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNoteOccurrences_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVulnzOccurrencesSummary_;
    const ::grpc::internal::RpcMethod rpcmethod_SetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_TestIamPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOperation_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOperation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetScanConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_ListScanConfigs_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateScanConfig_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Returns the requested `Occurrence`.
    virtual ::grpc::Status GetOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response);
    // Lists active `Occurrences` for a given project matching the filters.
    virtual ::grpc::Status ListOccurrences(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse* response);
    // Deletes the given `Occurrence` from the system. Use this when
    // an `Occurrence` is no longer applicable for the given resource.
    virtual ::grpc::Status DeleteOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest* request, ::google::protobuf::Empty* response);
    // Creates a new `Occurrence`. Use this method to create `Occurrences`
    // for a resource.
    virtual ::grpc::Status CreateOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response);
    // Updates an existing occurrence.
    virtual ::grpc::Status UpdateOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response);
    // Gets the `Note` attached to the given `Occurrence`.
    virtual ::grpc::Status GetOccurrenceNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response);
    // Returns the requested `Note`.
    virtual ::grpc::Status GetNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response);
    // Lists all `Notes` for a given project.
    virtual ::grpc::Status ListNotes(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse* response);
    // Deletes the given `Note` from the system.
    virtual ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest* request, ::google::protobuf::Empty* response);
    // Creates a new `Note`.
    virtual ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response);
    // Updates an existing `Note`.
    virtual ::grpc::Status UpdateNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response);
    // Lists `Occurrences` referencing the specified `Note`. Use this method to
    // get all occurrences referencing your `Note` across all your customer
    // projects.
    virtual ::grpc::Status ListNoteOccurrences(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse* response);
    // Gets a summary of the number and severity of occurrences.
    virtual ::grpc::Status GetVulnzOccurrencesSummary(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest* request, ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse* response);
    // Sets the access control policy on the specified `Note` or `Occurrence`.
    // Requires `containeranalysis.notes.setIamPolicy` or
    // `containeranalysis.occurrences.setIamPolicy` permission if the resource is
    // a `Note` or an `Occurrence`, respectively.
    // Attempting to call this method without these permissions will result in a `
    // `PERMISSION_DENIED` error.
    // Attempting to call this method on a non-existent resource will result in a
    // `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
    // on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
    // a `PERMISSION_DENIED` error otherwise. The resource takes the following
    // formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
    // and projects/{projectid}/notes/{noteid} for notes
    virtual ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Gets the access control policy for a note or an `Occurrence` resource.
    // Requires `containeranalysis.notes.setIamPolicy` or
    // `containeranalysis.occurrences.setIamPolicy` permission if the resource is
    // a note or occurrence, respectively.
    // Attempting to call this method on a resource without the required
    // permission will result in a `PERMISSION_DENIED` error. Attempting to call
    // this method on a non-existent resource will result in a `NOT_FOUND` error
    // if the user has list permission on the project, or a `PERMISSION_DENIED`
    // error otherwise. The resource takes the following formats:
    // `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
    // projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
    virtual ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Returns the permissions that a caller has on the specified note or
    // occurrence resource. Requires list permission on the project (for example,
    // "storage.objects.list" on the containing bucket for testing permission of
    // an object). Attempting to call this method on a non-existent resource will
    // result in a `NOT_FOUND` error if the user has list permission on the
    // project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
    // following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
    // `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
    virtual ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response);
    // Creates a new `Operation`.
    virtual ::grpc::Status CreateOperation(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest* request, ::google::longrunning::Operation* response);
    // Updates an existing operation returns an error if operation
    //  does not exist. The only valid operations are to update mark the done bit
    // change the result.
    virtual ::grpc::Status UpdateOperation(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest* request, ::google::longrunning::Operation* response);
    // Gets a specific scan configuration for a project.
    virtual ::grpc::Status GetScanConfig(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest* request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response);
    // Lists scan configurations for a project.
    virtual ::grpc::Status ListScanConfigs(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse* response);
    // Updates the scan configuration to a new value.
    virtual ::grpc::Status UpdateScanConfig(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest* request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOccurrence() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOccurrence(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListOccurrences() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOccurrences(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOccurrences(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteOccurrence() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOccurrence(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateOccurrence() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOccurrence(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateOccurrence() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOccurrence(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::Occurrence>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOccurrenceNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOccurrenceNote() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetOccurrenceNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrenceNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOccurrenceNote(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::Note>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNote() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNote(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::Note>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListNotes() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotes(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteNote() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNote(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateNote() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNote(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::Note>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateNote() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNote(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::Note>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNoteOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListNoteOccurrences() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ListNoteOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNoteOccurrences(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNoteOccurrences(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVulnzOccurrencesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetVulnzOccurrencesSummary() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetVulnzOccurrencesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVulnzOccurrencesSummary(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest* request, ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVulnzOccurrencesSummary(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::SetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::GetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::google::iam::v1::TestIamPermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::TestIamPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateOperation() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_CreateOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOperation(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOperation(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateOperation() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_UpdateOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOperation(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOperation(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetScanConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetScanConfig() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetScanConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScanConfig(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest* request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScanConfig(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListScanConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListScanConfigs() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_ListScanConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScanConfigs(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListScanConfigs(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateScanConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateScanConfig() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_UpdateScanConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScanConfig(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest* request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateScanConfig(::grpc::ServerContext* context, ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::containeranalysis::v1alpha1::ScanConfig>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetOccurrence<WithAsyncMethod_ListOccurrences<WithAsyncMethod_DeleteOccurrence<WithAsyncMethod_CreateOccurrence<WithAsyncMethod_UpdateOccurrence<WithAsyncMethod_GetOccurrenceNote<WithAsyncMethod_GetNote<WithAsyncMethod_ListNotes<WithAsyncMethod_DeleteNote<WithAsyncMethod_CreateNote<WithAsyncMethod_UpdateNote<WithAsyncMethod_ListNoteOccurrences<WithAsyncMethod_GetVulnzOccurrencesSummary<WithAsyncMethod_SetIamPolicy<WithAsyncMethod_GetIamPolicy<WithAsyncMethod_TestIamPermissions<WithAsyncMethod_CreateOperation<WithAsyncMethod_UpdateOperation<WithAsyncMethod_GetScanConfig<WithAsyncMethod_ListScanConfigs<WithAsyncMethod_UpdateScanConfig<Service > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOccurrence() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListOccurrences() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOccurrences(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteOccurrence() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateOccurrence() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateOccurrence() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOccurrenceNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOccurrenceNote() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetOccurrenceNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrenceNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNote() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListNotes() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteNote() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateNote() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateNote() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNoteOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListNoteOccurrences() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ListNoteOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNoteOccurrences(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVulnzOccurrencesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetVulnzOccurrencesSummary() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetVulnzOccurrencesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVulnzOccurrencesSummary(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest* request, ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateOperation() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_CreateOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOperation(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateOperation() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_UpdateOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOperation(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetScanConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetScanConfig() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetScanConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScanConfig(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest* request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListScanConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListScanConfigs() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_ListScanConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScanConfigs(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateScanConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateScanConfig() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_UpdateScanConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScanConfig(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest* request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOccurrence() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOccurrence(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListOccurrences() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOccurrences(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOccurrences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteOccurrence() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOccurrence(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateOccurrence() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOccurrence(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateOccurrence() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOccurrence(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOccurrenceNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOccurrenceNote() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetOccurrenceNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrenceNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOccurrenceNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetNote() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListNotes() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteNote() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateNote() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateNote() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNoteOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListNoteOccurrences() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ListNoteOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNoteOccurrences(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNoteOccurrences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVulnzOccurrencesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetVulnzOccurrencesSummary() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetVulnzOccurrencesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVulnzOccurrencesSummary(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest* request, ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVulnzOccurrencesSummary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateOperation() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_CreateOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOperation(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOperation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateOperation() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_UpdateOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOperation(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOperation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetScanConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetScanConfig() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetScanConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScanConfig(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest* request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScanConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListScanConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListScanConfigs() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_ListScanConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScanConfigs(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListScanConfigs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateScanConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateScanConfig() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_UpdateScanConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScanConfig(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest* request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateScanConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOccurrence() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest, ::google::devtools::containeranalysis::v1alpha1::Occurrence>(std::bind(&WithStreamedUnaryMethod_GetOccurrence<BaseClass>::StreamedGetOccurrence, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOccurrence(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceRequest,::google::devtools::containeranalysis::v1alpha1::Occurrence>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListOccurrences() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest, ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>(std::bind(&WithStreamedUnaryMethod_ListOccurrences<BaseClass>::StreamedListOccurrences, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOccurrences(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOccurrences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::ListOccurrencesRequest,::google::devtools::containeranalysis::v1alpha1::ListOccurrencesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteOccurrence() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteOccurrence<BaseClass>::StreamedDeleteOccurrence, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOccurrence(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::DeleteOccurrenceRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateOccurrence() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest, ::google::devtools::containeranalysis::v1alpha1::Occurrence>(std::bind(&WithStreamedUnaryMethod_CreateOccurrence<BaseClass>::StreamedCreateOccurrence, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOccurrence(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::CreateOccurrenceRequest,::google::devtools::containeranalysis::v1alpha1::Occurrence>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateOccurrence() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest, ::google::devtools::containeranalysis::v1alpha1::Occurrence>(std::bind(&WithStreamedUnaryMethod_UpdateOccurrence<BaseClass>::StreamedUpdateOccurrence, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOccurrence(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest* request, ::google::devtools::containeranalysis::v1alpha1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOccurrence(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::UpdateOccurrenceRequest,::google::devtools::containeranalysis::v1alpha1::Occurrence>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOccurrenceNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOccurrenceNote() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest, ::google::devtools::containeranalysis::v1alpha1::Note>(std::bind(&WithStreamedUnaryMethod_GetOccurrenceNote<BaseClass>::StreamedGetOccurrenceNote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOccurrenceNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOccurrenceNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOccurrenceNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::GetOccurrenceNoteRequest,::google::devtools::containeranalysis::v1alpha1::Note>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNote() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest, ::google::devtools::containeranalysis::v1alpha1::Note>(std::bind(&WithStreamedUnaryMethod_GetNote<BaseClass>::StreamedGetNote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::GetNoteRequest,::google::devtools::containeranalysis::v1alpha1::Note>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListNotes() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest, ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>(std::bind(&WithStreamedUnaryMethod_ListNotes<BaseClass>::StreamedListNotes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNotes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::ListNotesRequest,::google::devtools::containeranalysis::v1alpha1::ListNotesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteNote() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteNote<BaseClass>::StreamedDeleteNote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::DeleteNoteRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateNote() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest, ::google::devtools::containeranalysis::v1alpha1::Note>(std::bind(&WithStreamedUnaryMethod_CreateNote<BaseClass>::StreamedCreateNote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::CreateNoteRequest,::google::devtools::containeranalysis::v1alpha1::Note>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateNote() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest, ::google::devtools::containeranalysis::v1alpha1::Note>(std::bind(&WithStreamedUnaryMethod_UpdateNote<BaseClass>::StreamedUpdateNote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest* request, ::google::devtools::containeranalysis::v1alpha1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::UpdateNoteRequest,::google::devtools::containeranalysis::v1alpha1::Note>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNoteOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListNoteOccurrences() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest, ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>(std::bind(&WithStreamedUnaryMethod_ListNoteOccurrences<BaseClass>::StreamedListNoteOccurrences, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListNoteOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNoteOccurrences(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNoteOccurrences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesRequest,::google::devtools::containeranalysis::v1alpha1::ListNoteOccurrencesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVulnzOccurrencesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetVulnzOccurrencesSummary() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest, ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>(std::bind(&WithStreamedUnaryMethod_GetVulnzOccurrencesSummary<BaseClass>::StreamedGetVulnzOccurrencesSummary, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetVulnzOccurrencesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVulnzOccurrencesSummary(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest* request, ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVulnzOccurrencesSummary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryRequest,::google::devtools::containeranalysis::v1alpha1::GetVulnzOccurrencesSummaryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(std::bind(&WithStreamedUnaryMethod_SetIamPolicy<BaseClass>::StreamedSetIamPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::SetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(std::bind(&WithStreamedUnaryMethod_GetIamPolicy<BaseClass>::StreamedGetIamPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::GetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(std::bind(&WithStreamedUnaryMethod_TestIamPermissions<BaseClass>::StreamedTestIamPermissions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestIamPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::TestIamPermissionsRequest,::google::iam::v1::TestIamPermissionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateOperation() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_CreateOperation<BaseClass>::StreamedCreateOperation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOperation(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::CreateOperationRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateOperation() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_UpdateOperation<BaseClass>::StreamedUpdateOperation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOperation(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::UpdateOperationRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetScanConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetScanConfig() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest, ::google::devtools::containeranalysis::v1alpha1::ScanConfig>(std::bind(&WithStreamedUnaryMethod_GetScanConfig<BaseClass>::StreamedGetScanConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetScanConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetScanConfig(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest* request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetScanConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::GetScanConfigRequest,::google::devtools::containeranalysis::v1alpha1::ScanConfig>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListScanConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListScanConfigs() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest, ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>(std::bind(&WithStreamedUnaryMethod_ListScanConfigs<BaseClass>::StreamedListScanConfigs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListScanConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListScanConfigs(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest* request, ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListScanConfigs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::ListScanConfigsRequest,::google::devtools::containeranalysis::v1alpha1::ListScanConfigsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateScanConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateScanConfig() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest, ::google::devtools::containeranalysis::v1alpha1::ScanConfig>(std::bind(&WithStreamedUnaryMethod_UpdateScanConfig<BaseClass>::StreamedUpdateScanConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateScanConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateScanConfig(::grpc::ServerContext* context, const ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest* request, ::google::devtools::containeranalysis::v1alpha1::ScanConfig* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateScanConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::containeranalysis::v1alpha1::UpdateScanConfigRequest,::google::devtools::containeranalysis::v1alpha1::ScanConfig>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetOccurrence<WithStreamedUnaryMethod_ListOccurrences<WithStreamedUnaryMethod_DeleteOccurrence<WithStreamedUnaryMethod_CreateOccurrence<WithStreamedUnaryMethod_UpdateOccurrence<WithStreamedUnaryMethod_GetOccurrenceNote<WithStreamedUnaryMethod_GetNote<WithStreamedUnaryMethod_ListNotes<WithStreamedUnaryMethod_DeleteNote<WithStreamedUnaryMethod_CreateNote<WithStreamedUnaryMethod_UpdateNote<WithStreamedUnaryMethod_ListNoteOccurrences<WithStreamedUnaryMethod_GetVulnzOccurrencesSummary<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<WithStreamedUnaryMethod_CreateOperation<WithStreamedUnaryMethod_UpdateOperation<WithStreamedUnaryMethod_GetScanConfig<WithStreamedUnaryMethod_ListScanConfigs<WithStreamedUnaryMethod_UpdateScanConfig<Service > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetOccurrence<WithStreamedUnaryMethod_ListOccurrences<WithStreamedUnaryMethod_DeleteOccurrence<WithStreamedUnaryMethod_CreateOccurrence<WithStreamedUnaryMethod_UpdateOccurrence<WithStreamedUnaryMethod_GetOccurrenceNote<WithStreamedUnaryMethod_GetNote<WithStreamedUnaryMethod_ListNotes<WithStreamedUnaryMethod_DeleteNote<WithStreamedUnaryMethod_CreateNote<WithStreamedUnaryMethod_UpdateNote<WithStreamedUnaryMethod_ListNoteOccurrences<WithStreamedUnaryMethod_GetVulnzOccurrencesSummary<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<WithStreamedUnaryMethod_CreateOperation<WithStreamedUnaryMethod_UpdateOperation<WithStreamedUnaryMethod_GetScanConfig<WithStreamedUnaryMethod_ListScanConfigs<WithStreamedUnaryMethod_UpdateScanConfig<Service > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace containeranalysis
}  // namespace devtools
}  // namespace google


#endif  // GRPC_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fcontaineranalysis_2eproto__INCLUDED
