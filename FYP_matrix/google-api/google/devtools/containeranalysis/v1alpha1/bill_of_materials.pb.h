// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1alpha1/bill_of_materials.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fbill_5fof_5fmaterials_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fbill_5fof_5fmaterials_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/devtools/containeranalysis/v1alpha1/package_vulnerability.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fbill_5fof_5fmaterials_2eproto 

namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fbill_5fof_5fmaterials_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fbill_5fof_5fmaterials_2eproto
namespace google {
namespace devtools {
namespace containeranalysis {
namespace v1alpha1 {
class PackageManager;
class PackageManagerDefaultTypeInternal;
extern PackageManagerDefaultTypeInternal _PackageManager_default_instance_;
class PackageManager_Distribution;
class PackageManager_DistributionDefaultTypeInternal;
extern PackageManager_DistributionDefaultTypeInternal _PackageManager_Distribution_default_instance_;
class PackageManager_Installation;
class PackageManager_InstallationDefaultTypeInternal;
extern PackageManager_InstallationDefaultTypeInternal _PackageManager_Installation_default_instance_;
class PackageManager_Location;
class PackageManager_LocationDefaultTypeInternal;
extern PackageManager_LocationDefaultTypeInternal _PackageManager_Location_default_instance_;
class PackageManager_Package;
class PackageManager_PackageDefaultTypeInternal;
extern PackageManager_PackageDefaultTypeInternal _PackageManager_Package_default_instance_;
}  // namespace v1alpha1
}  // namespace containeranalysis
}  // namespace devtools
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::devtools::containeranalysis::v1alpha1::PackageManager* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::PackageManager>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::PackageManager_Installation>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::PackageManager_Location>(Arena*);
template<> ::google::devtools::containeranalysis::v1alpha1::PackageManager_Package* Arena::CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::PackageManager_Package>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace devtools {
namespace containeranalysis {
namespace v1alpha1 {

enum PackageManager_Architecture {
  PackageManager_Architecture_ARCHITECTURE_UNSPECIFIED = 0,
  PackageManager_Architecture_X86 = 1,
  PackageManager_Architecture_X64 = 2,
  PackageManager_Architecture_PackageManager_Architecture_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PackageManager_Architecture_PackageManager_Architecture_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PackageManager_Architecture_IsValid(int value);
const PackageManager_Architecture PackageManager_Architecture_Architecture_MIN = PackageManager_Architecture_ARCHITECTURE_UNSPECIFIED;
const PackageManager_Architecture PackageManager_Architecture_Architecture_MAX = PackageManager_Architecture_X64;
const int PackageManager_Architecture_Architecture_ARRAYSIZE = PackageManager_Architecture_Architecture_MAX + 1;

const ::google::protobuf::EnumDescriptor* PackageManager_Architecture_descriptor();
inline const ::std::string& PackageManager_Architecture_Name(PackageManager_Architecture value) {
  return ::google::protobuf::internal::NameOfEnum(
    PackageManager_Architecture_descriptor(), value);
}
inline bool PackageManager_Architecture_Parse(
    const ::std::string& name, PackageManager_Architecture* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PackageManager_Architecture>(
    PackageManager_Architecture_descriptor(), name, value);
}
// ===================================================================

class PackageManager_Distribution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution) */ {
 public:
  PackageManager_Distribution();
  virtual ~PackageManager_Distribution();

  PackageManager_Distribution(const PackageManager_Distribution& from);

  inline PackageManager_Distribution& operator=(const PackageManager_Distribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackageManager_Distribution(PackageManager_Distribution&& from) noexcept
    : PackageManager_Distribution() {
    *this = ::std::move(from);
  }

  inline PackageManager_Distribution& operator=(PackageManager_Distribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageManager_Distribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageManager_Distribution* internal_default_instance() {
    return reinterpret_cast<const PackageManager_Distribution*>(
               &_PackageManager_Distribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PackageManager_Distribution* other);
  friend void swap(PackageManager_Distribution& a, PackageManager_Distribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackageManager_Distribution* New() const final {
    return CreateMaybeMessage<PackageManager_Distribution>(NULL);
  }

  PackageManager_Distribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackageManager_Distribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackageManager_Distribution& from);
  void MergeFrom(const PackageManager_Distribution& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageManager_Distribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpe_uri = 1;
  void clear_cpe_uri();
  static const int kCpeUriFieldNumber = 1;
  const ::std::string& cpe_uri() const;
  void set_cpe_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_cpe_uri(::std::string&& value);
  #endif
  void set_cpe_uri(const char* value);
  void set_cpe_uri(const char* value, size_t size);
  ::std::string* mutable_cpe_uri();
  ::std::string* release_cpe_uri();
  void set_allocated_cpe_uri(::std::string* cpe_uri);

  // string maintainer = 4;
  void clear_maintainer();
  static const int kMaintainerFieldNumber = 4;
  const ::std::string& maintainer() const;
  void set_maintainer(const ::std::string& value);
  #if LANG_CXX11
  void set_maintainer(::std::string&& value);
  #endif
  void set_maintainer(const char* value);
  void set_maintainer(const char* value, size_t size);
  ::std::string* mutable_maintainer();
  ::std::string* release_maintainer();
  void set_allocated_maintainer(::std::string* maintainer);

  // string url = 6;
  void clear_url();
  static const int kUrlFieldNumber = 6;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string description = 7;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .google.devtools.containeranalysis.v1alpha1.VulnerabilityType.Version latest_version = 3;
  bool has_latest_version() const;
  void clear_latest_version();
  static const int kLatestVersionFieldNumber = 3;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version& _internal_latest_version() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version& latest_version() const;
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* release_latest_version();
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* mutable_latest_version();
  void set_allocated_latest_version(::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* latest_version);

  // .google.devtools.containeranalysis.v1alpha1.PackageManager.Architecture architecture = 2;
  void clear_architecture();
  static const int kArchitectureFieldNumber = 2;
  ::google::devtools::containeranalysis::v1alpha1::PackageManager_Architecture architecture() const;
  void set_architecture(::google::devtools::containeranalysis::v1alpha1::PackageManager_Architecture value);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpe_uri_;
  ::google::protobuf::internal::ArenaStringPtr maintainer_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* latest_version_;
  int architecture_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fbill_5fof_5fmaterials_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackageManager_Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.PackageManager.Location) */ {
 public:
  PackageManager_Location();
  virtual ~PackageManager_Location();

  PackageManager_Location(const PackageManager_Location& from);

  inline PackageManager_Location& operator=(const PackageManager_Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackageManager_Location(PackageManager_Location&& from) noexcept
    : PackageManager_Location() {
    *this = ::std::move(from);
  }

  inline PackageManager_Location& operator=(PackageManager_Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageManager_Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageManager_Location* internal_default_instance() {
    return reinterpret_cast<const PackageManager_Location*>(
               &_PackageManager_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PackageManager_Location* other);
  friend void swap(PackageManager_Location& a, PackageManager_Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackageManager_Location* New() const final {
    return CreateMaybeMessage<PackageManager_Location>(NULL);
  }

  PackageManager_Location* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackageManager_Location>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackageManager_Location& from);
  void MergeFrom(const PackageManager_Location& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageManager_Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpe_uri = 1;
  void clear_cpe_uri();
  static const int kCpeUriFieldNumber = 1;
  const ::std::string& cpe_uri() const;
  void set_cpe_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_cpe_uri(::std::string&& value);
  #endif
  void set_cpe_uri(const char* value);
  void set_cpe_uri(const char* value, size_t size);
  ::std::string* mutable_cpe_uri();
  ::std::string* release_cpe_uri();
  void set_allocated_cpe_uri(::std::string* cpe_uri);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .google.devtools.containeranalysis.v1alpha1.VulnerabilityType.Version version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  private:
  const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version& _internal_version() const;
  public:
  const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version& version() const;
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* release_version();
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* mutable_version();
  void set_allocated_version(::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* version);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.PackageManager.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpe_uri_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fbill_5fof_5fmaterials_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackageManager_Package : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.PackageManager.Package) */ {
 public:
  PackageManager_Package();
  virtual ~PackageManager_Package();

  PackageManager_Package(const PackageManager_Package& from);

  inline PackageManager_Package& operator=(const PackageManager_Package& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackageManager_Package(PackageManager_Package&& from) noexcept
    : PackageManager_Package() {
    *this = ::std::move(from);
  }

  inline PackageManager_Package& operator=(PackageManager_Package&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageManager_Package& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageManager_Package* internal_default_instance() {
    return reinterpret_cast<const PackageManager_Package*>(
               &_PackageManager_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PackageManager_Package* other);
  friend void swap(PackageManager_Package& a, PackageManager_Package& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackageManager_Package* New() const final {
    return CreateMaybeMessage<PackageManager_Package>(NULL);
  }

  PackageManager_Package* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackageManager_Package>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackageManager_Package& from);
  void MergeFrom(const PackageManager_Package& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageManager_Package* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution distribution = 10;
  int distribution_size() const;
  void clear_distribution();
  static const int kDistributionFieldNumber = 10;
  ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution* mutable_distribution(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution >*
      mutable_distribution();
  const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution& distribution(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution* add_distribution();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution >&
      distribution() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.PackageManager.Package)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution > distribution_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fbill_5fof_5fmaterials_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackageManager_Installation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation) */ {
 public:
  PackageManager_Installation();
  virtual ~PackageManager_Installation();

  PackageManager_Installation(const PackageManager_Installation& from);

  inline PackageManager_Installation& operator=(const PackageManager_Installation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackageManager_Installation(PackageManager_Installation&& from) noexcept
    : PackageManager_Installation() {
    *this = ::std::move(from);
  }

  inline PackageManager_Installation& operator=(PackageManager_Installation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageManager_Installation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageManager_Installation* internal_default_instance() {
    return reinterpret_cast<const PackageManager_Installation*>(
               &_PackageManager_Installation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PackageManager_Installation* other);
  friend void swap(PackageManager_Installation& a, PackageManager_Installation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackageManager_Installation* New() const final {
    return CreateMaybeMessage<PackageManager_Installation>(NULL);
  }

  PackageManager_Installation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackageManager_Installation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackageManager_Installation& from);
  void MergeFrom(const PackageManager_Installation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageManager_Installation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.containeranalysis.v1alpha1.PackageManager.Location location = 2;
  int location_size() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location* mutable_location(int index);
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location >*
      mutable_location();
  const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location& location(int index) const;
  ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location* add_location();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location >&
      location() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location > location_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fbill_5fof_5fmaterials_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackageManager : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.containeranalysis.v1alpha1.PackageManager) */ {
 public:
  PackageManager();
  virtual ~PackageManager();

  PackageManager(const PackageManager& from);

  inline PackageManager& operator=(const PackageManager& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackageManager(PackageManager&& from) noexcept
    : PackageManager() {
    *this = ::std::move(from);
  }

  inline PackageManager& operator=(PackageManager&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageManager& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageManager* internal_default_instance() {
    return reinterpret_cast<const PackageManager*>(
               &_PackageManager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PackageManager* other);
  friend void swap(PackageManager& a, PackageManager& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackageManager* New() const final {
    return CreateMaybeMessage<PackageManager>(NULL);
  }

  PackageManager* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackageManager>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackageManager& from);
  void MergeFrom(const PackageManager& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageManager* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PackageManager_Distribution Distribution;
  typedef PackageManager_Location Location;
  typedef PackageManager_Package Package;
  typedef PackageManager_Installation Installation;

  typedef PackageManager_Architecture Architecture;
  static const Architecture ARCHITECTURE_UNSPECIFIED =
    PackageManager_Architecture_ARCHITECTURE_UNSPECIFIED;
  static const Architecture X86 =
    PackageManager_Architecture_X86;
  static const Architecture X64 =
    PackageManager_Architecture_X64;
  static inline bool Architecture_IsValid(int value) {
    return PackageManager_Architecture_IsValid(value);
  }
  static const Architecture Architecture_MIN =
    PackageManager_Architecture_Architecture_MIN;
  static const Architecture Architecture_MAX =
    PackageManager_Architecture_Architecture_MAX;
  static const int Architecture_ARRAYSIZE =
    PackageManager_Architecture_Architecture_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Architecture_descriptor() {
    return PackageManager_Architecture_descriptor();
  }
  static inline const ::std::string& Architecture_Name(Architecture value) {
    return PackageManager_Architecture_Name(value);
  }
  static inline bool Architecture_Parse(const ::std::string& name,
      Architecture* value) {
    return PackageManager_Architecture_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.devtools.containeranalysis.v1alpha1.PackageManager)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fbill_5fof_5fmaterials_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackageManager_Distribution

// string cpe_uri = 1;
inline void PackageManager_Distribution::clear_cpe_uri() {
  cpe_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageManager_Distribution::cpe_uri() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.cpe_uri)
  return cpe_uri_.GetNoArena();
}
inline void PackageManager_Distribution::set_cpe_uri(const ::std::string& value) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.cpe_uri)
}
#if LANG_CXX11
inline void PackageManager_Distribution::set_cpe_uri(::std::string&& value) {
  
  cpe_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.cpe_uri)
}
#endif
inline void PackageManager_Distribution::set_cpe_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.cpe_uri)
}
inline void PackageManager_Distribution::set_cpe_uri(const char* value, size_t size) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.cpe_uri)
}
inline ::std::string* PackageManager_Distribution::mutable_cpe_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.cpe_uri)
  return cpe_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageManager_Distribution::release_cpe_uri() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.cpe_uri)
  
  return cpe_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageManager_Distribution::set_allocated_cpe_uri(::std::string* cpe_uri) {
  if (cpe_uri != NULL) {
    
  } else {
    
  }
  cpe_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpe_uri);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.cpe_uri)
}

// .google.devtools.containeranalysis.v1alpha1.PackageManager.Architecture architecture = 2;
inline void PackageManager_Distribution::clear_architecture() {
  architecture_ = 0;
}
inline ::google::devtools::containeranalysis::v1alpha1::PackageManager_Architecture PackageManager_Distribution::architecture() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.architecture)
  return static_cast< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Architecture >(architecture_);
}
inline void PackageManager_Distribution::set_architecture(::google::devtools::containeranalysis::v1alpha1::PackageManager_Architecture value) {
  
  architecture_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.architecture)
}

// .google.devtools.containeranalysis.v1alpha1.VulnerabilityType.Version latest_version = 3;
inline bool PackageManager_Distribution::has_latest_version() const {
  return this != internal_default_instance() && latest_version_ != NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version& PackageManager_Distribution::_internal_latest_version() const {
  return *latest_version_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version& PackageManager_Distribution::latest_version() const {
  const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* p = latest_version_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.latest_version)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version*>(
      &::google::devtools::containeranalysis::v1alpha1::_VulnerabilityType_Version_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* PackageManager_Distribution::release_latest_version() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.latest_version)
  
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* temp = latest_version_;
  latest_version_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* PackageManager_Distribution::mutable_latest_version() {
  
  if (latest_version_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version>(GetArenaNoVirtual());
    latest_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.latest_version)
  return latest_version_;
}
inline void PackageManager_Distribution::set_allocated_latest_version(::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* latest_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(latest_version_);
  }
  if (latest_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      latest_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latest_version, submessage_arena);
    }
    
  } else {
    
  }
  latest_version_ = latest_version;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.latest_version)
}

// string maintainer = 4;
inline void PackageManager_Distribution::clear_maintainer() {
  maintainer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageManager_Distribution::maintainer() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.maintainer)
  return maintainer_.GetNoArena();
}
inline void PackageManager_Distribution::set_maintainer(const ::std::string& value) {
  
  maintainer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.maintainer)
}
#if LANG_CXX11
inline void PackageManager_Distribution::set_maintainer(::std::string&& value) {
  
  maintainer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.maintainer)
}
#endif
inline void PackageManager_Distribution::set_maintainer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  maintainer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.maintainer)
}
inline void PackageManager_Distribution::set_maintainer(const char* value, size_t size) {
  
  maintainer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.maintainer)
}
inline ::std::string* PackageManager_Distribution::mutable_maintainer() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.maintainer)
  return maintainer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageManager_Distribution::release_maintainer() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.maintainer)
  
  return maintainer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageManager_Distribution::set_allocated_maintainer(::std::string* maintainer) {
  if (maintainer != NULL) {
    
  } else {
    
  }
  maintainer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maintainer);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.maintainer)
}

// string url = 6;
inline void PackageManager_Distribution::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageManager_Distribution::url() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.url)
  return url_.GetNoArena();
}
inline void PackageManager_Distribution::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.url)
}
#if LANG_CXX11
inline void PackageManager_Distribution::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.url)
}
#endif
inline void PackageManager_Distribution::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.url)
}
inline void PackageManager_Distribution::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.url)
}
inline ::std::string* PackageManager_Distribution::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageManager_Distribution::release_url() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageManager_Distribution::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.url)
}

// string description = 7;
inline void PackageManager_Distribution::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageManager_Distribution::description() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.description)
  return description_.GetNoArena();
}
inline void PackageManager_Distribution::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.description)
}
#if LANG_CXX11
inline void PackageManager_Distribution::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.description)
}
#endif
inline void PackageManager_Distribution::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.description)
}
inline void PackageManager_Distribution::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.description)
}
inline ::std::string* PackageManager_Distribution::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageManager_Distribution::release_description() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageManager_Distribution::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution.description)
}

// -------------------------------------------------------------------

// PackageManager_Location

// string cpe_uri = 1;
inline void PackageManager_Location::clear_cpe_uri() {
  cpe_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageManager_Location::cpe_uri() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.cpe_uri)
  return cpe_uri_.GetNoArena();
}
inline void PackageManager_Location::set_cpe_uri(const ::std::string& value) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.cpe_uri)
}
#if LANG_CXX11
inline void PackageManager_Location::set_cpe_uri(::std::string&& value) {
  
  cpe_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.cpe_uri)
}
#endif
inline void PackageManager_Location::set_cpe_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.cpe_uri)
}
inline void PackageManager_Location::set_cpe_uri(const char* value, size_t size) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.cpe_uri)
}
inline ::std::string* PackageManager_Location::mutable_cpe_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.cpe_uri)
  return cpe_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageManager_Location::release_cpe_uri() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.cpe_uri)
  
  return cpe_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageManager_Location::set_allocated_cpe_uri(::std::string* cpe_uri) {
  if (cpe_uri != NULL) {
    
  } else {
    
  }
  cpe_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpe_uri);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.cpe_uri)
}

// .google.devtools.containeranalysis.v1alpha1.VulnerabilityType.Version version = 2;
inline bool PackageManager_Location::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version& PackageManager_Location::_internal_version() const {
  return *version_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version& PackageManager_Location::version() const {
  const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* p = version_;
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.version)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version*>(
      &::google::devtools::containeranalysis::v1alpha1::_VulnerabilityType_Version_default_instance_);
}
inline ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* PackageManager_Location::release_version() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.version)
  
  ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* PackageManager_Location::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.version)
  return version_;
}
inline void PackageManager_Location::set_allocated_version(::google::devtools::containeranalysis::v1alpha1::VulnerabilityType_Version* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(version_);
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.version)
}

// string path = 3;
inline void PackageManager_Location::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageManager_Location::path() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.path)
  return path_.GetNoArena();
}
inline void PackageManager_Location::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.path)
}
#if LANG_CXX11
inline void PackageManager_Location::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.path)
}
#endif
inline void PackageManager_Location::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.path)
}
inline void PackageManager_Location::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.path)
}
inline ::std::string* PackageManager_Location::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageManager_Location::release_path() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageManager_Location::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PackageManager.Location.path)
}

// -------------------------------------------------------------------

// PackageManager_Package

// string name = 1;
inline void PackageManager_Package::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageManager_Package::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.name)
  return name_.GetNoArena();
}
inline void PackageManager_Package::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.name)
}
#if LANG_CXX11
inline void PackageManager_Package::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.name)
}
#endif
inline void PackageManager_Package::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.name)
}
inline void PackageManager_Package::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.name)
}
inline ::std::string* PackageManager_Package::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageManager_Package::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageManager_Package::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.name)
}

// repeated .google.devtools.containeranalysis.v1alpha1.PackageManager.Distribution distribution = 10;
inline int PackageManager_Package::distribution_size() const {
  return distribution_.size();
}
inline void PackageManager_Package::clear_distribution() {
  distribution_.Clear();
}
inline ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution* PackageManager_Package::mutable_distribution(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.distribution)
  return distribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution >*
PackageManager_Package::mutable_distribution() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.distribution)
  return &distribution_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution& PackageManager_Package::distribution(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.distribution)
  return distribution_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution* PackageManager_Package::add_distribution() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.distribution)
  return distribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Distribution >&
PackageManager_Package::distribution() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.PackageManager.Package.distribution)
  return distribution_;
}

// -------------------------------------------------------------------

// PackageManager_Installation

// string name = 1;
inline void PackageManager_Installation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageManager_Installation::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.name)
  return name_.GetNoArena();
}
inline void PackageManager_Installation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.name)
}
#if LANG_CXX11
inline void PackageManager_Installation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.name)
}
#endif
inline void PackageManager_Installation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.name)
}
inline void PackageManager_Installation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.name)
}
inline ::std::string* PackageManager_Installation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageManager_Installation::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageManager_Installation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.name)
}

// repeated .google.devtools.containeranalysis.v1alpha1.PackageManager.Location location = 2;
inline int PackageManager_Installation::location_size() const {
  return location_.size();
}
inline void PackageManager_Installation::clear_location() {
  location_.Clear();
}
inline ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location* PackageManager_Installation::mutable_location(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.location)
  return location_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location >*
PackageManager_Installation::mutable_location() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.location)
  return &location_;
}
inline const ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location& PackageManager_Installation::location(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.location)
  return location_.Get(index);
}
inline ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location* PackageManager_Installation::add_location() {
  // @@protoc_insertion_point(field_add:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.location)
  return location_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Location >&
PackageManager_Installation::location() const {
  // @@protoc_insertion_point(field_list:google.devtools.containeranalysis.v1alpha1.PackageManager.Installation.location)
  return location_;
}

// -------------------------------------------------------------------

// PackageManager

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace containeranalysis
}  // namespace devtools
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Architecture> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::containeranalysis::v1alpha1::PackageManager_Architecture>() {
  return ::google::devtools::containeranalysis::v1alpha1::PackageManager_Architecture_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1alpha1_2fbill_5fof_5fmaterials_2eproto
