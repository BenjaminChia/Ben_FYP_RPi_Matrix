// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1beta1/grafeas/grafeas.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/devtools/containeranalysis/v1beta1/attestation/attestation.pb.h"
#include "google/devtools/containeranalysis/v1beta1/build/build.pb.h"
#include "google/devtools/containeranalysis/v1beta1/common/common.pb.h"
#include "google/devtools/containeranalysis/v1beta1/deployment/deployment.pb.h"
#include "google/devtools/containeranalysis/v1beta1/discovery/discovery.pb.h"
#include "google/devtools/containeranalysis/v1beta1/image/image.pb.h"
#include "google/devtools/containeranalysis/v1beta1/package/package.pb.h"
#include "google/devtools/containeranalysis/v1beta1/provenance/provenance.pb.h"
#include "google/devtools/containeranalysis/v1beta1/vulnerability/vulnerability.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto 

namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[26];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto
namespace grafeas {
namespace v1beta1 {
class BatchCreateNotesRequest;
class BatchCreateNotesRequestDefaultTypeInternal;
extern BatchCreateNotesRequestDefaultTypeInternal _BatchCreateNotesRequest_default_instance_;
class BatchCreateNotesRequest_NotesEntry_DoNotUse;
class BatchCreateNotesRequest_NotesEntry_DoNotUseDefaultTypeInternal;
extern BatchCreateNotesRequest_NotesEntry_DoNotUseDefaultTypeInternal _BatchCreateNotesRequest_NotesEntry_DoNotUse_default_instance_;
class BatchCreateNotesResponse;
class BatchCreateNotesResponseDefaultTypeInternal;
extern BatchCreateNotesResponseDefaultTypeInternal _BatchCreateNotesResponse_default_instance_;
class BatchCreateOccurrencesRequest;
class BatchCreateOccurrencesRequestDefaultTypeInternal;
extern BatchCreateOccurrencesRequestDefaultTypeInternal _BatchCreateOccurrencesRequest_default_instance_;
class BatchCreateOccurrencesResponse;
class BatchCreateOccurrencesResponseDefaultTypeInternal;
extern BatchCreateOccurrencesResponseDefaultTypeInternal _BatchCreateOccurrencesResponse_default_instance_;
class CreateNoteRequest;
class CreateNoteRequestDefaultTypeInternal;
extern CreateNoteRequestDefaultTypeInternal _CreateNoteRequest_default_instance_;
class CreateOccurrenceRequest;
class CreateOccurrenceRequestDefaultTypeInternal;
extern CreateOccurrenceRequestDefaultTypeInternal _CreateOccurrenceRequest_default_instance_;
class DeleteNoteRequest;
class DeleteNoteRequestDefaultTypeInternal;
extern DeleteNoteRequestDefaultTypeInternal _DeleteNoteRequest_default_instance_;
class DeleteOccurrenceRequest;
class DeleteOccurrenceRequestDefaultTypeInternal;
extern DeleteOccurrenceRequestDefaultTypeInternal _DeleteOccurrenceRequest_default_instance_;
class GetNoteRequest;
class GetNoteRequestDefaultTypeInternal;
extern GetNoteRequestDefaultTypeInternal _GetNoteRequest_default_instance_;
class GetOccurrenceNoteRequest;
class GetOccurrenceNoteRequestDefaultTypeInternal;
extern GetOccurrenceNoteRequestDefaultTypeInternal _GetOccurrenceNoteRequest_default_instance_;
class GetOccurrenceRequest;
class GetOccurrenceRequestDefaultTypeInternal;
extern GetOccurrenceRequestDefaultTypeInternal _GetOccurrenceRequest_default_instance_;
class GetVulnerabilityOccurrencesSummaryRequest;
class GetVulnerabilityOccurrencesSummaryRequestDefaultTypeInternal;
extern GetVulnerabilityOccurrencesSummaryRequestDefaultTypeInternal _GetVulnerabilityOccurrencesSummaryRequest_default_instance_;
class ListNoteOccurrencesRequest;
class ListNoteOccurrencesRequestDefaultTypeInternal;
extern ListNoteOccurrencesRequestDefaultTypeInternal _ListNoteOccurrencesRequest_default_instance_;
class ListNoteOccurrencesResponse;
class ListNoteOccurrencesResponseDefaultTypeInternal;
extern ListNoteOccurrencesResponseDefaultTypeInternal _ListNoteOccurrencesResponse_default_instance_;
class ListNotesRequest;
class ListNotesRequestDefaultTypeInternal;
extern ListNotesRequestDefaultTypeInternal _ListNotesRequest_default_instance_;
class ListNotesResponse;
class ListNotesResponseDefaultTypeInternal;
extern ListNotesResponseDefaultTypeInternal _ListNotesResponse_default_instance_;
class ListOccurrencesRequest;
class ListOccurrencesRequestDefaultTypeInternal;
extern ListOccurrencesRequestDefaultTypeInternal _ListOccurrencesRequest_default_instance_;
class ListOccurrencesResponse;
class ListOccurrencesResponseDefaultTypeInternal;
extern ListOccurrencesResponseDefaultTypeInternal _ListOccurrencesResponse_default_instance_;
class Note;
class NoteDefaultTypeInternal;
extern NoteDefaultTypeInternal _Note_default_instance_;
class Occurrence;
class OccurrenceDefaultTypeInternal;
extern OccurrenceDefaultTypeInternal _Occurrence_default_instance_;
class Resource;
class ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class UpdateNoteRequest;
class UpdateNoteRequestDefaultTypeInternal;
extern UpdateNoteRequestDefaultTypeInternal _UpdateNoteRequest_default_instance_;
class UpdateOccurrenceRequest;
class UpdateOccurrenceRequestDefaultTypeInternal;
extern UpdateOccurrenceRequestDefaultTypeInternal _UpdateOccurrenceRequest_default_instance_;
class VulnerabilityOccurrencesSummary;
class VulnerabilityOccurrencesSummaryDefaultTypeInternal;
extern VulnerabilityOccurrencesSummaryDefaultTypeInternal _VulnerabilityOccurrencesSummary_default_instance_;
class VulnerabilityOccurrencesSummary_FixableTotalByDigest;
class VulnerabilityOccurrencesSummary_FixableTotalByDigestDefaultTypeInternal;
extern VulnerabilityOccurrencesSummary_FixableTotalByDigestDefaultTypeInternal _VulnerabilityOccurrencesSummary_FixableTotalByDigest_default_instance_;
}  // namespace v1beta1
}  // namespace grafeas
namespace google {
namespace protobuf {
template<> ::grafeas::v1beta1::BatchCreateNotesRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::BatchCreateNotesRequest>(Arena*);
template<> ::grafeas::v1beta1::BatchCreateNotesRequest_NotesEntry_DoNotUse* Arena::CreateMaybeMessage<::grafeas::v1beta1::BatchCreateNotesRequest_NotesEntry_DoNotUse>(Arena*);
template<> ::grafeas::v1beta1::BatchCreateNotesResponse* Arena::CreateMaybeMessage<::grafeas::v1beta1::BatchCreateNotesResponse>(Arena*);
template<> ::grafeas::v1beta1::BatchCreateOccurrencesRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::BatchCreateOccurrencesRequest>(Arena*);
template<> ::grafeas::v1beta1::BatchCreateOccurrencesResponse* Arena::CreateMaybeMessage<::grafeas::v1beta1::BatchCreateOccurrencesResponse>(Arena*);
template<> ::grafeas::v1beta1::CreateNoteRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::CreateNoteRequest>(Arena*);
template<> ::grafeas::v1beta1::CreateOccurrenceRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::CreateOccurrenceRequest>(Arena*);
template<> ::grafeas::v1beta1::DeleteNoteRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::DeleteNoteRequest>(Arena*);
template<> ::grafeas::v1beta1::DeleteOccurrenceRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::DeleteOccurrenceRequest>(Arena*);
template<> ::grafeas::v1beta1::GetNoteRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::GetNoteRequest>(Arena*);
template<> ::grafeas::v1beta1::GetOccurrenceNoteRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::GetOccurrenceNoteRequest>(Arena*);
template<> ::grafeas::v1beta1::GetOccurrenceRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::GetOccurrenceRequest>(Arena*);
template<> ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest>(Arena*);
template<> ::grafeas::v1beta1::ListNoteOccurrencesRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::ListNoteOccurrencesRequest>(Arena*);
template<> ::grafeas::v1beta1::ListNoteOccurrencesResponse* Arena::CreateMaybeMessage<::grafeas::v1beta1::ListNoteOccurrencesResponse>(Arena*);
template<> ::grafeas::v1beta1::ListNotesRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::ListNotesRequest>(Arena*);
template<> ::grafeas::v1beta1::ListNotesResponse* Arena::CreateMaybeMessage<::grafeas::v1beta1::ListNotesResponse>(Arena*);
template<> ::grafeas::v1beta1::ListOccurrencesRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::ListOccurrencesRequest>(Arena*);
template<> ::grafeas::v1beta1::ListOccurrencesResponse* Arena::CreateMaybeMessage<::grafeas::v1beta1::ListOccurrencesResponse>(Arena*);
template<> ::grafeas::v1beta1::Note* Arena::CreateMaybeMessage<::grafeas::v1beta1::Note>(Arena*);
template<> ::grafeas::v1beta1::Occurrence* Arena::CreateMaybeMessage<::grafeas::v1beta1::Occurrence>(Arena*);
template<> ::grafeas::v1beta1::Resource* Arena::CreateMaybeMessage<::grafeas::v1beta1::Resource>(Arena*);
template<> ::grafeas::v1beta1::UpdateNoteRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::UpdateNoteRequest>(Arena*);
template<> ::grafeas::v1beta1::UpdateOccurrenceRequest* Arena::CreateMaybeMessage<::grafeas::v1beta1::UpdateOccurrenceRequest>(Arena*);
template<> ::grafeas::v1beta1::VulnerabilityOccurrencesSummary* Arena::CreateMaybeMessage<::grafeas::v1beta1::VulnerabilityOccurrencesSummary>(Arena*);
template<> ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest* Arena::CreateMaybeMessage<::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace grafeas {
namespace v1beta1 {

// ===================================================================

class Occurrence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.Occurrence) */ {
 public:
  Occurrence();
  virtual ~Occurrence();

  Occurrence(const Occurrence& from);

  inline Occurrence& operator=(const Occurrence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Occurrence(Occurrence&& from) noexcept
    : Occurrence() {
    *this = ::std::move(from);
  }

  inline Occurrence& operator=(Occurrence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Occurrence& default_instance();

  enum DetailsCase {
    kVulnerability = 8,
    kBuild = 9,
    kDerivedImage = 10,
    kInstallation = 11,
    kDeployment = 12,
    kDiscovered = 13,
    kAttestation = 14,
    DETAILS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Occurrence* internal_default_instance() {
    return reinterpret_cast<const Occurrence*>(
               &_Occurrence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Occurrence* other);
  friend void swap(Occurrence& a, Occurrence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Occurrence* New() const final {
    return CreateMaybeMessage<Occurrence>(NULL);
  }

  Occurrence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Occurrence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Occurrence& from);
  void MergeFrom(const Occurrence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Occurrence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string note_name = 3;
  void clear_note_name();
  static const int kNoteNameFieldNumber = 3;
  const ::std::string& note_name() const;
  void set_note_name(const ::std::string& value);
  #if LANG_CXX11
  void set_note_name(::std::string&& value);
  #endif
  void set_note_name(const char* value);
  void set_note_name(const char* value, size_t size);
  ::std::string* mutable_note_name();
  ::std::string* release_note_name();
  void set_allocated_note_name(::std::string* note_name);

  // string remediation = 5;
  void clear_remediation();
  static const int kRemediationFieldNumber = 5;
  const ::std::string& remediation() const;
  void set_remediation(const ::std::string& value);
  #if LANG_CXX11
  void set_remediation(::std::string&& value);
  #endif
  void set_remediation(const char* value);
  void set_remediation(const char* value, size_t size);
  ::std::string* mutable_remediation();
  ::std::string* release_remediation();
  void set_allocated_remediation(::std::string* remediation);

  // .grafeas.v1beta1.Resource resource = 2;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 2;
  private:
  const ::grafeas::v1beta1::Resource& _internal_resource() const;
  public:
  const ::grafeas::v1beta1::Resource& resource() const;
  ::grafeas::v1beta1::Resource* release_resource();
  ::grafeas::v1beta1::Resource* mutable_resource();
  void set_allocated_resource(::grafeas::v1beta1::Resource* resource);

  // .google.protobuf.Timestamp create_time = 6;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 7;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .grafeas.v1beta1.NoteKind kind = 4;
  void clear_kind();
  static const int kKindFieldNumber = 4;
  ::grafeas::v1beta1::NoteKind kind() const;
  void set_kind(::grafeas::v1beta1::NoteKind value);

  // .grafeas.v1beta1.vulnerability.Details vulnerability = 8;
  bool has_vulnerability() const;
  void clear_vulnerability();
  static const int kVulnerabilityFieldNumber = 8;
  private:
  const ::grafeas::v1beta1::vulnerability::Details& _internal_vulnerability() const;
  public:
  const ::grafeas::v1beta1::vulnerability::Details& vulnerability() const;
  ::grafeas::v1beta1::vulnerability::Details* release_vulnerability();
  ::grafeas::v1beta1::vulnerability::Details* mutable_vulnerability();
  void set_allocated_vulnerability(::grafeas::v1beta1::vulnerability::Details* vulnerability);

  // .grafeas.v1beta1.build.Details build = 9;
  bool has_build() const;
  void clear_build();
  static const int kBuildFieldNumber = 9;
  private:
  const ::grafeas::v1beta1::build::Details& _internal_build() const;
  public:
  const ::grafeas::v1beta1::build::Details& build() const;
  ::grafeas::v1beta1::build::Details* release_build();
  ::grafeas::v1beta1::build::Details* mutable_build();
  void set_allocated_build(::grafeas::v1beta1::build::Details* build);

  // .grafeas.v1beta1.image.Details derived_image = 10;
  bool has_derived_image() const;
  void clear_derived_image();
  static const int kDerivedImageFieldNumber = 10;
  private:
  const ::grafeas::v1beta1::image::Details& _internal_derived_image() const;
  public:
  const ::grafeas::v1beta1::image::Details& derived_image() const;
  ::grafeas::v1beta1::image::Details* release_derived_image();
  ::grafeas::v1beta1::image::Details* mutable_derived_image();
  void set_allocated_derived_image(::grafeas::v1beta1::image::Details* derived_image);

  // .grafeas.v1beta1.package.Details installation = 11;
  bool has_installation() const;
  void clear_installation();
  static const int kInstallationFieldNumber = 11;
  private:
  const ::grafeas::v1beta1::package::Details& _internal_installation() const;
  public:
  const ::grafeas::v1beta1::package::Details& installation() const;
  ::grafeas::v1beta1::package::Details* release_installation();
  ::grafeas::v1beta1::package::Details* mutable_installation();
  void set_allocated_installation(::grafeas::v1beta1::package::Details* installation);

  // .grafeas.v1beta1.deployment.Details deployment = 12;
  bool has_deployment() const;
  void clear_deployment();
  static const int kDeploymentFieldNumber = 12;
  private:
  const ::grafeas::v1beta1::deployment::Details& _internal_deployment() const;
  public:
  const ::grafeas::v1beta1::deployment::Details& deployment() const;
  ::grafeas::v1beta1::deployment::Details* release_deployment();
  ::grafeas::v1beta1::deployment::Details* mutable_deployment();
  void set_allocated_deployment(::grafeas::v1beta1::deployment::Details* deployment);

  // .grafeas.v1beta1.discovery.Details discovered = 13;
  bool has_discovered() const;
  void clear_discovered();
  static const int kDiscoveredFieldNumber = 13;
  private:
  const ::grafeas::v1beta1::discovery::Details& _internal_discovered() const;
  public:
  const ::grafeas::v1beta1::discovery::Details& discovered() const;
  ::grafeas::v1beta1::discovery::Details* release_discovered();
  ::grafeas::v1beta1::discovery::Details* mutable_discovered();
  void set_allocated_discovered(::grafeas::v1beta1::discovery::Details* discovered);

  // .grafeas.v1beta1.attestation.Details attestation = 14;
  bool has_attestation() const;
  void clear_attestation();
  static const int kAttestationFieldNumber = 14;
  private:
  const ::grafeas::v1beta1::attestation::Details& _internal_attestation() const;
  public:
  const ::grafeas::v1beta1::attestation::Details& attestation() const;
  ::grafeas::v1beta1::attestation::Details* release_attestation();
  ::grafeas::v1beta1::attestation::Details* mutable_attestation();
  void set_allocated_attestation(::grafeas::v1beta1::attestation::Details* attestation);

  void clear_details();
  DetailsCase details_case() const;
  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.Occurrence)
 private:
  void set_has_vulnerability();
  void set_has_build();
  void set_has_derived_image();
  void set_has_installation();
  void set_has_deployment();
  void set_has_discovered();
  void set_has_attestation();

  inline bool has_details() const;
  inline void clear_has_details();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr note_name_;
  ::google::protobuf::internal::ArenaStringPtr remediation_;
  ::grafeas::v1beta1::Resource* resource_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  int kind_;
  union DetailsUnion {
    DetailsUnion() {}
    ::grafeas::v1beta1::vulnerability::Details* vulnerability_;
    ::grafeas::v1beta1::build::Details* build_;
    ::grafeas::v1beta1::image::Details* derived_image_;
    ::grafeas::v1beta1::package::Details* installation_;
    ::grafeas::v1beta1::deployment::Details* deployment_;
    ::grafeas::v1beta1::discovery::Details* discovered_;
    ::grafeas::v1beta1::attestation::Details* attestation_;
  } details_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Resource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.Resource) */ {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(Resource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Resource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Resource* other);
  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Resource* New() const final {
    return CreateMaybeMessage<Resource>(NULL);
  }

  Resource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string uri = 2;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // .grafeas.v1beta1.provenance.Hash content_hash = 3;
  bool has_content_hash() const;
  void clear_content_hash();
  static const int kContentHashFieldNumber = 3;
  private:
  const ::grafeas::v1beta1::provenance::Hash& _internal_content_hash() const;
  public:
  const ::grafeas::v1beta1::provenance::Hash& content_hash() const;
  ::grafeas::v1beta1::provenance::Hash* release_content_hash();
  ::grafeas::v1beta1::provenance::Hash* mutable_content_hash();
  void set_allocated_content_hash(::grafeas::v1beta1::provenance::Hash* content_hash);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.Resource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::grafeas::v1beta1::provenance::Hash* content_hash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Note : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.Note) */ {
 public:
  Note();
  virtual ~Note();

  Note(const Note& from);

  inline Note& operator=(const Note& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Note(Note&& from) noexcept
    : Note() {
    *this = ::std::move(from);
  }

  inline Note& operator=(Note&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Note& default_instance();

  enum TypeCase {
    kVulnerability = 10,
    kBuild = 11,
    kBaseImage = 12,
    kPackage = 13,
    kDeployable = 14,
    kDiscovery = 15,
    kAttestationAuthority = 16,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Note* internal_default_instance() {
    return reinterpret_cast<const Note*>(
               &_Note_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Note* other);
  friend void swap(Note& a, Note& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Note* New() const final {
    return CreateMaybeMessage<Note>(NULL);
  }

  Note* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Note>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Note& from);
  void MergeFrom(const Note& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Note* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.RelatedUrl related_url = 5;
  int related_url_size() const;
  void clear_related_url();
  static const int kRelatedUrlFieldNumber = 5;
  ::grafeas::v1beta1::RelatedUrl* mutable_related_url(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::RelatedUrl >*
      mutable_related_url();
  const ::grafeas::v1beta1::RelatedUrl& related_url(int index) const;
  ::grafeas::v1beta1::RelatedUrl* add_related_url();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::RelatedUrl >&
      related_url() const;

  // repeated string related_note_names = 9;
  int related_note_names_size() const;
  void clear_related_note_names();
  static const int kRelatedNoteNamesFieldNumber = 9;
  const ::std::string& related_note_names(int index) const;
  ::std::string* mutable_related_note_names(int index);
  void set_related_note_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_related_note_names(int index, ::std::string&& value);
  #endif
  void set_related_note_names(int index, const char* value);
  void set_related_note_names(int index, const char* value, size_t size);
  ::std::string* add_related_note_names();
  void add_related_note_names(const ::std::string& value);
  #if LANG_CXX11
  void add_related_note_names(::std::string&& value);
  #endif
  void add_related_note_names(const char* value);
  void add_related_note_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& related_note_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_related_note_names();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string short_description = 2;
  void clear_short_description();
  static const int kShortDescriptionFieldNumber = 2;
  const ::std::string& short_description() const;
  void set_short_description(const ::std::string& value);
  #if LANG_CXX11
  void set_short_description(::std::string&& value);
  #endif
  void set_short_description(const char* value);
  void set_short_description(const char* value, size_t size);
  ::std::string* mutable_short_description();
  ::std::string* release_short_description();
  void set_allocated_short_description(::std::string* short_description);

  // string long_description = 3;
  void clear_long_description();
  static const int kLongDescriptionFieldNumber = 3;
  const ::std::string& long_description() const;
  void set_long_description(const ::std::string& value);
  #if LANG_CXX11
  void set_long_description(::std::string&& value);
  #endif
  void set_long_description(const char* value);
  void set_long_description(const char* value, size_t size);
  ::std::string* mutable_long_description();
  ::std::string* release_long_description();
  void set_allocated_long_description(::std::string* long_description);

  // .google.protobuf.Timestamp expiration_time = 6;
  bool has_expiration_time() const;
  void clear_expiration_time();
  static const int kExpirationTimeFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_expiration_time() const;
  public:
  const ::google::protobuf::Timestamp& expiration_time() const;
  ::google::protobuf::Timestamp* release_expiration_time();
  ::google::protobuf::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::google::protobuf::Timestamp* expiration_time);

  // .google.protobuf.Timestamp create_time = 7;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 8;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .grafeas.v1beta1.NoteKind kind = 4;
  void clear_kind();
  static const int kKindFieldNumber = 4;
  ::grafeas::v1beta1::NoteKind kind() const;
  void set_kind(::grafeas::v1beta1::NoteKind value);

  // .grafeas.v1beta1.vulnerability.Vulnerability vulnerability = 10;
  bool has_vulnerability() const;
  void clear_vulnerability();
  static const int kVulnerabilityFieldNumber = 10;
  private:
  const ::grafeas::v1beta1::vulnerability::Vulnerability& _internal_vulnerability() const;
  public:
  const ::grafeas::v1beta1::vulnerability::Vulnerability& vulnerability() const;
  ::grafeas::v1beta1::vulnerability::Vulnerability* release_vulnerability();
  ::grafeas::v1beta1::vulnerability::Vulnerability* mutable_vulnerability();
  void set_allocated_vulnerability(::grafeas::v1beta1::vulnerability::Vulnerability* vulnerability);

  // .grafeas.v1beta1.build.Build build = 11;
  bool has_build() const;
  void clear_build();
  static const int kBuildFieldNumber = 11;
  private:
  const ::grafeas::v1beta1::build::Build& _internal_build() const;
  public:
  const ::grafeas::v1beta1::build::Build& build() const;
  ::grafeas::v1beta1::build::Build* release_build();
  ::grafeas::v1beta1::build::Build* mutable_build();
  void set_allocated_build(::grafeas::v1beta1::build::Build* build);

  // .grafeas.v1beta1.image.Basis base_image = 12;
  bool has_base_image() const;
  void clear_base_image();
  static const int kBaseImageFieldNumber = 12;
  private:
  const ::grafeas::v1beta1::image::Basis& _internal_base_image() const;
  public:
  const ::grafeas::v1beta1::image::Basis& base_image() const;
  ::grafeas::v1beta1::image::Basis* release_base_image();
  ::grafeas::v1beta1::image::Basis* mutable_base_image();
  void set_allocated_base_image(::grafeas::v1beta1::image::Basis* base_image);

  // .grafeas.v1beta1.package.Package package = 13;
  bool has_package() const;
  void clear_package();
  static const int kPackageFieldNumber = 13;
  private:
  const ::grafeas::v1beta1::package::Package& _internal_package() const;
  public:
  const ::grafeas::v1beta1::package::Package& package() const;
  ::grafeas::v1beta1::package::Package* release_package();
  ::grafeas::v1beta1::package::Package* mutable_package();
  void set_allocated_package(::grafeas::v1beta1::package::Package* package);

  // .grafeas.v1beta1.deployment.Deployable deployable = 14;
  bool has_deployable() const;
  void clear_deployable();
  static const int kDeployableFieldNumber = 14;
  private:
  const ::grafeas::v1beta1::deployment::Deployable& _internal_deployable() const;
  public:
  const ::grafeas::v1beta1::deployment::Deployable& deployable() const;
  ::grafeas::v1beta1::deployment::Deployable* release_deployable();
  ::grafeas::v1beta1::deployment::Deployable* mutable_deployable();
  void set_allocated_deployable(::grafeas::v1beta1::deployment::Deployable* deployable);

  // .grafeas.v1beta1.discovery.Discovery discovery = 15;
  bool has_discovery() const;
  void clear_discovery();
  static const int kDiscoveryFieldNumber = 15;
  private:
  const ::grafeas::v1beta1::discovery::Discovery& _internal_discovery() const;
  public:
  const ::grafeas::v1beta1::discovery::Discovery& discovery() const;
  ::grafeas::v1beta1::discovery::Discovery* release_discovery();
  ::grafeas::v1beta1::discovery::Discovery* mutable_discovery();
  void set_allocated_discovery(::grafeas::v1beta1::discovery::Discovery* discovery);

  // .grafeas.v1beta1.attestation.Authority attestation_authority = 16;
  bool has_attestation_authority() const;
  void clear_attestation_authority();
  static const int kAttestationAuthorityFieldNumber = 16;
  private:
  const ::grafeas::v1beta1::attestation::Authority& _internal_attestation_authority() const;
  public:
  const ::grafeas::v1beta1::attestation::Authority& attestation_authority() const;
  ::grafeas::v1beta1::attestation::Authority* release_attestation_authority();
  ::grafeas::v1beta1::attestation::Authority* mutable_attestation_authority();
  void set_allocated_attestation_authority(::grafeas::v1beta1::attestation::Authority* attestation_authority);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.Note)
 private:
  void set_has_vulnerability();
  void set_has_build();
  void set_has_base_image();
  void set_has_package();
  void set_has_deployable();
  void set_has_discovery();
  void set_has_attestation_authority();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::RelatedUrl > related_url_;
  ::google::protobuf::RepeatedPtrField< ::std::string> related_note_names_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr short_description_;
  ::google::protobuf::internal::ArenaStringPtr long_description_;
  ::google::protobuf::Timestamp* expiration_time_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  int kind_;
  union TypeUnion {
    TypeUnion() {}
    ::grafeas::v1beta1::vulnerability::Vulnerability* vulnerability_;
    ::grafeas::v1beta1::build::Build* build_;
    ::grafeas::v1beta1::image::Basis* base_image_;
    ::grafeas::v1beta1::package::Package* package_;
    ::grafeas::v1beta1::deployment::Deployable* deployable_;
    ::grafeas::v1beta1::discovery::Discovery* discovery_;
    ::grafeas::v1beta1::attestation::Authority* attestation_authority_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOccurrenceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.GetOccurrenceRequest) */ {
 public:
  GetOccurrenceRequest();
  virtual ~GetOccurrenceRequest();

  GetOccurrenceRequest(const GetOccurrenceRequest& from);

  inline GetOccurrenceRequest& operator=(const GetOccurrenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOccurrenceRequest(GetOccurrenceRequest&& from) noexcept
    : GetOccurrenceRequest() {
    *this = ::std::move(from);
  }

  inline GetOccurrenceRequest& operator=(GetOccurrenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOccurrenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOccurrenceRequest* internal_default_instance() {
    return reinterpret_cast<const GetOccurrenceRequest*>(
               &_GetOccurrenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetOccurrenceRequest* other);
  friend void swap(GetOccurrenceRequest& a, GetOccurrenceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOccurrenceRequest* New() const final {
    return CreateMaybeMessage<GetOccurrenceRequest>(NULL);
  }

  GetOccurrenceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetOccurrenceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetOccurrenceRequest& from);
  void MergeFrom(const GetOccurrenceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOccurrenceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.GetOccurrenceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListOccurrencesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.ListOccurrencesRequest) */ {
 public:
  ListOccurrencesRequest();
  virtual ~ListOccurrencesRequest();

  ListOccurrencesRequest(const ListOccurrencesRequest& from);

  inline ListOccurrencesRequest& operator=(const ListOccurrencesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOccurrencesRequest(ListOccurrencesRequest&& from) noexcept
    : ListOccurrencesRequest() {
    *this = ::std::move(from);
  }

  inline ListOccurrencesRequest& operator=(ListOccurrencesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListOccurrencesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOccurrencesRequest* internal_default_instance() {
    return reinterpret_cast<const ListOccurrencesRequest*>(
               &_ListOccurrencesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ListOccurrencesRequest* other);
  friend void swap(ListOccurrencesRequest& a, ListOccurrencesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOccurrencesRequest* New() const final {
    return CreateMaybeMessage<ListOccurrencesRequest>(NULL);
  }

  ListOccurrencesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListOccurrencesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListOccurrencesRequest& from);
  void MergeFrom(const ListOccurrencesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOccurrencesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.ListOccurrencesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListOccurrencesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.ListOccurrencesResponse) */ {
 public:
  ListOccurrencesResponse();
  virtual ~ListOccurrencesResponse();

  ListOccurrencesResponse(const ListOccurrencesResponse& from);

  inline ListOccurrencesResponse& operator=(const ListOccurrencesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOccurrencesResponse(ListOccurrencesResponse&& from) noexcept
    : ListOccurrencesResponse() {
    *this = ::std::move(from);
  }

  inline ListOccurrencesResponse& operator=(ListOccurrencesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListOccurrencesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOccurrencesResponse* internal_default_instance() {
    return reinterpret_cast<const ListOccurrencesResponse*>(
               &_ListOccurrencesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ListOccurrencesResponse* other);
  friend void swap(ListOccurrencesResponse& a, ListOccurrencesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOccurrencesResponse* New() const final {
    return CreateMaybeMessage<ListOccurrencesResponse>(NULL);
  }

  ListOccurrencesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListOccurrencesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListOccurrencesResponse& from);
  void MergeFrom(const ListOccurrencesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOccurrencesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.Occurrence occurrences = 1;
  int occurrences_size() const;
  void clear_occurrences();
  static const int kOccurrencesFieldNumber = 1;
  ::grafeas::v1beta1::Occurrence* mutable_occurrences(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >*
      mutable_occurrences();
  const ::grafeas::v1beta1::Occurrence& occurrences(int index) const;
  ::grafeas::v1beta1::Occurrence* add_occurrences();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >&
      occurrences() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.ListOccurrencesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence > occurrences_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteOccurrenceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.DeleteOccurrenceRequest) */ {
 public:
  DeleteOccurrenceRequest();
  virtual ~DeleteOccurrenceRequest();

  DeleteOccurrenceRequest(const DeleteOccurrenceRequest& from);

  inline DeleteOccurrenceRequest& operator=(const DeleteOccurrenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteOccurrenceRequest(DeleteOccurrenceRequest&& from) noexcept
    : DeleteOccurrenceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteOccurrenceRequest& operator=(DeleteOccurrenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteOccurrenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOccurrenceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteOccurrenceRequest*>(
               &_DeleteOccurrenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DeleteOccurrenceRequest* other);
  friend void swap(DeleteOccurrenceRequest& a, DeleteOccurrenceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteOccurrenceRequest* New() const final {
    return CreateMaybeMessage<DeleteOccurrenceRequest>(NULL);
  }

  DeleteOccurrenceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOccurrenceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteOccurrenceRequest& from);
  void MergeFrom(const DeleteOccurrenceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOccurrenceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.DeleteOccurrenceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateOccurrenceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.CreateOccurrenceRequest) */ {
 public:
  CreateOccurrenceRequest();
  virtual ~CreateOccurrenceRequest();

  CreateOccurrenceRequest(const CreateOccurrenceRequest& from);

  inline CreateOccurrenceRequest& operator=(const CreateOccurrenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateOccurrenceRequest(CreateOccurrenceRequest&& from) noexcept
    : CreateOccurrenceRequest() {
    *this = ::std::move(from);
  }

  inline CreateOccurrenceRequest& operator=(CreateOccurrenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOccurrenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOccurrenceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOccurrenceRequest*>(
               &_CreateOccurrenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CreateOccurrenceRequest* other);
  friend void swap(CreateOccurrenceRequest& a, CreateOccurrenceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateOccurrenceRequest* New() const final {
    return CreateMaybeMessage<CreateOccurrenceRequest>(NULL);
  }

  CreateOccurrenceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateOccurrenceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateOccurrenceRequest& from);
  void MergeFrom(const CreateOccurrenceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOccurrenceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .grafeas.v1beta1.Occurrence occurrence = 2;
  bool has_occurrence() const;
  void clear_occurrence();
  static const int kOccurrenceFieldNumber = 2;
  private:
  const ::grafeas::v1beta1::Occurrence& _internal_occurrence() const;
  public:
  const ::grafeas::v1beta1::Occurrence& occurrence() const;
  ::grafeas::v1beta1::Occurrence* release_occurrence();
  ::grafeas::v1beta1::Occurrence* mutable_occurrence();
  void set_allocated_occurrence(::grafeas::v1beta1::Occurrence* occurrence);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.CreateOccurrenceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::grafeas::v1beta1::Occurrence* occurrence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateOccurrenceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.UpdateOccurrenceRequest) */ {
 public:
  UpdateOccurrenceRequest();
  virtual ~UpdateOccurrenceRequest();

  UpdateOccurrenceRequest(const UpdateOccurrenceRequest& from);

  inline UpdateOccurrenceRequest& operator=(const UpdateOccurrenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateOccurrenceRequest(UpdateOccurrenceRequest&& from) noexcept
    : UpdateOccurrenceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOccurrenceRequest& operator=(UpdateOccurrenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateOccurrenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOccurrenceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOccurrenceRequest*>(
               &_UpdateOccurrenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UpdateOccurrenceRequest* other);
  friend void swap(UpdateOccurrenceRequest& a, UpdateOccurrenceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateOccurrenceRequest* New() const final {
    return CreateMaybeMessage<UpdateOccurrenceRequest>(NULL);
  }

  UpdateOccurrenceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOccurrenceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateOccurrenceRequest& from);
  void MergeFrom(const UpdateOccurrenceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOccurrenceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .grafeas.v1beta1.Occurrence occurrence = 2;
  bool has_occurrence() const;
  void clear_occurrence();
  static const int kOccurrenceFieldNumber = 2;
  private:
  const ::grafeas::v1beta1::Occurrence& _internal_occurrence() const;
  public:
  const ::grafeas::v1beta1::Occurrence& occurrence() const;
  ::grafeas::v1beta1::Occurrence* release_occurrence();
  ::grafeas::v1beta1::Occurrence* mutable_occurrence();
  void set_allocated_occurrence(::grafeas::v1beta1::Occurrence* occurrence);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.UpdateOccurrenceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::grafeas::v1beta1::Occurrence* occurrence_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.GetNoteRequest) */ {
 public:
  GetNoteRequest();
  virtual ~GetNoteRequest();

  GetNoteRequest(const GetNoteRequest& from);

  inline GetNoteRequest& operator=(const GetNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNoteRequest(GetNoteRequest&& from) noexcept
    : GetNoteRequest() {
    *this = ::std::move(from);
  }

  inline GetNoteRequest& operator=(GetNoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNoteRequest* internal_default_instance() {
    return reinterpret_cast<const GetNoteRequest*>(
               &_GetNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetNoteRequest* other);
  friend void swap(GetNoteRequest& a, GetNoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNoteRequest* New() const final {
    return CreateMaybeMessage<GetNoteRequest>(NULL);
  }

  GetNoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNoteRequest& from);
  void MergeFrom(const GetNoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.GetNoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOccurrenceNoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.GetOccurrenceNoteRequest) */ {
 public:
  GetOccurrenceNoteRequest();
  virtual ~GetOccurrenceNoteRequest();

  GetOccurrenceNoteRequest(const GetOccurrenceNoteRequest& from);

  inline GetOccurrenceNoteRequest& operator=(const GetOccurrenceNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOccurrenceNoteRequest(GetOccurrenceNoteRequest&& from) noexcept
    : GetOccurrenceNoteRequest() {
    *this = ::std::move(from);
  }

  inline GetOccurrenceNoteRequest& operator=(GetOccurrenceNoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOccurrenceNoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOccurrenceNoteRequest* internal_default_instance() {
    return reinterpret_cast<const GetOccurrenceNoteRequest*>(
               &_GetOccurrenceNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetOccurrenceNoteRequest* other);
  friend void swap(GetOccurrenceNoteRequest& a, GetOccurrenceNoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOccurrenceNoteRequest* New() const final {
    return CreateMaybeMessage<GetOccurrenceNoteRequest>(NULL);
  }

  GetOccurrenceNoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetOccurrenceNoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetOccurrenceNoteRequest& from);
  void MergeFrom(const GetOccurrenceNoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOccurrenceNoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.GetOccurrenceNoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNotesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.ListNotesRequest) */ {
 public:
  ListNotesRequest();
  virtual ~ListNotesRequest();

  ListNotesRequest(const ListNotesRequest& from);

  inline ListNotesRequest& operator=(const ListNotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNotesRequest(ListNotesRequest&& from) noexcept
    : ListNotesRequest() {
    *this = ::std::move(from);
  }

  inline ListNotesRequest& operator=(ListNotesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNotesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNotesRequest* internal_default_instance() {
    return reinterpret_cast<const ListNotesRequest*>(
               &_ListNotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ListNotesRequest* other);
  friend void swap(ListNotesRequest& a, ListNotesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNotesRequest* New() const final {
    return CreateMaybeMessage<ListNotesRequest>(NULL);
  }

  ListNotesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNotesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNotesRequest& from);
  void MergeFrom(const ListNotesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.ListNotesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNotesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.ListNotesResponse) */ {
 public:
  ListNotesResponse();
  virtual ~ListNotesResponse();

  ListNotesResponse(const ListNotesResponse& from);

  inline ListNotesResponse& operator=(const ListNotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNotesResponse(ListNotesResponse&& from) noexcept
    : ListNotesResponse() {
    *this = ::std::move(from);
  }

  inline ListNotesResponse& operator=(ListNotesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNotesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNotesResponse* internal_default_instance() {
    return reinterpret_cast<const ListNotesResponse*>(
               &_ListNotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ListNotesResponse* other);
  friend void swap(ListNotesResponse& a, ListNotesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNotesResponse* New() const final {
    return CreateMaybeMessage<ListNotesResponse>(NULL);
  }

  ListNotesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNotesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNotesResponse& from);
  void MergeFrom(const ListNotesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.Note notes = 1;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 1;
  ::grafeas::v1beta1::Note* mutable_notes(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Note >*
      mutable_notes();
  const ::grafeas::v1beta1::Note& notes(int index) const;
  ::grafeas::v1beta1::Note* add_notes();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Note >&
      notes() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.ListNotesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Note > notes_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteNoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.DeleteNoteRequest) */ {
 public:
  DeleteNoteRequest();
  virtual ~DeleteNoteRequest();

  DeleteNoteRequest(const DeleteNoteRequest& from);

  inline DeleteNoteRequest& operator=(const DeleteNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteNoteRequest(DeleteNoteRequest&& from) noexcept
    : DeleteNoteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNoteRequest& operator=(DeleteNoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteNoteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNoteRequest*>(
               &_DeleteNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DeleteNoteRequest* other);
  friend void swap(DeleteNoteRequest& a, DeleteNoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteNoteRequest* New() const final {
    return CreateMaybeMessage<DeleteNoteRequest>(NULL);
  }

  DeleteNoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteNoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteNoteRequest& from);
  void MergeFrom(const DeleteNoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.DeleteNoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateNoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.CreateNoteRequest) */ {
 public:
  CreateNoteRequest();
  virtual ~CreateNoteRequest();

  CreateNoteRequest(const CreateNoteRequest& from);

  inline CreateNoteRequest& operator=(const CreateNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateNoteRequest(CreateNoteRequest&& from) noexcept
    : CreateNoteRequest() {
    *this = ::std::move(from);
  }

  inline CreateNoteRequest& operator=(CreateNoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateNoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateNoteRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNoteRequest*>(
               &_CreateNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CreateNoteRequest* other);
  friend void swap(CreateNoteRequest& a, CreateNoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateNoteRequest* New() const final {
    return CreateMaybeMessage<CreateNoteRequest>(NULL);
  }

  CreateNoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateNoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateNoteRequest& from);
  void MergeFrom(const CreateNoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string note_id = 2;
  void clear_note_id();
  static const int kNoteIdFieldNumber = 2;
  const ::std::string& note_id() const;
  void set_note_id(const ::std::string& value);
  #if LANG_CXX11
  void set_note_id(::std::string&& value);
  #endif
  void set_note_id(const char* value);
  void set_note_id(const char* value, size_t size);
  ::std::string* mutable_note_id();
  ::std::string* release_note_id();
  void set_allocated_note_id(::std::string* note_id);

  // .grafeas.v1beta1.Note note = 3;
  bool has_note() const;
  void clear_note();
  static const int kNoteFieldNumber = 3;
  private:
  const ::grafeas::v1beta1::Note& _internal_note() const;
  public:
  const ::grafeas::v1beta1::Note& note() const;
  ::grafeas::v1beta1::Note* release_note();
  ::grafeas::v1beta1::Note* mutable_note();
  void set_allocated_note(::grafeas::v1beta1::Note* note);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.CreateNoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr note_id_;
  ::grafeas::v1beta1::Note* note_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateNoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.UpdateNoteRequest) */ {
 public:
  UpdateNoteRequest();
  virtual ~UpdateNoteRequest();

  UpdateNoteRequest(const UpdateNoteRequest& from);

  inline UpdateNoteRequest& operator=(const UpdateNoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateNoteRequest(UpdateNoteRequest&& from) noexcept
    : UpdateNoteRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNoteRequest& operator=(UpdateNoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateNoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateNoteRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNoteRequest*>(
               &_UpdateNoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(UpdateNoteRequest* other);
  friend void swap(UpdateNoteRequest& a, UpdateNoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateNoteRequest* New() const final {
    return CreateMaybeMessage<UpdateNoteRequest>(NULL);
  }

  UpdateNoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateNoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateNoteRequest& from);
  void MergeFrom(const UpdateNoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .grafeas.v1beta1.Note note = 2;
  bool has_note() const;
  void clear_note();
  static const int kNoteFieldNumber = 2;
  private:
  const ::grafeas::v1beta1::Note& _internal_note() const;
  public:
  const ::grafeas::v1beta1::Note& note() const;
  ::grafeas::v1beta1::Note* release_note();
  ::grafeas::v1beta1::Note* mutable_note();
  void set_allocated_note(::grafeas::v1beta1::Note* note);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.UpdateNoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::grafeas::v1beta1::Note* note_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNoteOccurrencesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.ListNoteOccurrencesRequest) */ {
 public:
  ListNoteOccurrencesRequest();
  virtual ~ListNoteOccurrencesRequest();

  ListNoteOccurrencesRequest(const ListNoteOccurrencesRequest& from);

  inline ListNoteOccurrencesRequest& operator=(const ListNoteOccurrencesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNoteOccurrencesRequest(ListNoteOccurrencesRequest&& from) noexcept
    : ListNoteOccurrencesRequest() {
    *this = ::std::move(from);
  }

  inline ListNoteOccurrencesRequest& operator=(ListNoteOccurrencesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNoteOccurrencesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNoteOccurrencesRequest* internal_default_instance() {
    return reinterpret_cast<const ListNoteOccurrencesRequest*>(
               &_ListNoteOccurrencesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ListNoteOccurrencesRequest* other);
  friend void swap(ListNoteOccurrencesRequest& a, ListNoteOccurrencesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNoteOccurrencesRequest* New() const final {
    return CreateMaybeMessage<ListNoteOccurrencesRequest>(NULL);
  }

  ListNoteOccurrencesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNoteOccurrencesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNoteOccurrencesRequest& from);
  void MergeFrom(const ListNoteOccurrencesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNoteOccurrencesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.ListNoteOccurrencesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNoteOccurrencesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.ListNoteOccurrencesResponse) */ {
 public:
  ListNoteOccurrencesResponse();
  virtual ~ListNoteOccurrencesResponse();

  ListNoteOccurrencesResponse(const ListNoteOccurrencesResponse& from);

  inline ListNoteOccurrencesResponse& operator=(const ListNoteOccurrencesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNoteOccurrencesResponse(ListNoteOccurrencesResponse&& from) noexcept
    : ListNoteOccurrencesResponse() {
    *this = ::std::move(from);
  }

  inline ListNoteOccurrencesResponse& operator=(ListNoteOccurrencesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNoteOccurrencesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNoteOccurrencesResponse* internal_default_instance() {
    return reinterpret_cast<const ListNoteOccurrencesResponse*>(
               &_ListNoteOccurrencesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ListNoteOccurrencesResponse* other);
  friend void swap(ListNoteOccurrencesResponse& a, ListNoteOccurrencesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNoteOccurrencesResponse* New() const final {
    return CreateMaybeMessage<ListNoteOccurrencesResponse>(NULL);
  }

  ListNoteOccurrencesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNoteOccurrencesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNoteOccurrencesResponse& from);
  void MergeFrom(const ListNoteOccurrencesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNoteOccurrencesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.Occurrence occurrences = 1;
  int occurrences_size() const;
  void clear_occurrences();
  static const int kOccurrencesFieldNumber = 1;
  ::grafeas::v1beta1::Occurrence* mutable_occurrences(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >*
      mutable_occurrences();
  const ::grafeas::v1beta1::Occurrence& occurrences(int index) const;
  ::grafeas::v1beta1::Occurrence* add_occurrences();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >&
      occurrences() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.ListNoteOccurrencesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence > occurrences_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchCreateNotesRequest_NotesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<BatchCreateNotesRequest_NotesEntry_DoNotUse, 
    ::std::string, ::grafeas::v1beta1::Note,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<BatchCreateNotesRequest_NotesEntry_DoNotUse, 
    ::std::string, ::grafeas::v1beta1::Note,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  BatchCreateNotesRequest_NotesEntry_DoNotUse();
  BatchCreateNotesRequest_NotesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const BatchCreateNotesRequest_NotesEntry_DoNotUse& other);
  static const BatchCreateNotesRequest_NotesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BatchCreateNotesRequest_NotesEntry_DoNotUse*>(&_BatchCreateNotesRequest_NotesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class BatchCreateNotesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.BatchCreateNotesRequest) */ {
 public:
  BatchCreateNotesRequest();
  virtual ~BatchCreateNotesRequest();

  BatchCreateNotesRequest(const BatchCreateNotesRequest& from);

  inline BatchCreateNotesRequest& operator=(const BatchCreateNotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchCreateNotesRequest(BatchCreateNotesRequest&& from) noexcept
    : BatchCreateNotesRequest() {
    *this = ::std::move(from);
  }

  inline BatchCreateNotesRequest& operator=(BatchCreateNotesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchCreateNotesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchCreateNotesRequest* internal_default_instance() {
    return reinterpret_cast<const BatchCreateNotesRequest*>(
               &_BatchCreateNotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(BatchCreateNotesRequest* other);
  friend void swap(BatchCreateNotesRequest& a, BatchCreateNotesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchCreateNotesRequest* New() const final {
    return CreateMaybeMessage<BatchCreateNotesRequest>(NULL);
  }

  BatchCreateNotesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchCreateNotesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchCreateNotesRequest& from);
  void MergeFrom(const BatchCreateNotesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCreateNotesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .grafeas.v1beta1.Note> notes = 2;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::grafeas::v1beta1::Note >&
      notes() const;
  ::google::protobuf::Map< ::std::string, ::grafeas::v1beta1::Note >*
      mutable_notes();

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.BatchCreateNotesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      BatchCreateNotesRequest_NotesEntry_DoNotUse,
      ::std::string, ::grafeas::v1beta1::Note,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > notes_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchCreateNotesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.BatchCreateNotesResponse) */ {
 public:
  BatchCreateNotesResponse();
  virtual ~BatchCreateNotesResponse();

  BatchCreateNotesResponse(const BatchCreateNotesResponse& from);

  inline BatchCreateNotesResponse& operator=(const BatchCreateNotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchCreateNotesResponse(BatchCreateNotesResponse&& from) noexcept
    : BatchCreateNotesResponse() {
    *this = ::std::move(from);
  }

  inline BatchCreateNotesResponse& operator=(BatchCreateNotesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchCreateNotesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchCreateNotesResponse* internal_default_instance() {
    return reinterpret_cast<const BatchCreateNotesResponse*>(
               &_BatchCreateNotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(BatchCreateNotesResponse* other);
  friend void swap(BatchCreateNotesResponse& a, BatchCreateNotesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchCreateNotesResponse* New() const final {
    return CreateMaybeMessage<BatchCreateNotesResponse>(NULL);
  }

  BatchCreateNotesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchCreateNotesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchCreateNotesResponse& from);
  void MergeFrom(const BatchCreateNotesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCreateNotesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.Note notes = 1;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 1;
  ::grafeas::v1beta1::Note* mutable_notes(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Note >*
      mutable_notes();
  const ::grafeas::v1beta1::Note& notes(int index) const;
  ::grafeas::v1beta1::Note* add_notes();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Note >&
      notes() const;

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.BatchCreateNotesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Note > notes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchCreateOccurrencesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.BatchCreateOccurrencesRequest) */ {
 public:
  BatchCreateOccurrencesRequest();
  virtual ~BatchCreateOccurrencesRequest();

  BatchCreateOccurrencesRequest(const BatchCreateOccurrencesRequest& from);

  inline BatchCreateOccurrencesRequest& operator=(const BatchCreateOccurrencesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchCreateOccurrencesRequest(BatchCreateOccurrencesRequest&& from) noexcept
    : BatchCreateOccurrencesRequest() {
    *this = ::std::move(from);
  }

  inline BatchCreateOccurrencesRequest& operator=(BatchCreateOccurrencesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchCreateOccurrencesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchCreateOccurrencesRequest* internal_default_instance() {
    return reinterpret_cast<const BatchCreateOccurrencesRequest*>(
               &_BatchCreateOccurrencesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(BatchCreateOccurrencesRequest* other);
  friend void swap(BatchCreateOccurrencesRequest& a, BatchCreateOccurrencesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchCreateOccurrencesRequest* New() const final {
    return CreateMaybeMessage<BatchCreateOccurrencesRequest>(NULL);
  }

  BatchCreateOccurrencesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchCreateOccurrencesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchCreateOccurrencesRequest& from);
  void MergeFrom(const BatchCreateOccurrencesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCreateOccurrencesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.Occurrence occurrences = 2;
  int occurrences_size() const;
  void clear_occurrences();
  static const int kOccurrencesFieldNumber = 2;
  ::grafeas::v1beta1::Occurrence* mutable_occurrences(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >*
      mutable_occurrences();
  const ::grafeas::v1beta1::Occurrence& occurrences(int index) const;
  ::grafeas::v1beta1::Occurrence* add_occurrences();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >&
      occurrences() const;

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.BatchCreateOccurrencesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence > occurrences_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchCreateOccurrencesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.BatchCreateOccurrencesResponse) */ {
 public:
  BatchCreateOccurrencesResponse();
  virtual ~BatchCreateOccurrencesResponse();

  BatchCreateOccurrencesResponse(const BatchCreateOccurrencesResponse& from);

  inline BatchCreateOccurrencesResponse& operator=(const BatchCreateOccurrencesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchCreateOccurrencesResponse(BatchCreateOccurrencesResponse&& from) noexcept
    : BatchCreateOccurrencesResponse() {
    *this = ::std::move(from);
  }

  inline BatchCreateOccurrencesResponse& operator=(BatchCreateOccurrencesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchCreateOccurrencesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchCreateOccurrencesResponse* internal_default_instance() {
    return reinterpret_cast<const BatchCreateOccurrencesResponse*>(
               &_BatchCreateOccurrencesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(BatchCreateOccurrencesResponse* other);
  friend void swap(BatchCreateOccurrencesResponse& a, BatchCreateOccurrencesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchCreateOccurrencesResponse* New() const final {
    return CreateMaybeMessage<BatchCreateOccurrencesResponse>(NULL);
  }

  BatchCreateOccurrencesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchCreateOccurrencesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchCreateOccurrencesResponse& from);
  void MergeFrom(const BatchCreateOccurrencesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchCreateOccurrencesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.Occurrence occurrences = 1;
  int occurrences_size() const;
  void clear_occurrences();
  static const int kOccurrencesFieldNumber = 1;
  ::grafeas::v1beta1::Occurrence* mutable_occurrences(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >*
      mutable_occurrences();
  const ::grafeas::v1beta1::Occurrence& occurrences(int index) const;
  ::grafeas::v1beta1::Occurrence* add_occurrences();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >&
      occurrences() const;

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.BatchCreateOccurrencesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence > occurrences_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVulnerabilityOccurrencesSummaryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest) */ {
 public:
  GetVulnerabilityOccurrencesSummaryRequest();
  virtual ~GetVulnerabilityOccurrencesSummaryRequest();

  GetVulnerabilityOccurrencesSummaryRequest(const GetVulnerabilityOccurrencesSummaryRequest& from);

  inline GetVulnerabilityOccurrencesSummaryRequest& operator=(const GetVulnerabilityOccurrencesSummaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVulnerabilityOccurrencesSummaryRequest(GetVulnerabilityOccurrencesSummaryRequest&& from) noexcept
    : GetVulnerabilityOccurrencesSummaryRequest() {
    *this = ::std::move(from);
  }

  inline GetVulnerabilityOccurrencesSummaryRequest& operator=(GetVulnerabilityOccurrencesSummaryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVulnerabilityOccurrencesSummaryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVulnerabilityOccurrencesSummaryRequest* internal_default_instance() {
    return reinterpret_cast<const GetVulnerabilityOccurrencesSummaryRequest*>(
               &_GetVulnerabilityOccurrencesSummaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(GetVulnerabilityOccurrencesSummaryRequest* other);
  friend void swap(GetVulnerabilityOccurrencesSummaryRequest& a, GetVulnerabilityOccurrencesSummaryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVulnerabilityOccurrencesSummaryRequest* New() const final {
    return CreateMaybeMessage<GetVulnerabilityOccurrencesSummaryRequest>(NULL);
  }

  GetVulnerabilityOccurrencesSummaryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVulnerabilityOccurrencesSummaryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVulnerabilityOccurrencesSummaryRequest& from);
  void MergeFrom(const GetVulnerabilityOccurrencesSummaryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVulnerabilityOccurrencesSummaryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VulnerabilityOccurrencesSummary_FixableTotalByDigest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest) */ {
 public:
  VulnerabilityOccurrencesSummary_FixableTotalByDigest();
  virtual ~VulnerabilityOccurrencesSummary_FixableTotalByDigest();

  VulnerabilityOccurrencesSummary_FixableTotalByDigest(const VulnerabilityOccurrencesSummary_FixableTotalByDigest& from);

  inline VulnerabilityOccurrencesSummary_FixableTotalByDigest& operator=(const VulnerabilityOccurrencesSummary_FixableTotalByDigest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VulnerabilityOccurrencesSummary_FixableTotalByDigest(VulnerabilityOccurrencesSummary_FixableTotalByDigest&& from) noexcept
    : VulnerabilityOccurrencesSummary_FixableTotalByDigest() {
    *this = ::std::move(from);
  }

  inline VulnerabilityOccurrencesSummary_FixableTotalByDigest& operator=(VulnerabilityOccurrencesSummary_FixableTotalByDigest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VulnerabilityOccurrencesSummary_FixableTotalByDigest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VulnerabilityOccurrencesSummary_FixableTotalByDigest* internal_default_instance() {
    return reinterpret_cast<const VulnerabilityOccurrencesSummary_FixableTotalByDigest*>(
               &_VulnerabilityOccurrencesSummary_FixableTotalByDigest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(VulnerabilityOccurrencesSummary_FixableTotalByDigest* other);
  friend void swap(VulnerabilityOccurrencesSummary_FixableTotalByDigest& a, VulnerabilityOccurrencesSummary_FixableTotalByDigest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VulnerabilityOccurrencesSummary_FixableTotalByDigest* New() const final {
    return CreateMaybeMessage<VulnerabilityOccurrencesSummary_FixableTotalByDigest>(NULL);
  }

  VulnerabilityOccurrencesSummary_FixableTotalByDigest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VulnerabilityOccurrencesSummary_FixableTotalByDigest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VulnerabilityOccurrencesSummary_FixableTotalByDigest& from);
  void MergeFrom(const VulnerabilityOccurrencesSummary_FixableTotalByDigest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VulnerabilityOccurrencesSummary_FixableTotalByDigest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grafeas.v1beta1.Resource resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  private:
  const ::grafeas::v1beta1::Resource& _internal_resource() const;
  public:
  const ::grafeas::v1beta1::Resource& resource() const;
  ::grafeas::v1beta1::Resource* release_resource();
  ::grafeas::v1beta1::Resource* mutable_resource();
  void set_allocated_resource(::grafeas::v1beta1::Resource* resource);

  // int64 fixable_count = 3;
  void clear_fixable_count();
  static const int kFixableCountFieldNumber = 3;
  ::google::protobuf::int64 fixable_count() const;
  void set_fixable_count(::google::protobuf::int64 value);

  // int64 total_count = 4;
  void clear_total_count();
  static const int kTotalCountFieldNumber = 4;
  ::google::protobuf::int64 total_count() const;
  void set_total_count(::google::protobuf::int64 value);

  // .grafeas.v1beta1.vulnerability.Severity severity = 2;
  void clear_severity();
  static const int kSeverityFieldNumber = 2;
  ::grafeas::v1beta1::vulnerability::Severity severity() const;
  void set_severity(::grafeas::v1beta1::vulnerability::Severity value);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grafeas::v1beta1::Resource* resource_;
  ::google::protobuf::int64 fixable_count_;
  ::google::protobuf::int64 total_count_;
  int severity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VulnerabilityOccurrencesSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.VulnerabilityOccurrencesSummary) */ {
 public:
  VulnerabilityOccurrencesSummary();
  virtual ~VulnerabilityOccurrencesSummary();

  VulnerabilityOccurrencesSummary(const VulnerabilityOccurrencesSummary& from);

  inline VulnerabilityOccurrencesSummary& operator=(const VulnerabilityOccurrencesSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VulnerabilityOccurrencesSummary(VulnerabilityOccurrencesSummary&& from) noexcept
    : VulnerabilityOccurrencesSummary() {
    *this = ::std::move(from);
  }

  inline VulnerabilityOccurrencesSummary& operator=(VulnerabilityOccurrencesSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VulnerabilityOccurrencesSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VulnerabilityOccurrencesSummary* internal_default_instance() {
    return reinterpret_cast<const VulnerabilityOccurrencesSummary*>(
               &_VulnerabilityOccurrencesSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(VulnerabilityOccurrencesSummary* other);
  friend void swap(VulnerabilityOccurrencesSummary& a, VulnerabilityOccurrencesSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VulnerabilityOccurrencesSummary* New() const final {
    return CreateMaybeMessage<VulnerabilityOccurrencesSummary>(NULL);
  }

  VulnerabilityOccurrencesSummary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VulnerabilityOccurrencesSummary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VulnerabilityOccurrencesSummary& from);
  void MergeFrom(const VulnerabilityOccurrencesSummary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VulnerabilityOccurrencesSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VulnerabilityOccurrencesSummary_FixableTotalByDigest FixableTotalByDigest;

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest counts = 1;
  int counts_size() const;
  void clear_counts();
  static const int kCountsFieldNumber = 1;
  ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest* mutable_counts(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest >*
      mutable_counts();
  const ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest& counts(int index) const;
  ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest* add_counts();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest >&
      counts() const;

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.VulnerabilityOccurrencesSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest > counts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Occurrence

// string name = 1;
inline void Occurrence::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Occurrence::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.name)
  return name_.GetNoArena();
}
inline void Occurrence::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Occurrence.name)
}
#if LANG_CXX11
inline void Occurrence::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.Occurrence.name)
}
#endif
inline void Occurrence::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.Occurrence.name)
}
inline void Occurrence::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.Occurrence.name)
}
inline ::std::string* Occurrence::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Occurrence::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Occurrence::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Occurrence.name)
}

// .grafeas.v1beta1.Resource resource = 2;
inline bool Occurrence::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void Occurrence::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::grafeas::v1beta1::Resource& Occurrence::_internal_resource() const {
  return *resource_;
}
inline const ::grafeas::v1beta1::Resource& Occurrence::resource() const {
  const ::grafeas::v1beta1::Resource* p = resource_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::Resource*>(
      &::grafeas::v1beta1::_Resource_default_instance_);
}
inline ::grafeas::v1beta1::Resource* Occurrence::release_resource() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.resource)
  
  ::grafeas::v1beta1::Resource* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::Resource* Occurrence::mutable_resource() {
  
  if (resource_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::Resource>(GetArenaNoVirtual());
    resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.resource)
  return resource_;
}
inline void Occurrence::set_allocated_resource(::grafeas::v1beta1::Resource* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Occurrence.resource)
}

// string note_name = 3;
inline void Occurrence::clear_note_name() {
  note_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Occurrence::note_name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.note_name)
  return note_name_.GetNoArena();
}
inline void Occurrence::set_note_name(const ::std::string& value) {
  
  note_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Occurrence.note_name)
}
#if LANG_CXX11
inline void Occurrence::set_note_name(::std::string&& value) {
  
  note_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.Occurrence.note_name)
}
#endif
inline void Occurrence::set_note_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  note_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.Occurrence.note_name)
}
inline void Occurrence::set_note_name(const char* value, size_t size) {
  
  note_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.Occurrence.note_name)
}
inline ::std::string* Occurrence::mutable_note_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.note_name)
  return note_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Occurrence::release_note_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.note_name)
  
  return note_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Occurrence::set_allocated_note_name(::std::string* note_name) {
  if (note_name != NULL) {
    
  } else {
    
  }
  note_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note_name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Occurrence.note_name)
}

// .grafeas.v1beta1.NoteKind kind = 4;
inline void Occurrence::clear_kind() {
  kind_ = 0;
}
inline ::grafeas::v1beta1::NoteKind Occurrence::kind() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.kind)
  return static_cast< ::grafeas::v1beta1::NoteKind >(kind_);
}
inline void Occurrence::set_kind(::grafeas::v1beta1::NoteKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Occurrence.kind)
}

// string remediation = 5;
inline void Occurrence::clear_remediation() {
  remediation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Occurrence::remediation() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.remediation)
  return remediation_.GetNoArena();
}
inline void Occurrence::set_remediation(const ::std::string& value) {
  
  remediation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Occurrence.remediation)
}
#if LANG_CXX11
inline void Occurrence::set_remediation(::std::string&& value) {
  
  remediation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.Occurrence.remediation)
}
#endif
inline void Occurrence::set_remediation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remediation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.Occurrence.remediation)
}
inline void Occurrence::set_remediation(const char* value, size_t size) {
  
  remediation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.Occurrence.remediation)
}
inline ::std::string* Occurrence::mutable_remediation() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.remediation)
  return remediation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Occurrence::release_remediation() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.remediation)
  
  return remediation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Occurrence::set_allocated_remediation(::std::string* remediation) {
  if (remediation != NULL) {
    
  } else {
    
  }
  remediation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remediation);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Occurrence.remediation)
}

// .google.protobuf.Timestamp create_time = 6;
inline bool Occurrence::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Occurrence::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& Occurrence::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Occurrence::release_create_time() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Occurrence::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.create_time)
  return create_time_;
}
inline void Occurrence::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Occurrence.create_time)
}

// .google.protobuf.Timestamp update_time = 7;
inline bool Occurrence::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Occurrence::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& Occurrence::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Occurrence::release_update_time() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Occurrence::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.update_time)
  return update_time_;
}
inline void Occurrence::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Occurrence.update_time)
}

// .grafeas.v1beta1.vulnerability.Details vulnerability = 8;
inline bool Occurrence::has_vulnerability() const {
  return details_case() == kVulnerability;
}
inline void Occurrence::set_has_vulnerability() {
  _oneof_case_[0] = kVulnerability;
}
inline const ::grafeas::v1beta1::vulnerability::Details& Occurrence::_internal_vulnerability() const {
  return *details_.vulnerability_;
}
inline ::grafeas::v1beta1::vulnerability::Details* Occurrence::release_vulnerability() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.vulnerability)
  if (has_vulnerability()) {
    clear_has_details();
      ::grafeas::v1beta1::vulnerability::Details* temp = details_.vulnerability_;
    details_.vulnerability_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::vulnerability::Details& Occurrence::vulnerability() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.vulnerability)
  return has_vulnerability()
      ? *details_.vulnerability_
      : *reinterpret_cast< ::grafeas::v1beta1::vulnerability::Details*>(&::grafeas::v1beta1::vulnerability::_Details_default_instance_);
}
inline ::grafeas::v1beta1::vulnerability::Details* Occurrence::mutable_vulnerability() {
  if (!has_vulnerability()) {
    clear_details();
    set_has_vulnerability();
    details_.vulnerability_ = CreateMaybeMessage< ::grafeas::v1beta1::vulnerability::Details >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.vulnerability)
  return details_.vulnerability_;
}

// .grafeas.v1beta1.build.Details build = 9;
inline bool Occurrence::has_build() const {
  return details_case() == kBuild;
}
inline void Occurrence::set_has_build() {
  _oneof_case_[0] = kBuild;
}
inline const ::grafeas::v1beta1::build::Details& Occurrence::_internal_build() const {
  return *details_.build_;
}
inline ::grafeas::v1beta1::build::Details* Occurrence::release_build() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.build)
  if (has_build()) {
    clear_has_details();
      ::grafeas::v1beta1::build::Details* temp = details_.build_;
    details_.build_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::build::Details& Occurrence::build() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.build)
  return has_build()
      ? *details_.build_
      : *reinterpret_cast< ::grafeas::v1beta1::build::Details*>(&::grafeas::v1beta1::build::_Details_default_instance_);
}
inline ::grafeas::v1beta1::build::Details* Occurrence::mutable_build() {
  if (!has_build()) {
    clear_details();
    set_has_build();
    details_.build_ = CreateMaybeMessage< ::grafeas::v1beta1::build::Details >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.build)
  return details_.build_;
}

// .grafeas.v1beta1.image.Details derived_image = 10;
inline bool Occurrence::has_derived_image() const {
  return details_case() == kDerivedImage;
}
inline void Occurrence::set_has_derived_image() {
  _oneof_case_[0] = kDerivedImage;
}
inline const ::grafeas::v1beta1::image::Details& Occurrence::_internal_derived_image() const {
  return *details_.derived_image_;
}
inline ::grafeas::v1beta1::image::Details* Occurrence::release_derived_image() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.derived_image)
  if (has_derived_image()) {
    clear_has_details();
      ::grafeas::v1beta1::image::Details* temp = details_.derived_image_;
    details_.derived_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::image::Details& Occurrence::derived_image() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.derived_image)
  return has_derived_image()
      ? *details_.derived_image_
      : *reinterpret_cast< ::grafeas::v1beta1::image::Details*>(&::grafeas::v1beta1::image::_Details_default_instance_);
}
inline ::grafeas::v1beta1::image::Details* Occurrence::mutable_derived_image() {
  if (!has_derived_image()) {
    clear_details();
    set_has_derived_image();
    details_.derived_image_ = CreateMaybeMessage< ::grafeas::v1beta1::image::Details >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.derived_image)
  return details_.derived_image_;
}

// .grafeas.v1beta1.package.Details installation = 11;
inline bool Occurrence::has_installation() const {
  return details_case() == kInstallation;
}
inline void Occurrence::set_has_installation() {
  _oneof_case_[0] = kInstallation;
}
inline const ::grafeas::v1beta1::package::Details& Occurrence::_internal_installation() const {
  return *details_.installation_;
}
inline ::grafeas::v1beta1::package::Details* Occurrence::release_installation() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.installation)
  if (has_installation()) {
    clear_has_details();
      ::grafeas::v1beta1::package::Details* temp = details_.installation_;
    details_.installation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::package::Details& Occurrence::installation() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.installation)
  return has_installation()
      ? *details_.installation_
      : *reinterpret_cast< ::grafeas::v1beta1::package::Details*>(&::grafeas::v1beta1::package::_Details_default_instance_);
}
inline ::grafeas::v1beta1::package::Details* Occurrence::mutable_installation() {
  if (!has_installation()) {
    clear_details();
    set_has_installation();
    details_.installation_ = CreateMaybeMessage< ::grafeas::v1beta1::package::Details >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.installation)
  return details_.installation_;
}

// .grafeas.v1beta1.deployment.Details deployment = 12;
inline bool Occurrence::has_deployment() const {
  return details_case() == kDeployment;
}
inline void Occurrence::set_has_deployment() {
  _oneof_case_[0] = kDeployment;
}
inline const ::grafeas::v1beta1::deployment::Details& Occurrence::_internal_deployment() const {
  return *details_.deployment_;
}
inline ::grafeas::v1beta1::deployment::Details* Occurrence::release_deployment() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.deployment)
  if (has_deployment()) {
    clear_has_details();
      ::grafeas::v1beta1::deployment::Details* temp = details_.deployment_;
    details_.deployment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::deployment::Details& Occurrence::deployment() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.deployment)
  return has_deployment()
      ? *details_.deployment_
      : *reinterpret_cast< ::grafeas::v1beta1::deployment::Details*>(&::grafeas::v1beta1::deployment::_Details_default_instance_);
}
inline ::grafeas::v1beta1::deployment::Details* Occurrence::mutable_deployment() {
  if (!has_deployment()) {
    clear_details();
    set_has_deployment();
    details_.deployment_ = CreateMaybeMessage< ::grafeas::v1beta1::deployment::Details >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.deployment)
  return details_.deployment_;
}

// .grafeas.v1beta1.discovery.Details discovered = 13;
inline bool Occurrence::has_discovered() const {
  return details_case() == kDiscovered;
}
inline void Occurrence::set_has_discovered() {
  _oneof_case_[0] = kDiscovered;
}
inline const ::grafeas::v1beta1::discovery::Details& Occurrence::_internal_discovered() const {
  return *details_.discovered_;
}
inline ::grafeas::v1beta1::discovery::Details* Occurrence::release_discovered() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.discovered)
  if (has_discovered()) {
    clear_has_details();
      ::grafeas::v1beta1::discovery::Details* temp = details_.discovered_;
    details_.discovered_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::discovery::Details& Occurrence::discovered() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.discovered)
  return has_discovered()
      ? *details_.discovered_
      : *reinterpret_cast< ::grafeas::v1beta1::discovery::Details*>(&::grafeas::v1beta1::discovery::_Details_default_instance_);
}
inline ::grafeas::v1beta1::discovery::Details* Occurrence::mutable_discovered() {
  if (!has_discovered()) {
    clear_details();
    set_has_discovered();
    details_.discovered_ = CreateMaybeMessage< ::grafeas::v1beta1::discovery::Details >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.discovered)
  return details_.discovered_;
}

// .grafeas.v1beta1.attestation.Details attestation = 14;
inline bool Occurrence::has_attestation() const {
  return details_case() == kAttestation;
}
inline void Occurrence::set_has_attestation() {
  _oneof_case_[0] = kAttestation;
}
inline const ::grafeas::v1beta1::attestation::Details& Occurrence::_internal_attestation() const {
  return *details_.attestation_;
}
inline ::grafeas::v1beta1::attestation::Details* Occurrence::release_attestation() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Occurrence.attestation)
  if (has_attestation()) {
    clear_has_details();
      ::grafeas::v1beta1::attestation::Details* temp = details_.attestation_;
    details_.attestation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::attestation::Details& Occurrence::attestation() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Occurrence.attestation)
  return has_attestation()
      ? *details_.attestation_
      : *reinterpret_cast< ::grafeas::v1beta1::attestation::Details*>(&::grafeas::v1beta1::attestation::_Details_default_instance_);
}
inline ::grafeas::v1beta1::attestation::Details* Occurrence::mutable_attestation() {
  if (!has_attestation()) {
    clear_details();
    set_has_attestation();
    details_.attestation_ = CreateMaybeMessage< ::grafeas::v1beta1::attestation::Details >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Occurrence.attestation)
  return details_.attestation_;
}

inline bool Occurrence::has_details() const {
  return details_case() != DETAILS_NOT_SET;
}
inline void Occurrence::clear_has_details() {
  _oneof_case_[0] = DETAILS_NOT_SET;
}
inline Occurrence::DetailsCase Occurrence::details_case() const {
  return Occurrence::DetailsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Resource

// string name = 1;
inline void Resource::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Resource::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Resource.name)
  return name_.GetNoArena();
}
inline void Resource::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Resource.name)
}
#if LANG_CXX11
inline void Resource::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.Resource.name)
}
#endif
inline void Resource::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.Resource.name)
}
inline void Resource::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.Resource.name)
}
inline ::std::string* Resource::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Resource.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Resource::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Resource.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resource::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Resource.name)
}

// string uri = 2;
inline void Resource::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Resource::uri() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Resource.uri)
  return uri_.GetNoArena();
}
inline void Resource::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Resource.uri)
}
#if LANG_CXX11
inline void Resource::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.Resource.uri)
}
#endif
inline void Resource::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.Resource.uri)
}
inline void Resource::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.Resource.uri)
}
inline ::std::string* Resource::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Resource.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Resource::release_uri() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Resource.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resource::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Resource.uri)
}

// .grafeas.v1beta1.provenance.Hash content_hash = 3;
inline bool Resource::has_content_hash() const {
  return this != internal_default_instance() && content_hash_ != NULL;
}
inline const ::grafeas::v1beta1::provenance::Hash& Resource::_internal_content_hash() const {
  return *content_hash_;
}
inline const ::grafeas::v1beta1::provenance::Hash& Resource::content_hash() const {
  const ::grafeas::v1beta1::provenance::Hash* p = content_hash_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Resource.content_hash)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::provenance::Hash*>(
      &::grafeas::v1beta1::provenance::_Hash_default_instance_);
}
inline ::grafeas::v1beta1::provenance::Hash* Resource::release_content_hash() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Resource.content_hash)
  
  ::grafeas::v1beta1::provenance::Hash* temp = content_hash_;
  content_hash_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::provenance::Hash* Resource::mutable_content_hash() {
  
  if (content_hash_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::provenance::Hash>(GetArenaNoVirtual());
    content_hash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Resource.content_hash)
  return content_hash_;
}
inline void Resource::set_allocated_content_hash(::grafeas::v1beta1::provenance::Hash* content_hash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(content_hash_);
  }
  if (content_hash) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content_hash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content_hash, submessage_arena);
    }
    
  } else {
    
  }
  content_hash_ = content_hash;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Resource.content_hash)
}

// -------------------------------------------------------------------

// Note

// string name = 1;
inline void Note::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Note::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.name)
  return name_.GetNoArena();
}
inline void Note::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Note.name)
}
#if LANG_CXX11
inline void Note::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.Note.name)
}
#endif
inline void Note::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.Note.name)
}
inline void Note::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.Note.name)
}
inline ::std::string* Note::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Note::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Note.name)
}

// string short_description = 2;
inline void Note::clear_short_description() {
  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Note::short_description() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.short_description)
  return short_description_.GetNoArena();
}
inline void Note::set_short_description(const ::std::string& value) {
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Note.short_description)
}
#if LANG_CXX11
inline void Note::set_short_description(::std::string&& value) {
  
  short_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.Note.short_description)
}
#endif
inline void Note::set_short_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.Note.short_description)
}
inline void Note::set_short_description(const char* value, size_t size) {
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.Note.short_description)
}
inline ::std::string* Note::mutable_short_description() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.short_description)
  return short_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Note::release_short_description() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.short_description)
  
  return short_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_allocated_short_description(::std::string* short_description) {
  if (short_description != NULL) {
    
  } else {
    
  }
  short_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_description);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Note.short_description)
}

// string long_description = 3;
inline void Note::clear_long_description() {
  long_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Note::long_description() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.long_description)
  return long_description_.GetNoArena();
}
inline void Note::set_long_description(const ::std::string& value) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Note.long_description)
}
#if LANG_CXX11
inline void Note::set_long_description(::std::string&& value) {
  
  long_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.Note.long_description)
}
#endif
inline void Note::set_long_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.Note.long_description)
}
inline void Note::set_long_description(const char* value, size_t size) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.Note.long_description)
}
inline ::std::string* Note::mutable_long_description() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.long_description)
  return long_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Note::release_long_description() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.long_description)
  
  return long_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_allocated_long_description(::std::string* long_description) {
  if (long_description != NULL) {
    
  } else {
    
  }
  long_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), long_description);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Note.long_description)
}

// .grafeas.v1beta1.NoteKind kind = 4;
inline void Note::clear_kind() {
  kind_ = 0;
}
inline ::grafeas::v1beta1::NoteKind Note::kind() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.kind)
  return static_cast< ::grafeas::v1beta1::NoteKind >(kind_);
}
inline void Note::set_kind(::grafeas::v1beta1::NoteKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Note.kind)
}

// repeated .grafeas.v1beta1.RelatedUrl related_url = 5;
inline int Note::related_url_size() const {
  return related_url_.size();
}
inline ::grafeas::v1beta1::RelatedUrl* Note::mutable_related_url(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.related_url)
  return related_url_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::RelatedUrl >*
Note::mutable_related_url() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.Note.related_url)
  return &related_url_;
}
inline const ::grafeas::v1beta1::RelatedUrl& Note::related_url(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.related_url)
  return related_url_.Get(index);
}
inline ::grafeas::v1beta1::RelatedUrl* Note::add_related_url() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.Note.related_url)
  return related_url_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::RelatedUrl >&
Note::related_url() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.Note.related_url)
  return related_url_;
}

// .google.protobuf.Timestamp expiration_time = 6;
inline bool Note::has_expiration_time() const {
  return this != internal_default_instance() && expiration_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Note::_internal_expiration_time() const {
  return *expiration_time_;
}
inline const ::google::protobuf::Timestamp& Note::expiration_time() const {
  const ::google::protobuf::Timestamp* p = expiration_time_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.expiration_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Note::release_expiration_time() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.expiration_time)
  
  ::google::protobuf::Timestamp* temp = expiration_time_;
  expiration_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Note::mutable_expiration_time() {
  
  if (expiration_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expiration_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.expiration_time)
  return expiration_time_;
}
inline void Note::set_allocated_expiration_time(::google::protobuf::Timestamp* expiration_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expiration_time_);
  }
  if (expiration_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expiration_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiration_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Note.expiration_time)
}

// .google.protobuf.Timestamp create_time = 7;
inline bool Note::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Note::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& Note::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Note::release_create_time() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Note::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.create_time)
  return create_time_;
}
inline void Note::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Note.create_time)
}

// .google.protobuf.Timestamp update_time = 8;
inline bool Note::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Note::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& Note::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Note::release_update_time() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Note::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.update_time)
  return update_time_;
}
inline void Note::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.Note.update_time)
}

// repeated string related_note_names = 9;
inline int Note::related_note_names_size() const {
  return related_note_names_.size();
}
inline void Note::clear_related_note_names() {
  related_note_names_.Clear();
}
inline const ::std::string& Note::related_note_names(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.related_note_names)
  return related_note_names_.Get(index);
}
inline ::std::string* Note::mutable_related_note_names(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.related_note_names)
  return related_note_names_.Mutable(index);
}
inline void Note::set_related_note_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Note.related_note_names)
  related_note_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Note::set_related_note_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.Note.related_note_names)
  related_note_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Note::set_related_note_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  related_note_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.Note.related_note_names)
}
inline void Note::set_related_note_names(int index, const char* value, size_t size) {
  related_note_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.Note.related_note_names)
}
inline ::std::string* Note::add_related_note_names() {
  // @@protoc_insertion_point(field_add_mutable:grafeas.v1beta1.Note.related_note_names)
  return related_note_names_.Add();
}
inline void Note::add_related_note_names(const ::std::string& value) {
  related_note_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.Note.related_note_names)
}
#if LANG_CXX11
inline void Note::add_related_note_names(::std::string&& value) {
  related_note_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.Note.related_note_names)
}
#endif
inline void Note::add_related_note_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  related_note_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grafeas.v1beta1.Note.related_note_names)
}
inline void Note::add_related_note_names(const char* value, size_t size) {
  related_note_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grafeas.v1beta1.Note.related_note_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Note::related_note_names() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.Note.related_note_names)
  return related_note_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Note::mutable_related_note_names() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.Note.related_note_names)
  return &related_note_names_;
}

// .grafeas.v1beta1.vulnerability.Vulnerability vulnerability = 10;
inline bool Note::has_vulnerability() const {
  return type_case() == kVulnerability;
}
inline void Note::set_has_vulnerability() {
  _oneof_case_[0] = kVulnerability;
}
inline const ::grafeas::v1beta1::vulnerability::Vulnerability& Note::_internal_vulnerability() const {
  return *type_.vulnerability_;
}
inline ::grafeas::v1beta1::vulnerability::Vulnerability* Note::release_vulnerability() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.vulnerability)
  if (has_vulnerability()) {
    clear_has_type();
      ::grafeas::v1beta1::vulnerability::Vulnerability* temp = type_.vulnerability_;
    type_.vulnerability_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::vulnerability::Vulnerability& Note::vulnerability() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.vulnerability)
  return has_vulnerability()
      ? *type_.vulnerability_
      : *reinterpret_cast< ::grafeas::v1beta1::vulnerability::Vulnerability*>(&::grafeas::v1beta1::vulnerability::_Vulnerability_default_instance_);
}
inline ::grafeas::v1beta1::vulnerability::Vulnerability* Note::mutable_vulnerability() {
  if (!has_vulnerability()) {
    clear_type();
    set_has_vulnerability();
    type_.vulnerability_ = CreateMaybeMessage< ::grafeas::v1beta1::vulnerability::Vulnerability >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.vulnerability)
  return type_.vulnerability_;
}

// .grafeas.v1beta1.build.Build build = 11;
inline bool Note::has_build() const {
  return type_case() == kBuild;
}
inline void Note::set_has_build() {
  _oneof_case_[0] = kBuild;
}
inline const ::grafeas::v1beta1::build::Build& Note::_internal_build() const {
  return *type_.build_;
}
inline ::grafeas::v1beta1::build::Build* Note::release_build() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.build)
  if (has_build()) {
    clear_has_type();
      ::grafeas::v1beta1::build::Build* temp = type_.build_;
    type_.build_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::build::Build& Note::build() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.build)
  return has_build()
      ? *type_.build_
      : *reinterpret_cast< ::grafeas::v1beta1::build::Build*>(&::grafeas::v1beta1::build::_Build_default_instance_);
}
inline ::grafeas::v1beta1::build::Build* Note::mutable_build() {
  if (!has_build()) {
    clear_type();
    set_has_build();
    type_.build_ = CreateMaybeMessage< ::grafeas::v1beta1::build::Build >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.build)
  return type_.build_;
}

// .grafeas.v1beta1.image.Basis base_image = 12;
inline bool Note::has_base_image() const {
  return type_case() == kBaseImage;
}
inline void Note::set_has_base_image() {
  _oneof_case_[0] = kBaseImage;
}
inline const ::grafeas::v1beta1::image::Basis& Note::_internal_base_image() const {
  return *type_.base_image_;
}
inline ::grafeas::v1beta1::image::Basis* Note::release_base_image() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.base_image)
  if (has_base_image()) {
    clear_has_type();
      ::grafeas::v1beta1::image::Basis* temp = type_.base_image_;
    type_.base_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::image::Basis& Note::base_image() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.base_image)
  return has_base_image()
      ? *type_.base_image_
      : *reinterpret_cast< ::grafeas::v1beta1::image::Basis*>(&::grafeas::v1beta1::image::_Basis_default_instance_);
}
inline ::grafeas::v1beta1::image::Basis* Note::mutable_base_image() {
  if (!has_base_image()) {
    clear_type();
    set_has_base_image();
    type_.base_image_ = CreateMaybeMessage< ::grafeas::v1beta1::image::Basis >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.base_image)
  return type_.base_image_;
}

// .grafeas.v1beta1.package.Package package = 13;
inline bool Note::has_package() const {
  return type_case() == kPackage;
}
inline void Note::set_has_package() {
  _oneof_case_[0] = kPackage;
}
inline const ::grafeas::v1beta1::package::Package& Note::_internal_package() const {
  return *type_.package_;
}
inline ::grafeas::v1beta1::package::Package* Note::release_package() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.package)
  if (has_package()) {
    clear_has_type();
      ::grafeas::v1beta1::package::Package* temp = type_.package_;
    type_.package_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::package::Package& Note::package() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.package)
  return has_package()
      ? *type_.package_
      : *reinterpret_cast< ::grafeas::v1beta1::package::Package*>(&::grafeas::v1beta1::package::_Package_default_instance_);
}
inline ::grafeas::v1beta1::package::Package* Note::mutable_package() {
  if (!has_package()) {
    clear_type();
    set_has_package();
    type_.package_ = CreateMaybeMessage< ::grafeas::v1beta1::package::Package >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.package)
  return type_.package_;
}

// .grafeas.v1beta1.deployment.Deployable deployable = 14;
inline bool Note::has_deployable() const {
  return type_case() == kDeployable;
}
inline void Note::set_has_deployable() {
  _oneof_case_[0] = kDeployable;
}
inline const ::grafeas::v1beta1::deployment::Deployable& Note::_internal_deployable() const {
  return *type_.deployable_;
}
inline ::grafeas::v1beta1::deployment::Deployable* Note::release_deployable() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.deployable)
  if (has_deployable()) {
    clear_has_type();
      ::grafeas::v1beta1::deployment::Deployable* temp = type_.deployable_;
    type_.deployable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::deployment::Deployable& Note::deployable() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.deployable)
  return has_deployable()
      ? *type_.deployable_
      : *reinterpret_cast< ::grafeas::v1beta1::deployment::Deployable*>(&::grafeas::v1beta1::deployment::_Deployable_default_instance_);
}
inline ::grafeas::v1beta1::deployment::Deployable* Note::mutable_deployable() {
  if (!has_deployable()) {
    clear_type();
    set_has_deployable();
    type_.deployable_ = CreateMaybeMessage< ::grafeas::v1beta1::deployment::Deployable >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.deployable)
  return type_.deployable_;
}

// .grafeas.v1beta1.discovery.Discovery discovery = 15;
inline bool Note::has_discovery() const {
  return type_case() == kDiscovery;
}
inline void Note::set_has_discovery() {
  _oneof_case_[0] = kDiscovery;
}
inline const ::grafeas::v1beta1::discovery::Discovery& Note::_internal_discovery() const {
  return *type_.discovery_;
}
inline ::grafeas::v1beta1::discovery::Discovery* Note::release_discovery() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.discovery)
  if (has_discovery()) {
    clear_has_type();
      ::grafeas::v1beta1::discovery::Discovery* temp = type_.discovery_;
    type_.discovery_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::discovery::Discovery& Note::discovery() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.discovery)
  return has_discovery()
      ? *type_.discovery_
      : *reinterpret_cast< ::grafeas::v1beta1::discovery::Discovery*>(&::grafeas::v1beta1::discovery::_Discovery_default_instance_);
}
inline ::grafeas::v1beta1::discovery::Discovery* Note::mutable_discovery() {
  if (!has_discovery()) {
    clear_type();
    set_has_discovery();
    type_.discovery_ = CreateMaybeMessage< ::grafeas::v1beta1::discovery::Discovery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.discovery)
  return type_.discovery_;
}

// .grafeas.v1beta1.attestation.Authority attestation_authority = 16;
inline bool Note::has_attestation_authority() const {
  return type_case() == kAttestationAuthority;
}
inline void Note::set_has_attestation_authority() {
  _oneof_case_[0] = kAttestationAuthority;
}
inline const ::grafeas::v1beta1::attestation::Authority& Note::_internal_attestation_authority() const {
  return *type_.attestation_authority_;
}
inline ::grafeas::v1beta1::attestation::Authority* Note::release_attestation_authority() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.Note.attestation_authority)
  if (has_attestation_authority()) {
    clear_has_type();
      ::grafeas::v1beta1::attestation::Authority* temp = type_.attestation_authority_;
    type_.attestation_authority_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::attestation::Authority& Note::attestation_authority() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.Note.attestation_authority)
  return has_attestation_authority()
      ? *type_.attestation_authority_
      : *reinterpret_cast< ::grafeas::v1beta1::attestation::Authority*>(&::grafeas::v1beta1::attestation::_Authority_default_instance_);
}
inline ::grafeas::v1beta1::attestation::Authority* Note::mutable_attestation_authority() {
  if (!has_attestation_authority()) {
    clear_type();
    set_has_attestation_authority();
    type_.attestation_authority_ = CreateMaybeMessage< ::grafeas::v1beta1::attestation::Authority >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.Note.attestation_authority)
  return type_.attestation_authority_;
}

inline bool Note::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Note::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Note::TypeCase Note::type_case() const {
  return Note::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetOccurrenceRequest

// string name = 1;
inline void GetOccurrenceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOccurrenceRequest::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.GetOccurrenceRequest.name)
  return name_.GetNoArena();
}
inline void GetOccurrenceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.GetOccurrenceRequest.name)
}
#if LANG_CXX11
inline void GetOccurrenceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.GetOccurrenceRequest.name)
}
#endif
inline void GetOccurrenceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.GetOccurrenceRequest.name)
}
inline void GetOccurrenceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.GetOccurrenceRequest.name)
}
inline ::std::string* GetOccurrenceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.GetOccurrenceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOccurrenceRequest::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.GetOccurrenceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOccurrenceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.GetOccurrenceRequest.name)
}

// -------------------------------------------------------------------

// ListOccurrencesRequest

// string parent = 1;
inline void ListOccurrencesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOccurrencesRequest::parent() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListOccurrencesRequest.parent)
  return parent_.GetNoArena();
}
inline void ListOccurrencesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListOccurrencesRequest.parent)
}
#if LANG_CXX11
inline void ListOccurrencesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListOccurrencesRequest.parent)
}
#endif
inline void ListOccurrencesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListOccurrencesRequest.parent)
}
inline void ListOccurrencesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListOccurrencesRequest.parent)
}
inline ::std::string* ListOccurrencesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListOccurrencesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOccurrencesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListOccurrencesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOccurrencesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListOccurrencesRequest.parent)
}

// string filter = 2;
inline void ListOccurrencesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOccurrencesRequest::filter() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListOccurrencesRequest.filter)
  return filter_.GetNoArena();
}
inline void ListOccurrencesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListOccurrencesRequest.filter)
}
#if LANG_CXX11
inline void ListOccurrencesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListOccurrencesRequest.filter)
}
#endif
inline void ListOccurrencesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListOccurrencesRequest.filter)
}
inline void ListOccurrencesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListOccurrencesRequest.filter)
}
inline ::std::string* ListOccurrencesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListOccurrencesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOccurrencesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListOccurrencesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOccurrencesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListOccurrencesRequest.filter)
}

// int32 page_size = 3;
inline void ListOccurrencesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListOccurrencesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListOccurrencesRequest.page_size)
  return page_size_;
}
inline void ListOccurrencesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListOccurrencesRequest.page_size)
}

// string page_token = 4;
inline void ListOccurrencesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOccurrencesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListOccurrencesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListOccurrencesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListOccurrencesRequest.page_token)
}
#if LANG_CXX11
inline void ListOccurrencesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListOccurrencesRequest.page_token)
}
#endif
inline void ListOccurrencesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListOccurrencesRequest.page_token)
}
inline void ListOccurrencesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListOccurrencesRequest.page_token)
}
inline ::std::string* ListOccurrencesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListOccurrencesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOccurrencesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListOccurrencesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOccurrencesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListOccurrencesRequest.page_token)
}

// -------------------------------------------------------------------

// ListOccurrencesResponse

// repeated .grafeas.v1beta1.Occurrence occurrences = 1;
inline int ListOccurrencesResponse::occurrences_size() const {
  return occurrences_.size();
}
inline void ListOccurrencesResponse::clear_occurrences() {
  occurrences_.Clear();
}
inline ::grafeas::v1beta1::Occurrence* ListOccurrencesResponse::mutable_occurrences(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListOccurrencesResponse.occurrences)
  return occurrences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >*
ListOccurrencesResponse::mutable_occurrences() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.ListOccurrencesResponse.occurrences)
  return &occurrences_;
}
inline const ::grafeas::v1beta1::Occurrence& ListOccurrencesResponse::occurrences(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListOccurrencesResponse.occurrences)
  return occurrences_.Get(index);
}
inline ::grafeas::v1beta1::Occurrence* ListOccurrencesResponse::add_occurrences() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.ListOccurrencesResponse.occurrences)
  return occurrences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >&
ListOccurrencesResponse::occurrences() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.ListOccurrencesResponse.occurrences)
  return occurrences_;
}

// string next_page_token = 2;
inline void ListOccurrencesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOccurrencesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListOccurrencesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListOccurrencesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListOccurrencesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListOccurrencesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListOccurrencesResponse.next_page_token)
}
#endif
inline void ListOccurrencesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListOccurrencesResponse.next_page_token)
}
inline void ListOccurrencesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListOccurrencesResponse.next_page_token)
}
inline ::std::string* ListOccurrencesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListOccurrencesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOccurrencesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListOccurrencesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOccurrencesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListOccurrencesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteOccurrenceRequest

// string name = 1;
inline void DeleteOccurrenceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteOccurrenceRequest::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.DeleteOccurrenceRequest.name)
  return name_.GetNoArena();
}
inline void DeleteOccurrenceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.DeleteOccurrenceRequest.name)
}
#if LANG_CXX11
inline void DeleteOccurrenceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.DeleteOccurrenceRequest.name)
}
#endif
inline void DeleteOccurrenceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.DeleteOccurrenceRequest.name)
}
inline void DeleteOccurrenceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.DeleteOccurrenceRequest.name)
}
inline ::std::string* DeleteOccurrenceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.DeleteOccurrenceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteOccurrenceRequest::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.DeleteOccurrenceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteOccurrenceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.DeleteOccurrenceRequest.name)
}

// -------------------------------------------------------------------

// CreateOccurrenceRequest

// string parent = 1;
inline void CreateOccurrenceRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateOccurrenceRequest::parent() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.CreateOccurrenceRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateOccurrenceRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.CreateOccurrenceRequest.parent)
}
#if LANG_CXX11
inline void CreateOccurrenceRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.CreateOccurrenceRequest.parent)
}
#endif
inline void CreateOccurrenceRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.CreateOccurrenceRequest.parent)
}
inline void CreateOccurrenceRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.CreateOccurrenceRequest.parent)
}
inline ::std::string* CreateOccurrenceRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.CreateOccurrenceRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateOccurrenceRequest::release_parent() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.CreateOccurrenceRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateOccurrenceRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.CreateOccurrenceRequest.parent)
}

// .grafeas.v1beta1.Occurrence occurrence = 2;
inline bool CreateOccurrenceRequest::has_occurrence() const {
  return this != internal_default_instance() && occurrence_ != NULL;
}
inline void CreateOccurrenceRequest::clear_occurrence() {
  if (GetArenaNoVirtual() == NULL && occurrence_ != NULL) {
    delete occurrence_;
  }
  occurrence_ = NULL;
}
inline const ::grafeas::v1beta1::Occurrence& CreateOccurrenceRequest::_internal_occurrence() const {
  return *occurrence_;
}
inline const ::grafeas::v1beta1::Occurrence& CreateOccurrenceRequest::occurrence() const {
  const ::grafeas::v1beta1::Occurrence* p = occurrence_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.CreateOccurrenceRequest.occurrence)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::Occurrence*>(
      &::grafeas::v1beta1::_Occurrence_default_instance_);
}
inline ::grafeas::v1beta1::Occurrence* CreateOccurrenceRequest::release_occurrence() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.CreateOccurrenceRequest.occurrence)
  
  ::grafeas::v1beta1::Occurrence* temp = occurrence_;
  occurrence_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::Occurrence* CreateOccurrenceRequest::mutable_occurrence() {
  
  if (occurrence_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::Occurrence>(GetArenaNoVirtual());
    occurrence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.CreateOccurrenceRequest.occurrence)
  return occurrence_;
}
inline void CreateOccurrenceRequest::set_allocated_occurrence(::grafeas::v1beta1::Occurrence* occurrence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete occurrence_;
  }
  if (occurrence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      occurrence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurrence, submessage_arena);
    }
    
  } else {
    
  }
  occurrence_ = occurrence;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.CreateOccurrenceRequest.occurrence)
}

// -------------------------------------------------------------------

// UpdateOccurrenceRequest

// string name = 1;
inline void UpdateOccurrenceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateOccurrenceRequest::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.UpdateOccurrenceRequest.name)
  return name_.GetNoArena();
}
inline void UpdateOccurrenceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.UpdateOccurrenceRequest.name)
}
#if LANG_CXX11
inline void UpdateOccurrenceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.UpdateOccurrenceRequest.name)
}
#endif
inline void UpdateOccurrenceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.UpdateOccurrenceRequest.name)
}
inline void UpdateOccurrenceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.UpdateOccurrenceRequest.name)
}
inline ::std::string* UpdateOccurrenceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.UpdateOccurrenceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateOccurrenceRequest::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.UpdateOccurrenceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateOccurrenceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.UpdateOccurrenceRequest.name)
}

// .grafeas.v1beta1.Occurrence occurrence = 2;
inline bool UpdateOccurrenceRequest::has_occurrence() const {
  return this != internal_default_instance() && occurrence_ != NULL;
}
inline void UpdateOccurrenceRequest::clear_occurrence() {
  if (GetArenaNoVirtual() == NULL && occurrence_ != NULL) {
    delete occurrence_;
  }
  occurrence_ = NULL;
}
inline const ::grafeas::v1beta1::Occurrence& UpdateOccurrenceRequest::_internal_occurrence() const {
  return *occurrence_;
}
inline const ::grafeas::v1beta1::Occurrence& UpdateOccurrenceRequest::occurrence() const {
  const ::grafeas::v1beta1::Occurrence* p = occurrence_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.UpdateOccurrenceRequest.occurrence)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::Occurrence*>(
      &::grafeas::v1beta1::_Occurrence_default_instance_);
}
inline ::grafeas::v1beta1::Occurrence* UpdateOccurrenceRequest::release_occurrence() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.UpdateOccurrenceRequest.occurrence)
  
  ::grafeas::v1beta1::Occurrence* temp = occurrence_;
  occurrence_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::Occurrence* UpdateOccurrenceRequest::mutable_occurrence() {
  
  if (occurrence_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::Occurrence>(GetArenaNoVirtual());
    occurrence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.UpdateOccurrenceRequest.occurrence)
  return occurrence_;
}
inline void UpdateOccurrenceRequest::set_allocated_occurrence(::grafeas::v1beta1::Occurrence* occurrence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete occurrence_;
  }
  if (occurrence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      occurrence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurrence, submessage_arena);
    }
    
  } else {
    
  }
  occurrence_ = occurrence;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.UpdateOccurrenceRequest.occurrence)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateOccurrenceRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateOccurrenceRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateOccurrenceRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.UpdateOccurrenceRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateOccurrenceRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.UpdateOccurrenceRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateOccurrenceRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.UpdateOccurrenceRequest.update_mask)
  return update_mask_;
}
inline void UpdateOccurrenceRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.UpdateOccurrenceRequest.update_mask)
}

// -------------------------------------------------------------------

// GetNoteRequest

// string name = 1;
inline void GetNoteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNoteRequest::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.GetNoteRequest.name)
  return name_.GetNoArena();
}
inline void GetNoteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.GetNoteRequest.name)
}
#if LANG_CXX11
inline void GetNoteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.GetNoteRequest.name)
}
#endif
inline void GetNoteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.GetNoteRequest.name)
}
inline void GetNoteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.GetNoteRequest.name)
}
inline ::std::string* GetNoteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.GetNoteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNoteRequest::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.GetNoteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNoteRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.GetNoteRequest.name)
}

// -------------------------------------------------------------------

// GetOccurrenceNoteRequest

// string name = 1;
inline void GetOccurrenceNoteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOccurrenceNoteRequest::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.GetOccurrenceNoteRequest.name)
  return name_.GetNoArena();
}
inline void GetOccurrenceNoteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.GetOccurrenceNoteRequest.name)
}
#if LANG_CXX11
inline void GetOccurrenceNoteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.GetOccurrenceNoteRequest.name)
}
#endif
inline void GetOccurrenceNoteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.GetOccurrenceNoteRequest.name)
}
inline void GetOccurrenceNoteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.GetOccurrenceNoteRequest.name)
}
inline ::std::string* GetOccurrenceNoteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.GetOccurrenceNoteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOccurrenceNoteRequest::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.GetOccurrenceNoteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOccurrenceNoteRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.GetOccurrenceNoteRequest.name)
}

// -------------------------------------------------------------------

// ListNotesRequest

// string parent = 1;
inline void ListNotesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotesRequest::parent() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNotesRequest.parent)
  return parent_.GetNoArena();
}
inline void ListNotesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListNotesRequest.parent)
}
#if LANG_CXX11
inline void ListNotesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListNotesRequest.parent)
}
#endif
inline void ListNotesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListNotesRequest.parent)
}
inline void ListNotesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListNotesRequest.parent)
}
inline ::std::string* ListNotesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListNotesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListNotesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListNotesRequest.parent)
}

// string filter = 2;
inline void ListNotesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotesRequest::filter() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNotesRequest.filter)
  return filter_.GetNoArena();
}
inline void ListNotesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListNotesRequest.filter)
}
#if LANG_CXX11
inline void ListNotesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListNotesRequest.filter)
}
#endif
inline void ListNotesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListNotesRequest.filter)
}
inline void ListNotesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListNotesRequest.filter)
}
inline ::std::string* ListNotesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListNotesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListNotesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListNotesRequest.filter)
}

// int32 page_size = 3;
inline void ListNotesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListNotesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNotesRequest.page_size)
  return page_size_;
}
inline void ListNotesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListNotesRequest.page_size)
}

// string page_token = 4;
inline void ListNotesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNotesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListNotesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListNotesRequest.page_token)
}
#if LANG_CXX11
inline void ListNotesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListNotesRequest.page_token)
}
#endif
inline void ListNotesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListNotesRequest.page_token)
}
inline void ListNotesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListNotesRequest.page_token)
}
inline ::std::string* ListNotesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListNotesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListNotesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListNotesRequest.page_token)
}

// -------------------------------------------------------------------

// ListNotesResponse

// repeated .grafeas.v1beta1.Note notes = 1;
inline int ListNotesResponse::notes_size() const {
  return notes_.size();
}
inline void ListNotesResponse::clear_notes() {
  notes_.Clear();
}
inline ::grafeas::v1beta1::Note* ListNotesResponse::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListNotesResponse.notes)
  return notes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Note >*
ListNotesResponse::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.ListNotesResponse.notes)
  return &notes_;
}
inline const ::grafeas::v1beta1::Note& ListNotesResponse::notes(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNotesResponse.notes)
  return notes_.Get(index);
}
inline ::grafeas::v1beta1::Note* ListNotesResponse::add_notes() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.ListNotesResponse.notes)
  return notes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Note >&
ListNotesResponse::notes() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.ListNotesResponse.notes)
  return notes_;
}

// string next_page_token = 2;
inline void ListNotesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNotesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListNotesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListNotesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListNotesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListNotesResponse.next_page_token)
}
#endif
inline void ListNotesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListNotesResponse.next_page_token)
}
inline void ListNotesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListNotesResponse.next_page_token)
}
inline ::std::string* ListNotesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListNotesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListNotesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListNotesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteNoteRequest

// string name = 1;
inline void DeleteNoteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNoteRequest::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.DeleteNoteRequest.name)
  return name_.GetNoArena();
}
inline void DeleteNoteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.DeleteNoteRequest.name)
}
#if LANG_CXX11
inline void DeleteNoteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.DeleteNoteRequest.name)
}
#endif
inline void DeleteNoteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.DeleteNoteRequest.name)
}
inline void DeleteNoteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.DeleteNoteRequest.name)
}
inline ::std::string* DeleteNoteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.DeleteNoteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNoteRequest::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.DeleteNoteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNoteRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.DeleteNoteRequest.name)
}

// -------------------------------------------------------------------

// CreateNoteRequest

// string parent = 1;
inline void CreateNoteRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNoteRequest::parent() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.CreateNoteRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateNoteRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.CreateNoteRequest.parent)
}
#if LANG_CXX11
inline void CreateNoteRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.CreateNoteRequest.parent)
}
#endif
inline void CreateNoteRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.CreateNoteRequest.parent)
}
inline void CreateNoteRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.CreateNoteRequest.parent)
}
inline ::std::string* CreateNoteRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.CreateNoteRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNoteRequest::release_parent() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.CreateNoteRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNoteRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.CreateNoteRequest.parent)
}

// string note_id = 2;
inline void CreateNoteRequest::clear_note_id() {
  note_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNoteRequest::note_id() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.CreateNoteRequest.note_id)
  return note_id_.GetNoArena();
}
inline void CreateNoteRequest::set_note_id(const ::std::string& value) {
  
  note_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.CreateNoteRequest.note_id)
}
#if LANG_CXX11
inline void CreateNoteRequest::set_note_id(::std::string&& value) {
  
  note_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.CreateNoteRequest.note_id)
}
#endif
inline void CreateNoteRequest::set_note_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  note_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.CreateNoteRequest.note_id)
}
inline void CreateNoteRequest::set_note_id(const char* value, size_t size) {
  
  note_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.CreateNoteRequest.note_id)
}
inline ::std::string* CreateNoteRequest::mutable_note_id() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.CreateNoteRequest.note_id)
  return note_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNoteRequest::release_note_id() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.CreateNoteRequest.note_id)
  
  return note_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNoteRequest::set_allocated_note_id(::std::string* note_id) {
  if (note_id != NULL) {
    
  } else {
    
  }
  note_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note_id);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.CreateNoteRequest.note_id)
}

// .grafeas.v1beta1.Note note = 3;
inline bool CreateNoteRequest::has_note() const {
  return this != internal_default_instance() && note_ != NULL;
}
inline void CreateNoteRequest::clear_note() {
  if (GetArenaNoVirtual() == NULL && note_ != NULL) {
    delete note_;
  }
  note_ = NULL;
}
inline const ::grafeas::v1beta1::Note& CreateNoteRequest::_internal_note() const {
  return *note_;
}
inline const ::grafeas::v1beta1::Note& CreateNoteRequest::note() const {
  const ::grafeas::v1beta1::Note* p = note_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.CreateNoteRequest.note)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::Note*>(
      &::grafeas::v1beta1::_Note_default_instance_);
}
inline ::grafeas::v1beta1::Note* CreateNoteRequest::release_note() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.CreateNoteRequest.note)
  
  ::grafeas::v1beta1::Note* temp = note_;
  note_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::Note* CreateNoteRequest::mutable_note() {
  
  if (note_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::Note>(GetArenaNoVirtual());
    note_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.CreateNoteRequest.note)
  return note_;
}
inline void CreateNoteRequest::set_allocated_note(::grafeas::v1beta1::Note* note) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete note_;
  }
  if (note) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      note = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, note, submessage_arena);
    }
    
  } else {
    
  }
  note_ = note;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.CreateNoteRequest.note)
}

// -------------------------------------------------------------------

// UpdateNoteRequest

// string name = 1;
inline void UpdateNoteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNoteRequest::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.UpdateNoteRequest.name)
  return name_.GetNoArena();
}
inline void UpdateNoteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.UpdateNoteRequest.name)
}
#if LANG_CXX11
inline void UpdateNoteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.UpdateNoteRequest.name)
}
#endif
inline void UpdateNoteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.UpdateNoteRequest.name)
}
inline void UpdateNoteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.UpdateNoteRequest.name)
}
inline ::std::string* UpdateNoteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.UpdateNoteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNoteRequest::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.UpdateNoteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNoteRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.UpdateNoteRequest.name)
}

// .grafeas.v1beta1.Note note = 2;
inline bool UpdateNoteRequest::has_note() const {
  return this != internal_default_instance() && note_ != NULL;
}
inline void UpdateNoteRequest::clear_note() {
  if (GetArenaNoVirtual() == NULL && note_ != NULL) {
    delete note_;
  }
  note_ = NULL;
}
inline const ::grafeas::v1beta1::Note& UpdateNoteRequest::_internal_note() const {
  return *note_;
}
inline const ::grafeas::v1beta1::Note& UpdateNoteRequest::note() const {
  const ::grafeas::v1beta1::Note* p = note_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.UpdateNoteRequest.note)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::Note*>(
      &::grafeas::v1beta1::_Note_default_instance_);
}
inline ::grafeas::v1beta1::Note* UpdateNoteRequest::release_note() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.UpdateNoteRequest.note)
  
  ::grafeas::v1beta1::Note* temp = note_;
  note_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::Note* UpdateNoteRequest::mutable_note() {
  
  if (note_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::Note>(GetArenaNoVirtual());
    note_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.UpdateNoteRequest.note)
  return note_;
}
inline void UpdateNoteRequest::set_allocated_note(::grafeas::v1beta1::Note* note) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete note_;
  }
  if (note) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      note = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, note, submessage_arena);
    }
    
  } else {
    
  }
  note_ = note;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.UpdateNoteRequest.note)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateNoteRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateNoteRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateNoteRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.UpdateNoteRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateNoteRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.UpdateNoteRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateNoteRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.UpdateNoteRequest.update_mask)
  return update_mask_;
}
inline void UpdateNoteRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.UpdateNoteRequest.update_mask)
}

// -------------------------------------------------------------------

// ListNoteOccurrencesRequest

// string name = 1;
inline void ListNoteOccurrencesRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNoteOccurrencesRequest::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNoteOccurrencesRequest.name)
  return name_.GetNoArena();
}
inline void ListNoteOccurrencesRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListNoteOccurrencesRequest.name)
}
#if LANG_CXX11
inline void ListNoteOccurrencesRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListNoteOccurrencesRequest.name)
}
#endif
inline void ListNoteOccurrencesRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListNoteOccurrencesRequest.name)
}
inline void ListNoteOccurrencesRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListNoteOccurrencesRequest.name)
}
inline ::std::string* ListNoteOccurrencesRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListNoteOccurrencesRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNoteOccurrencesRequest::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListNoteOccurrencesRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNoteOccurrencesRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListNoteOccurrencesRequest.name)
}

// string filter = 2;
inline void ListNoteOccurrencesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNoteOccurrencesRequest::filter() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNoteOccurrencesRequest.filter)
  return filter_.GetNoArena();
}
inline void ListNoteOccurrencesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListNoteOccurrencesRequest.filter)
}
#if LANG_CXX11
inline void ListNoteOccurrencesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListNoteOccurrencesRequest.filter)
}
#endif
inline void ListNoteOccurrencesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListNoteOccurrencesRequest.filter)
}
inline void ListNoteOccurrencesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListNoteOccurrencesRequest.filter)
}
inline ::std::string* ListNoteOccurrencesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListNoteOccurrencesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNoteOccurrencesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListNoteOccurrencesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNoteOccurrencesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListNoteOccurrencesRequest.filter)
}

// int32 page_size = 3;
inline void ListNoteOccurrencesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListNoteOccurrencesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNoteOccurrencesRequest.page_size)
  return page_size_;
}
inline void ListNoteOccurrencesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListNoteOccurrencesRequest.page_size)
}

// string page_token = 4;
inline void ListNoteOccurrencesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNoteOccurrencesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNoteOccurrencesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListNoteOccurrencesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListNoteOccurrencesRequest.page_token)
}
#if LANG_CXX11
inline void ListNoteOccurrencesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListNoteOccurrencesRequest.page_token)
}
#endif
inline void ListNoteOccurrencesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListNoteOccurrencesRequest.page_token)
}
inline void ListNoteOccurrencesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListNoteOccurrencesRequest.page_token)
}
inline ::std::string* ListNoteOccurrencesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListNoteOccurrencesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNoteOccurrencesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListNoteOccurrencesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNoteOccurrencesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListNoteOccurrencesRequest.page_token)
}

// -------------------------------------------------------------------

// ListNoteOccurrencesResponse

// repeated .grafeas.v1beta1.Occurrence occurrences = 1;
inline int ListNoteOccurrencesResponse::occurrences_size() const {
  return occurrences_.size();
}
inline void ListNoteOccurrencesResponse::clear_occurrences() {
  occurrences_.Clear();
}
inline ::grafeas::v1beta1::Occurrence* ListNoteOccurrencesResponse::mutable_occurrences(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListNoteOccurrencesResponse.occurrences)
  return occurrences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >*
ListNoteOccurrencesResponse::mutable_occurrences() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.ListNoteOccurrencesResponse.occurrences)
  return &occurrences_;
}
inline const ::grafeas::v1beta1::Occurrence& ListNoteOccurrencesResponse::occurrences(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNoteOccurrencesResponse.occurrences)
  return occurrences_.Get(index);
}
inline ::grafeas::v1beta1::Occurrence* ListNoteOccurrencesResponse::add_occurrences() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.ListNoteOccurrencesResponse.occurrences)
  return occurrences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >&
ListNoteOccurrencesResponse::occurrences() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.ListNoteOccurrencesResponse.occurrences)
  return occurrences_;
}

// string next_page_token = 2;
inline void ListNoteOccurrencesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNoteOccurrencesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.ListNoteOccurrencesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListNoteOccurrencesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.ListNoteOccurrencesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListNoteOccurrencesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.ListNoteOccurrencesResponse.next_page_token)
}
#endif
inline void ListNoteOccurrencesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.ListNoteOccurrencesResponse.next_page_token)
}
inline void ListNoteOccurrencesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.ListNoteOccurrencesResponse.next_page_token)
}
inline ::std::string* ListNoteOccurrencesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.ListNoteOccurrencesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNoteOccurrencesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.ListNoteOccurrencesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNoteOccurrencesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.ListNoteOccurrencesResponse.next_page_token)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BatchCreateNotesRequest

// string parent = 1;
inline void BatchCreateNotesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchCreateNotesRequest::parent() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.BatchCreateNotesRequest.parent)
  return parent_.GetNoArena();
}
inline void BatchCreateNotesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.BatchCreateNotesRequest.parent)
}
#if LANG_CXX11
inline void BatchCreateNotesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.BatchCreateNotesRequest.parent)
}
#endif
inline void BatchCreateNotesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.BatchCreateNotesRequest.parent)
}
inline void BatchCreateNotesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.BatchCreateNotesRequest.parent)
}
inline ::std::string* BatchCreateNotesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.BatchCreateNotesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchCreateNotesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.BatchCreateNotesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchCreateNotesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.BatchCreateNotesRequest.parent)
}

// map<string, .grafeas.v1beta1.Note> notes = 2;
inline int BatchCreateNotesRequest::notes_size() const {
  return notes_.size();
}
inline void BatchCreateNotesRequest::clear_notes() {
  notes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::grafeas::v1beta1::Note >&
BatchCreateNotesRequest::notes() const {
  // @@protoc_insertion_point(field_map:grafeas.v1beta1.BatchCreateNotesRequest.notes)
  return notes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::grafeas::v1beta1::Note >*
BatchCreateNotesRequest::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_map:grafeas.v1beta1.BatchCreateNotesRequest.notes)
  return notes_.MutableMap();
}

// -------------------------------------------------------------------

// BatchCreateNotesResponse

// repeated .grafeas.v1beta1.Note notes = 1;
inline int BatchCreateNotesResponse::notes_size() const {
  return notes_.size();
}
inline void BatchCreateNotesResponse::clear_notes() {
  notes_.Clear();
}
inline ::grafeas::v1beta1::Note* BatchCreateNotesResponse::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.BatchCreateNotesResponse.notes)
  return notes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Note >*
BatchCreateNotesResponse::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.BatchCreateNotesResponse.notes)
  return &notes_;
}
inline const ::grafeas::v1beta1::Note& BatchCreateNotesResponse::notes(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.BatchCreateNotesResponse.notes)
  return notes_.Get(index);
}
inline ::grafeas::v1beta1::Note* BatchCreateNotesResponse::add_notes() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.BatchCreateNotesResponse.notes)
  return notes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Note >&
BatchCreateNotesResponse::notes() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.BatchCreateNotesResponse.notes)
  return notes_;
}

// -------------------------------------------------------------------

// BatchCreateOccurrencesRequest

// string parent = 1;
inline void BatchCreateOccurrencesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchCreateOccurrencesRequest::parent() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.BatchCreateOccurrencesRequest.parent)
  return parent_.GetNoArena();
}
inline void BatchCreateOccurrencesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.BatchCreateOccurrencesRequest.parent)
}
#if LANG_CXX11
inline void BatchCreateOccurrencesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.BatchCreateOccurrencesRequest.parent)
}
#endif
inline void BatchCreateOccurrencesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.BatchCreateOccurrencesRequest.parent)
}
inline void BatchCreateOccurrencesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.BatchCreateOccurrencesRequest.parent)
}
inline ::std::string* BatchCreateOccurrencesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.BatchCreateOccurrencesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchCreateOccurrencesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.BatchCreateOccurrencesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchCreateOccurrencesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.BatchCreateOccurrencesRequest.parent)
}

// repeated .grafeas.v1beta1.Occurrence occurrences = 2;
inline int BatchCreateOccurrencesRequest::occurrences_size() const {
  return occurrences_.size();
}
inline void BatchCreateOccurrencesRequest::clear_occurrences() {
  occurrences_.Clear();
}
inline ::grafeas::v1beta1::Occurrence* BatchCreateOccurrencesRequest::mutable_occurrences(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.BatchCreateOccurrencesRequest.occurrences)
  return occurrences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >*
BatchCreateOccurrencesRequest::mutable_occurrences() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.BatchCreateOccurrencesRequest.occurrences)
  return &occurrences_;
}
inline const ::grafeas::v1beta1::Occurrence& BatchCreateOccurrencesRequest::occurrences(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.BatchCreateOccurrencesRequest.occurrences)
  return occurrences_.Get(index);
}
inline ::grafeas::v1beta1::Occurrence* BatchCreateOccurrencesRequest::add_occurrences() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.BatchCreateOccurrencesRequest.occurrences)
  return occurrences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >&
BatchCreateOccurrencesRequest::occurrences() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.BatchCreateOccurrencesRequest.occurrences)
  return occurrences_;
}

// -------------------------------------------------------------------

// BatchCreateOccurrencesResponse

// repeated .grafeas.v1beta1.Occurrence occurrences = 1;
inline int BatchCreateOccurrencesResponse::occurrences_size() const {
  return occurrences_.size();
}
inline void BatchCreateOccurrencesResponse::clear_occurrences() {
  occurrences_.Clear();
}
inline ::grafeas::v1beta1::Occurrence* BatchCreateOccurrencesResponse::mutable_occurrences(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.BatchCreateOccurrencesResponse.occurrences)
  return occurrences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >*
BatchCreateOccurrencesResponse::mutable_occurrences() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.BatchCreateOccurrencesResponse.occurrences)
  return &occurrences_;
}
inline const ::grafeas::v1beta1::Occurrence& BatchCreateOccurrencesResponse::occurrences(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.BatchCreateOccurrencesResponse.occurrences)
  return occurrences_.Get(index);
}
inline ::grafeas::v1beta1::Occurrence* BatchCreateOccurrencesResponse::add_occurrences() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.BatchCreateOccurrencesResponse.occurrences)
  return occurrences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::Occurrence >&
BatchCreateOccurrencesResponse::occurrences() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.BatchCreateOccurrencesResponse.occurrences)
  return occurrences_;
}

// -------------------------------------------------------------------

// GetVulnerabilityOccurrencesSummaryRequest

// string parent = 1;
inline void GetVulnerabilityOccurrencesSummaryRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVulnerabilityOccurrencesSummaryRequest::parent() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.parent)
  return parent_.GetNoArena();
}
inline void GetVulnerabilityOccurrencesSummaryRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.parent)
}
#if LANG_CXX11
inline void GetVulnerabilityOccurrencesSummaryRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.parent)
}
#endif
inline void GetVulnerabilityOccurrencesSummaryRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.parent)
}
inline void GetVulnerabilityOccurrencesSummaryRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.parent)
}
inline ::std::string* GetVulnerabilityOccurrencesSummaryRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVulnerabilityOccurrencesSummaryRequest::release_parent() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVulnerabilityOccurrencesSummaryRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.parent)
}

// string filter = 2;
inline void GetVulnerabilityOccurrencesSummaryRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVulnerabilityOccurrencesSummaryRequest::filter() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.filter)
  return filter_.GetNoArena();
}
inline void GetVulnerabilityOccurrencesSummaryRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.filter)
}
#if LANG_CXX11
inline void GetVulnerabilityOccurrencesSummaryRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.filter)
}
#endif
inline void GetVulnerabilityOccurrencesSummaryRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.filter)
}
inline void GetVulnerabilityOccurrencesSummaryRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.filter)
}
inline ::std::string* GetVulnerabilityOccurrencesSummaryRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVulnerabilityOccurrencesSummaryRequest::release_filter() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVulnerabilityOccurrencesSummaryRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.filter)
}

// -------------------------------------------------------------------

// VulnerabilityOccurrencesSummary_FixableTotalByDigest

// .grafeas.v1beta1.Resource resource = 1;
inline bool VulnerabilityOccurrencesSummary_FixableTotalByDigest::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void VulnerabilityOccurrencesSummary_FixableTotalByDigest::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::grafeas::v1beta1::Resource& VulnerabilityOccurrencesSummary_FixableTotalByDigest::_internal_resource() const {
  return *resource_;
}
inline const ::grafeas::v1beta1::Resource& VulnerabilityOccurrencesSummary_FixableTotalByDigest::resource() const {
  const ::grafeas::v1beta1::Resource* p = resource_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::Resource*>(
      &::grafeas::v1beta1::_Resource_default_instance_);
}
inline ::grafeas::v1beta1::Resource* VulnerabilityOccurrencesSummary_FixableTotalByDigest::release_resource() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.resource)
  
  ::grafeas::v1beta1::Resource* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::Resource* VulnerabilityOccurrencesSummary_FixableTotalByDigest::mutable_resource() {
  
  if (resource_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::Resource>(GetArenaNoVirtual());
    resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.resource)
  return resource_;
}
inline void VulnerabilityOccurrencesSummary_FixableTotalByDigest::set_allocated_resource(::grafeas::v1beta1::Resource* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.resource)
}

// .grafeas.v1beta1.vulnerability.Severity severity = 2;
inline void VulnerabilityOccurrencesSummary_FixableTotalByDigest::clear_severity() {
  severity_ = 0;
}
inline ::grafeas::v1beta1::vulnerability::Severity VulnerabilityOccurrencesSummary_FixableTotalByDigest::severity() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.severity)
  return static_cast< ::grafeas::v1beta1::vulnerability::Severity >(severity_);
}
inline void VulnerabilityOccurrencesSummary_FixableTotalByDigest::set_severity(::grafeas::v1beta1::vulnerability::Severity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.severity)
}

// int64 fixable_count = 3;
inline void VulnerabilityOccurrencesSummary_FixableTotalByDigest::clear_fixable_count() {
  fixable_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VulnerabilityOccurrencesSummary_FixableTotalByDigest::fixable_count() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.fixable_count)
  return fixable_count_;
}
inline void VulnerabilityOccurrencesSummary_FixableTotalByDigest::set_fixable_count(::google::protobuf::int64 value) {
  
  fixable_count_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.fixable_count)
}

// int64 total_count = 4;
inline void VulnerabilityOccurrencesSummary_FixableTotalByDigest::clear_total_count() {
  total_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VulnerabilityOccurrencesSummary_FixableTotalByDigest::total_count() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.total_count)
  return total_count_;
}
inline void VulnerabilityOccurrencesSummary_FixableTotalByDigest::set_total_count(::google::protobuf::int64 value) {
  
  total_count_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.total_count)
}

// -------------------------------------------------------------------

// VulnerabilityOccurrencesSummary

// repeated .grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest counts = 1;
inline int VulnerabilityOccurrencesSummary::counts_size() const {
  return counts_.size();
}
inline void VulnerabilityOccurrencesSummary::clear_counts() {
  counts_.Clear();
}
inline ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest* VulnerabilityOccurrencesSummary::mutable_counts(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.VulnerabilityOccurrencesSummary.counts)
  return counts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest >*
VulnerabilityOccurrencesSummary::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.VulnerabilityOccurrencesSummary.counts)
  return &counts_;
}
inline const ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest& VulnerabilityOccurrencesSummary::counts(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.VulnerabilityOccurrencesSummary.counts)
  return counts_.Get(index);
}
inline ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest* VulnerabilityOccurrencesSummary::add_counts() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.VulnerabilityOccurrencesSummary.counts)
  return counts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary_FixableTotalByDigest >&
VulnerabilityOccurrencesSummary::counts() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.VulnerabilityOccurrencesSummary.counts)
  return counts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace grafeas

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto
