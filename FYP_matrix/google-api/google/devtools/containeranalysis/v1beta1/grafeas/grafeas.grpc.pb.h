// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/devtools/containeranalysis/v1beta1/grafeas/grafeas.proto
// Original file comments:
// Copyright 2018 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto__INCLUDED
#define GRPC_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto__INCLUDED

#include "google/devtools/containeranalysis/v1beta1/grafeas/grafeas.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grafeas {
namespace v1beta1 {

// [Grafeas](grafeas.io) API.
//
// Retrieves analysis results of Cloud components such as Docker container
// images.
//
// Analysis results are stored as a series of occurrences. An `Occurrence`
// contains information about a specific analysis instance on a resource. An
// occurrence refers to a `Note`. A note contains details describing the
// analysis and is generally stored in a separate project, called a `Provider`.
// Multiple occurrences can refer to the same note.
//
// For example, an SSL vulnerability could affect multiple images. In this case,
// there would be one note for the vulnerability and an occurrence for each
// image with the vulnerability referring to that note.
class GrafeasV1Beta1 final {
 public:
  static constexpr char const* service_full_name() {
    return "grafeas.v1beta1.GrafeasV1Beta1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Gets the specified occurrence.
    virtual ::grpc::Status GetOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest& request, ::grafeas::v1beta1::Occurrence* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>> AsyncGetOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>>(AsyncGetOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>> PrepareAsyncGetOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>>(PrepareAsyncGetOccurrenceRaw(context, request, cq));
    }
    // Lists occurrences for the specified project.
    virtual ::grpc::Status ListOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest& request, ::grafeas::v1beta1::ListOccurrencesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListOccurrencesResponse>> AsyncListOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListOccurrencesResponse>>(AsyncListOccurrencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListOccurrencesResponse>> PrepareAsyncListOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListOccurrencesResponse>>(PrepareAsyncListOccurrencesRaw(context, request, cq));
    }
    // Deletes the specified occurrence. For example, use this method to delete an
    // occurrence when the occurrence is no longer applicable for the given
    // resource.
    virtual ::grpc::Status DeleteOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteOccurrenceRaw(context, request, cq));
    }
    // Creates a new occurrence.
    virtual ::grpc::Status CreateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest& request, ::grafeas::v1beta1::Occurrence* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>> AsyncCreateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>>(AsyncCreateOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>> PrepareAsyncCreateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>>(PrepareAsyncCreateOccurrenceRaw(context, request, cq));
    }
    // Creates new occurrences in batch.
    virtual ::grpc::Status BatchCreateOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest& request, ::grafeas::v1beta1::BatchCreateOccurrencesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>> AsyncBatchCreateOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>>(AsyncBatchCreateOccurrencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>> PrepareAsyncBatchCreateOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>>(PrepareAsyncBatchCreateOccurrencesRaw(context, request, cq));
    }
    // Updates the specified occurrence.
    virtual ::grpc::Status UpdateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest& request, ::grafeas::v1beta1::Occurrence* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>> AsyncUpdateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>>(AsyncUpdateOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>> PrepareAsyncUpdateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>>(PrepareAsyncUpdateOccurrenceRaw(context, request, cq));
    }
    // Gets the note attached to the specified occurrence. Consumer projects can
    // use this method to get a note that belongs to a provider project.
    virtual ::grpc::Status GetOccurrenceNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest& request, ::grafeas::v1beta1::Note* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>> AsyncGetOccurrenceNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>>(AsyncGetOccurrenceNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>> PrepareAsyncGetOccurrenceNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>>(PrepareAsyncGetOccurrenceNoteRaw(context, request, cq));
    }
    // Gets the specified note.
    virtual ::grpc::Status GetNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetNoteRequest& request, ::grafeas::v1beta1::Note* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>> AsyncGetNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>>(AsyncGetNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>> PrepareAsyncGetNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>>(PrepareAsyncGetNoteRaw(context, request, cq));
    }
    // Lists notes for the specified project.
    virtual ::grpc::Status ListNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNotesRequest& request, ::grafeas::v1beta1::ListNotesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNotesResponse>> AsyncListNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNotesResponse>>(AsyncListNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNotesResponse>> PrepareAsyncListNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNotesResponse>>(PrepareAsyncListNotesRaw(context, request, cq));
    }
    // Deletes the specified note.
    virtual ::grpc::Status DeleteNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteNoteRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteNoteRaw(context, request, cq));
    }
    // Creates a new note.
    virtual ::grpc::Status CreateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateNoteRequest& request, ::grafeas::v1beta1::Note* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>> AsyncCreateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>>(AsyncCreateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>> PrepareAsyncCreateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>>(PrepareAsyncCreateNoteRaw(context, request, cq));
    }
    // Creates new notes in batch.
    virtual ::grpc::Status BatchCreateNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest& request, ::grafeas::v1beta1::BatchCreateNotesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateNotesResponse>> AsyncBatchCreateNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateNotesResponse>>(AsyncBatchCreateNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateNotesResponse>> PrepareAsyncBatchCreateNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateNotesResponse>>(PrepareAsyncBatchCreateNotesRaw(context, request, cq));
    }
    // Updates the specified note.
    virtual ::grpc::Status UpdateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateNoteRequest& request, ::grafeas::v1beta1::Note* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>> AsyncUpdateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>>(AsyncUpdateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>> PrepareAsyncUpdateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>>(PrepareAsyncUpdateNoteRaw(context, request, cq));
    }
    // Lists occurrences referencing the specified note. Provider projects can use
    // this method to get all occurrences across consumer projects referencing the
    // specified note.
    virtual ::grpc::Status ListNoteOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest& request, ::grafeas::v1beta1::ListNoteOccurrencesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNoteOccurrencesResponse>> AsyncListNoteOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNoteOccurrencesResponse>>(AsyncListNoteOccurrencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNoteOccurrencesResponse>> PrepareAsyncListNoteOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNoteOccurrencesResponse>>(PrepareAsyncListNoteOccurrencesRaw(context, request, cq));
    }
    // Gets a summary of the number and severity of occurrences.
    virtual ::grpc::Status GetVulnerabilityOccurrencesSummary(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest& request, ::grafeas::v1beta1::VulnerabilityOccurrencesSummary* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>> AsyncGetVulnerabilityOccurrencesSummary(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>>(AsyncGetVulnerabilityOccurrencesSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>> PrepareAsyncGetVulnerabilityOccurrencesSummary(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>>(PrepareAsyncGetVulnerabilityOccurrencesSummaryRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>* AsyncGetOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>* PrepareAsyncGetOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListOccurrencesResponse>* AsyncListOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListOccurrencesResponse>* PrepareAsyncListOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>* AsyncCreateOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>* PrepareAsyncCreateOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>* AsyncBatchCreateOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>* PrepareAsyncBatchCreateOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>* AsyncUpdateOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Occurrence>* PrepareAsyncUpdateOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>* AsyncGetOccurrenceNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>* PrepareAsyncGetOccurrenceNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>* AsyncGetNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>* PrepareAsyncGetNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNotesResponse>* AsyncListNotesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNotesResponse>* PrepareAsyncListNotesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>* AsyncCreateNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>* PrepareAsyncCreateNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateNotesResponse>* AsyncBatchCreateNotesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::BatchCreateNotesResponse>* PrepareAsyncBatchCreateNotesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>* AsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::Note>* PrepareAsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNoteOccurrencesResponse>* AsyncListNoteOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::ListNoteOccurrencesResponse>* PrepareAsyncListNoteOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>* AsyncGetVulnerabilityOccurrencesSummaryRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>* PrepareAsyncGetVulnerabilityOccurrencesSummaryRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest& request, ::grafeas::v1beta1::Occurrence* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>> AsyncGetOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>>(AsyncGetOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>> PrepareAsyncGetOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>>(PrepareAsyncGetOccurrenceRaw(context, request, cq));
    }
    ::grpc::Status ListOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest& request, ::grafeas::v1beta1::ListOccurrencesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListOccurrencesResponse>> AsyncListOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListOccurrencesResponse>>(AsyncListOccurrencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListOccurrencesResponse>> PrepareAsyncListOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListOccurrencesResponse>>(PrepareAsyncListOccurrencesRaw(context, request, cq));
    }
    ::grpc::Status DeleteOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteOccurrenceRaw(context, request, cq));
    }
    ::grpc::Status CreateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest& request, ::grafeas::v1beta1::Occurrence* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>> AsyncCreateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>>(AsyncCreateOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>> PrepareAsyncCreateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>>(PrepareAsyncCreateOccurrenceRaw(context, request, cq));
    }
    ::grpc::Status BatchCreateOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest& request, ::grafeas::v1beta1::BatchCreateOccurrencesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>> AsyncBatchCreateOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>>(AsyncBatchCreateOccurrencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>> PrepareAsyncBatchCreateOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>>(PrepareAsyncBatchCreateOccurrencesRaw(context, request, cq));
    }
    ::grpc::Status UpdateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest& request, ::grafeas::v1beta1::Occurrence* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>> AsyncUpdateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>>(AsyncUpdateOccurrenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>> PrepareAsyncUpdateOccurrence(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>>(PrepareAsyncUpdateOccurrenceRaw(context, request, cq));
    }
    ::grpc::Status GetOccurrenceNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest& request, ::grafeas::v1beta1::Note* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>> AsyncGetOccurrenceNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>>(AsyncGetOccurrenceNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>> PrepareAsyncGetOccurrenceNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>>(PrepareAsyncGetOccurrenceNoteRaw(context, request, cq));
    }
    ::grpc::Status GetNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetNoteRequest& request, ::grafeas::v1beta1::Note* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>> AsyncGetNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>>(AsyncGetNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>> PrepareAsyncGetNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>>(PrepareAsyncGetNoteRaw(context, request, cq));
    }
    ::grpc::Status ListNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNotesRequest& request, ::grafeas::v1beta1::ListNotesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNotesResponse>> AsyncListNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNotesResponse>>(AsyncListNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNotesResponse>> PrepareAsyncListNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNotesResponse>>(PrepareAsyncListNotesRaw(context, request, cq));
    }
    ::grpc::Status DeleteNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteNoteRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteNoteRaw(context, request, cq));
    }
    ::grpc::Status CreateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateNoteRequest& request, ::grafeas::v1beta1::Note* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>> AsyncCreateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>>(AsyncCreateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>> PrepareAsyncCreateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>>(PrepareAsyncCreateNoteRaw(context, request, cq));
    }
    ::grpc::Status BatchCreateNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest& request, ::grafeas::v1beta1::BatchCreateNotesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateNotesResponse>> AsyncBatchCreateNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateNotesResponse>>(AsyncBatchCreateNotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateNotesResponse>> PrepareAsyncBatchCreateNotes(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateNotesResponse>>(PrepareAsyncBatchCreateNotesRaw(context, request, cq));
    }
    ::grpc::Status UpdateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateNoteRequest& request, ::grafeas::v1beta1::Note* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>> AsyncUpdateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>>(AsyncUpdateNoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>> PrepareAsyncUpdateNote(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>>(PrepareAsyncUpdateNoteRaw(context, request, cq));
    }
    ::grpc::Status ListNoteOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest& request, ::grafeas::v1beta1::ListNoteOccurrencesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNoteOccurrencesResponse>> AsyncListNoteOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNoteOccurrencesResponse>>(AsyncListNoteOccurrencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNoteOccurrencesResponse>> PrepareAsyncListNoteOccurrences(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNoteOccurrencesResponse>>(PrepareAsyncListNoteOccurrencesRaw(context, request, cq));
    }
    ::grpc::Status GetVulnerabilityOccurrencesSummary(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest& request, ::grafeas::v1beta1::VulnerabilityOccurrencesSummary* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>> AsyncGetVulnerabilityOccurrencesSummary(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>>(AsyncGetVulnerabilityOccurrencesSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>> PrepareAsyncGetVulnerabilityOccurrencesSummary(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>>(PrepareAsyncGetVulnerabilityOccurrencesSummaryRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>* AsyncGetOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>* PrepareAsyncGetOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListOccurrencesResponse>* AsyncListOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListOccurrencesResponse>* PrepareAsyncListOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>* AsyncCreateOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>* PrepareAsyncCreateOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>* AsyncBatchCreateOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>* PrepareAsyncBatchCreateOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>* AsyncUpdateOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Occurrence>* PrepareAsyncUpdateOccurrenceRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>* AsyncGetOccurrenceNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>* PrepareAsyncGetOccurrenceNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>* AsyncGetNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>* PrepareAsyncGetNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNotesResponse>* AsyncListNotesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNotesResponse>* PrepareAsyncListNotesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::DeleteNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>* AsyncCreateNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>* PrepareAsyncCreateNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::CreateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateNotesResponse>* AsyncBatchCreateNotesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::BatchCreateNotesResponse>* PrepareAsyncBatchCreateNotesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>* AsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::Note>* PrepareAsyncUpdateNoteRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::UpdateNoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNoteOccurrencesResponse>* AsyncListNoteOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::ListNoteOccurrencesResponse>* PrepareAsyncListNoteOccurrencesRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>* AsyncGetVulnerabilityOccurrencesSummaryRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>* PrepareAsyncGetVulnerabilityOccurrencesSummaryRaw(::grpc::ClientContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetOccurrence_;
    const ::grpc::internal::RpcMethod rpcmethod_ListOccurrences_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOccurrence_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOccurrence_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchCreateOccurrences_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOccurrence_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOccurrenceNote_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNote_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNotes_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNote_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNote_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchCreateNotes_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNote_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNoteOccurrences_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVulnerabilityOccurrencesSummary_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Gets the specified occurrence.
    virtual ::grpc::Status GetOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response);
    // Lists occurrences for the specified project.
    virtual ::grpc::Status ListOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest* request, ::grafeas::v1beta1::ListOccurrencesResponse* response);
    // Deletes the specified occurrence. For example, use this method to delete an
    // occurrence when the occurrence is no longer applicable for the given
    // resource.
    virtual ::grpc::Status DeleteOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest* request, ::google::protobuf::Empty* response);
    // Creates a new occurrence.
    virtual ::grpc::Status CreateOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response);
    // Creates new occurrences in batch.
    virtual ::grpc::Status BatchCreateOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest* request, ::grafeas::v1beta1::BatchCreateOccurrencesResponse* response);
    // Updates the specified occurrence.
    virtual ::grpc::Status UpdateOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response);
    // Gets the note attached to the specified occurrence. Consumer projects can
    // use this method to get a note that belongs to a provider project.
    virtual ::grpc::Status GetOccurrenceNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest* request, ::grafeas::v1beta1::Note* response);
    // Gets the specified note.
    virtual ::grpc::Status GetNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetNoteRequest* request, ::grafeas::v1beta1::Note* response);
    // Lists notes for the specified project.
    virtual ::grpc::Status ListNotes(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListNotesRequest* request, ::grafeas::v1beta1::ListNotesResponse* response);
    // Deletes the specified note.
    virtual ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::DeleteNoteRequest* request, ::google::protobuf::Empty* response);
    // Creates a new note.
    virtual ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::CreateNoteRequest* request, ::grafeas::v1beta1::Note* response);
    // Creates new notes in batch.
    virtual ::grpc::Status BatchCreateNotes(::grpc::ServerContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest* request, ::grafeas::v1beta1::BatchCreateNotesResponse* response);
    // Updates the specified note.
    virtual ::grpc::Status UpdateNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::UpdateNoteRequest* request, ::grafeas::v1beta1::Note* response);
    // Lists occurrences referencing the specified note. Provider projects can use
    // this method to get all occurrences across consumer projects referencing the
    // specified note.
    virtual ::grpc::Status ListNoteOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest* request, ::grafeas::v1beta1::ListNoteOccurrencesResponse* response);
    // Gets a summary of the number and severity of occurrences.
    virtual ::grpc::Status GetVulnerabilityOccurrencesSummary(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest* request, ::grafeas::v1beta1::VulnerabilityOccurrencesSummary* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOccurrence() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOccurrence(::grpc::ServerContext* context, ::grafeas::v1beta1::GetOccurrenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::Occurrence>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListOccurrences() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest* request, ::grafeas::v1beta1::ListOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOccurrences(::grpc::ServerContext* context, ::grafeas::v1beta1::ListOccurrencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::ListOccurrencesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteOccurrence() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOccurrence(::grpc::ServerContext* context, ::grafeas::v1beta1::DeleteOccurrenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateOccurrence() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOccurrence(::grpc::ServerContext* context, ::grafeas::v1beta1::CreateOccurrenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::Occurrence>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchCreateOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BatchCreateOccurrences() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_BatchCreateOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchCreateOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest* request, ::grafeas::v1beta1::BatchCreateOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchCreateOccurrences(::grpc::ServerContext* context, ::grafeas::v1beta1::BatchCreateOccurrencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::BatchCreateOccurrencesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateOccurrence() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOccurrence(::grpc::ServerContext* context, ::grafeas::v1beta1::UpdateOccurrenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::Occurrence>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOccurrenceNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOccurrenceNote() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetOccurrenceNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrenceNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOccurrenceNote(::grpc::ServerContext* context, ::grafeas::v1beta1::GetOccurrenceNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::Note>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNote() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNote(::grpc::ServerContext* context, ::grafeas::v1beta1::GetNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::Note>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListNotes() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListNotesRequest* request, ::grafeas::v1beta1::ListNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotes(::grpc::ServerContext* context, ::grafeas::v1beta1::ListNotesRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::ListNotesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteNote() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::DeleteNoteRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNote(::grpc::ServerContext* context, ::grafeas::v1beta1::DeleteNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateNote() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::CreateNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNote(::grpc::ServerContext* context, ::grafeas::v1beta1::CreateNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::Note>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchCreateNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BatchCreateNotes() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_BatchCreateNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchCreateNotes(::grpc::ServerContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest* request, ::grafeas::v1beta1::BatchCreateNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchCreateNotes(::grpc::ServerContext* context, ::grafeas::v1beta1::BatchCreateNotesRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::BatchCreateNotesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateNote() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::UpdateNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNote(::grpc::ServerContext* context, ::grafeas::v1beta1::UpdateNoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::Note>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNoteOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListNoteOccurrences() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ListNoteOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNoteOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest* request, ::grafeas::v1beta1::ListNoteOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNoteOccurrences(::grpc::ServerContext* context, ::grafeas::v1beta1::ListNoteOccurrencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::ListNoteOccurrencesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVulnerabilityOccurrencesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetVulnerabilityOccurrencesSummary() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetVulnerabilityOccurrencesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVulnerabilityOccurrencesSummary(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest* request, ::grafeas::v1beta1::VulnerabilityOccurrencesSummary* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVulnerabilityOccurrencesSummary(::grpc::ServerContext* context, ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest* request, ::grpc::ServerAsyncResponseWriter< ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetOccurrence<WithAsyncMethod_ListOccurrences<WithAsyncMethod_DeleteOccurrence<WithAsyncMethod_CreateOccurrence<WithAsyncMethod_BatchCreateOccurrences<WithAsyncMethod_UpdateOccurrence<WithAsyncMethod_GetOccurrenceNote<WithAsyncMethod_GetNote<WithAsyncMethod_ListNotes<WithAsyncMethod_DeleteNote<WithAsyncMethod_CreateNote<WithAsyncMethod_BatchCreateNotes<WithAsyncMethod_UpdateNote<WithAsyncMethod_ListNoteOccurrences<WithAsyncMethod_GetVulnerabilityOccurrencesSummary<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOccurrence() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListOccurrences() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest* request, ::grafeas::v1beta1::ListOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteOccurrence() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateOccurrence() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchCreateOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BatchCreateOccurrences() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_BatchCreateOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchCreateOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest* request, ::grafeas::v1beta1::BatchCreateOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateOccurrence() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOccurrenceNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOccurrenceNote() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetOccurrenceNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrenceNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNote() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListNotes() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListNotesRequest* request, ::grafeas::v1beta1::ListNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteNote() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::DeleteNoteRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateNote() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::CreateNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchCreateNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BatchCreateNotes() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_BatchCreateNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchCreateNotes(::grpc::ServerContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest* request, ::grafeas::v1beta1::BatchCreateNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateNote() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::UpdateNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNoteOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListNoteOccurrences() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ListNoteOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNoteOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest* request, ::grafeas::v1beta1::ListNoteOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVulnerabilityOccurrencesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetVulnerabilityOccurrencesSummary() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetVulnerabilityOccurrencesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVulnerabilityOccurrencesSummary(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest* request, ::grafeas::v1beta1::VulnerabilityOccurrencesSummary* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOccurrence() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOccurrence(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListOccurrences() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest* request, ::grafeas::v1beta1::ListOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOccurrences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteOccurrence() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOccurrence(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateOccurrence() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOccurrence(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchCreateOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BatchCreateOccurrences() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_BatchCreateOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchCreateOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest* request, ::grafeas::v1beta1::BatchCreateOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchCreateOccurrences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateOccurrence() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOccurrence(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOccurrenceNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOccurrenceNote() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetOccurrenceNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOccurrenceNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOccurrenceNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetNote() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListNotes() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListNotesRequest* request, ::grafeas::v1beta1::ListNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNotes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteNote() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::DeleteNoteRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateNote() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::CreateNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchCreateNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BatchCreateNotes() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_BatchCreateNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchCreateNotes(::grpc::ServerContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest* request, ::grafeas::v1beta1::BatchCreateNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchCreateNotes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateNote() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::UpdateNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNoteOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListNoteOccurrences() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ListNoteOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNoteOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest* request, ::grafeas::v1beta1::ListNoteOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNoteOccurrences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVulnerabilityOccurrencesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetVulnerabilityOccurrencesSummary() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetVulnerabilityOccurrencesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVulnerabilityOccurrencesSummary(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest* request, ::grafeas::v1beta1::VulnerabilityOccurrencesSummary* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVulnerabilityOccurrencesSummary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOccurrence() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::GetOccurrenceRequest, ::grafeas::v1beta1::Occurrence>(std::bind(&WithStreamedUnaryMethod_GetOccurrence<BaseClass>::StreamedGetOccurrence, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOccurrence(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::GetOccurrenceRequest,::grafeas::v1beta1::Occurrence>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListOccurrences() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::ListOccurrencesRequest, ::grafeas::v1beta1::ListOccurrencesResponse>(std::bind(&WithStreamedUnaryMethod_ListOccurrences<BaseClass>::StreamedListOccurrences, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListOccurrencesRequest* request, ::grafeas::v1beta1::ListOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOccurrences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::ListOccurrencesRequest,::grafeas::v1beta1::ListOccurrencesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteOccurrence() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::DeleteOccurrenceRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteOccurrence<BaseClass>::StreamedDeleteOccurrence, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::DeleteOccurrenceRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOccurrence(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::DeleteOccurrenceRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateOccurrence() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::CreateOccurrenceRequest, ::grafeas::v1beta1::Occurrence>(std::bind(&WithStreamedUnaryMethod_CreateOccurrence<BaseClass>::StreamedCreateOccurrence, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::CreateOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOccurrence(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::CreateOccurrenceRequest,::grafeas::v1beta1::Occurrence>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchCreateOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BatchCreateOccurrences() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::BatchCreateOccurrencesRequest, ::grafeas::v1beta1::BatchCreateOccurrencesResponse>(std::bind(&WithStreamedUnaryMethod_BatchCreateOccurrences<BaseClass>::StreamedBatchCreateOccurrences, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BatchCreateOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchCreateOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::BatchCreateOccurrencesRequest* request, ::grafeas::v1beta1::BatchCreateOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchCreateOccurrences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::BatchCreateOccurrencesRequest,::grafeas::v1beta1::BatchCreateOccurrencesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOccurrence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateOccurrence() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::UpdateOccurrenceRequest, ::grafeas::v1beta1::Occurrence>(std::bind(&WithStreamedUnaryMethod_UpdateOccurrence<BaseClass>::StreamedUpdateOccurrence, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateOccurrence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOccurrence(::grpc::ServerContext* context, const ::grafeas::v1beta1::UpdateOccurrenceRequest* request, ::grafeas::v1beta1::Occurrence* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOccurrence(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::UpdateOccurrenceRequest,::grafeas::v1beta1::Occurrence>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOccurrenceNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOccurrenceNote() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::GetOccurrenceNoteRequest, ::grafeas::v1beta1::Note>(std::bind(&WithStreamedUnaryMethod_GetOccurrenceNote<BaseClass>::StreamedGetOccurrenceNote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOccurrenceNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOccurrenceNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetOccurrenceNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOccurrenceNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::GetOccurrenceNoteRequest,::grafeas::v1beta1::Note>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNote() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::GetNoteRequest, ::grafeas::v1beta1::Note>(std::bind(&WithStreamedUnaryMethod_GetNote<BaseClass>::StreamedGetNote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::GetNoteRequest,::grafeas::v1beta1::Note>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListNotes() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::ListNotesRequest, ::grafeas::v1beta1::ListNotesResponse>(std::bind(&WithStreamedUnaryMethod_ListNotes<BaseClass>::StreamedListNotes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNotes(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListNotesRequest* request, ::grafeas::v1beta1::ListNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNotes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::ListNotesRequest,::grafeas::v1beta1::ListNotesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteNote() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::DeleteNoteRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteNote<BaseClass>::StreamedDeleteNote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::DeleteNoteRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::DeleteNoteRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateNote() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::CreateNoteRequest, ::grafeas::v1beta1::Note>(std::bind(&WithStreamedUnaryMethod_CreateNote<BaseClass>::StreamedCreateNote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::CreateNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::CreateNoteRequest,::grafeas::v1beta1::Note>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchCreateNotes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BatchCreateNotes() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::BatchCreateNotesRequest, ::grafeas::v1beta1::BatchCreateNotesResponse>(std::bind(&WithStreamedUnaryMethod_BatchCreateNotes<BaseClass>::StreamedBatchCreateNotes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BatchCreateNotes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchCreateNotes(::grpc::ServerContext* context, const ::grafeas::v1beta1::BatchCreateNotesRequest* request, ::grafeas::v1beta1::BatchCreateNotesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchCreateNotes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::BatchCreateNotesRequest,::grafeas::v1beta1::BatchCreateNotesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateNote() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::UpdateNoteRequest, ::grafeas::v1beta1::Note>(std::bind(&WithStreamedUnaryMethod_UpdateNote<BaseClass>::StreamedUpdateNote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateNote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNote(::grpc::ServerContext* context, const ::grafeas::v1beta1::UpdateNoteRequest* request, ::grafeas::v1beta1::Note* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::UpdateNoteRequest,::grafeas::v1beta1::Note>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNoteOccurrences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListNoteOccurrences() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::ListNoteOccurrencesRequest, ::grafeas::v1beta1::ListNoteOccurrencesResponse>(std::bind(&WithStreamedUnaryMethod_ListNoteOccurrences<BaseClass>::StreamedListNoteOccurrences, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListNoteOccurrences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNoteOccurrences(::grpc::ServerContext* context, const ::grafeas::v1beta1::ListNoteOccurrencesRequest* request, ::grafeas::v1beta1::ListNoteOccurrencesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNoteOccurrences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::ListNoteOccurrencesRequest,::grafeas::v1beta1::ListNoteOccurrencesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVulnerabilityOccurrencesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetVulnerabilityOccurrencesSummary() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest, ::grafeas::v1beta1::VulnerabilityOccurrencesSummary>(std::bind(&WithStreamedUnaryMethod_GetVulnerabilityOccurrencesSummary<BaseClass>::StreamedGetVulnerabilityOccurrencesSummary, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetVulnerabilityOccurrencesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVulnerabilityOccurrencesSummary(::grpc::ServerContext* context, const ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest* request, ::grafeas::v1beta1::VulnerabilityOccurrencesSummary* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVulnerabilityOccurrencesSummary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grafeas::v1beta1::GetVulnerabilityOccurrencesSummaryRequest,::grafeas::v1beta1::VulnerabilityOccurrencesSummary>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetOccurrence<WithStreamedUnaryMethod_ListOccurrences<WithStreamedUnaryMethod_DeleteOccurrence<WithStreamedUnaryMethod_CreateOccurrence<WithStreamedUnaryMethod_BatchCreateOccurrences<WithStreamedUnaryMethod_UpdateOccurrence<WithStreamedUnaryMethod_GetOccurrenceNote<WithStreamedUnaryMethod_GetNote<WithStreamedUnaryMethod_ListNotes<WithStreamedUnaryMethod_DeleteNote<WithStreamedUnaryMethod_CreateNote<WithStreamedUnaryMethod_BatchCreateNotes<WithStreamedUnaryMethod_UpdateNote<WithStreamedUnaryMethod_ListNoteOccurrences<WithStreamedUnaryMethod_GetVulnerabilityOccurrencesSummary<Service > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetOccurrence<WithStreamedUnaryMethod_ListOccurrences<WithStreamedUnaryMethod_DeleteOccurrence<WithStreamedUnaryMethod_CreateOccurrence<WithStreamedUnaryMethod_BatchCreateOccurrences<WithStreamedUnaryMethod_UpdateOccurrence<WithStreamedUnaryMethod_GetOccurrenceNote<WithStreamedUnaryMethod_GetNote<WithStreamedUnaryMethod_ListNotes<WithStreamedUnaryMethod_DeleteNote<WithStreamedUnaryMethod_CreateNote<WithStreamedUnaryMethod_BatchCreateNotes<WithStreamedUnaryMethod_UpdateNote<WithStreamedUnaryMethod_ListNoteOccurrences<WithStreamedUnaryMethod_GetVulnerabilityOccurrencesSummary<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace grafeas


#endif  // GRPC_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fgrafeas_2fgrafeas_2eproto__INCLUDED
