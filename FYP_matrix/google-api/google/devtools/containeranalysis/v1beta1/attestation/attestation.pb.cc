// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1beta1/attestation/attestation.proto

#include "google/devtools/containeranalysis/v1beta1/attestation/attestation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Authority_Hint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PgpSignedAttestation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Attestation;
}  // namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto
namespace grafeas {
namespace v1beta1 {
namespace attestation {
class PgpSignedAttestationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PgpSignedAttestation>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr pgp_key_id_;
} _PgpSignedAttestation_default_instance_;
class Authority_HintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authority_Hint>
      _instance;
} _Authority_Hint_default_instance_;
class AuthorityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authority>
      _instance;
} _Authority_default_instance_;
class DetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Details>
      _instance;
} _Details_default_instance_;
class AttestationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Attestation>
      _instance;
  const ::grafeas::v1beta1::attestation::PgpSignedAttestation* pgp_signed_attestation_;
} _Attestation_default_instance_;
}  // namespace attestation
}  // namespace v1beta1
}  // namespace grafeas
namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto {
static void InitDefaultsPgpSignedAttestation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grafeas::v1beta1::attestation::_PgpSignedAttestation_default_instance_;
    new (ptr) ::grafeas::v1beta1::attestation::PgpSignedAttestation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grafeas::v1beta1::attestation::PgpSignedAttestation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PgpSignedAttestation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPgpSignedAttestation}, {}};

static void InitDefaultsAuthority_Hint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grafeas::v1beta1::attestation::_Authority_Hint_default_instance_;
    new (ptr) ::grafeas::v1beta1::attestation::Authority_Hint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grafeas::v1beta1::attestation::Authority_Hint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Authority_Hint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthority_Hint}, {}};

static void InitDefaultsAuthority() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grafeas::v1beta1::attestation::_Authority_default_instance_;
    new (ptr) ::grafeas::v1beta1::attestation::Authority();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grafeas::v1beta1::attestation::Authority::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Authority =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthority}, {
      &protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_Authority_Hint.base,}};

static void InitDefaultsDetails() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grafeas::v1beta1::attestation::_Details_default_instance_;
    new (ptr) ::grafeas::v1beta1::attestation::Details();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grafeas::v1beta1::attestation::Details::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Details =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDetails}, {
      &protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_Attestation.base,}};

static void InitDefaultsAttestation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grafeas::v1beta1::attestation::_Attestation_default_instance_;
    new (ptr) ::grafeas::v1beta1::attestation::Attestation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grafeas::v1beta1::attestation::Attestation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Attestation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAttestation}, {
      &protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_PgpSignedAttestation.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PgpSignedAttestation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authority_Hint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authority.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Details.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Attestation.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::PgpSignedAttestation, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::PgpSignedAttestation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::PgpSignedAttestation, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::PgpSignedAttestation, content_type_),
  offsetof(::grafeas::v1beta1::attestation::PgpSignedAttestationDefaultTypeInternal, pgp_key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::PgpSignedAttestation, key_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::Authority_Hint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::Authority_Hint, human_readable_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::Authority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::Authority, hint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::Details, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::Details, attestation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::Attestation, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::Attestation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::grafeas::v1beta1::attestation::AttestationDefaultTypeInternal, pgp_signed_attestation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grafeas::v1beta1::attestation::Attestation, signature_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grafeas::v1beta1::attestation::PgpSignedAttestation)},
  { 9, -1, sizeof(::grafeas::v1beta1::attestation::Authority_Hint)},
  { 15, -1, sizeof(::grafeas::v1beta1::attestation::Authority)},
  { 21, -1, sizeof(::grafeas::v1beta1::attestation::Details)},
  { 27, -1, sizeof(::grafeas::v1beta1::attestation::Attestation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::grafeas::v1beta1::attestation::_PgpSignedAttestation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grafeas::v1beta1::attestation::_Authority_Hint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grafeas::v1beta1::attestation::_Authority_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grafeas::v1beta1::attestation::_Details_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grafeas::v1beta1::attestation::_Attestation_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/devtools/containeranalysis/v1beta1/attestation/attestation.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nGgoogle/devtools/containeranalysis/v1be"
      "ta1/attestation/attestation.proto\022\033grafe"
      "as.v1beta1.attestation\"\344\001\n\024PgpSignedAtte"
      "station\022\021\n\tsignature\030\001 \001(\t\022S\n\014content_ty"
      "pe\030\003 \001(\0162=.grafeas.v1beta1.attestation.P"
      "gpSignedAttestation.ContentType\022\024\n\npgp_k"
      "ey_id\030\002 \001(\tH\000\"D\n\013ContentType\022\034\n\030CONTENT_"
      "TYPE_UNSPECIFIED\020\000\022\027\n\023SIMPLE_SIGNING_JSO"
      "N\020\001B\010\n\006key_id\"k\n\tAuthority\0229\n\004hint\030\001 \001(\013"
      "2+.grafeas.v1beta1.attestation.Authority"
      ".Hint\032#\n\004Hint\022\033\n\023human_readable_name\030\001 \001"
      "(\t\"H\n\007Details\022=\n\013attestation\030\001 \001(\0132(.gra"
      "feas.v1beta1.attestation.Attestation\"o\n\013"
      "Attestation\022S\n\026pgp_signed_attestation\030\001 "
      "\001(\01321.grafeas.v1beta1.attestation.PgpSig"
      "nedAttestationH\000B\013\n\tsignatureB\212\001\n\036io.gra"
      "feas.v1beta1.attestationP\001Z`google.golan"
      "g.org/genproto/googleapis/devtools/conta"
      "ineranalysis/v1beta1/attestation;attesta"
      "tion\242\002\003GRAb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 778);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/devtools/containeranalysis/v1beta1/attestation/attestation.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto
namespace grafeas {
namespace v1beta1 {
namespace attestation {
const ::google::protobuf::EnumDescriptor* PgpSignedAttestation_ContentType_descriptor() {
  protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::file_level_enum_descriptors[0];
}
bool PgpSignedAttestation_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PgpSignedAttestation_ContentType PgpSignedAttestation::CONTENT_TYPE_UNSPECIFIED;
const PgpSignedAttestation_ContentType PgpSignedAttestation::SIMPLE_SIGNING_JSON;
const PgpSignedAttestation_ContentType PgpSignedAttestation::ContentType_MIN;
const PgpSignedAttestation_ContentType PgpSignedAttestation::ContentType_MAX;
const int PgpSignedAttestation::ContentType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void PgpSignedAttestation::InitAsDefaultInstance() {
  ::grafeas::v1beta1::attestation::_PgpSignedAttestation_default_instance_.pgp_key_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PgpSignedAttestation::kSignatureFieldNumber;
const int PgpSignedAttestation::kContentTypeFieldNumber;
const int PgpSignedAttestation::kPgpKeyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PgpSignedAttestation::PgpSignedAttestation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_PgpSignedAttestation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grafeas.v1beta1.attestation.PgpSignedAttestation)
}
PgpSignedAttestation::PgpSignedAttestation(const PgpSignedAttestation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  content_type_ = from.content_type_;
  clear_has_key_id();
  switch (from.key_id_case()) {
    case kPgpKeyId: {
      set_pgp_key_id(from.pgp_key_id());
      break;
    }
    case KEY_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grafeas.v1beta1.attestation.PgpSignedAttestation)
}

void PgpSignedAttestation::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0;
  clear_has_key_id();
}

PgpSignedAttestation::~PgpSignedAttestation() {
  // @@protoc_insertion_point(destructor:grafeas.v1beta1.attestation.PgpSignedAttestation)
  SharedDtor();
}

void PgpSignedAttestation::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_key_id()) {
    clear_key_id();
  }
}

void PgpSignedAttestation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PgpSignedAttestation::descriptor() {
  ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PgpSignedAttestation& PgpSignedAttestation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_PgpSignedAttestation.base);
  return *internal_default_instance();
}


void PgpSignedAttestation::clear_key_id() {
// @@protoc_insertion_point(one_of_clear_start:grafeas.v1beta1.attestation.PgpSignedAttestation)
  switch (key_id_case()) {
    case kPgpKeyId: {
      key_id_.pgp_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case KEY_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_ID_NOT_SET;
}


void PgpSignedAttestation::Clear() {
// @@protoc_insertion_point(message_clear_start:grafeas.v1beta1.attestation.PgpSignedAttestation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0;
  clear_key_id();
  _internal_metadata_.Clear();
}

bool PgpSignedAttestation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grafeas.v1beta1.attestation.PgpSignedAttestation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), static_cast<int>(this->signature().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grafeas.v1beta1.attestation.PgpSignedAttestation.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pgp_key_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pgp_key_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pgp_key_id().data(), static_cast<int>(this->pgp_key_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType content_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_content_type(static_cast< ::grafeas::v1beta1::attestation::PgpSignedAttestation_ContentType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grafeas.v1beta1.attestation.PgpSignedAttestation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grafeas.v1beta1.attestation.PgpSignedAttestation)
  return false;
#undef DO_
}

void PgpSignedAttestation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grafeas.v1beta1.attestation.PgpSignedAttestation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grafeas.v1beta1.attestation.PgpSignedAttestation.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signature(), output);
  }

  // string pgp_key_id = 2;
  if (has_pgp_key_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pgp_key_id().data(), static_cast<int>(this->pgp_key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pgp_key_id(), output);
  }

  // .grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType content_type = 3;
  if (this->content_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->content_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grafeas.v1beta1.attestation.PgpSignedAttestation)
}

::google::protobuf::uint8* PgpSignedAttestation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grafeas.v1beta1.attestation.PgpSignedAttestation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grafeas.v1beta1.attestation.PgpSignedAttestation.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  // string pgp_key_id = 2;
  if (has_pgp_key_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pgp_key_id().data(), static_cast<int>(this->pgp_key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pgp_key_id(), target);
  }

  // .grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType content_type = 3;
  if (this->content_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->content_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grafeas.v1beta1.attestation.PgpSignedAttestation)
  return target;
}

size_t PgpSignedAttestation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grafeas.v1beta1.attestation.PgpSignedAttestation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // .grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType content_type = 3;
  if (this->content_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->content_type());
  }

  switch (key_id_case()) {
    // string pgp_key_id = 2;
    case kPgpKeyId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pgp_key_id());
      break;
    }
    case KEY_ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PgpSignedAttestation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grafeas.v1beta1.attestation.PgpSignedAttestation)
  GOOGLE_DCHECK_NE(&from, this);
  const PgpSignedAttestation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PgpSignedAttestation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grafeas.v1beta1.attestation.PgpSignedAttestation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grafeas.v1beta1.attestation.PgpSignedAttestation)
    MergeFrom(*source);
  }
}

void PgpSignedAttestation::MergeFrom(const PgpSignedAttestation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grafeas.v1beta1.attestation.PgpSignedAttestation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.content_type() != 0) {
    set_content_type(from.content_type());
  }
  switch (from.key_id_case()) {
    case kPgpKeyId: {
      set_pgp_key_id(from.pgp_key_id());
      break;
    }
    case KEY_ID_NOT_SET: {
      break;
    }
  }
}

void PgpSignedAttestation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grafeas.v1beta1.attestation.PgpSignedAttestation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PgpSignedAttestation::CopyFrom(const PgpSignedAttestation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grafeas.v1beta1.attestation.PgpSignedAttestation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PgpSignedAttestation::IsInitialized() const {
  return true;
}

void PgpSignedAttestation::Swap(PgpSignedAttestation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PgpSignedAttestation::InternalSwap(PgpSignedAttestation* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_type_, other->content_type_);
  swap(key_id_, other->key_id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PgpSignedAttestation::GetMetadata() const {
  protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authority_Hint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authority_Hint::kHumanReadableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authority_Hint::Authority_Hint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_Authority_Hint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grafeas.v1beta1.attestation.Authority.Hint)
}
Authority_Hint::Authority_Hint(const Authority_Hint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  human_readable_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.human_readable_name().size() > 0) {
    human_readable_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.human_readable_name_);
  }
  // @@protoc_insertion_point(copy_constructor:grafeas.v1beta1.attestation.Authority.Hint)
}

void Authority_Hint::SharedCtor() {
  human_readable_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Authority_Hint::~Authority_Hint() {
  // @@protoc_insertion_point(destructor:grafeas.v1beta1.attestation.Authority.Hint)
  SharedDtor();
}

void Authority_Hint::SharedDtor() {
  human_readable_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Authority_Hint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authority_Hint::descriptor() {
  ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authority_Hint& Authority_Hint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_Authority_Hint.base);
  return *internal_default_instance();
}


void Authority_Hint::Clear() {
// @@protoc_insertion_point(message_clear_start:grafeas.v1beta1.attestation.Authority.Hint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  human_readable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Authority_Hint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grafeas.v1beta1.attestation.Authority.Hint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string human_readable_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_human_readable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->human_readable_name().data(), static_cast<int>(this->human_readable_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "grafeas.v1beta1.attestation.Authority.Hint.human_readable_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grafeas.v1beta1.attestation.Authority.Hint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grafeas.v1beta1.attestation.Authority.Hint)
  return false;
#undef DO_
}

void Authority_Hint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grafeas.v1beta1.attestation.Authority.Hint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string human_readable_name = 1;
  if (this->human_readable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->human_readable_name().data(), static_cast<int>(this->human_readable_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grafeas.v1beta1.attestation.Authority.Hint.human_readable_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->human_readable_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grafeas.v1beta1.attestation.Authority.Hint)
}

::google::protobuf::uint8* Authority_Hint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grafeas.v1beta1.attestation.Authority.Hint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string human_readable_name = 1;
  if (this->human_readable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->human_readable_name().data(), static_cast<int>(this->human_readable_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "grafeas.v1beta1.attestation.Authority.Hint.human_readable_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->human_readable_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grafeas.v1beta1.attestation.Authority.Hint)
  return target;
}

size_t Authority_Hint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grafeas.v1beta1.attestation.Authority.Hint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string human_readable_name = 1;
  if (this->human_readable_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->human_readable_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authority_Hint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grafeas.v1beta1.attestation.Authority.Hint)
  GOOGLE_DCHECK_NE(&from, this);
  const Authority_Hint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authority_Hint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grafeas.v1beta1.attestation.Authority.Hint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grafeas.v1beta1.attestation.Authority.Hint)
    MergeFrom(*source);
  }
}

void Authority_Hint::MergeFrom(const Authority_Hint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grafeas.v1beta1.attestation.Authority.Hint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.human_readable_name().size() > 0) {

    human_readable_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.human_readable_name_);
  }
}

void Authority_Hint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grafeas.v1beta1.attestation.Authority.Hint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authority_Hint::CopyFrom(const Authority_Hint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grafeas.v1beta1.attestation.Authority.Hint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authority_Hint::IsInitialized() const {
  return true;
}

void Authority_Hint::Swap(Authority_Hint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authority_Hint::InternalSwap(Authority_Hint* other) {
  using std::swap;
  human_readable_name_.Swap(&other->human_readable_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authority_Hint::GetMetadata() const {
  protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authority::InitAsDefaultInstance() {
  ::grafeas::v1beta1::attestation::_Authority_default_instance_._instance.get_mutable()->hint_ = const_cast< ::grafeas::v1beta1::attestation::Authority_Hint*>(
      ::grafeas::v1beta1::attestation::Authority_Hint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authority::kHintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authority::Authority()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_Authority.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grafeas.v1beta1.attestation.Authority)
}
Authority::Authority(const Authority& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hint()) {
    hint_ = new ::grafeas::v1beta1::attestation::Authority_Hint(*from.hint_);
  } else {
    hint_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grafeas.v1beta1.attestation.Authority)
}

void Authority::SharedCtor() {
  hint_ = NULL;
}

Authority::~Authority() {
  // @@protoc_insertion_point(destructor:grafeas.v1beta1.attestation.Authority)
  SharedDtor();
}

void Authority::SharedDtor() {
  if (this != internal_default_instance()) delete hint_;
}

void Authority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authority::descriptor() {
  ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authority& Authority::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_Authority.base);
  return *internal_default_instance();
}


void Authority::Clear() {
// @@protoc_insertion_point(message_clear_start:grafeas.v1beta1.attestation.Authority)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hint_ != NULL) {
    delete hint_;
  }
  hint_ = NULL;
  _internal_metadata_.Clear();
}

bool Authority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grafeas.v1beta1.attestation.Authority)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grafeas.v1beta1.attestation.Authority.Hint hint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grafeas.v1beta1.attestation.Authority)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grafeas.v1beta1.attestation.Authority)
  return false;
#undef DO_
}

void Authority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grafeas.v1beta1.attestation.Authority)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grafeas.v1beta1.attestation.Authority.Hint hint = 1;
  if (this->has_hint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_hint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grafeas.v1beta1.attestation.Authority)
}

::google::protobuf::uint8* Authority::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grafeas.v1beta1.attestation.Authority)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grafeas.v1beta1.attestation.Authority.Hint hint = 1;
  if (this->has_hint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_hint(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grafeas.v1beta1.attestation.Authority)
  return target;
}

size_t Authority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grafeas.v1beta1.attestation.Authority)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .grafeas.v1beta1.attestation.Authority.Hint hint = 1;
  if (this->has_hint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hint_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authority::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grafeas.v1beta1.attestation.Authority)
  GOOGLE_DCHECK_NE(&from, this);
  const Authority* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authority>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grafeas.v1beta1.attestation.Authority)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grafeas.v1beta1.attestation.Authority)
    MergeFrom(*source);
  }
}

void Authority::MergeFrom(const Authority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grafeas.v1beta1.attestation.Authority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hint()) {
    mutable_hint()->::grafeas::v1beta1::attestation::Authority_Hint::MergeFrom(from.hint());
  }
}

void Authority::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grafeas.v1beta1.attestation.Authority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authority::CopyFrom(const Authority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grafeas.v1beta1.attestation.Authority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authority::IsInitialized() const {
  return true;
}

void Authority::Swap(Authority* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authority::InternalSwap(Authority* other) {
  using std::swap;
  swap(hint_, other->hint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authority::GetMetadata() const {
  protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Details::InitAsDefaultInstance() {
  ::grafeas::v1beta1::attestation::_Details_default_instance_._instance.get_mutable()->attestation_ = const_cast< ::grafeas::v1beta1::attestation::Attestation*>(
      ::grafeas::v1beta1::attestation::Attestation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Details::kAttestationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Details::Details()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_Details.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grafeas.v1beta1.attestation.Details)
}
Details::Details(const Details& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attestation()) {
    attestation_ = new ::grafeas::v1beta1::attestation::Attestation(*from.attestation_);
  } else {
    attestation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:grafeas.v1beta1.attestation.Details)
}

void Details::SharedCtor() {
  attestation_ = NULL;
}

Details::~Details() {
  // @@protoc_insertion_point(destructor:grafeas.v1beta1.attestation.Details)
  SharedDtor();
}

void Details::SharedDtor() {
  if (this != internal_default_instance()) delete attestation_;
}

void Details::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Details::descriptor() {
  ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Details& Details::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_Details.base);
  return *internal_default_instance();
}


void Details::Clear() {
// @@protoc_insertion_point(message_clear_start:grafeas.v1beta1.attestation.Details)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && attestation_ != NULL) {
    delete attestation_;
  }
  attestation_ = NULL;
  _internal_metadata_.Clear();
}

bool Details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grafeas.v1beta1.attestation.Details)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grafeas.v1beta1.attestation.Attestation attestation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attestation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grafeas.v1beta1.attestation.Details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grafeas.v1beta1.attestation.Details)
  return false;
#undef DO_
}

void Details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grafeas.v1beta1.attestation.Details)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grafeas.v1beta1.attestation.Attestation attestation = 1;
  if (this->has_attestation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_attestation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grafeas.v1beta1.attestation.Details)
}

::google::protobuf::uint8* Details::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grafeas.v1beta1.attestation.Details)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grafeas.v1beta1.attestation.Attestation attestation = 1;
  if (this->has_attestation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_attestation(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grafeas.v1beta1.attestation.Details)
  return target;
}

size_t Details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grafeas.v1beta1.attestation.Details)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .grafeas.v1beta1.attestation.Attestation attestation = 1;
  if (this->has_attestation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attestation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Details::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grafeas.v1beta1.attestation.Details)
  GOOGLE_DCHECK_NE(&from, this);
  const Details* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Details>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grafeas.v1beta1.attestation.Details)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grafeas.v1beta1.attestation.Details)
    MergeFrom(*source);
  }
}

void Details::MergeFrom(const Details& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grafeas.v1beta1.attestation.Details)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attestation()) {
    mutable_attestation()->::grafeas::v1beta1::attestation::Attestation::MergeFrom(from.attestation());
  }
}

void Details::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grafeas.v1beta1.attestation.Details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Details::CopyFrom(const Details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grafeas.v1beta1.attestation.Details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Details::IsInitialized() const {
  return true;
}

void Details::Swap(Details* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Details::InternalSwap(Details* other) {
  using std::swap;
  swap(attestation_, other->attestation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Details::GetMetadata() const {
  protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Attestation::InitAsDefaultInstance() {
  ::grafeas::v1beta1::attestation::_Attestation_default_instance_.pgp_signed_attestation_ = const_cast< ::grafeas::v1beta1::attestation::PgpSignedAttestation*>(
      ::grafeas::v1beta1::attestation::PgpSignedAttestation::internal_default_instance());
}
void Attestation::set_allocated_pgp_signed_attestation(::grafeas::v1beta1::attestation::PgpSignedAttestation* pgp_signed_attestation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_signature();
  if (pgp_signed_attestation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pgp_signed_attestation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pgp_signed_attestation, submessage_arena);
    }
    set_has_pgp_signed_attestation();
    signature_.pgp_signed_attestation_ = pgp_signed_attestation;
  }
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.attestation.Attestation.pgp_signed_attestation)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attestation::kPgpSignedAttestationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attestation::Attestation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_Attestation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:grafeas.v1beta1.attestation.Attestation)
}
Attestation::Attestation(const Attestation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_signature();
  switch (from.signature_case()) {
    case kPgpSignedAttestation: {
      mutable_pgp_signed_attestation()->::grafeas::v1beta1::attestation::PgpSignedAttestation::MergeFrom(from.pgp_signed_attestation());
      break;
    }
    case SIGNATURE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grafeas.v1beta1.attestation.Attestation)
}

void Attestation::SharedCtor() {
  clear_has_signature();
}

Attestation::~Attestation() {
  // @@protoc_insertion_point(destructor:grafeas.v1beta1.attestation.Attestation)
  SharedDtor();
}

void Attestation::SharedDtor() {
  if (has_signature()) {
    clear_signature();
  }
}

void Attestation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Attestation::descriptor() {
  ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Attestation& Attestation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::scc_info_Attestation.base);
  return *internal_default_instance();
}


void Attestation::clear_signature() {
// @@protoc_insertion_point(one_of_clear_start:grafeas.v1beta1.attestation.Attestation)
  switch (signature_case()) {
    case kPgpSignedAttestation: {
      delete signature_.pgp_signed_attestation_;
      break;
    }
    case SIGNATURE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SIGNATURE_NOT_SET;
}


void Attestation::Clear() {
// @@protoc_insertion_point(message_clear_start:grafeas.v1beta1.attestation.Attestation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_signature();
  _internal_metadata_.Clear();
}

bool Attestation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grafeas.v1beta1.attestation.Attestation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grafeas.v1beta1.attestation.PgpSignedAttestation pgp_signed_attestation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pgp_signed_attestation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grafeas.v1beta1.attestation.Attestation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grafeas.v1beta1.attestation.Attestation)
  return false;
#undef DO_
}

void Attestation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grafeas.v1beta1.attestation.Attestation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grafeas.v1beta1.attestation.PgpSignedAttestation pgp_signed_attestation = 1;
  if (has_pgp_signed_attestation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pgp_signed_attestation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grafeas.v1beta1.attestation.Attestation)
}

::google::protobuf::uint8* Attestation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grafeas.v1beta1.attestation.Attestation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grafeas.v1beta1.attestation.PgpSignedAttestation pgp_signed_attestation = 1;
  if (has_pgp_signed_attestation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pgp_signed_attestation(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grafeas.v1beta1.attestation.Attestation)
  return target;
}

size_t Attestation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grafeas.v1beta1.attestation.Attestation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (signature_case()) {
    // .grafeas.v1beta1.attestation.PgpSignedAttestation pgp_signed_attestation = 1;
    case kPgpSignedAttestation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *signature_.pgp_signed_attestation_);
      break;
    }
    case SIGNATURE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attestation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grafeas.v1beta1.attestation.Attestation)
  GOOGLE_DCHECK_NE(&from, this);
  const Attestation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Attestation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grafeas.v1beta1.attestation.Attestation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grafeas.v1beta1.attestation.Attestation)
    MergeFrom(*source);
  }
}

void Attestation::MergeFrom(const Attestation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grafeas.v1beta1.attestation.Attestation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.signature_case()) {
    case kPgpSignedAttestation: {
      mutable_pgp_signed_attestation()->::grafeas::v1beta1::attestation::PgpSignedAttestation::MergeFrom(from.pgp_signed_attestation());
      break;
    }
    case SIGNATURE_NOT_SET: {
      break;
    }
  }
}

void Attestation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grafeas.v1beta1.attestation.Attestation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attestation::CopyFrom(const Attestation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grafeas.v1beta1.attestation.Attestation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attestation::IsInitialized() const {
  return true;
}

void Attestation::Swap(Attestation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attestation::InternalSwap(Attestation* other) {
  using std::swap;
  swap(signature_, other->signature_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Attestation::GetMetadata() const {
  protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace attestation
}  // namespace v1beta1
}  // namespace grafeas
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grafeas::v1beta1::attestation::PgpSignedAttestation* Arena::CreateMaybeMessage< ::grafeas::v1beta1::attestation::PgpSignedAttestation >(Arena* arena) {
  return Arena::CreateInternal< ::grafeas::v1beta1::attestation::PgpSignedAttestation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grafeas::v1beta1::attestation::Authority_Hint* Arena::CreateMaybeMessage< ::grafeas::v1beta1::attestation::Authority_Hint >(Arena* arena) {
  return Arena::CreateInternal< ::grafeas::v1beta1::attestation::Authority_Hint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grafeas::v1beta1::attestation::Authority* Arena::CreateMaybeMessage< ::grafeas::v1beta1::attestation::Authority >(Arena* arena) {
  return Arena::CreateInternal< ::grafeas::v1beta1::attestation::Authority >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grafeas::v1beta1::attestation::Details* Arena::CreateMaybeMessage< ::grafeas::v1beta1::attestation::Details >(Arena* arena) {
  return Arena::CreateInternal< ::grafeas::v1beta1::attestation::Details >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::grafeas::v1beta1::attestation::Attestation* Arena::CreateMaybeMessage< ::grafeas::v1beta1::attestation::Attestation >(Arena* arena) {
  return Arena::CreateInternal< ::grafeas::v1beta1::attestation::Attestation >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
