// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1beta1/attestation/attestation.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto 

namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto
namespace grafeas {
namespace v1beta1 {
namespace attestation {
class Attestation;
class AttestationDefaultTypeInternal;
extern AttestationDefaultTypeInternal _Attestation_default_instance_;
class Authority;
class AuthorityDefaultTypeInternal;
extern AuthorityDefaultTypeInternal _Authority_default_instance_;
class Authority_Hint;
class Authority_HintDefaultTypeInternal;
extern Authority_HintDefaultTypeInternal _Authority_Hint_default_instance_;
class Details;
class DetailsDefaultTypeInternal;
extern DetailsDefaultTypeInternal _Details_default_instance_;
class PgpSignedAttestation;
class PgpSignedAttestationDefaultTypeInternal;
extern PgpSignedAttestationDefaultTypeInternal _PgpSignedAttestation_default_instance_;
}  // namespace attestation
}  // namespace v1beta1
}  // namespace grafeas
namespace google {
namespace protobuf {
template<> ::grafeas::v1beta1::attestation::Attestation* Arena::CreateMaybeMessage<::grafeas::v1beta1::attestation::Attestation>(Arena*);
template<> ::grafeas::v1beta1::attestation::Authority* Arena::CreateMaybeMessage<::grafeas::v1beta1::attestation::Authority>(Arena*);
template<> ::grafeas::v1beta1::attestation::Authority_Hint* Arena::CreateMaybeMessage<::grafeas::v1beta1::attestation::Authority_Hint>(Arena*);
template<> ::grafeas::v1beta1::attestation::Details* Arena::CreateMaybeMessage<::grafeas::v1beta1::attestation::Details>(Arena*);
template<> ::grafeas::v1beta1::attestation::PgpSignedAttestation* Arena::CreateMaybeMessage<::grafeas::v1beta1::attestation::PgpSignedAttestation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace grafeas {
namespace v1beta1 {
namespace attestation {

enum PgpSignedAttestation_ContentType {
  PgpSignedAttestation_ContentType_CONTENT_TYPE_UNSPECIFIED = 0,
  PgpSignedAttestation_ContentType_SIMPLE_SIGNING_JSON = 1,
  PgpSignedAttestation_ContentType_PgpSignedAttestation_ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PgpSignedAttestation_ContentType_PgpSignedAttestation_ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PgpSignedAttestation_ContentType_IsValid(int value);
const PgpSignedAttestation_ContentType PgpSignedAttestation_ContentType_ContentType_MIN = PgpSignedAttestation_ContentType_CONTENT_TYPE_UNSPECIFIED;
const PgpSignedAttestation_ContentType PgpSignedAttestation_ContentType_ContentType_MAX = PgpSignedAttestation_ContentType_SIMPLE_SIGNING_JSON;
const int PgpSignedAttestation_ContentType_ContentType_ARRAYSIZE = PgpSignedAttestation_ContentType_ContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PgpSignedAttestation_ContentType_descriptor();
inline const ::std::string& PgpSignedAttestation_ContentType_Name(PgpSignedAttestation_ContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PgpSignedAttestation_ContentType_descriptor(), value);
}
inline bool PgpSignedAttestation_ContentType_Parse(
    const ::std::string& name, PgpSignedAttestation_ContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PgpSignedAttestation_ContentType>(
    PgpSignedAttestation_ContentType_descriptor(), name, value);
}
// ===================================================================

class PgpSignedAttestation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.attestation.PgpSignedAttestation) */ {
 public:
  PgpSignedAttestation();
  virtual ~PgpSignedAttestation();

  PgpSignedAttestation(const PgpSignedAttestation& from);

  inline PgpSignedAttestation& operator=(const PgpSignedAttestation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PgpSignedAttestation(PgpSignedAttestation&& from) noexcept
    : PgpSignedAttestation() {
    *this = ::std::move(from);
  }

  inline PgpSignedAttestation& operator=(PgpSignedAttestation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PgpSignedAttestation& default_instance();

  enum KeyIdCase {
    kPgpKeyId = 2,
    KEY_ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PgpSignedAttestation* internal_default_instance() {
    return reinterpret_cast<const PgpSignedAttestation*>(
               &_PgpSignedAttestation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PgpSignedAttestation* other);
  friend void swap(PgpSignedAttestation& a, PgpSignedAttestation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PgpSignedAttestation* New() const final {
    return CreateMaybeMessage<PgpSignedAttestation>(NULL);
  }

  PgpSignedAttestation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PgpSignedAttestation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PgpSignedAttestation& from);
  void MergeFrom(const PgpSignedAttestation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PgpSignedAttestation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PgpSignedAttestation_ContentType ContentType;
  static const ContentType CONTENT_TYPE_UNSPECIFIED =
    PgpSignedAttestation_ContentType_CONTENT_TYPE_UNSPECIFIED;
  static const ContentType SIMPLE_SIGNING_JSON =
    PgpSignedAttestation_ContentType_SIMPLE_SIGNING_JSON;
  static inline bool ContentType_IsValid(int value) {
    return PgpSignedAttestation_ContentType_IsValid(value);
  }
  static const ContentType ContentType_MIN =
    PgpSignedAttestation_ContentType_ContentType_MIN;
  static const ContentType ContentType_MAX =
    PgpSignedAttestation_ContentType_ContentType_MAX;
  static const int ContentType_ARRAYSIZE =
    PgpSignedAttestation_ContentType_ContentType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContentType_descriptor() {
    return PgpSignedAttestation_ContentType_descriptor();
  }
  static inline const ::std::string& ContentType_Name(ContentType value) {
    return PgpSignedAttestation_ContentType_Name(value);
  }
  static inline bool ContentType_Parse(const ::std::string& name,
      ContentType* value) {
    return PgpSignedAttestation_ContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // .grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType content_type = 3;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 3;
  ::grafeas::v1beta1::attestation::PgpSignedAttestation_ContentType content_type() const;
  void set_content_type(::grafeas::v1beta1::attestation::PgpSignedAttestation_ContentType value);

  // string pgp_key_id = 2;
  private:
  bool has_pgp_key_id() const;
  public:
  void clear_pgp_key_id();
  static const int kPgpKeyIdFieldNumber = 2;
  const ::std::string& pgp_key_id() const;
  void set_pgp_key_id(const ::std::string& value);
  #if LANG_CXX11
  void set_pgp_key_id(::std::string&& value);
  #endif
  void set_pgp_key_id(const char* value);
  void set_pgp_key_id(const char* value, size_t size);
  ::std::string* mutable_pgp_key_id();
  ::std::string* release_pgp_key_id();
  void set_allocated_pgp_key_id(::std::string* pgp_key_id);

  void clear_key_id();
  KeyIdCase key_id_case() const;
  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.attestation.PgpSignedAttestation)
 private:
  void set_has_pgp_key_id();

  inline bool has_key_id() const;
  inline void clear_has_key_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  int content_type_;
  union KeyIdUnion {
    KeyIdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr pgp_key_id_;
  } key_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Authority_Hint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.attestation.Authority.Hint) */ {
 public:
  Authority_Hint();
  virtual ~Authority_Hint();

  Authority_Hint(const Authority_Hint& from);

  inline Authority_Hint& operator=(const Authority_Hint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Authority_Hint(Authority_Hint&& from) noexcept
    : Authority_Hint() {
    *this = ::std::move(from);
  }

  inline Authority_Hint& operator=(Authority_Hint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Authority_Hint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Authority_Hint* internal_default_instance() {
    return reinterpret_cast<const Authority_Hint*>(
               &_Authority_Hint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Authority_Hint* other);
  friend void swap(Authority_Hint& a, Authority_Hint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Authority_Hint* New() const final {
    return CreateMaybeMessage<Authority_Hint>(NULL);
  }

  Authority_Hint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Authority_Hint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Authority_Hint& from);
  void MergeFrom(const Authority_Hint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Authority_Hint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string human_readable_name = 1;
  void clear_human_readable_name();
  static const int kHumanReadableNameFieldNumber = 1;
  const ::std::string& human_readable_name() const;
  void set_human_readable_name(const ::std::string& value);
  #if LANG_CXX11
  void set_human_readable_name(::std::string&& value);
  #endif
  void set_human_readable_name(const char* value);
  void set_human_readable_name(const char* value, size_t size);
  ::std::string* mutable_human_readable_name();
  ::std::string* release_human_readable_name();
  void set_allocated_human_readable_name(::std::string* human_readable_name);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.attestation.Authority.Hint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr human_readable_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Authority : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.attestation.Authority) */ {
 public:
  Authority();
  virtual ~Authority();

  Authority(const Authority& from);

  inline Authority& operator=(const Authority& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Authority(Authority&& from) noexcept
    : Authority() {
    *this = ::std::move(from);
  }

  inline Authority& operator=(Authority&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Authority& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Authority* internal_default_instance() {
    return reinterpret_cast<const Authority*>(
               &_Authority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Authority* other);
  friend void swap(Authority& a, Authority& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Authority* New() const final {
    return CreateMaybeMessage<Authority>(NULL);
  }

  Authority* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Authority>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Authority& from);
  void MergeFrom(const Authority& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Authority* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Authority_Hint Hint;

  // accessors -------------------------------------------------------

  // .grafeas.v1beta1.attestation.Authority.Hint hint = 1;
  bool has_hint() const;
  void clear_hint();
  static const int kHintFieldNumber = 1;
  private:
  const ::grafeas::v1beta1::attestation::Authority_Hint& _internal_hint() const;
  public:
  const ::grafeas::v1beta1::attestation::Authority_Hint& hint() const;
  ::grafeas::v1beta1::attestation::Authority_Hint* release_hint();
  ::grafeas::v1beta1::attestation::Authority_Hint* mutable_hint();
  void set_allocated_hint(::grafeas::v1beta1::attestation::Authority_Hint* hint);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.attestation.Authority)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grafeas::v1beta1::attestation::Authority_Hint* hint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Details : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.attestation.Details) */ {
 public:
  Details();
  virtual ~Details();

  Details(const Details& from);

  inline Details& operator=(const Details& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Details(Details&& from) noexcept
    : Details() {
    *this = ::std::move(from);
  }

  inline Details& operator=(Details&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Details& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Details* internal_default_instance() {
    return reinterpret_cast<const Details*>(
               &_Details_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Details* other);
  friend void swap(Details& a, Details& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Details* New() const final {
    return CreateMaybeMessage<Details>(NULL);
  }

  Details* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Details>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Details& from);
  void MergeFrom(const Details& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Details* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grafeas.v1beta1.attestation.Attestation attestation = 1;
  bool has_attestation() const;
  void clear_attestation();
  static const int kAttestationFieldNumber = 1;
  private:
  const ::grafeas::v1beta1::attestation::Attestation& _internal_attestation() const;
  public:
  const ::grafeas::v1beta1::attestation::Attestation& attestation() const;
  ::grafeas::v1beta1::attestation::Attestation* release_attestation();
  ::grafeas::v1beta1::attestation::Attestation* mutable_attestation();
  void set_allocated_attestation(::grafeas::v1beta1::attestation::Attestation* attestation);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.attestation.Details)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grafeas::v1beta1::attestation::Attestation* attestation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Attestation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.attestation.Attestation) */ {
 public:
  Attestation();
  virtual ~Attestation();

  Attestation(const Attestation& from);

  inline Attestation& operator=(const Attestation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Attestation(Attestation&& from) noexcept
    : Attestation() {
    *this = ::std::move(from);
  }

  inline Attestation& operator=(Attestation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attestation& default_instance();

  enum SignatureCase {
    kPgpSignedAttestation = 1,
    SIGNATURE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attestation* internal_default_instance() {
    return reinterpret_cast<const Attestation*>(
               &_Attestation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Attestation* other);
  friend void swap(Attestation& a, Attestation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attestation* New() const final {
    return CreateMaybeMessage<Attestation>(NULL);
  }

  Attestation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Attestation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Attestation& from);
  void MergeFrom(const Attestation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attestation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grafeas.v1beta1.attestation.PgpSignedAttestation pgp_signed_attestation = 1;
  bool has_pgp_signed_attestation() const;
  void clear_pgp_signed_attestation();
  static const int kPgpSignedAttestationFieldNumber = 1;
  private:
  const ::grafeas::v1beta1::attestation::PgpSignedAttestation& _internal_pgp_signed_attestation() const;
  public:
  const ::grafeas::v1beta1::attestation::PgpSignedAttestation& pgp_signed_attestation() const;
  ::grafeas::v1beta1::attestation::PgpSignedAttestation* release_pgp_signed_attestation();
  ::grafeas::v1beta1::attestation::PgpSignedAttestation* mutable_pgp_signed_attestation();
  void set_allocated_pgp_signed_attestation(::grafeas::v1beta1::attestation::PgpSignedAttestation* pgp_signed_attestation);

  void clear_signature();
  SignatureCase signature_case() const;
  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.attestation.Attestation)
 private:
  void set_has_pgp_signed_attestation();

  inline bool has_signature() const;
  inline void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union SignatureUnion {
    SignatureUnion() {}
    ::grafeas::v1beta1::attestation::PgpSignedAttestation* pgp_signed_attestation_;
  } signature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PgpSignedAttestation

// string signature = 1;
inline void PgpSignedAttestation::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PgpSignedAttestation::signature() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.attestation.PgpSignedAttestation.signature)
  return signature_.GetNoArena();
}
inline void PgpSignedAttestation::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.attestation.PgpSignedAttestation.signature)
}
#if LANG_CXX11
inline void PgpSignedAttestation::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.attestation.PgpSignedAttestation.signature)
}
#endif
inline void PgpSignedAttestation::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.attestation.PgpSignedAttestation.signature)
}
inline void PgpSignedAttestation::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.attestation.PgpSignedAttestation.signature)
}
inline ::std::string* PgpSignedAttestation::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.attestation.PgpSignedAttestation.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PgpSignedAttestation::release_signature() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.attestation.PgpSignedAttestation.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PgpSignedAttestation::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.attestation.PgpSignedAttestation.signature)
}

// .grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType content_type = 3;
inline void PgpSignedAttestation::clear_content_type() {
  content_type_ = 0;
}
inline ::grafeas::v1beta1::attestation::PgpSignedAttestation_ContentType PgpSignedAttestation::content_type() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.attestation.PgpSignedAttestation.content_type)
  return static_cast< ::grafeas::v1beta1::attestation::PgpSignedAttestation_ContentType >(content_type_);
}
inline void PgpSignedAttestation::set_content_type(::grafeas::v1beta1::attestation::PgpSignedAttestation_ContentType value) {
  
  content_type_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.attestation.PgpSignedAttestation.content_type)
}

// string pgp_key_id = 2;
inline bool PgpSignedAttestation::has_pgp_key_id() const {
  return key_id_case() == kPgpKeyId;
}
inline void PgpSignedAttestation::set_has_pgp_key_id() {
  _oneof_case_[0] = kPgpKeyId;
}
inline void PgpSignedAttestation::clear_pgp_key_id() {
  if (has_pgp_key_id()) {
    key_id_.pgp_key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_key_id();
  }
}
inline const ::std::string& PgpSignedAttestation::pgp_key_id() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id)
  if (has_pgp_key_id()) {
    return key_id_.pgp_key_id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void PgpSignedAttestation::set_pgp_key_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id)
  if (!has_pgp_key_id()) {
    clear_key_id();
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_id_.pgp_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id)
}
#if LANG_CXX11
inline void PgpSignedAttestation::set_pgp_key_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id)
  if (!has_pgp_key_id()) {
    clear_key_id();
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_id_.pgp_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id)
}
#endif
inline void PgpSignedAttestation::set_pgp_key_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_pgp_key_id()) {
    clear_key_id();
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_id_.pgp_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id)
}
inline void PgpSignedAttestation::set_pgp_key_id(const char* value, size_t size) {
  if (!has_pgp_key_id()) {
    clear_key_id();
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_id_.pgp_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id)
}
inline ::std::string* PgpSignedAttestation::mutable_pgp_key_id() {
  if (!has_pgp_key_id()) {
    clear_key_id();
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id)
  return key_id_.pgp_key_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PgpSignedAttestation::release_pgp_key_id() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id)
  if (has_pgp_key_id()) {
    clear_has_key_id();
    return key_id_.pgp_key_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void PgpSignedAttestation::set_allocated_pgp_key_id(::std::string* pgp_key_id) {
  if (!has_pgp_key_id()) {
    key_id_.pgp_key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_key_id();
  if (pgp_key_id != NULL) {
    set_has_pgp_key_id();
    key_id_.pgp_key_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pgp_key_id);
  }
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.attestation.PgpSignedAttestation.pgp_key_id)
}

inline bool PgpSignedAttestation::has_key_id() const {
  return key_id_case() != KEY_ID_NOT_SET;
}
inline void PgpSignedAttestation::clear_has_key_id() {
  _oneof_case_[0] = KEY_ID_NOT_SET;
}
inline PgpSignedAttestation::KeyIdCase PgpSignedAttestation::key_id_case() const {
  return PgpSignedAttestation::KeyIdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Authority_Hint

// string human_readable_name = 1;
inline void Authority_Hint::clear_human_readable_name() {
  human_readable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authority_Hint::human_readable_name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.attestation.Authority.Hint.human_readable_name)
  return human_readable_name_.GetNoArena();
}
inline void Authority_Hint::set_human_readable_name(const ::std::string& value) {
  
  human_readable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.attestation.Authority.Hint.human_readable_name)
}
#if LANG_CXX11
inline void Authority_Hint::set_human_readable_name(::std::string&& value) {
  
  human_readable_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.attestation.Authority.Hint.human_readable_name)
}
#endif
inline void Authority_Hint::set_human_readable_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  human_readable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.attestation.Authority.Hint.human_readable_name)
}
inline void Authority_Hint::set_human_readable_name(const char* value, size_t size) {
  
  human_readable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.attestation.Authority.Hint.human_readable_name)
}
inline ::std::string* Authority_Hint::mutable_human_readable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.attestation.Authority.Hint.human_readable_name)
  return human_readable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authority_Hint::release_human_readable_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.attestation.Authority.Hint.human_readable_name)
  
  return human_readable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authority_Hint::set_allocated_human_readable_name(::std::string* human_readable_name) {
  if (human_readable_name != NULL) {
    
  } else {
    
  }
  human_readable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), human_readable_name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.attestation.Authority.Hint.human_readable_name)
}

// -------------------------------------------------------------------

// Authority

// .grafeas.v1beta1.attestation.Authority.Hint hint = 1;
inline bool Authority::has_hint() const {
  return this != internal_default_instance() && hint_ != NULL;
}
inline void Authority::clear_hint() {
  if (GetArenaNoVirtual() == NULL && hint_ != NULL) {
    delete hint_;
  }
  hint_ = NULL;
}
inline const ::grafeas::v1beta1::attestation::Authority_Hint& Authority::_internal_hint() const {
  return *hint_;
}
inline const ::grafeas::v1beta1::attestation::Authority_Hint& Authority::hint() const {
  const ::grafeas::v1beta1::attestation::Authority_Hint* p = hint_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.attestation.Authority.hint)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::attestation::Authority_Hint*>(
      &::grafeas::v1beta1::attestation::_Authority_Hint_default_instance_);
}
inline ::grafeas::v1beta1::attestation::Authority_Hint* Authority::release_hint() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.attestation.Authority.hint)
  
  ::grafeas::v1beta1::attestation::Authority_Hint* temp = hint_;
  hint_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::attestation::Authority_Hint* Authority::mutable_hint() {
  
  if (hint_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::attestation::Authority_Hint>(GetArenaNoVirtual());
    hint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.attestation.Authority.hint)
  return hint_;
}
inline void Authority::set_allocated_hint(::grafeas::v1beta1::attestation::Authority_Hint* hint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hint_;
  }
  if (hint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hint, submessage_arena);
    }
    
  } else {
    
  }
  hint_ = hint;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.attestation.Authority.hint)
}

// -------------------------------------------------------------------

// Details

// .grafeas.v1beta1.attestation.Attestation attestation = 1;
inline bool Details::has_attestation() const {
  return this != internal_default_instance() && attestation_ != NULL;
}
inline void Details::clear_attestation() {
  if (GetArenaNoVirtual() == NULL && attestation_ != NULL) {
    delete attestation_;
  }
  attestation_ = NULL;
}
inline const ::grafeas::v1beta1::attestation::Attestation& Details::_internal_attestation() const {
  return *attestation_;
}
inline const ::grafeas::v1beta1::attestation::Attestation& Details::attestation() const {
  const ::grafeas::v1beta1::attestation::Attestation* p = attestation_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.attestation.Details.attestation)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::attestation::Attestation*>(
      &::grafeas::v1beta1::attestation::_Attestation_default_instance_);
}
inline ::grafeas::v1beta1::attestation::Attestation* Details::release_attestation() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.attestation.Details.attestation)
  
  ::grafeas::v1beta1::attestation::Attestation* temp = attestation_;
  attestation_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::attestation::Attestation* Details::mutable_attestation() {
  
  if (attestation_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::attestation::Attestation>(GetArenaNoVirtual());
    attestation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.attestation.Details.attestation)
  return attestation_;
}
inline void Details::set_allocated_attestation(::grafeas::v1beta1::attestation::Attestation* attestation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete attestation_;
  }
  if (attestation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attestation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attestation, submessage_arena);
    }
    
  } else {
    
  }
  attestation_ = attestation;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.attestation.Details.attestation)
}

// -------------------------------------------------------------------

// Attestation

// .grafeas.v1beta1.attestation.PgpSignedAttestation pgp_signed_attestation = 1;
inline bool Attestation::has_pgp_signed_attestation() const {
  return signature_case() == kPgpSignedAttestation;
}
inline void Attestation::set_has_pgp_signed_attestation() {
  _oneof_case_[0] = kPgpSignedAttestation;
}
inline void Attestation::clear_pgp_signed_attestation() {
  if (has_pgp_signed_attestation()) {
    delete signature_.pgp_signed_attestation_;
    clear_has_signature();
  }
}
inline const ::grafeas::v1beta1::attestation::PgpSignedAttestation& Attestation::_internal_pgp_signed_attestation() const {
  return *signature_.pgp_signed_attestation_;
}
inline ::grafeas::v1beta1::attestation::PgpSignedAttestation* Attestation::release_pgp_signed_attestation() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.attestation.Attestation.pgp_signed_attestation)
  if (has_pgp_signed_attestation()) {
    clear_has_signature();
      ::grafeas::v1beta1::attestation::PgpSignedAttestation* temp = signature_.pgp_signed_attestation_;
    signature_.pgp_signed_attestation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grafeas::v1beta1::attestation::PgpSignedAttestation& Attestation::pgp_signed_attestation() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.attestation.Attestation.pgp_signed_attestation)
  return has_pgp_signed_attestation()
      ? *signature_.pgp_signed_attestation_
      : *reinterpret_cast< ::grafeas::v1beta1::attestation::PgpSignedAttestation*>(&::grafeas::v1beta1::attestation::_PgpSignedAttestation_default_instance_);
}
inline ::grafeas::v1beta1::attestation::PgpSignedAttestation* Attestation::mutable_pgp_signed_attestation() {
  if (!has_pgp_signed_attestation()) {
    clear_signature();
    set_has_pgp_signed_attestation();
    signature_.pgp_signed_attestation_ = CreateMaybeMessage< ::grafeas::v1beta1::attestation::PgpSignedAttestation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.attestation.Attestation.pgp_signed_attestation)
  return signature_.pgp_signed_attestation_;
}

inline bool Attestation::has_signature() const {
  return signature_case() != SIGNATURE_NOT_SET;
}
inline void Attestation::clear_has_signature() {
  _oneof_case_[0] = SIGNATURE_NOT_SET;
}
inline Attestation::SignatureCase Attestation::signature_case() const {
  return Attestation::SignatureCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace attestation
}  // namespace v1beta1
}  // namespace grafeas

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::grafeas::v1beta1::attestation::PgpSignedAttestation_ContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grafeas::v1beta1::attestation::PgpSignedAttestation_ContentType>() {
  return ::grafeas::v1beta1::attestation::PgpSignedAttestation_ContentType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fattestation_2fattestation_2eproto
