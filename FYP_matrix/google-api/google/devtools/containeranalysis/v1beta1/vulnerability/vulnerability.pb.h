// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1beta1/vulnerability/vulnerability.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fvulnerability_2fvulnerability_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fvulnerability_2fvulnerability_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/devtools/containeranalysis/v1beta1/common/common.pb.h"
#include "google/devtools/containeranalysis/v1beta1/package/package.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fvulnerability_2fvulnerability_2eproto 

namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fvulnerability_2fvulnerability_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fvulnerability_2fvulnerability_2eproto
namespace grafeas {
namespace v1beta1 {
namespace vulnerability {
class Details;
class DetailsDefaultTypeInternal;
extern DetailsDefaultTypeInternal _Details_default_instance_;
class PackageIssue;
class PackageIssueDefaultTypeInternal;
extern PackageIssueDefaultTypeInternal _PackageIssue_default_instance_;
class Vulnerability;
class VulnerabilityDefaultTypeInternal;
extern VulnerabilityDefaultTypeInternal _Vulnerability_default_instance_;
class VulnerabilityLocation;
class VulnerabilityLocationDefaultTypeInternal;
extern VulnerabilityLocationDefaultTypeInternal _VulnerabilityLocation_default_instance_;
class Vulnerability_Detail;
class Vulnerability_DetailDefaultTypeInternal;
extern Vulnerability_DetailDefaultTypeInternal _Vulnerability_Detail_default_instance_;
}  // namespace vulnerability
}  // namespace v1beta1
}  // namespace grafeas
namespace google {
namespace protobuf {
template<> ::grafeas::v1beta1::vulnerability::Details* Arena::CreateMaybeMessage<::grafeas::v1beta1::vulnerability::Details>(Arena*);
template<> ::grafeas::v1beta1::vulnerability::PackageIssue* Arena::CreateMaybeMessage<::grafeas::v1beta1::vulnerability::PackageIssue>(Arena*);
template<> ::grafeas::v1beta1::vulnerability::Vulnerability* Arena::CreateMaybeMessage<::grafeas::v1beta1::vulnerability::Vulnerability>(Arena*);
template<> ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* Arena::CreateMaybeMessage<::grafeas::v1beta1::vulnerability::VulnerabilityLocation>(Arena*);
template<> ::grafeas::v1beta1::vulnerability::Vulnerability_Detail* Arena::CreateMaybeMessage<::grafeas::v1beta1::vulnerability::Vulnerability_Detail>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace grafeas {
namespace v1beta1 {
namespace vulnerability {

enum Severity {
  SEVERITY_UNSPECIFIED = 0,
  MINIMAL = 1,
  LOW = 2,
  MEDIUM = 3,
  HIGH = 4,
  CRITICAL = 5,
  Severity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Severity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Severity_IsValid(int value);
const Severity Severity_MIN = SEVERITY_UNSPECIFIED;
const Severity Severity_MAX = CRITICAL;
const int Severity_ARRAYSIZE = Severity_MAX + 1;

const ::google::protobuf::EnumDescriptor* Severity_descriptor();
inline const ::std::string& Severity_Name(Severity value) {
  return ::google::protobuf::internal::NameOfEnum(
    Severity_descriptor(), value);
}
inline bool Severity_Parse(
    const ::std::string& name, Severity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Severity>(
    Severity_descriptor(), name, value);
}
// ===================================================================

class Vulnerability_Detail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.vulnerability.Vulnerability.Detail) */ {
 public:
  Vulnerability_Detail();
  virtual ~Vulnerability_Detail();

  Vulnerability_Detail(const Vulnerability_Detail& from);

  inline Vulnerability_Detail& operator=(const Vulnerability_Detail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vulnerability_Detail(Vulnerability_Detail&& from) noexcept
    : Vulnerability_Detail() {
    *this = ::std::move(from);
  }

  inline Vulnerability_Detail& operator=(Vulnerability_Detail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vulnerability_Detail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vulnerability_Detail* internal_default_instance() {
    return reinterpret_cast<const Vulnerability_Detail*>(
               &_Vulnerability_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vulnerability_Detail* other);
  friend void swap(Vulnerability_Detail& a, Vulnerability_Detail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vulnerability_Detail* New() const final {
    return CreateMaybeMessage<Vulnerability_Detail>(NULL);
  }

  Vulnerability_Detail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vulnerability_Detail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vulnerability_Detail& from);
  void MergeFrom(const Vulnerability_Detail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vulnerability_Detail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpe_uri = 1;
  void clear_cpe_uri();
  static const int kCpeUriFieldNumber = 1;
  const ::std::string& cpe_uri() const;
  void set_cpe_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_cpe_uri(::std::string&& value);
  #endif
  void set_cpe_uri(const char* value);
  void set_cpe_uri(const char* value, size_t size);
  ::std::string* mutable_cpe_uri();
  ::std::string* release_cpe_uri();
  void set_allocated_cpe_uri(::std::string* cpe_uri);

  // string package = 2;
  void clear_package();
  static const int kPackageFieldNumber = 2;
  const ::std::string& package() const;
  void set_package(const ::std::string& value);
  #if LANG_CXX11
  void set_package(::std::string&& value);
  #endif
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  ::std::string* mutable_package();
  ::std::string* release_package();
  void set_allocated_package(::std::string* package);

  // string severity_name = 5;
  void clear_severity_name();
  static const int kSeverityNameFieldNumber = 5;
  const ::std::string& severity_name() const;
  void set_severity_name(const ::std::string& value);
  #if LANG_CXX11
  void set_severity_name(::std::string&& value);
  #endif
  void set_severity_name(const char* value);
  void set_severity_name(const char* value, size_t size);
  ::std::string* mutable_severity_name();
  ::std::string* release_severity_name();
  void set_allocated_severity_name(::std::string* severity_name);

  // string description = 6;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string package_type = 8;
  void clear_package_type();
  static const int kPackageTypeFieldNumber = 8;
  const ::std::string& package_type() const;
  void set_package_type(const ::std::string& value);
  #if LANG_CXX11
  void set_package_type(::std::string&& value);
  #endif
  void set_package_type(const char* value);
  void set_package_type(const char* value, size_t size);
  ::std::string* mutable_package_type();
  ::std::string* release_package_type();
  void set_allocated_package_type(::std::string* package_type);

  // .grafeas.v1beta1.package.Version min_affected_version = 3;
  bool has_min_affected_version() const;
  void clear_min_affected_version();
  static const int kMinAffectedVersionFieldNumber = 3;
  private:
  const ::grafeas::v1beta1::package::Version& _internal_min_affected_version() const;
  public:
  const ::grafeas::v1beta1::package::Version& min_affected_version() const;
  ::grafeas::v1beta1::package::Version* release_min_affected_version();
  ::grafeas::v1beta1::package::Version* mutable_min_affected_version();
  void set_allocated_min_affected_version(::grafeas::v1beta1::package::Version* min_affected_version);

  // .grafeas.v1beta1.package.Version max_affected_version = 4;
  bool has_max_affected_version() const;
  void clear_max_affected_version();
  static const int kMaxAffectedVersionFieldNumber = 4;
  private:
  const ::grafeas::v1beta1::package::Version& _internal_max_affected_version() const;
  public:
  const ::grafeas::v1beta1::package::Version& max_affected_version() const;
  ::grafeas::v1beta1::package::Version* release_max_affected_version();
  ::grafeas::v1beta1::package::Version* mutable_max_affected_version();
  void set_allocated_max_affected_version(::grafeas::v1beta1::package::Version* max_affected_version);

  // .grafeas.v1beta1.vulnerability.VulnerabilityLocation fixed_location = 7;
  bool has_fixed_location() const;
  void clear_fixed_location();
  static const int kFixedLocationFieldNumber = 7;
  private:
  const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& _internal_fixed_location() const;
  public:
  const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& fixed_location() const;
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* release_fixed_location();
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* mutable_fixed_location();
  void set_allocated_fixed_location(::grafeas::v1beta1::vulnerability::VulnerabilityLocation* fixed_location);

  // bool is_obsolete = 9;
  void clear_is_obsolete();
  static const int kIsObsoleteFieldNumber = 9;
  bool is_obsolete() const;
  void set_is_obsolete(bool value);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.vulnerability.Vulnerability.Detail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpe_uri_;
  ::google::protobuf::internal::ArenaStringPtr package_;
  ::google::protobuf::internal::ArenaStringPtr severity_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr package_type_;
  ::grafeas::v1beta1::package::Version* min_affected_version_;
  ::grafeas::v1beta1::package::Version* max_affected_version_;
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* fixed_location_;
  bool is_obsolete_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fvulnerability_2fvulnerability_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vulnerability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.vulnerability.Vulnerability) */ {
 public:
  Vulnerability();
  virtual ~Vulnerability();

  Vulnerability(const Vulnerability& from);

  inline Vulnerability& operator=(const Vulnerability& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vulnerability(Vulnerability&& from) noexcept
    : Vulnerability() {
    *this = ::std::move(from);
  }

  inline Vulnerability& operator=(Vulnerability&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vulnerability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vulnerability* internal_default_instance() {
    return reinterpret_cast<const Vulnerability*>(
               &_Vulnerability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Vulnerability* other);
  friend void swap(Vulnerability& a, Vulnerability& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vulnerability* New() const final {
    return CreateMaybeMessage<Vulnerability>(NULL);
  }

  Vulnerability* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vulnerability>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vulnerability& from);
  void MergeFrom(const Vulnerability& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vulnerability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Vulnerability_Detail Detail;

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.vulnerability.Vulnerability.Detail details = 3;
  int details_size() const;
  void clear_details();
  static const int kDetailsFieldNumber = 3;
  ::grafeas::v1beta1::vulnerability::Vulnerability_Detail* mutable_details(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::vulnerability::Vulnerability_Detail >*
      mutable_details();
  const ::grafeas::v1beta1::vulnerability::Vulnerability_Detail& details(int index) const;
  ::grafeas::v1beta1::vulnerability::Vulnerability_Detail* add_details();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::vulnerability::Vulnerability_Detail >&
      details() const;

  // float cvss_score = 1;
  void clear_cvss_score();
  static const int kCvssScoreFieldNumber = 1;
  float cvss_score() const;
  void set_cvss_score(float value);

  // .grafeas.v1beta1.vulnerability.Severity severity = 2;
  void clear_severity();
  static const int kSeverityFieldNumber = 2;
  ::grafeas::v1beta1::vulnerability::Severity severity() const;
  void set_severity(::grafeas::v1beta1::vulnerability::Severity value);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.vulnerability.Vulnerability)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::vulnerability::Vulnerability_Detail > details_;
  float cvss_score_;
  int severity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fvulnerability_2fvulnerability_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Details : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.vulnerability.Details) */ {
 public:
  Details();
  virtual ~Details();

  Details(const Details& from);

  inline Details& operator=(const Details& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Details(Details&& from) noexcept
    : Details() {
    *this = ::std::move(from);
  }

  inline Details& operator=(Details&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Details& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Details* internal_default_instance() {
    return reinterpret_cast<const Details*>(
               &_Details_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Details* other);
  friend void swap(Details& a, Details& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Details* New() const final {
    return CreateMaybeMessage<Details>(NULL);
  }

  Details* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Details>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Details& from);
  void MergeFrom(const Details& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Details* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.vulnerability.PackageIssue package_issue = 4;
  int package_issue_size() const;
  void clear_package_issue();
  static const int kPackageIssueFieldNumber = 4;
  ::grafeas::v1beta1::vulnerability::PackageIssue* mutable_package_issue(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::vulnerability::PackageIssue >*
      mutable_package_issue();
  const ::grafeas::v1beta1::vulnerability::PackageIssue& package_issue(int index) const;
  ::grafeas::v1beta1::vulnerability::PackageIssue* add_package_issue();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::vulnerability::PackageIssue >&
      package_issue() const;

  // repeated .grafeas.v1beta1.RelatedUrl related_urls = 7;
  int related_urls_size() const;
  void clear_related_urls();
  static const int kRelatedUrlsFieldNumber = 7;
  ::grafeas::v1beta1::RelatedUrl* mutable_related_urls(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::RelatedUrl >*
      mutable_related_urls();
  const ::grafeas::v1beta1::RelatedUrl& related_urls(int index) const;
  ::grafeas::v1beta1::RelatedUrl* add_related_urls();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::RelatedUrl >&
      related_urls() const;

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string short_description = 5;
  void clear_short_description();
  static const int kShortDescriptionFieldNumber = 5;
  const ::std::string& short_description() const;
  void set_short_description(const ::std::string& value);
  #if LANG_CXX11
  void set_short_description(::std::string&& value);
  #endif
  void set_short_description(const char* value);
  void set_short_description(const char* value, size_t size);
  ::std::string* mutable_short_description();
  ::std::string* release_short_description();
  void set_allocated_short_description(::std::string* short_description);

  // string long_description = 6;
  void clear_long_description();
  static const int kLongDescriptionFieldNumber = 6;
  const ::std::string& long_description() const;
  void set_long_description(const ::std::string& value);
  #if LANG_CXX11
  void set_long_description(::std::string&& value);
  #endif
  void set_long_description(const char* value);
  void set_long_description(const char* value, size_t size);
  ::std::string* mutable_long_description();
  ::std::string* release_long_description();
  void set_allocated_long_description(::std::string* long_description);

  // .grafeas.v1beta1.vulnerability.Severity severity = 2;
  void clear_severity();
  static const int kSeverityFieldNumber = 2;
  ::grafeas::v1beta1::vulnerability::Severity severity() const;
  void set_severity(::grafeas::v1beta1::vulnerability::Severity value);

  // float cvss_score = 3;
  void clear_cvss_score();
  static const int kCvssScoreFieldNumber = 3;
  float cvss_score() const;
  void set_cvss_score(float value);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.vulnerability.Details)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::vulnerability::PackageIssue > package_issue_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::RelatedUrl > related_urls_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr short_description_;
  ::google::protobuf::internal::ArenaStringPtr long_description_;
  int severity_;
  float cvss_score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fvulnerability_2fvulnerability_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackageIssue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.vulnerability.PackageIssue) */ {
 public:
  PackageIssue();
  virtual ~PackageIssue();

  PackageIssue(const PackageIssue& from);

  inline PackageIssue& operator=(const PackageIssue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackageIssue(PackageIssue&& from) noexcept
    : PackageIssue() {
    *this = ::std::move(from);
  }

  inline PackageIssue& operator=(PackageIssue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageIssue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageIssue* internal_default_instance() {
    return reinterpret_cast<const PackageIssue*>(
               &_PackageIssue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PackageIssue* other);
  friend void swap(PackageIssue& a, PackageIssue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackageIssue* New() const final {
    return CreateMaybeMessage<PackageIssue>(NULL);
  }

  PackageIssue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackageIssue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackageIssue& from);
  void MergeFrom(const PackageIssue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageIssue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string severity_name = 3;
  void clear_severity_name();
  static const int kSeverityNameFieldNumber = 3;
  const ::std::string& severity_name() const;
  void set_severity_name(const ::std::string& value);
  #if LANG_CXX11
  void set_severity_name(::std::string&& value);
  #endif
  void set_severity_name(const char* value);
  void set_severity_name(const char* value, size_t size);
  ::std::string* mutable_severity_name();
  ::std::string* release_severity_name();
  void set_allocated_severity_name(::std::string* severity_name);

  // .grafeas.v1beta1.vulnerability.VulnerabilityLocation affected_location = 1;
  bool has_affected_location() const;
  void clear_affected_location();
  static const int kAffectedLocationFieldNumber = 1;
  private:
  const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& _internal_affected_location() const;
  public:
  const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& affected_location() const;
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* release_affected_location();
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* mutable_affected_location();
  void set_allocated_affected_location(::grafeas::v1beta1::vulnerability::VulnerabilityLocation* affected_location);

  // .grafeas.v1beta1.vulnerability.VulnerabilityLocation fixed_location = 2;
  bool has_fixed_location() const;
  void clear_fixed_location();
  static const int kFixedLocationFieldNumber = 2;
  private:
  const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& _internal_fixed_location() const;
  public:
  const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& fixed_location() const;
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* release_fixed_location();
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* mutable_fixed_location();
  void set_allocated_fixed_location(::grafeas::v1beta1::vulnerability::VulnerabilityLocation* fixed_location);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.vulnerability.PackageIssue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr severity_name_;
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* affected_location_;
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* fixed_location_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fvulnerability_2fvulnerability_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VulnerabilityLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.vulnerability.VulnerabilityLocation) */ {
 public:
  VulnerabilityLocation();
  virtual ~VulnerabilityLocation();

  VulnerabilityLocation(const VulnerabilityLocation& from);

  inline VulnerabilityLocation& operator=(const VulnerabilityLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VulnerabilityLocation(VulnerabilityLocation&& from) noexcept
    : VulnerabilityLocation() {
    *this = ::std::move(from);
  }

  inline VulnerabilityLocation& operator=(VulnerabilityLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VulnerabilityLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VulnerabilityLocation* internal_default_instance() {
    return reinterpret_cast<const VulnerabilityLocation*>(
               &_VulnerabilityLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(VulnerabilityLocation* other);
  friend void swap(VulnerabilityLocation& a, VulnerabilityLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VulnerabilityLocation* New() const final {
    return CreateMaybeMessage<VulnerabilityLocation>(NULL);
  }

  VulnerabilityLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VulnerabilityLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VulnerabilityLocation& from);
  void MergeFrom(const VulnerabilityLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VulnerabilityLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpe_uri = 1;
  void clear_cpe_uri();
  static const int kCpeUriFieldNumber = 1;
  const ::std::string& cpe_uri() const;
  void set_cpe_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_cpe_uri(::std::string&& value);
  #endif
  void set_cpe_uri(const char* value);
  void set_cpe_uri(const char* value, size_t size);
  ::std::string* mutable_cpe_uri();
  ::std::string* release_cpe_uri();
  void set_allocated_cpe_uri(::std::string* cpe_uri);

  // string package = 2;
  void clear_package();
  static const int kPackageFieldNumber = 2;
  const ::std::string& package() const;
  void set_package(const ::std::string& value);
  #if LANG_CXX11
  void set_package(::std::string&& value);
  #endif
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  ::std::string* mutable_package();
  ::std::string* release_package();
  void set_allocated_package(::std::string* package);

  // .grafeas.v1beta1.package.Version version = 3;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  private:
  const ::grafeas::v1beta1::package::Version& _internal_version() const;
  public:
  const ::grafeas::v1beta1::package::Version& version() const;
  ::grafeas::v1beta1::package::Version* release_version();
  ::grafeas::v1beta1::package::Version* mutable_version();
  void set_allocated_version(::grafeas::v1beta1::package::Version* version);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.vulnerability.VulnerabilityLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpe_uri_;
  ::google::protobuf::internal::ArenaStringPtr package_;
  ::grafeas::v1beta1::package::Version* version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fvulnerability_2fvulnerability_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vulnerability_Detail

// string cpe_uri = 1;
inline void Vulnerability_Detail::clear_cpe_uri() {
  cpe_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vulnerability_Detail::cpe_uri() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.Detail.cpe_uri)
  return cpe_uri_.GetNoArena();
}
inline void Vulnerability_Detail::set_cpe_uri(const ::std::string& value) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Vulnerability.Detail.cpe_uri)
}
#if LANG_CXX11
inline void Vulnerability_Detail::set_cpe_uri(::std::string&& value) {
  
  cpe_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.vulnerability.Vulnerability.Detail.cpe_uri)
}
#endif
inline void Vulnerability_Detail::set_cpe_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.vulnerability.Vulnerability.Detail.cpe_uri)
}
inline void Vulnerability_Detail::set_cpe_uri(const char* value, size_t size) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.vulnerability.Vulnerability.Detail.cpe_uri)
}
inline ::std::string* Vulnerability_Detail::mutable_cpe_uri() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Vulnerability.Detail.cpe_uri)
  return cpe_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vulnerability_Detail::release_cpe_uri() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.Vulnerability.Detail.cpe_uri)
  
  return cpe_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vulnerability_Detail::set_allocated_cpe_uri(::std::string* cpe_uri) {
  if (cpe_uri != NULL) {
    
  } else {
    
  }
  cpe_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpe_uri);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.Vulnerability.Detail.cpe_uri)
}

// string package = 2;
inline void Vulnerability_Detail::clear_package() {
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vulnerability_Detail::package() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package)
  return package_.GetNoArena();
}
inline void Vulnerability_Detail::set_package(const ::std::string& value) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package)
}
#if LANG_CXX11
inline void Vulnerability_Detail::set_package(::std::string&& value) {
  
  package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package)
}
#endif
inline void Vulnerability_Detail::set_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package)
}
inline void Vulnerability_Detail::set_package(const char* value, size_t size) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package)
}
inline ::std::string* Vulnerability_Detail::mutable_package() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package)
  return package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vulnerability_Detail::release_package() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package)
  
  return package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vulnerability_Detail::set_allocated_package(::std::string* package) {
  if (package != NULL) {
    
  } else {
    
  }
  package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package)
}

// .grafeas.v1beta1.package.Version min_affected_version = 3;
inline bool Vulnerability_Detail::has_min_affected_version() const {
  return this != internal_default_instance() && min_affected_version_ != NULL;
}
inline const ::grafeas::v1beta1::package::Version& Vulnerability_Detail::_internal_min_affected_version() const {
  return *min_affected_version_;
}
inline const ::grafeas::v1beta1::package::Version& Vulnerability_Detail::min_affected_version() const {
  const ::grafeas::v1beta1::package::Version* p = min_affected_version_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.Detail.min_affected_version)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::package::Version*>(
      &::grafeas::v1beta1::package::_Version_default_instance_);
}
inline ::grafeas::v1beta1::package::Version* Vulnerability_Detail::release_min_affected_version() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.Vulnerability.Detail.min_affected_version)
  
  ::grafeas::v1beta1::package::Version* temp = min_affected_version_;
  min_affected_version_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::package::Version* Vulnerability_Detail::mutable_min_affected_version() {
  
  if (min_affected_version_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::package::Version>(GetArenaNoVirtual());
    min_affected_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Vulnerability.Detail.min_affected_version)
  return min_affected_version_;
}
inline void Vulnerability_Detail::set_allocated_min_affected_version(::grafeas::v1beta1::package::Version* min_affected_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(min_affected_version_);
  }
  if (min_affected_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min_affected_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_affected_version, submessage_arena);
    }
    
  } else {
    
  }
  min_affected_version_ = min_affected_version;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.Vulnerability.Detail.min_affected_version)
}

// .grafeas.v1beta1.package.Version max_affected_version = 4;
inline bool Vulnerability_Detail::has_max_affected_version() const {
  return this != internal_default_instance() && max_affected_version_ != NULL;
}
inline const ::grafeas::v1beta1::package::Version& Vulnerability_Detail::_internal_max_affected_version() const {
  return *max_affected_version_;
}
inline const ::grafeas::v1beta1::package::Version& Vulnerability_Detail::max_affected_version() const {
  const ::grafeas::v1beta1::package::Version* p = max_affected_version_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.Detail.max_affected_version)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::package::Version*>(
      &::grafeas::v1beta1::package::_Version_default_instance_);
}
inline ::grafeas::v1beta1::package::Version* Vulnerability_Detail::release_max_affected_version() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.Vulnerability.Detail.max_affected_version)
  
  ::grafeas::v1beta1::package::Version* temp = max_affected_version_;
  max_affected_version_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::package::Version* Vulnerability_Detail::mutable_max_affected_version() {
  
  if (max_affected_version_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::package::Version>(GetArenaNoVirtual());
    max_affected_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Vulnerability.Detail.max_affected_version)
  return max_affected_version_;
}
inline void Vulnerability_Detail::set_allocated_max_affected_version(::grafeas::v1beta1::package::Version* max_affected_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_affected_version_);
  }
  if (max_affected_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_affected_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_affected_version, submessage_arena);
    }
    
  } else {
    
  }
  max_affected_version_ = max_affected_version;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.Vulnerability.Detail.max_affected_version)
}

// string severity_name = 5;
inline void Vulnerability_Detail::clear_severity_name() {
  severity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vulnerability_Detail::severity_name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.Detail.severity_name)
  return severity_name_.GetNoArena();
}
inline void Vulnerability_Detail::set_severity_name(const ::std::string& value) {
  
  severity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Vulnerability.Detail.severity_name)
}
#if LANG_CXX11
inline void Vulnerability_Detail::set_severity_name(::std::string&& value) {
  
  severity_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.vulnerability.Vulnerability.Detail.severity_name)
}
#endif
inline void Vulnerability_Detail::set_severity_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  severity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.vulnerability.Vulnerability.Detail.severity_name)
}
inline void Vulnerability_Detail::set_severity_name(const char* value, size_t size) {
  
  severity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.vulnerability.Vulnerability.Detail.severity_name)
}
inline ::std::string* Vulnerability_Detail::mutable_severity_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Vulnerability.Detail.severity_name)
  return severity_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vulnerability_Detail::release_severity_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.Vulnerability.Detail.severity_name)
  
  return severity_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vulnerability_Detail::set_allocated_severity_name(::std::string* severity_name) {
  if (severity_name != NULL) {
    
  } else {
    
  }
  severity_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), severity_name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.Vulnerability.Detail.severity_name)
}

// string description = 6;
inline void Vulnerability_Detail::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vulnerability_Detail::description() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.Detail.description)
  return description_.GetNoArena();
}
inline void Vulnerability_Detail::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Vulnerability.Detail.description)
}
#if LANG_CXX11
inline void Vulnerability_Detail::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.vulnerability.Vulnerability.Detail.description)
}
#endif
inline void Vulnerability_Detail::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.vulnerability.Vulnerability.Detail.description)
}
inline void Vulnerability_Detail::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.vulnerability.Vulnerability.Detail.description)
}
inline ::std::string* Vulnerability_Detail::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Vulnerability.Detail.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vulnerability_Detail::release_description() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.Vulnerability.Detail.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vulnerability_Detail::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.Vulnerability.Detail.description)
}

// .grafeas.v1beta1.vulnerability.VulnerabilityLocation fixed_location = 7;
inline bool Vulnerability_Detail::has_fixed_location() const {
  return this != internal_default_instance() && fixed_location_ != NULL;
}
inline void Vulnerability_Detail::clear_fixed_location() {
  if (GetArenaNoVirtual() == NULL && fixed_location_ != NULL) {
    delete fixed_location_;
  }
  fixed_location_ = NULL;
}
inline const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& Vulnerability_Detail::_internal_fixed_location() const {
  return *fixed_location_;
}
inline const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& Vulnerability_Detail::fixed_location() const {
  const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* p = fixed_location_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.Detail.fixed_location)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation*>(
      &::grafeas::v1beta1::vulnerability::_VulnerabilityLocation_default_instance_);
}
inline ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* Vulnerability_Detail::release_fixed_location() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.Vulnerability.Detail.fixed_location)
  
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* temp = fixed_location_;
  fixed_location_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* Vulnerability_Detail::mutable_fixed_location() {
  
  if (fixed_location_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::vulnerability::VulnerabilityLocation>(GetArenaNoVirtual());
    fixed_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Vulnerability.Detail.fixed_location)
  return fixed_location_;
}
inline void Vulnerability_Detail::set_allocated_fixed_location(::grafeas::v1beta1::vulnerability::VulnerabilityLocation* fixed_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fixed_location_;
  }
  if (fixed_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fixed_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed_location, submessage_arena);
    }
    
  } else {
    
  }
  fixed_location_ = fixed_location;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.Vulnerability.Detail.fixed_location)
}

// string package_type = 8;
inline void Vulnerability_Detail::clear_package_type() {
  package_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vulnerability_Detail::package_type() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package_type)
  return package_type_.GetNoArena();
}
inline void Vulnerability_Detail::set_package_type(const ::std::string& value) {
  
  package_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package_type)
}
#if LANG_CXX11
inline void Vulnerability_Detail::set_package_type(::std::string&& value) {
  
  package_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package_type)
}
#endif
inline void Vulnerability_Detail::set_package_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  package_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package_type)
}
inline void Vulnerability_Detail::set_package_type(const char* value, size_t size) {
  
  package_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package_type)
}
inline ::std::string* Vulnerability_Detail::mutable_package_type() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package_type)
  return package_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vulnerability_Detail::release_package_type() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package_type)
  
  return package_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vulnerability_Detail::set_allocated_package_type(::std::string* package_type) {
  if (package_type != NULL) {
    
  } else {
    
  }
  package_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_type);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.Vulnerability.Detail.package_type)
}

// bool is_obsolete = 9;
inline void Vulnerability_Detail::clear_is_obsolete() {
  is_obsolete_ = false;
}
inline bool Vulnerability_Detail::is_obsolete() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.Detail.is_obsolete)
  return is_obsolete_;
}
inline void Vulnerability_Detail::set_is_obsolete(bool value) {
  
  is_obsolete_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Vulnerability.Detail.is_obsolete)
}

// -------------------------------------------------------------------

// Vulnerability

// float cvss_score = 1;
inline void Vulnerability::clear_cvss_score() {
  cvss_score_ = 0;
}
inline float Vulnerability::cvss_score() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.cvss_score)
  return cvss_score_;
}
inline void Vulnerability::set_cvss_score(float value) {
  
  cvss_score_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Vulnerability.cvss_score)
}

// .grafeas.v1beta1.vulnerability.Severity severity = 2;
inline void Vulnerability::clear_severity() {
  severity_ = 0;
}
inline ::grafeas::v1beta1::vulnerability::Severity Vulnerability::severity() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.severity)
  return static_cast< ::grafeas::v1beta1::vulnerability::Severity >(severity_);
}
inline void Vulnerability::set_severity(::grafeas::v1beta1::vulnerability::Severity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Vulnerability.severity)
}

// repeated .grafeas.v1beta1.vulnerability.Vulnerability.Detail details = 3;
inline int Vulnerability::details_size() const {
  return details_.size();
}
inline void Vulnerability::clear_details() {
  details_.Clear();
}
inline ::grafeas::v1beta1::vulnerability::Vulnerability_Detail* Vulnerability::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Vulnerability.details)
  return details_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::vulnerability::Vulnerability_Detail >*
Vulnerability::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.vulnerability.Vulnerability.details)
  return &details_;
}
inline const ::grafeas::v1beta1::vulnerability::Vulnerability_Detail& Vulnerability::details(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Vulnerability.details)
  return details_.Get(index);
}
inline ::grafeas::v1beta1::vulnerability::Vulnerability_Detail* Vulnerability::add_details() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.vulnerability.Vulnerability.details)
  return details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::vulnerability::Vulnerability_Detail >&
Vulnerability::details() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.vulnerability.Vulnerability.details)
  return details_;
}

// -------------------------------------------------------------------

// Details

// string type = 1;
inline void Details::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Details::type() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Details.type)
  return type_.GetNoArena();
}
inline void Details::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Details.type)
}
#if LANG_CXX11
inline void Details::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.vulnerability.Details.type)
}
#endif
inline void Details::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.vulnerability.Details.type)
}
inline void Details::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.vulnerability.Details.type)
}
inline ::std::string* Details::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Details.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Details::release_type() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.Details.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Details::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.Details.type)
}

// .grafeas.v1beta1.vulnerability.Severity severity = 2;
inline void Details::clear_severity() {
  severity_ = 0;
}
inline ::grafeas::v1beta1::vulnerability::Severity Details::severity() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Details.severity)
  return static_cast< ::grafeas::v1beta1::vulnerability::Severity >(severity_);
}
inline void Details::set_severity(::grafeas::v1beta1::vulnerability::Severity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Details.severity)
}

// float cvss_score = 3;
inline void Details::clear_cvss_score() {
  cvss_score_ = 0;
}
inline float Details::cvss_score() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Details.cvss_score)
  return cvss_score_;
}
inline void Details::set_cvss_score(float value) {
  
  cvss_score_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Details.cvss_score)
}

// repeated .grafeas.v1beta1.vulnerability.PackageIssue package_issue = 4;
inline int Details::package_issue_size() const {
  return package_issue_.size();
}
inline void Details::clear_package_issue() {
  package_issue_.Clear();
}
inline ::grafeas::v1beta1::vulnerability::PackageIssue* Details::mutable_package_issue(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Details.package_issue)
  return package_issue_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::vulnerability::PackageIssue >*
Details::mutable_package_issue() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.vulnerability.Details.package_issue)
  return &package_issue_;
}
inline const ::grafeas::v1beta1::vulnerability::PackageIssue& Details::package_issue(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Details.package_issue)
  return package_issue_.Get(index);
}
inline ::grafeas::v1beta1::vulnerability::PackageIssue* Details::add_package_issue() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.vulnerability.Details.package_issue)
  return package_issue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::vulnerability::PackageIssue >&
Details::package_issue() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.vulnerability.Details.package_issue)
  return package_issue_;
}

// string short_description = 5;
inline void Details::clear_short_description() {
  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Details::short_description() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Details.short_description)
  return short_description_.GetNoArena();
}
inline void Details::set_short_description(const ::std::string& value) {
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Details.short_description)
}
#if LANG_CXX11
inline void Details::set_short_description(::std::string&& value) {
  
  short_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.vulnerability.Details.short_description)
}
#endif
inline void Details::set_short_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.vulnerability.Details.short_description)
}
inline void Details::set_short_description(const char* value, size_t size) {
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.vulnerability.Details.short_description)
}
inline ::std::string* Details::mutable_short_description() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Details.short_description)
  return short_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Details::release_short_description() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.Details.short_description)
  
  return short_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Details::set_allocated_short_description(::std::string* short_description) {
  if (short_description != NULL) {
    
  } else {
    
  }
  short_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_description);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.Details.short_description)
}

// string long_description = 6;
inline void Details::clear_long_description() {
  long_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Details::long_description() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Details.long_description)
  return long_description_.GetNoArena();
}
inline void Details::set_long_description(const ::std::string& value) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.Details.long_description)
}
#if LANG_CXX11
inline void Details::set_long_description(::std::string&& value) {
  
  long_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.vulnerability.Details.long_description)
}
#endif
inline void Details::set_long_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.vulnerability.Details.long_description)
}
inline void Details::set_long_description(const char* value, size_t size) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.vulnerability.Details.long_description)
}
inline ::std::string* Details::mutable_long_description() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Details.long_description)
  return long_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Details::release_long_description() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.Details.long_description)
  
  return long_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Details::set_allocated_long_description(::std::string* long_description) {
  if (long_description != NULL) {
    
  } else {
    
  }
  long_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), long_description);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.Details.long_description)
}

// repeated .grafeas.v1beta1.RelatedUrl related_urls = 7;
inline int Details::related_urls_size() const {
  return related_urls_.size();
}
inline ::grafeas::v1beta1::RelatedUrl* Details::mutable_related_urls(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.Details.related_urls)
  return related_urls_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::RelatedUrl >*
Details::mutable_related_urls() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.vulnerability.Details.related_urls)
  return &related_urls_;
}
inline const ::grafeas::v1beta1::RelatedUrl& Details::related_urls(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.Details.related_urls)
  return related_urls_.Get(index);
}
inline ::grafeas::v1beta1::RelatedUrl* Details::add_related_urls() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.vulnerability.Details.related_urls)
  return related_urls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::RelatedUrl >&
Details::related_urls() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.vulnerability.Details.related_urls)
  return related_urls_;
}

// -------------------------------------------------------------------

// PackageIssue

// .grafeas.v1beta1.vulnerability.VulnerabilityLocation affected_location = 1;
inline bool PackageIssue::has_affected_location() const {
  return this != internal_default_instance() && affected_location_ != NULL;
}
inline void PackageIssue::clear_affected_location() {
  if (GetArenaNoVirtual() == NULL && affected_location_ != NULL) {
    delete affected_location_;
  }
  affected_location_ = NULL;
}
inline const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& PackageIssue::_internal_affected_location() const {
  return *affected_location_;
}
inline const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& PackageIssue::affected_location() const {
  const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* p = affected_location_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.PackageIssue.affected_location)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation*>(
      &::grafeas::v1beta1::vulnerability::_VulnerabilityLocation_default_instance_);
}
inline ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* PackageIssue::release_affected_location() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.PackageIssue.affected_location)
  
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* temp = affected_location_;
  affected_location_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* PackageIssue::mutable_affected_location() {
  
  if (affected_location_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::vulnerability::VulnerabilityLocation>(GetArenaNoVirtual());
    affected_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.PackageIssue.affected_location)
  return affected_location_;
}
inline void PackageIssue::set_allocated_affected_location(::grafeas::v1beta1::vulnerability::VulnerabilityLocation* affected_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete affected_location_;
  }
  if (affected_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      affected_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, affected_location, submessage_arena);
    }
    
  } else {
    
  }
  affected_location_ = affected_location;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.PackageIssue.affected_location)
}

// .grafeas.v1beta1.vulnerability.VulnerabilityLocation fixed_location = 2;
inline bool PackageIssue::has_fixed_location() const {
  return this != internal_default_instance() && fixed_location_ != NULL;
}
inline void PackageIssue::clear_fixed_location() {
  if (GetArenaNoVirtual() == NULL && fixed_location_ != NULL) {
    delete fixed_location_;
  }
  fixed_location_ = NULL;
}
inline const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& PackageIssue::_internal_fixed_location() const {
  return *fixed_location_;
}
inline const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation& PackageIssue::fixed_location() const {
  const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* p = fixed_location_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.PackageIssue.fixed_location)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::vulnerability::VulnerabilityLocation*>(
      &::grafeas::v1beta1::vulnerability::_VulnerabilityLocation_default_instance_);
}
inline ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* PackageIssue::release_fixed_location() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.PackageIssue.fixed_location)
  
  ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* temp = fixed_location_;
  fixed_location_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::vulnerability::VulnerabilityLocation* PackageIssue::mutable_fixed_location() {
  
  if (fixed_location_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::vulnerability::VulnerabilityLocation>(GetArenaNoVirtual());
    fixed_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.PackageIssue.fixed_location)
  return fixed_location_;
}
inline void PackageIssue::set_allocated_fixed_location(::grafeas::v1beta1::vulnerability::VulnerabilityLocation* fixed_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fixed_location_;
  }
  if (fixed_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fixed_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed_location, submessage_arena);
    }
    
  } else {
    
  }
  fixed_location_ = fixed_location;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.PackageIssue.fixed_location)
}

// string severity_name = 3;
inline void PackageIssue::clear_severity_name() {
  severity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageIssue::severity_name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.PackageIssue.severity_name)
  return severity_name_.GetNoArena();
}
inline void PackageIssue::set_severity_name(const ::std::string& value) {
  
  severity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.PackageIssue.severity_name)
}
#if LANG_CXX11
inline void PackageIssue::set_severity_name(::std::string&& value) {
  
  severity_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.vulnerability.PackageIssue.severity_name)
}
#endif
inline void PackageIssue::set_severity_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  severity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.vulnerability.PackageIssue.severity_name)
}
inline void PackageIssue::set_severity_name(const char* value, size_t size) {
  
  severity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.vulnerability.PackageIssue.severity_name)
}
inline ::std::string* PackageIssue::mutable_severity_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.PackageIssue.severity_name)
  return severity_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageIssue::release_severity_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.PackageIssue.severity_name)
  
  return severity_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageIssue::set_allocated_severity_name(::std::string* severity_name) {
  if (severity_name != NULL) {
    
  } else {
    
  }
  severity_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), severity_name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.PackageIssue.severity_name)
}

// -------------------------------------------------------------------

// VulnerabilityLocation

// string cpe_uri = 1;
inline void VulnerabilityLocation::clear_cpe_uri() {
  cpe_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VulnerabilityLocation::cpe_uri() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.VulnerabilityLocation.cpe_uri)
  return cpe_uri_.GetNoArena();
}
inline void VulnerabilityLocation::set_cpe_uri(const ::std::string& value) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.VulnerabilityLocation.cpe_uri)
}
#if LANG_CXX11
inline void VulnerabilityLocation::set_cpe_uri(::std::string&& value) {
  
  cpe_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.vulnerability.VulnerabilityLocation.cpe_uri)
}
#endif
inline void VulnerabilityLocation::set_cpe_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.vulnerability.VulnerabilityLocation.cpe_uri)
}
inline void VulnerabilityLocation::set_cpe_uri(const char* value, size_t size) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.vulnerability.VulnerabilityLocation.cpe_uri)
}
inline ::std::string* VulnerabilityLocation::mutable_cpe_uri() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.VulnerabilityLocation.cpe_uri)
  return cpe_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VulnerabilityLocation::release_cpe_uri() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.VulnerabilityLocation.cpe_uri)
  
  return cpe_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VulnerabilityLocation::set_allocated_cpe_uri(::std::string* cpe_uri) {
  if (cpe_uri != NULL) {
    
  } else {
    
  }
  cpe_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpe_uri);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.VulnerabilityLocation.cpe_uri)
}

// string package = 2;
inline void VulnerabilityLocation::clear_package() {
  package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VulnerabilityLocation::package() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.VulnerabilityLocation.package)
  return package_.GetNoArena();
}
inline void VulnerabilityLocation::set_package(const ::std::string& value) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.vulnerability.VulnerabilityLocation.package)
}
#if LANG_CXX11
inline void VulnerabilityLocation::set_package(::std::string&& value) {
  
  package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.vulnerability.VulnerabilityLocation.package)
}
#endif
inline void VulnerabilityLocation::set_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.vulnerability.VulnerabilityLocation.package)
}
inline void VulnerabilityLocation::set_package(const char* value, size_t size) {
  
  package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.vulnerability.VulnerabilityLocation.package)
}
inline ::std::string* VulnerabilityLocation::mutable_package() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.VulnerabilityLocation.package)
  return package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VulnerabilityLocation::release_package() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.VulnerabilityLocation.package)
  
  return package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VulnerabilityLocation::set_allocated_package(::std::string* package) {
  if (package != NULL) {
    
  } else {
    
  }
  package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.VulnerabilityLocation.package)
}

// .grafeas.v1beta1.package.Version version = 3;
inline bool VulnerabilityLocation::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline const ::grafeas::v1beta1::package::Version& VulnerabilityLocation::_internal_version() const {
  return *version_;
}
inline const ::grafeas::v1beta1::package::Version& VulnerabilityLocation::version() const {
  const ::grafeas::v1beta1::package::Version* p = version_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.vulnerability.VulnerabilityLocation.version)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::package::Version*>(
      &::grafeas::v1beta1::package::_Version_default_instance_);
}
inline ::grafeas::v1beta1::package::Version* VulnerabilityLocation::release_version() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.vulnerability.VulnerabilityLocation.version)
  
  ::grafeas::v1beta1::package::Version* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::package::Version* VulnerabilityLocation::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::package::Version>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.vulnerability.VulnerabilityLocation.version)
  return version_;
}
inline void VulnerabilityLocation::set_allocated_version(::grafeas::v1beta1::package::Version* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(version_);
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.vulnerability.VulnerabilityLocation.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vulnerability
}  // namespace v1beta1
}  // namespace grafeas

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::grafeas::v1beta1::vulnerability::Severity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grafeas::v1beta1::vulnerability::Severity>() {
  return ::grafeas::v1beta1::vulnerability::Severity_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fvulnerability_2fvulnerability_2eproto
