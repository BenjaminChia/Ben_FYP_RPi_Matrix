// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1beta1/image/image.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fimage_2fimage_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fimage_2fimage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fimage_2fimage_2eproto 

namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fimage_2fimage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fimage_2fimage_2eproto
namespace grafeas {
namespace v1beta1 {
namespace image {
class Basis;
class BasisDefaultTypeInternal;
extern BasisDefaultTypeInternal _Basis_default_instance_;
class Derived;
class DerivedDefaultTypeInternal;
extern DerivedDefaultTypeInternal _Derived_default_instance_;
class Details;
class DetailsDefaultTypeInternal;
extern DetailsDefaultTypeInternal _Details_default_instance_;
class Fingerprint;
class FingerprintDefaultTypeInternal;
extern FingerprintDefaultTypeInternal _Fingerprint_default_instance_;
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
}  // namespace image
}  // namespace v1beta1
}  // namespace grafeas
namespace google {
namespace protobuf {
template<> ::grafeas::v1beta1::image::Basis* Arena::CreateMaybeMessage<::grafeas::v1beta1::image::Basis>(Arena*);
template<> ::grafeas::v1beta1::image::Derived* Arena::CreateMaybeMessage<::grafeas::v1beta1::image::Derived>(Arena*);
template<> ::grafeas::v1beta1::image::Details* Arena::CreateMaybeMessage<::grafeas::v1beta1::image::Details>(Arena*);
template<> ::grafeas::v1beta1::image::Fingerprint* Arena::CreateMaybeMessage<::grafeas::v1beta1::image::Fingerprint>(Arena*);
template<> ::grafeas::v1beta1::image::Layer* Arena::CreateMaybeMessage<::grafeas::v1beta1::image::Layer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace grafeas {
namespace v1beta1 {
namespace image {

enum Layer_Directive {
  Layer_Directive_DIRECTIVE_UNSPECIFIED = 0,
  Layer_Directive_MAINTAINER = 1,
  Layer_Directive_RUN = 2,
  Layer_Directive_CMD = 3,
  Layer_Directive_LABEL = 4,
  Layer_Directive_EXPOSE = 5,
  Layer_Directive_ENV = 6,
  Layer_Directive_ADD = 7,
  Layer_Directive_COPY = 8,
  Layer_Directive_ENTRYPOINT = 9,
  Layer_Directive_VOLUME = 10,
  Layer_Directive_USER = 11,
  Layer_Directive_WORKDIR = 12,
  Layer_Directive_ARG = 13,
  Layer_Directive_ONBUILD = 14,
  Layer_Directive_STOPSIGNAL = 15,
  Layer_Directive_HEALTHCHECK = 16,
  Layer_Directive_SHELL = 17,
  Layer_Directive_Layer_Directive_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Layer_Directive_Layer_Directive_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Layer_Directive_IsValid(int value);
const Layer_Directive Layer_Directive_Directive_MIN = Layer_Directive_DIRECTIVE_UNSPECIFIED;
const Layer_Directive Layer_Directive_Directive_MAX = Layer_Directive_SHELL;
const int Layer_Directive_Directive_ARRAYSIZE = Layer_Directive_Directive_MAX + 1;

const ::google::protobuf::EnumDescriptor* Layer_Directive_descriptor();
inline const ::std::string& Layer_Directive_Name(Layer_Directive value) {
  return ::google::protobuf::internal::NameOfEnum(
    Layer_Directive_descriptor(), value);
}
inline bool Layer_Directive_Parse(
    const ::std::string& name, Layer_Directive* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Layer_Directive>(
    Layer_Directive_descriptor(), name, value);
}
// ===================================================================

class Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.image.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Layer* other);
  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Layer* New() const final {
    return CreateMaybeMessage<Layer>(NULL);
  }

  Layer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Layer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Layer_Directive Directive;
  static const Directive DIRECTIVE_UNSPECIFIED =
    Layer_Directive_DIRECTIVE_UNSPECIFIED;
  static const Directive MAINTAINER =
    Layer_Directive_MAINTAINER;
  static const Directive RUN =
    Layer_Directive_RUN;
  static const Directive CMD =
    Layer_Directive_CMD;
  static const Directive LABEL =
    Layer_Directive_LABEL;
  static const Directive EXPOSE =
    Layer_Directive_EXPOSE;
  static const Directive ENV =
    Layer_Directive_ENV;
  static const Directive ADD =
    Layer_Directive_ADD;
  static const Directive COPY =
    Layer_Directive_COPY;
  static const Directive ENTRYPOINT =
    Layer_Directive_ENTRYPOINT;
  static const Directive VOLUME =
    Layer_Directive_VOLUME;
  static const Directive USER =
    Layer_Directive_USER;
  static const Directive WORKDIR =
    Layer_Directive_WORKDIR;
  static const Directive ARG =
    Layer_Directive_ARG;
  static const Directive ONBUILD =
    Layer_Directive_ONBUILD;
  static const Directive STOPSIGNAL =
    Layer_Directive_STOPSIGNAL;
  static const Directive HEALTHCHECK =
    Layer_Directive_HEALTHCHECK;
  static const Directive SHELL =
    Layer_Directive_SHELL;
  static inline bool Directive_IsValid(int value) {
    return Layer_Directive_IsValid(value);
  }
  static const Directive Directive_MIN =
    Layer_Directive_Directive_MIN;
  static const Directive Directive_MAX =
    Layer_Directive_Directive_MAX;
  static const int Directive_ARRAYSIZE =
    Layer_Directive_Directive_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Directive_descriptor() {
    return Layer_Directive_descriptor();
  }
  static inline const ::std::string& Directive_Name(Directive value) {
    return Layer_Directive_Name(value);
  }
  static inline bool Directive_Parse(const ::std::string& name,
      Directive* value) {
    return Layer_Directive_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string arguments = 2;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 2;
  const ::std::string& arguments() const;
  void set_arguments(const ::std::string& value);
  #if LANG_CXX11
  void set_arguments(::std::string&& value);
  #endif
  void set_arguments(const char* value);
  void set_arguments(const char* value, size_t size);
  ::std::string* mutable_arguments();
  ::std::string* release_arguments();
  void set_allocated_arguments(::std::string* arguments);

  // .grafeas.v1beta1.image.Layer.Directive directive = 1;
  void clear_directive();
  static const int kDirectiveFieldNumber = 1;
  ::grafeas::v1beta1::image::Layer_Directive directive() const;
  void set_directive(::grafeas::v1beta1::image::Layer_Directive value);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.image.Layer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr arguments_;
  int directive_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fimage_2fimage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Fingerprint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.image.Fingerprint) */ {
 public:
  Fingerprint();
  virtual ~Fingerprint();

  Fingerprint(const Fingerprint& from);

  inline Fingerprint& operator=(const Fingerprint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fingerprint(Fingerprint&& from) noexcept
    : Fingerprint() {
    *this = ::std::move(from);
  }

  inline Fingerprint& operator=(Fingerprint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Fingerprint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fingerprint* internal_default_instance() {
    return reinterpret_cast<const Fingerprint*>(
               &_Fingerprint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Fingerprint* other);
  friend void swap(Fingerprint& a, Fingerprint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fingerprint* New() const final {
    return CreateMaybeMessage<Fingerprint>(NULL);
  }

  Fingerprint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Fingerprint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Fingerprint& from);
  void MergeFrom(const Fingerprint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fingerprint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string v2_blob = 2;
  int v2_blob_size() const;
  void clear_v2_blob();
  static const int kV2BlobFieldNumber = 2;
  const ::std::string& v2_blob(int index) const;
  ::std::string* mutable_v2_blob(int index);
  void set_v2_blob(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_v2_blob(int index, ::std::string&& value);
  #endif
  void set_v2_blob(int index, const char* value);
  void set_v2_blob(int index, const char* value, size_t size);
  ::std::string* add_v2_blob();
  void add_v2_blob(const ::std::string& value);
  #if LANG_CXX11
  void add_v2_blob(::std::string&& value);
  #endif
  void add_v2_blob(const char* value);
  void add_v2_blob(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& v2_blob() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_v2_blob();

  // string v1_name = 1;
  void clear_v1_name();
  static const int kV1NameFieldNumber = 1;
  const ::std::string& v1_name() const;
  void set_v1_name(const ::std::string& value);
  #if LANG_CXX11
  void set_v1_name(::std::string&& value);
  #endif
  void set_v1_name(const char* value);
  void set_v1_name(const char* value, size_t size);
  ::std::string* mutable_v1_name();
  ::std::string* release_v1_name();
  void set_allocated_v1_name(::std::string* v1_name);

  // string v2_name = 3;
  void clear_v2_name();
  static const int kV2NameFieldNumber = 3;
  const ::std::string& v2_name() const;
  void set_v2_name(const ::std::string& value);
  #if LANG_CXX11
  void set_v2_name(::std::string&& value);
  #endif
  void set_v2_name(const char* value);
  void set_v2_name(const char* value, size_t size);
  ::std::string* mutable_v2_name();
  ::std::string* release_v2_name();
  void set_allocated_v2_name(::std::string* v2_name);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.image.Fingerprint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> v2_blob_;
  ::google::protobuf::internal::ArenaStringPtr v1_name_;
  ::google::protobuf::internal::ArenaStringPtr v2_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fimage_2fimage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Basis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.image.Basis) */ {
 public:
  Basis();
  virtual ~Basis();

  Basis(const Basis& from);

  inline Basis& operator=(const Basis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Basis(Basis&& from) noexcept
    : Basis() {
    *this = ::std::move(from);
  }

  inline Basis& operator=(Basis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Basis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Basis* internal_default_instance() {
    return reinterpret_cast<const Basis*>(
               &_Basis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Basis* other);
  friend void swap(Basis& a, Basis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Basis* New() const final {
    return CreateMaybeMessage<Basis>(NULL);
  }

  Basis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Basis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Basis& from);
  void MergeFrom(const Basis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string resource_url = 1;
  void clear_resource_url();
  static const int kResourceUrlFieldNumber = 1;
  const ::std::string& resource_url() const;
  void set_resource_url(const ::std::string& value);
  #if LANG_CXX11
  void set_resource_url(::std::string&& value);
  #endif
  void set_resource_url(const char* value);
  void set_resource_url(const char* value, size_t size);
  ::std::string* mutable_resource_url();
  ::std::string* release_resource_url();
  void set_allocated_resource_url(::std::string* resource_url);

  // .grafeas.v1beta1.image.Fingerprint fingerprint = 2;
  bool has_fingerprint() const;
  void clear_fingerprint();
  static const int kFingerprintFieldNumber = 2;
  private:
  const ::grafeas::v1beta1::image::Fingerprint& _internal_fingerprint() const;
  public:
  const ::grafeas::v1beta1::image::Fingerprint& fingerprint() const;
  ::grafeas::v1beta1::image::Fingerprint* release_fingerprint();
  ::grafeas::v1beta1::image::Fingerprint* mutable_fingerprint();
  void set_allocated_fingerprint(::grafeas::v1beta1::image::Fingerprint* fingerprint);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.image.Basis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr resource_url_;
  ::grafeas::v1beta1::image::Fingerprint* fingerprint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fimage_2fimage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Details : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.image.Details) */ {
 public:
  Details();
  virtual ~Details();

  Details(const Details& from);

  inline Details& operator=(const Details& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Details(Details&& from) noexcept
    : Details() {
    *this = ::std::move(from);
  }

  inline Details& operator=(Details&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Details& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Details* internal_default_instance() {
    return reinterpret_cast<const Details*>(
               &_Details_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Details* other);
  friend void swap(Details& a, Details& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Details* New() const final {
    return CreateMaybeMessage<Details>(NULL);
  }

  Details* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Details>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Details& from);
  void MergeFrom(const Details& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Details* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grafeas.v1beta1.image.Derived derived_image = 1;
  bool has_derived_image() const;
  void clear_derived_image();
  static const int kDerivedImageFieldNumber = 1;
  private:
  const ::grafeas::v1beta1::image::Derived& _internal_derived_image() const;
  public:
  const ::grafeas::v1beta1::image::Derived& derived_image() const;
  ::grafeas::v1beta1::image::Derived* release_derived_image();
  ::grafeas::v1beta1::image::Derived* mutable_derived_image();
  void set_allocated_derived_image(::grafeas::v1beta1::image::Derived* derived_image);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.image.Details)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grafeas::v1beta1::image::Derived* derived_image_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fimage_2fimage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Derived : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.image.Derived) */ {
 public:
  Derived();
  virtual ~Derived();

  Derived(const Derived& from);

  inline Derived& operator=(const Derived& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Derived(Derived&& from) noexcept
    : Derived() {
    *this = ::std::move(from);
  }

  inline Derived& operator=(Derived&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Derived& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Derived* internal_default_instance() {
    return reinterpret_cast<const Derived*>(
               &_Derived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Derived* other);
  friend void swap(Derived& a, Derived& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Derived* New() const final {
    return CreateMaybeMessage<Derived>(NULL);
  }

  Derived* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Derived>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Derived& from);
  void MergeFrom(const Derived& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Derived* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.image.Layer layer_info = 3;
  int layer_info_size() const;
  void clear_layer_info();
  static const int kLayerInfoFieldNumber = 3;
  ::grafeas::v1beta1::image::Layer* mutable_layer_info(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::image::Layer >*
      mutable_layer_info();
  const ::grafeas::v1beta1::image::Layer& layer_info(int index) const;
  ::grafeas::v1beta1::image::Layer* add_layer_info();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::image::Layer >&
      layer_info() const;

  // string base_resource_url = 4;
  void clear_base_resource_url();
  static const int kBaseResourceUrlFieldNumber = 4;
  const ::std::string& base_resource_url() const;
  void set_base_resource_url(const ::std::string& value);
  #if LANG_CXX11
  void set_base_resource_url(::std::string&& value);
  #endif
  void set_base_resource_url(const char* value);
  void set_base_resource_url(const char* value, size_t size);
  ::std::string* mutable_base_resource_url();
  ::std::string* release_base_resource_url();
  void set_allocated_base_resource_url(::std::string* base_resource_url);

  // .grafeas.v1beta1.image.Fingerprint fingerprint = 1;
  bool has_fingerprint() const;
  void clear_fingerprint();
  static const int kFingerprintFieldNumber = 1;
  private:
  const ::grafeas::v1beta1::image::Fingerprint& _internal_fingerprint() const;
  public:
  const ::grafeas::v1beta1::image::Fingerprint& fingerprint() const;
  ::grafeas::v1beta1::image::Fingerprint* release_fingerprint();
  ::grafeas::v1beta1::image::Fingerprint* mutable_fingerprint();
  void set_allocated_fingerprint(::grafeas::v1beta1::image::Fingerprint* fingerprint);

  // int32 distance = 2;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  ::google::protobuf::int32 distance() const;
  void set_distance(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.image.Derived)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::image::Layer > layer_info_;
  ::google::protobuf::internal::ArenaStringPtr base_resource_url_;
  ::grafeas::v1beta1::image::Fingerprint* fingerprint_;
  ::google::protobuf::int32 distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fimage_2fimage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Layer

// .grafeas.v1beta1.image.Layer.Directive directive = 1;
inline void Layer::clear_directive() {
  directive_ = 0;
}
inline ::grafeas::v1beta1::image::Layer_Directive Layer::directive() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Layer.directive)
  return static_cast< ::grafeas::v1beta1::image::Layer_Directive >(directive_);
}
inline void Layer::set_directive(::grafeas::v1beta1::image::Layer_Directive value) {
  
  directive_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.image.Layer.directive)
}

// string arguments = 2;
inline void Layer::clear_arguments() {
  arguments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Layer::arguments() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Layer.arguments)
  return arguments_.GetNoArena();
}
inline void Layer::set_arguments(const ::std::string& value) {
  
  arguments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.image.Layer.arguments)
}
#if LANG_CXX11
inline void Layer::set_arguments(::std::string&& value) {
  
  arguments_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.image.Layer.arguments)
}
#endif
inline void Layer::set_arguments(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  arguments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.image.Layer.arguments)
}
inline void Layer::set_arguments(const char* value, size_t size) {
  
  arguments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.image.Layer.arguments)
}
inline ::std::string* Layer::mutable_arguments() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.image.Layer.arguments)
  return arguments_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Layer::release_arguments() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.image.Layer.arguments)
  
  return arguments_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Layer::set_allocated_arguments(::std::string* arguments) {
  if (arguments != NULL) {
    
  } else {
    
  }
  arguments_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arguments);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.image.Layer.arguments)
}

// -------------------------------------------------------------------

// Fingerprint

// string v1_name = 1;
inline void Fingerprint::clear_v1_name() {
  v1_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fingerprint::v1_name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Fingerprint.v1_name)
  return v1_name_.GetNoArena();
}
inline void Fingerprint::set_v1_name(const ::std::string& value) {
  
  v1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.image.Fingerprint.v1_name)
}
#if LANG_CXX11
inline void Fingerprint::set_v1_name(::std::string&& value) {
  
  v1_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.image.Fingerprint.v1_name)
}
#endif
inline void Fingerprint::set_v1_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  v1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.image.Fingerprint.v1_name)
}
inline void Fingerprint::set_v1_name(const char* value, size_t size) {
  
  v1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.image.Fingerprint.v1_name)
}
inline ::std::string* Fingerprint::mutable_v1_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.image.Fingerprint.v1_name)
  return v1_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fingerprint::release_v1_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.image.Fingerprint.v1_name)
  
  return v1_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fingerprint::set_allocated_v1_name(::std::string* v1_name) {
  if (v1_name != NULL) {
    
  } else {
    
  }
  v1_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v1_name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.image.Fingerprint.v1_name)
}

// repeated string v2_blob = 2;
inline int Fingerprint::v2_blob_size() const {
  return v2_blob_.size();
}
inline void Fingerprint::clear_v2_blob() {
  v2_blob_.Clear();
}
inline const ::std::string& Fingerprint::v2_blob(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Fingerprint.v2_blob)
  return v2_blob_.Get(index);
}
inline ::std::string* Fingerprint::mutable_v2_blob(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.image.Fingerprint.v2_blob)
  return v2_blob_.Mutable(index);
}
inline void Fingerprint::set_v2_blob(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.image.Fingerprint.v2_blob)
  v2_blob_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Fingerprint::set_v2_blob(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.image.Fingerprint.v2_blob)
  v2_blob_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Fingerprint::set_v2_blob(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  v2_blob_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.image.Fingerprint.v2_blob)
}
inline void Fingerprint::set_v2_blob(int index, const char* value, size_t size) {
  v2_blob_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.image.Fingerprint.v2_blob)
}
inline ::std::string* Fingerprint::add_v2_blob() {
  // @@protoc_insertion_point(field_add_mutable:grafeas.v1beta1.image.Fingerprint.v2_blob)
  return v2_blob_.Add();
}
inline void Fingerprint::add_v2_blob(const ::std::string& value) {
  v2_blob_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.image.Fingerprint.v2_blob)
}
#if LANG_CXX11
inline void Fingerprint::add_v2_blob(::std::string&& value) {
  v2_blob_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.image.Fingerprint.v2_blob)
}
#endif
inline void Fingerprint::add_v2_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  v2_blob_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grafeas.v1beta1.image.Fingerprint.v2_blob)
}
inline void Fingerprint::add_v2_blob(const char* value, size_t size) {
  v2_blob_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grafeas.v1beta1.image.Fingerprint.v2_blob)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Fingerprint::v2_blob() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.image.Fingerprint.v2_blob)
  return v2_blob_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Fingerprint::mutable_v2_blob() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.image.Fingerprint.v2_blob)
  return &v2_blob_;
}

// string v2_name = 3;
inline void Fingerprint::clear_v2_name() {
  v2_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fingerprint::v2_name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Fingerprint.v2_name)
  return v2_name_.GetNoArena();
}
inline void Fingerprint::set_v2_name(const ::std::string& value) {
  
  v2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.image.Fingerprint.v2_name)
}
#if LANG_CXX11
inline void Fingerprint::set_v2_name(::std::string&& value) {
  
  v2_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.image.Fingerprint.v2_name)
}
#endif
inline void Fingerprint::set_v2_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  v2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.image.Fingerprint.v2_name)
}
inline void Fingerprint::set_v2_name(const char* value, size_t size) {
  
  v2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.image.Fingerprint.v2_name)
}
inline ::std::string* Fingerprint::mutable_v2_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.image.Fingerprint.v2_name)
  return v2_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fingerprint::release_v2_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.image.Fingerprint.v2_name)
  
  return v2_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fingerprint::set_allocated_v2_name(::std::string* v2_name) {
  if (v2_name != NULL) {
    
  } else {
    
  }
  v2_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v2_name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.image.Fingerprint.v2_name)
}

// -------------------------------------------------------------------

// Basis

// string resource_url = 1;
inline void Basis::clear_resource_url() {
  resource_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Basis::resource_url() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Basis.resource_url)
  return resource_url_.GetNoArena();
}
inline void Basis::set_resource_url(const ::std::string& value) {
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.image.Basis.resource_url)
}
#if LANG_CXX11
inline void Basis::set_resource_url(::std::string&& value) {
  
  resource_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.image.Basis.resource_url)
}
#endif
inline void Basis::set_resource_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.image.Basis.resource_url)
}
inline void Basis::set_resource_url(const char* value, size_t size) {
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.image.Basis.resource_url)
}
inline ::std::string* Basis::mutable_resource_url() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.image.Basis.resource_url)
  return resource_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Basis::release_resource_url() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.image.Basis.resource_url)
  
  return resource_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Basis::set_allocated_resource_url(::std::string* resource_url) {
  if (resource_url != NULL) {
    
  } else {
    
  }
  resource_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_url);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.image.Basis.resource_url)
}

// .grafeas.v1beta1.image.Fingerprint fingerprint = 2;
inline bool Basis::has_fingerprint() const {
  return this != internal_default_instance() && fingerprint_ != NULL;
}
inline void Basis::clear_fingerprint() {
  if (GetArenaNoVirtual() == NULL && fingerprint_ != NULL) {
    delete fingerprint_;
  }
  fingerprint_ = NULL;
}
inline const ::grafeas::v1beta1::image::Fingerprint& Basis::_internal_fingerprint() const {
  return *fingerprint_;
}
inline const ::grafeas::v1beta1::image::Fingerprint& Basis::fingerprint() const {
  const ::grafeas::v1beta1::image::Fingerprint* p = fingerprint_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Basis.fingerprint)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::image::Fingerprint*>(
      &::grafeas::v1beta1::image::_Fingerprint_default_instance_);
}
inline ::grafeas::v1beta1::image::Fingerprint* Basis::release_fingerprint() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.image.Basis.fingerprint)
  
  ::grafeas::v1beta1::image::Fingerprint* temp = fingerprint_;
  fingerprint_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::image::Fingerprint* Basis::mutable_fingerprint() {
  
  if (fingerprint_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::image::Fingerprint>(GetArenaNoVirtual());
    fingerprint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.image.Basis.fingerprint)
  return fingerprint_;
}
inline void Basis::set_allocated_fingerprint(::grafeas::v1beta1::image::Fingerprint* fingerprint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fingerprint_;
  }
  if (fingerprint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fingerprint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fingerprint, submessage_arena);
    }
    
  } else {
    
  }
  fingerprint_ = fingerprint;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.image.Basis.fingerprint)
}

// -------------------------------------------------------------------

// Details

// .grafeas.v1beta1.image.Derived derived_image = 1;
inline bool Details::has_derived_image() const {
  return this != internal_default_instance() && derived_image_ != NULL;
}
inline void Details::clear_derived_image() {
  if (GetArenaNoVirtual() == NULL && derived_image_ != NULL) {
    delete derived_image_;
  }
  derived_image_ = NULL;
}
inline const ::grafeas::v1beta1::image::Derived& Details::_internal_derived_image() const {
  return *derived_image_;
}
inline const ::grafeas::v1beta1::image::Derived& Details::derived_image() const {
  const ::grafeas::v1beta1::image::Derived* p = derived_image_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Details.derived_image)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::image::Derived*>(
      &::grafeas::v1beta1::image::_Derived_default_instance_);
}
inline ::grafeas::v1beta1::image::Derived* Details::release_derived_image() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.image.Details.derived_image)
  
  ::grafeas::v1beta1::image::Derived* temp = derived_image_;
  derived_image_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::image::Derived* Details::mutable_derived_image() {
  
  if (derived_image_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::image::Derived>(GetArenaNoVirtual());
    derived_image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.image.Details.derived_image)
  return derived_image_;
}
inline void Details::set_allocated_derived_image(::grafeas::v1beta1::image::Derived* derived_image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete derived_image_;
  }
  if (derived_image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      derived_image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, derived_image, submessage_arena);
    }
    
  } else {
    
  }
  derived_image_ = derived_image;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.image.Details.derived_image)
}

// -------------------------------------------------------------------

// Derived

// .grafeas.v1beta1.image.Fingerprint fingerprint = 1;
inline bool Derived::has_fingerprint() const {
  return this != internal_default_instance() && fingerprint_ != NULL;
}
inline void Derived::clear_fingerprint() {
  if (GetArenaNoVirtual() == NULL && fingerprint_ != NULL) {
    delete fingerprint_;
  }
  fingerprint_ = NULL;
}
inline const ::grafeas::v1beta1::image::Fingerprint& Derived::_internal_fingerprint() const {
  return *fingerprint_;
}
inline const ::grafeas::v1beta1::image::Fingerprint& Derived::fingerprint() const {
  const ::grafeas::v1beta1::image::Fingerprint* p = fingerprint_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Derived.fingerprint)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::image::Fingerprint*>(
      &::grafeas::v1beta1::image::_Fingerprint_default_instance_);
}
inline ::grafeas::v1beta1::image::Fingerprint* Derived::release_fingerprint() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.image.Derived.fingerprint)
  
  ::grafeas::v1beta1::image::Fingerprint* temp = fingerprint_;
  fingerprint_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::image::Fingerprint* Derived::mutable_fingerprint() {
  
  if (fingerprint_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::image::Fingerprint>(GetArenaNoVirtual());
    fingerprint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.image.Derived.fingerprint)
  return fingerprint_;
}
inline void Derived::set_allocated_fingerprint(::grafeas::v1beta1::image::Fingerprint* fingerprint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fingerprint_;
  }
  if (fingerprint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fingerprint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fingerprint, submessage_arena);
    }
    
  } else {
    
  }
  fingerprint_ = fingerprint;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.image.Derived.fingerprint)
}

// int32 distance = 2;
inline void Derived::clear_distance() {
  distance_ = 0;
}
inline ::google::protobuf::int32 Derived::distance() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Derived.distance)
  return distance_;
}
inline void Derived::set_distance(::google::protobuf::int32 value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.image.Derived.distance)
}

// repeated .grafeas.v1beta1.image.Layer layer_info = 3;
inline int Derived::layer_info_size() const {
  return layer_info_.size();
}
inline void Derived::clear_layer_info() {
  layer_info_.Clear();
}
inline ::grafeas::v1beta1::image::Layer* Derived::mutable_layer_info(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.image.Derived.layer_info)
  return layer_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::image::Layer >*
Derived::mutable_layer_info() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.image.Derived.layer_info)
  return &layer_info_;
}
inline const ::grafeas::v1beta1::image::Layer& Derived::layer_info(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Derived.layer_info)
  return layer_info_.Get(index);
}
inline ::grafeas::v1beta1::image::Layer* Derived::add_layer_info() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.image.Derived.layer_info)
  return layer_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::image::Layer >&
Derived::layer_info() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.image.Derived.layer_info)
  return layer_info_;
}

// string base_resource_url = 4;
inline void Derived::clear_base_resource_url() {
  base_resource_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Derived::base_resource_url() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.image.Derived.base_resource_url)
  return base_resource_url_.GetNoArena();
}
inline void Derived::set_base_resource_url(const ::std::string& value) {
  
  base_resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.image.Derived.base_resource_url)
}
#if LANG_CXX11
inline void Derived::set_base_resource_url(::std::string&& value) {
  
  base_resource_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.image.Derived.base_resource_url)
}
#endif
inline void Derived::set_base_resource_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  base_resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.image.Derived.base_resource_url)
}
inline void Derived::set_base_resource_url(const char* value, size_t size) {
  
  base_resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.image.Derived.base_resource_url)
}
inline ::std::string* Derived::mutable_base_resource_url() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.image.Derived.base_resource_url)
  return base_resource_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Derived::release_base_resource_url() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.image.Derived.base_resource_url)
  
  return base_resource_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Derived::set_allocated_base_resource_url(::std::string* base_resource_url) {
  if (base_resource_url != NULL) {
    
  } else {
    
  }
  base_resource_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_resource_url);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.image.Derived.base_resource_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace image
}  // namespace v1beta1
}  // namespace grafeas

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::grafeas::v1beta1::image::Layer_Directive> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grafeas::v1beta1::image::Layer_Directive>() {
  return ::grafeas::v1beta1::image::Layer_Directive_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fimage_2fimage_2eproto
