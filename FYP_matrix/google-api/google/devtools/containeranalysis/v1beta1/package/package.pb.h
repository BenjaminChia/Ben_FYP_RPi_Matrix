// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1beta1/package/package.proto

#ifndef PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto
#define PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto 

namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto
namespace grafeas {
namespace v1beta1 {
namespace package {
class Details;
class DetailsDefaultTypeInternal;
extern DetailsDefaultTypeInternal _Details_default_instance_;
class Distribution;
class DistributionDefaultTypeInternal;
extern DistributionDefaultTypeInternal _Distribution_default_instance_;
class Installation;
class InstallationDefaultTypeInternal;
extern InstallationDefaultTypeInternal _Installation_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Package;
class PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class Version;
class VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace package
}  // namespace v1beta1
}  // namespace grafeas
namespace google {
namespace protobuf {
template<> ::grafeas::v1beta1::package::Details* Arena::CreateMaybeMessage<::grafeas::v1beta1::package::Details>(Arena*);
template<> ::grafeas::v1beta1::package::Distribution* Arena::CreateMaybeMessage<::grafeas::v1beta1::package::Distribution>(Arena*);
template<> ::grafeas::v1beta1::package::Installation* Arena::CreateMaybeMessage<::grafeas::v1beta1::package::Installation>(Arena*);
template<> ::grafeas::v1beta1::package::Location* Arena::CreateMaybeMessage<::grafeas::v1beta1::package::Location>(Arena*);
template<> ::grafeas::v1beta1::package::Package* Arena::CreateMaybeMessage<::grafeas::v1beta1::package::Package>(Arena*);
template<> ::grafeas::v1beta1::package::Version* Arena::CreateMaybeMessage<::grafeas::v1beta1::package::Version>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace grafeas {
namespace v1beta1 {
namespace package {

enum Version_VersionKind {
  Version_VersionKind_VERSION_KIND_UNSPECIFIED = 0,
  Version_VersionKind_NORMAL = 1,
  Version_VersionKind_MINIMUM = 2,
  Version_VersionKind_MAXIMUM = 3,
  Version_VersionKind_Version_VersionKind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Version_VersionKind_Version_VersionKind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Version_VersionKind_IsValid(int value);
const Version_VersionKind Version_VersionKind_VersionKind_MIN = Version_VersionKind_VERSION_KIND_UNSPECIFIED;
const Version_VersionKind Version_VersionKind_VersionKind_MAX = Version_VersionKind_MAXIMUM;
const int Version_VersionKind_VersionKind_ARRAYSIZE = Version_VersionKind_VersionKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Version_VersionKind_descriptor();
inline const ::std::string& Version_VersionKind_Name(Version_VersionKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Version_VersionKind_descriptor(), value);
}
inline bool Version_VersionKind_Parse(
    const ::std::string& name, Version_VersionKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Version_VersionKind>(
    Version_VersionKind_descriptor(), name, value);
}
enum Architecture {
  ARCHITECTURE_UNSPECIFIED = 0,
  X86 = 1,
  X64 = 2,
  Architecture_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Architecture_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Architecture_IsValid(int value);
const Architecture Architecture_MIN = ARCHITECTURE_UNSPECIFIED;
const Architecture Architecture_MAX = X64;
const int Architecture_ARRAYSIZE = Architecture_MAX + 1;

const ::google::protobuf::EnumDescriptor* Architecture_descriptor();
inline const ::std::string& Architecture_Name(Architecture value) {
  return ::google::protobuf::internal::NameOfEnum(
    Architecture_descriptor(), value);
}
inline bool Architecture_Parse(
    const ::std::string& name, Architecture* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Architecture>(
    Architecture_descriptor(), name, value);
}
// ===================================================================

class Distribution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.package.Distribution) */ {
 public:
  Distribution();
  virtual ~Distribution();

  Distribution(const Distribution& from);

  inline Distribution& operator=(const Distribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Distribution(Distribution&& from) noexcept
    : Distribution() {
    *this = ::std::move(from);
  }

  inline Distribution& operator=(Distribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Distribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Distribution* internal_default_instance() {
    return reinterpret_cast<const Distribution*>(
               &_Distribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Distribution* other);
  friend void swap(Distribution& a, Distribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Distribution* New() const final {
    return CreateMaybeMessage<Distribution>(NULL);
  }

  Distribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Distribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Distribution& from);
  void MergeFrom(const Distribution& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpe_uri = 1;
  void clear_cpe_uri();
  static const int kCpeUriFieldNumber = 1;
  const ::std::string& cpe_uri() const;
  void set_cpe_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_cpe_uri(::std::string&& value);
  #endif
  void set_cpe_uri(const char* value);
  void set_cpe_uri(const char* value, size_t size);
  ::std::string* mutable_cpe_uri();
  ::std::string* release_cpe_uri();
  void set_allocated_cpe_uri(::std::string* cpe_uri);

  // string maintainer = 4;
  void clear_maintainer();
  static const int kMaintainerFieldNumber = 4;
  const ::std::string& maintainer() const;
  void set_maintainer(const ::std::string& value);
  #if LANG_CXX11
  void set_maintainer(::std::string&& value);
  #endif
  void set_maintainer(const char* value);
  void set_maintainer(const char* value, size_t size);
  ::std::string* mutable_maintainer();
  ::std::string* release_maintainer();
  void set_allocated_maintainer(::std::string* maintainer);

  // string url = 5;
  void clear_url();
  static const int kUrlFieldNumber = 5;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string description = 6;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .grafeas.v1beta1.package.Version latest_version = 3;
  bool has_latest_version() const;
  void clear_latest_version();
  static const int kLatestVersionFieldNumber = 3;
  private:
  const ::grafeas::v1beta1::package::Version& _internal_latest_version() const;
  public:
  const ::grafeas::v1beta1::package::Version& latest_version() const;
  ::grafeas::v1beta1::package::Version* release_latest_version();
  ::grafeas::v1beta1::package::Version* mutable_latest_version();
  void set_allocated_latest_version(::grafeas::v1beta1::package::Version* latest_version);

  // .grafeas.v1beta1.package.Architecture architecture = 2;
  void clear_architecture();
  static const int kArchitectureFieldNumber = 2;
  ::grafeas::v1beta1::package::Architecture architecture() const;
  void set_architecture(::grafeas::v1beta1::package::Architecture value);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.package.Distribution)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpe_uri_;
  ::google::protobuf::internal::ArenaStringPtr maintainer_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::grafeas::v1beta1::package::Version* latest_version_;
  int architecture_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.package.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Location* other);
  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(NULL);
  }

  Location* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpe_uri = 1;
  void clear_cpe_uri();
  static const int kCpeUriFieldNumber = 1;
  const ::std::string& cpe_uri() const;
  void set_cpe_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_cpe_uri(::std::string&& value);
  #endif
  void set_cpe_uri(const char* value);
  void set_cpe_uri(const char* value, size_t size);
  ::std::string* mutable_cpe_uri();
  ::std::string* release_cpe_uri();
  void set_allocated_cpe_uri(::std::string* cpe_uri);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .grafeas.v1beta1.package.Version version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  private:
  const ::grafeas::v1beta1::package::Version& _internal_version() const;
  public:
  const ::grafeas::v1beta1::package::Version& version() const;
  ::grafeas::v1beta1::package::Version* release_version();
  ::grafeas::v1beta1::package::Version* mutable_version();
  void set_allocated_version(::grafeas::v1beta1::package::Version* version);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.package.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpe_uri_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::grafeas::v1beta1::package::Version* version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Package : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.package.Package) */ {
 public:
  Package();
  virtual ~Package();

  Package(const Package& from);

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(Package&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Package& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Package* other);
  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Package* New() const final {
    return CreateMaybeMessage<Package>(NULL);
  }

  Package* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Package& from);
  void MergeFrom(const Package& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.package.Distribution distribution = 10;
  int distribution_size() const;
  void clear_distribution();
  static const int kDistributionFieldNumber = 10;
  ::grafeas::v1beta1::package::Distribution* mutable_distribution(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::package::Distribution >*
      mutable_distribution();
  const ::grafeas::v1beta1::package::Distribution& distribution(int index) const;
  ::grafeas::v1beta1::package::Distribution* add_distribution();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::package::Distribution >&
      distribution() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.package.Package)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::package::Distribution > distribution_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Details : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.package.Details) */ {
 public:
  Details();
  virtual ~Details();

  Details(const Details& from);

  inline Details& operator=(const Details& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Details(Details&& from) noexcept
    : Details() {
    *this = ::std::move(from);
  }

  inline Details& operator=(Details&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Details& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Details* internal_default_instance() {
    return reinterpret_cast<const Details*>(
               &_Details_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Details* other);
  friend void swap(Details& a, Details& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Details* New() const final {
    return CreateMaybeMessage<Details>(NULL);
  }

  Details* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Details>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Details& from);
  void MergeFrom(const Details& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Details* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grafeas.v1beta1.package.Installation installation = 1;
  bool has_installation() const;
  void clear_installation();
  static const int kInstallationFieldNumber = 1;
  private:
  const ::grafeas::v1beta1::package::Installation& _internal_installation() const;
  public:
  const ::grafeas::v1beta1::package::Installation& installation() const;
  ::grafeas::v1beta1::package::Installation* release_installation();
  ::grafeas::v1beta1::package::Installation* mutable_installation();
  void set_allocated_installation(::grafeas::v1beta1::package::Installation* installation);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.package.Details)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grafeas::v1beta1::package::Installation* installation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Installation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.package.Installation) */ {
 public:
  Installation();
  virtual ~Installation();

  Installation(const Installation& from);

  inline Installation& operator=(const Installation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Installation(Installation&& from) noexcept
    : Installation() {
    *this = ::std::move(from);
  }

  inline Installation& operator=(Installation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Installation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Installation* internal_default_instance() {
    return reinterpret_cast<const Installation*>(
               &_Installation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Installation* other);
  friend void swap(Installation& a, Installation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Installation* New() const final {
    return CreateMaybeMessage<Installation>(NULL);
  }

  Installation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Installation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Installation& from);
  void MergeFrom(const Installation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Installation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grafeas.v1beta1.package.Location location = 2;
  int location_size() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  ::grafeas::v1beta1::package::Location* mutable_location(int index);
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::package::Location >*
      mutable_location();
  const ::grafeas::v1beta1::package::Location& location(int index) const;
  ::grafeas::v1beta1::package::Location* add_location();
  const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::package::Location >&
      location() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.package.Installation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::package::Location > location_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Version : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grafeas.v1beta1.package.Version) */ {
 public:
  Version();
  virtual ~Version();

  Version(const Version& from);

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(Version&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Version& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Version* other);
  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Version* New() const final {
    return CreateMaybeMessage<Version>(NULL);
  }

  Version* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Version_VersionKind VersionKind;
  static const VersionKind VERSION_KIND_UNSPECIFIED =
    Version_VersionKind_VERSION_KIND_UNSPECIFIED;
  static const VersionKind NORMAL =
    Version_VersionKind_NORMAL;
  static const VersionKind MINIMUM =
    Version_VersionKind_MINIMUM;
  static const VersionKind MAXIMUM =
    Version_VersionKind_MAXIMUM;
  static inline bool VersionKind_IsValid(int value) {
    return Version_VersionKind_IsValid(value);
  }
  static const VersionKind VersionKind_MIN =
    Version_VersionKind_VersionKind_MIN;
  static const VersionKind VersionKind_MAX =
    Version_VersionKind_VersionKind_MAX;
  static const int VersionKind_ARRAYSIZE =
    Version_VersionKind_VersionKind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VersionKind_descriptor() {
    return Version_VersionKind_descriptor();
  }
  static inline const ::std::string& VersionKind_Name(VersionKind value) {
    return Version_VersionKind_Name(value);
  }
  static inline bool VersionKind_Parse(const ::std::string& name,
      VersionKind* value) {
    return Version_VersionKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string revision = 3;
  void clear_revision();
  static const int kRevisionFieldNumber = 3;
  const ::std::string& revision() const;
  void set_revision(const ::std::string& value);
  #if LANG_CXX11
  void set_revision(::std::string&& value);
  #endif
  void set_revision(const char* value);
  void set_revision(const char* value, size_t size);
  ::std::string* mutable_revision();
  ::std::string* release_revision();
  void set_allocated_revision(::std::string* revision);

  // int32 epoch = 1;
  void clear_epoch();
  static const int kEpochFieldNumber = 1;
  ::google::protobuf::int32 epoch() const;
  void set_epoch(::google::protobuf::int32 value);

  // .grafeas.v1beta1.package.Version.VersionKind kind = 4;
  void clear_kind();
  static const int kKindFieldNumber = 4;
  ::grafeas::v1beta1::package::Version_VersionKind kind() const;
  void set_kind(::grafeas::v1beta1::package::Version_VersionKind value);

  // @@protoc_insertion_point(class_scope:grafeas.v1beta1.package.Version)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr revision_;
  ::google::protobuf::int32 epoch_;
  int kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Distribution

// string cpe_uri = 1;
inline void Distribution::clear_cpe_uri() {
  cpe_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Distribution::cpe_uri() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Distribution.cpe_uri)
  return cpe_uri_.GetNoArena();
}
inline void Distribution::set_cpe_uri(const ::std::string& value) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Distribution.cpe_uri)
}
#if LANG_CXX11
inline void Distribution::set_cpe_uri(::std::string&& value) {
  
  cpe_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.package.Distribution.cpe_uri)
}
#endif
inline void Distribution::set_cpe_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.package.Distribution.cpe_uri)
}
inline void Distribution::set_cpe_uri(const char* value, size_t size) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.package.Distribution.cpe_uri)
}
inline ::std::string* Distribution::mutable_cpe_uri() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Distribution.cpe_uri)
  return cpe_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Distribution::release_cpe_uri() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Distribution.cpe_uri)
  
  return cpe_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Distribution::set_allocated_cpe_uri(::std::string* cpe_uri) {
  if (cpe_uri != NULL) {
    
  } else {
    
  }
  cpe_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpe_uri);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Distribution.cpe_uri)
}

// .grafeas.v1beta1.package.Architecture architecture = 2;
inline void Distribution::clear_architecture() {
  architecture_ = 0;
}
inline ::grafeas::v1beta1::package::Architecture Distribution::architecture() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Distribution.architecture)
  return static_cast< ::grafeas::v1beta1::package::Architecture >(architecture_);
}
inline void Distribution::set_architecture(::grafeas::v1beta1::package::Architecture value) {
  
  architecture_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Distribution.architecture)
}

// .grafeas.v1beta1.package.Version latest_version = 3;
inline bool Distribution::has_latest_version() const {
  return this != internal_default_instance() && latest_version_ != NULL;
}
inline void Distribution::clear_latest_version() {
  if (GetArenaNoVirtual() == NULL && latest_version_ != NULL) {
    delete latest_version_;
  }
  latest_version_ = NULL;
}
inline const ::grafeas::v1beta1::package::Version& Distribution::_internal_latest_version() const {
  return *latest_version_;
}
inline const ::grafeas::v1beta1::package::Version& Distribution::latest_version() const {
  const ::grafeas::v1beta1::package::Version* p = latest_version_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Distribution.latest_version)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::package::Version*>(
      &::grafeas::v1beta1::package::_Version_default_instance_);
}
inline ::grafeas::v1beta1::package::Version* Distribution::release_latest_version() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Distribution.latest_version)
  
  ::grafeas::v1beta1::package::Version* temp = latest_version_;
  latest_version_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::package::Version* Distribution::mutable_latest_version() {
  
  if (latest_version_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::package::Version>(GetArenaNoVirtual());
    latest_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Distribution.latest_version)
  return latest_version_;
}
inline void Distribution::set_allocated_latest_version(::grafeas::v1beta1::package::Version* latest_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete latest_version_;
  }
  if (latest_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      latest_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latest_version, submessage_arena);
    }
    
  } else {
    
  }
  latest_version_ = latest_version;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Distribution.latest_version)
}

// string maintainer = 4;
inline void Distribution::clear_maintainer() {
  maintainer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Distribution::maintainer() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Distribution.maintainer)
  return maintainer_.GetNoArena();
}
inline void Distribution::set_maintainer(const ::std::string& value) {
  
  maintainer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Distribution.maintainer)
}
#if LANG_CXX11
inline void Distribution::set_maintainer(::std::string&& value) {
  
  maintainer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.package.Distribution.maintainer)
}
#endif
inline void Distribution::set_maintainer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  maintainer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.package.Distribution.maintainer)
}
inline void Distribution::set_maintainer(const char* value, size_t size) {
  
  maintainer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.package.Distribution.maintainer)
}
inline ::std::string* Distribution::mutable_maintainer() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Distribution.maintainer)
  return maintainer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Distribution::release_maintainer() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Distribution.maintainer)
  
  return maintainer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Distribution::set_allocated_maintainer(::std::string* maintainer) {
  if (maintainer != NULL) {
    
  } else {
    
  }
  maintainer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maintainer);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Distribution.maintainer)
}

// string url = 5;
inline void Distribution::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Distribution::url() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Distribution.url)
  return url_.GetNoArena();
}
inline void Distribution::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Distribution.url)
}
#if LANG_CXX11
inline void Distribution::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.package.Distribution.url)
}
#endif
inline void Distribution::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.package.Distribution.url)
}
inline void Distribution::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.package.Distribution.url)
}
inline ::std::string* Distribution::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Distribution.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Distribution::release_url() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Distribution.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Distribution::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Distribution.url)
}

// string description = 6;
inline void Distribution::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Distribution::description() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Distribution.description)
  return description_.GetNoArena();
}
inline void Distribution::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Distribution.description)
}
#if LANG_CXX11
inline void Distribution::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.package.Distribution.description)
}
#endif
inline void Distribution::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.package.Distribution.description)
}
inline void Distribution::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.package.Distribution.description)
}
inline ::std::string* Distribution::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Distribution.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Distribution::release_description() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Distribution.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Distribution::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Distribution.description)
}

// -------------------------------------------------------------------

// Location

// string cpe_uri = 1;
inline void Location::clear_cpe_uri() {
  cpe_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::cpe_uri() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Location.cpe_uri)
  return cpe_uri_.GetNoArena();
}
inline void Location::set_cpe_uri(const ::std::string& value) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Location.cpe_uri)
}
#if LANG_CXX11
inline void Location::set_cpe_uri(::std::string&& value) {
  
  cpe_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.package.Location.cpe_uri)
}
#endif
inline void Location::set_cpe_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.package.Location.cpe_uri)
}
inline void Location::set_cpe_uri(const char* value, size_t size) {
  
  cpe_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.package.Location.cpe_uri)
}
inline ::std::string* Location::mutable_cpe_uri() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Location.cpe_uri)
  return cpe_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_cpe_uri() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Location.cpe_uri)
  
  return cpe_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_cpe_uri(::std::string* cpe_uri) {
  if (cpe_uri != NULL) {
    
  } else {
    
  }
  cpe_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpe_uri);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Location.cpe_uri)
}

// .grafeas.v1beta1.package.Version version = 2;
inline bool Location::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline void Location::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
inline const ::grafeas::v1beta1::package::Version& Location::_internal_version() const {
  return *version_;
}
inline const ::grafeas::v1beta1::package::Version& Location::version() const {
  const ::grafeas::v1beta1::package::Version* p = version_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Location.version)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::package::Version*>(
      &::grafeas::v1beta1::package::_Version_default_instance_);
}
inline ::grafeas::v1beta1::package::Version* Location::release_version() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Location.version)
  
  ::grafeas::v1beta1::package::Version* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::package::Version* Location::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::package::Version>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Location.version)
  return version_;
}
inline void Location::set_allocated_version(::grafeas::v1beta1::package::Version* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete version_;
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Location.version)
}

// string path = 3;
inline void Location::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::path() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Location.path)
  return path_.GetNoArena();
}
inline void Location::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Location.path)
}
#if LANG_CXX11
inline void Location::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.package.Location.path)
}
#endif
inline void Location::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.package.Location.path)
}
inline void Location::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.package.Location.path)
}
inline ::std::string* Location::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Location.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_path() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Location.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Location.path)
}

// -------------------------------------------------------------------

// Package

// string name = 1;
inline void Package::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Package::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Package.name)
  return name_.GetNoArena();
}
inline void Package::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Package.name)
}
#if LANG_CXX11
inline void Package::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.package.Package.name)
}
#endif
inline void Package::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.package.Package.name)
}
inline void Package::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.package.Package.name)
}
inline ::std::string* Package::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Package.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Package::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Package.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Package::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Package.name)
}

// repeated .grafeas.v1beta1.package.Distribution distribution = 10;
inline int Package::distribution_size() const {
  return distribution_.size();
}
inline void Package::clear_distribution() {
  distribution_.Clear();
}
inline ::grafeas::v1beta1::package::Distribution* Package::mutable_distribution(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Package.distribution)
  return distribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::package::Distribution >*
Package::mutable_distribution() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.package.Package.distribution)
  return &distribution_;
}
inline const ::grafeas::v1beta1::package::Distribution& Package::distribution(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Package.distribution)
  return distribution_.Get(index);
}
inline ::grafeas::v1beta1::package::Distribution* Package::add_distribution() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.package.Package.distribution)
  return distribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::package::Distribution >&
Package::distribution() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.package.Package.distribution)
  return distribution_;
}

// -------------------------------------------------------------------

// Details

// .grafeas.v1beta1.package.Installation installation = 1;
inline bool Details::has_installation() const {
  return this != internal_default_instance() && installation_ != NULL;
}
inline void Details::clear_installation() {
  if (GetArenaNoVirtual() == NULL && installation_ != NULL) {
    delete installation_;
  }
  installation_ = NULL;
}
inline const ::grafeas::v1beta1::package::Installation& Details::_internal_installation() const {
  return *installation_;
}
inline const ::grafeas::v1beta1::package::Installation& Details::installation() const {
  const ::grafeas::v1beta1::package::Installation* p = installation_;
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Details.installation)
  return p != NULL ? *p : *reinterpret_cast<const ::grafeas::v1beta1::package::Installation*>(
      &::grafeas::v1beta1::package::_Installation_default_instance_);
}
inline ::grafeas::v1beta1::package::Installation* Details::release_installation() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Details.installation)
  
  ::grafeas::v1beta1::package::Installation* temp = installation_;
  installation_ = NULL;
  return temp;
}
inline ::grafeas::v1beta1::package::Installation* Details::mutable_installation() {
  
  if (installation_ == NULL) {
    auto* p = CreateMaybeMessage<::grafeas::v1beta1::package::Installation>(GetArenaNoVirtual());
    installation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Details.installation)
  return installation_;
}
inline void Details::set_allocated_installation(::grafeas::v1beta1::package::Installation* installation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete installation_;
  }
  if (installation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      installation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, installation, submessage_arena);
    }
    
  } else {
    
  }
  installation_ = installation;
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Details.installation)
}

// -------------------------------------------------------------------

// Installation

// string name = 1;
inline void Installation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Installation::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Installation.name)
  return name_.GetNoArena();
}
inline void Installation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Installation.name)
}
#if LANG_CXX11
inline void Installation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.package.Installation.name)
}
#endif
inline void Installation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.package.Installation.name)
}
inline void Installation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.package.Installation.name)
}
inline ::std::string* Installation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Installation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Installation::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Installation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Installation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Installation.name)
}

// repeated .grafeas.v1beta1.package.Location location = 2;
inline int Installation::location_size() const {
  return location_.size();
}
inline void Installation::clear_location() {
  location_.Clear();
}
inline ::grafeas::v1beta1::package::Location* Installation::mutable_location(int index) {
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Installation.location)
  return location_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::package::Location >*
Installation::mutable_location() {
  // @@protoc_insertion_point(field_mutable_list:grafeas.v1beta1.package.Installation.location)
  return &location_;
}
inline const ::grafeas::v1beta1::package::Location& Installation::location(int index) const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Installation.location)
  return location_.Get(index);
}
inline ::grafeas::v1beta1::package::Location* Installation::add_location() {
  // @@protoc_insertion_point(field_add:grafeas.v1beta1.package.Installation.location)
  return location_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grafeas::v1beta1::package::Location >&
Installation::location() const {
  // @@protoc_insertion_point(field_list:grafeas.v1beta1.package.Installation.location)
  return location_;
}

// -------------------------------------------------------------------

// Version

// int32 epoch = 1;
inline void Version::clear_epoch() {
  epoch_ = 0;
}
inline ::google::protobuf::int32 Version::epoch() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Version.epoch)
  return epoch_;
}
inline void Version::set_epoch(::google::protobuf::int32 value) {
  
  epoch_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Version.epoch)
}

// string name = 2;
inline void Version::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Version::name() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Version.name)
  return name_.GetNoArena();
}
inline void Version::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Version.name)
}
#if LANG_CXX11
inline void Version::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.package.Version.name)
}
#endif
inline void Version::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.package.Version.name)
}
inline void Version::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.package.Version.name)
}
inline ::std::string* Version::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Version.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Version::release_name() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Version.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Version::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Version.name)
}

// string revision = 3;
inline void Version::clear_revision() {
  revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Version::revision() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Version.revision)
  return revision_.GetNoArena();
}
inline void Version::set_revision(const ::std::string& value) {
  
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Version.revision)
}
#if LANG_CXX11
inline void Version::set_revision(::std::string&& value) {
  
  revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grafeas.v1beta1.package.Version.revision)
}
#endif
inline void Version::set_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grafeas.v1beta1.package.Version.revision)
}
inline void Version::set_revision(const char* value, size_t size) {
  
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grafeas.v1beta1.package.Version.revision)
}
inline ::std::string* Version::mutable_revision() {
  
  // @@protoc_insertion_point(field_mutable:grafeas.v1beta1.package.Version.revision)
  return revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Version::release_revision() {
  // @@protoc_insertion_point(field_release:grafeas.v1beta1.package.Version.revision)
  
  return revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Version::set_allocated_revision(::std::string* revision) {
  if (revision != NULL) {
    
  } else {
    
  }
  revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revision);
  // @@protoc_insertion_point(field_set_allocated:grafeas.v1beta1.package.Version.revision)
}

// .grafeas.v1beta1.package.Version.VersionKind kind = 4;
inline void Version::clear_kind() {
  kind_ = 0;
}
inline ::grafeas::v1beta1::package::Version_VersionKind Version::kind() const {
  // @@protoc_insertion_point(field_get:grafeas.v1beta1.package.Version.kind)
  return static_cast< ::grafeas::v1beta1::package::Version_VersionKind >(kind_);
}
inline void Version::set_kind(::grafeas::v1beta1::package::Version_VersionKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:grafeas.v1beta1.package.Version.kind)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace package
}  // namespace v1beta1
}  // namespace grafeas

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::grafeas::v1beta1::package::Version_VersionKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grafeas::v1beta1::package::Version_VersionKind>() {
  return ::grafeas::v1beta1::package::Version_VersionKind_descriptor();
}
template <> struct is_proto_enum< ::grafeas::v1beta1::package::Architecture> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grafeas::v1beta1::package::Architecture>() {
  return ::grafeas::v1beta1::package::Architecture_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fdevtools_2fcontaineranalysis_2fv1beta1_2fpackage_2fpackage_2eproto
