// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/admin/v1beta2/index.proto

#ifndef PROTOBUF_INCLUDED_google_2ffirestore_2fadmin_2fv1beta2_2findex_2eproto
#define PROTOBUF_INCLUDED_google_2ffirestore_2fadmin_2fv1beta2_2findex_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2ffirestore_2fadmin_2fv1beta2_2findex_2eproto 

namespace protobuf_google_2ffirestore_2fadmin_2fv1beta2_2findex_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2ffirestore_2fadmin_2fv1beta2_2findex_2eproto
namespace google {
namespace firestore {
namespace admin {
namespace v1beta2 {
class Index;
class IndexDefaultTypeInternal;
extern IndexDefaultTypeInternal _Index_default_instance_;
class Index_IndexField;
class Index_IndexFieldDefaultTypeInternal;
extern Index_IndexFieldDefaultTypeInternal _Index_IndexField_default_instance_;
}  // namespace v1beta2
}  // namespace admin
}  // namespace firestore
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::firestore::admin::v1beta2::Index* Arena::CreateMaybeMessage<::google::firestore::admin::v1beta2::Index>(Arena*);
template<> ::google::firestore::admin::v1beta2::Index_IndexField* Arena::CreateMaybeMessage<::google::firestore::admin::v1beta2::Index_IndexField>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace firestore {
namespace admin {
namespace v1beta2 {

enum Index_IndexField_Order {
  Index_IndexField_Order_ORDER_UNSPECIFIED = 0,
  Index_IndexField_Order_ASCENDING = 1,
  Index_IndexField_Order_DESCENDING = 2,
  Index_IndexField_Order_Index_IndexField_Order_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Index_IndexField_Order_Index_IndexField_Order_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Index_IndexField_Order_IsValid(int value);
const Index_IndexField_Order Index_IndexField_Order_Order_MIN = Index_IndexField_Order_ORDER_UNSPECIFIED;
const Index_IndexField_Order Index_IndexField_Order_Order_MAX = Index_IndexField_Order_DESCENDING;
const int Index_IndexField_Order_Order_ARRAYSIZE = Index_IndexField_Order_Order_MAX + 1;

const ::google::protobuf::EnumDescriptor* Index_IndexField_Order_descriptor();
inline const ::std::string& Index_IndexField_Order_Name(Index_IndexField_Order value) {
  return ::google::protobuf::internal::NameOfEnum(
    Index_IndexField_Order_descriptor(), value);
}
inline bool Index_IndexField_Order_Parse(
    const ::std::string& name, Index_IndexField_Order* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Index_IndexField_Order>(
    Index_IndexField_Order_descriptor(), name, value);
}
enum Index_IndexField_ArrayConfig {
  Index_IndexField_ArrayConfig_ARRAY_CONFIG_UNSPECIFIED = 0,
  Index_IndexField_ArrayConfig_CONTAINS = 1,
  Index_IndexField_ArrayConfig_Index_IndexField_ArrayConfig_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Index_IndexField_ArrayConfig_Index_IndexField_ArrayConfig_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Index_IndexField_ArrayConfig_IsValid(int value);
const Index_IndexField_ArrayConfig Index_IndexField_ArrayConfig_ArrayConfig_MIN = Index_IndexField_ArrayConfig_ARRAY_CONFIG_UNSPECIFIED;
const Index_IndexField_ArrayConfig Index_IndexField_ArrayConfig_ArrayConfig_MAX = Index_IndexField_ArrayConfig_CONTAINS;
const int Index_IndexField_ArrayConfig_ArrayConfig_ARRAYSIZE = Index_IndexField_ArrayConfig_ArrayConfig_MAX + 1;

const ::google::protobuf::EnumDescriptor* Index_IndexField_ArrayConfig_descriptor();
inline const ::std::string& Index_IndexField_ArrayConfig_Name(Index_IndexField_ArrayConfig value) {
  return ::google::protobuf::internal::NameOfEnum(
    Index_IndexField_ArrayConfig_descriptor(), value);
}
inline bool Index_IndexField_ArrayConfig_Parse(
    const ::std::string& name, Index_IndexField_ArrayConfig* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Index_IndexField_ArrayConfig>(
    Index_IndexField_ArrayConfig_descriptor(), name, value);
}
enum Index_QueryScope {
  Index_QueryScope_QUERY_SCOPE_UNSPECIFIED = 0,
  Index_QueryScope_COLLECTION = 1,
  Index_QueryScope_Index_QueryScope_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Index_QueryScope_Index_QueryScope_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Index_QueryScope_IsValid(int value);
const Index_QueryScope Index_QueryScope_QueryScope_MIN = Index_QueryScope_QUERY_SCOPE_UNSPECIFIED;
const Index_QueryScope Index_QueryScope_QueryScope_MAX = Index_QueryScope_COLLECTION;
const int Index_QueryScope_QueryScope_ARRAYSIZE = Index_QueryScope_QueryScope_MAX + 1;

const ::google::protobuf::EnumDescriptor* Index_QueryScope_descriptor();
inline const ::std::string& Index_QueryScope_Name(Index_QueryScope value) {
  return ::google::protobuf::internal::NameOfEnum(
    Index_QueryScope_descriptor(), value);
}
inline bool Index_QueryScope_Parse(
    const ::std::string& name, Index_QueryScope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Index_QueryScope>(
    Index_QueryScope_descriptor(), name, value);
}
enum Index_State {
  Index_State_STATE_UNSPECIFIED = 0,
  Index_State_CREATING = 1,
  Index_State_READY = 2,
  Index_State_NEEDS_REPAIR = 3,
  Index_State_Index_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Index_State_Index_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Index_State_IsValid(int value);
const Index_State Index_State_State_MIN = Index_State_STATE_UNSPECIFIED;
const Index_State Index_State_State_MAX = Index_State_NEEDS_REPAIR;
const int Index_State_State_ARRAYSIZE = Index_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Index_State_descriptor();
inline const ::std::string& Index_State_Name(Index_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Index_State_descriptor(), value);
}
inline bool Index_State_Parse(
    const ::std::string& name, Index_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Index_State>(
    Index_State_descriptor(), name, value);
}
// ===================================================================

class Index_IndexField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.admin.v1beta2.Index.IndexField) */ {
 public:
  Index_IndexField();
  virtual ~Index_IndexField();

  Index_IndexField(const Index_IndexField& from);

  inline Index_IndexField& operator=(const Index_IndexField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Index_IndexField(Index_IndexField&& from) noexcept
    : Index_IndexField() {
    *this = ::std::move(from);
  }

  inline Index_IndexField& operator=(Index_IndexField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Index_IndexField& default_instance();

  enum ValueModeCase {
    kOrder = 2,
    kArrayConfig = 3,
    VALUE_MODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Index_IndexField* internal_default_instance() {
    return reinterpret_cast<const Index_IndexField*>(
               &_Index_IndexField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Index_IndexField* other);
  friend void swap(Index_IndexField& a, Index_IndexField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Index_IndexField* New() const final {
    return CreateMaybeMessage<Index_IndexField>(NULL);
  }

  Index_IndexField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Index_IndexField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Index_IndexField& from);
  void MergeFrom(const Index_IndexField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Index_IndexField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Index_IndexField_Order Order;
  static const Order ORDER_UNSPECIFIED =
    Index_IndexField_Order_ORDER_UNSPECIFIED;
  static const Order ASCENDING =
    Index_IndexField_Order_ASCENDING;
  static const Order DESCENDING =
    Index_IndexField_Order_DESCENDING;
  static inline bool Order_IsValid(int value) {
    return Index_IndexField_Order_IsValid(value);
  }
  static const Order Order_MIN =
    Index_IndexField_Order_Order_MIN;
  static const Order Order_MAX =
    Index_IndexField_Order_Order_MAX;
  static const int Order_ARRAYSIZE =
    Index_IndexField_Order_Order_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Order_descriptor() {
    return Index_IndexField_Order_descriptor();
  }
  static inline const ::std::string& Order_Name(Order value) {
    return Index_IndexField_Order_Name(value);
  }
  static inline bool Order_Parse(const ::std::string& name,
      Order* value) {
    return Index_IndexField_Order_Parse(name, value);
  }

  typedef Index_IndexField_ArrayConfig ArrayConfig;
  static const ArrayConfig ARRAY_CONFIG_UNSPECIFIED =
    Index_IndexField_ArrayConfig_ARRAY_CONFIG_UNSPECIFIED;
  static const ArrayConfig CONTAINS =
    Index_IndexField_ArrayConfig_CONTAINS;
  static inline bool ArrayConfig_IsValid(int value) {
    return Index_IndexField_ArrayConfig_IsValid(value);
  }
  static const ArrayConfig ArrayConfig_MIN =
    Index_IndexField_ArrayConfig_ArrayConfig_MIN;
  static const ArrayConfig ArrayConfig_MAX =
    Index_IndexField_ArrayConfig_ArrayConfig_MAX;
  static const int ArrayConfig_ARRAYSIZE =
    Index_IndexField_ArrayConfig_ArrayConfig_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ArrayConfig_descriptor() {
    return Index_IndexField_ArrayConfig_descriptor();
  }
  static inline const ::std::string& ArrayConfig_Name(ArrayConfig value) {
    return Index_IndexField_ArrayConfig_Name(value);
  }
  static inline bool ArrayConfig_Parse(const ::std::string& name,
      ArrayConfig* value) {
    return Index_IndexField_ArrayConfig_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string field_path = 1;
  void clear_field_path();
  static const int kFieldPathFieldNumber = 1;
  const ::std::string& field_path() const;
  void set_field_path(const ::std::string& value);
  #if LANG_CXX11
  void set_field_path(::std::string&& value);
  #endif
  void set_field_path(const char* value);
  void set_field_path(const char* value, size_t size);
  ::std::string* mutable_field_path();
  ::std::string* release_field_path();
  void set_allocated_field_path(::std::string* field_path);

  // .google.firestore.admin.v1beta2.Index.IndexField.Order order = 2;
  private:
  bool has_order() const;
  public:
  void clear_order();
  static const int kOrderFieldNumber = 2;
  ::google::firestore::admin::v1beta2::Index_IndexField_Order order() const;
  void set_order(::google::firestore::admin::v1beta2::Index_IndexField_Order value);

  // .google.firestore.admin.v1beta2.Index.IndexField.ArrayConfig array_config = 3;
  private:
  bool has_array_config() const;
  public:
  void clear_array_config();
  static const int kArrayConfigFieldNumber = 3;
  ::google::firestore::admin::v1beta2::Index_IndexField_ArrayConfig array_config() const;
  void set_array_config(::google::firestore::admin::v1beta2::Index_IndexField_ArrayConfig value);

  void clear_value_mode();
  ValueModeCase value_mode_case() const;
  // @@protoc_insertion_point(class_scope:google.firestore.admin.v1beta2.Index.IndexField)
 private:
  void set_has_order();
  void set_has_array_config();

  inline bool has_value_mode() const;
  inline void clear_has_value_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr field_path_;
  union ValueModeUnion {
    ValueModeUnion() {}
    int order_;
    int array_config_;
  } value_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2ffirestore_2fadmin_2fv1beta2_2findex_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Index : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.admin.v1beta2.Index) */ {
 public:
  Index();
  virtual ~Index();

  Index(const Index& from);

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Index(Index&& from) noexcept
    : Index() {
    *this = ::std::move(from);
  }

  inline Index& operator=(Index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Index& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Index* internal_default_instance() {
    return reinterpret_cast<const Index*>(
               &_Index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Index* other);
  friend void swap(Index& a, Index& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Index* New() const final {
    return CreateMaybeMessage<Index>(NULL);
  }

  Index* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Index>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Index_IndexField IndexField;

  typedef Index_QueryScope QueryScope;
  static const QueryScope QUERY_SCOPE_UNSPECIFIED =
    Index_QueryScope_QUERY_SCOPE_UNSPECIFIED;
  static const QueryScope COLLECTION =
    Index_QueryScope_COLLECTION;
  static inline bool QueryScope_IsValid(int value) {
    return Index_QueryScope_IsValid(value);
  }
  static const QueryScope QueryScope_MIN =
    Index_QueryScope_QueryScope_MIN;
  static const QueryScope QueryScope_MAX =
    Index_QueryScope_QueryScope_MAX;
  static const int QueryScope_ARRAYSIZE =
    Index_QueryScope_QueryScope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QueryScope_descriptor() {
    return Index_QueryScope_descriptor();
  }
  static inline const ::std::string& QueryScope_Name(QueryScope value) {
    return Index_QueryScope_Name(value);
  }
  static inline bool QueryScope_Parse(const ::std::string& name,
      QueryScope* value) {
    return Index_QueryScope_Parse(name, value);
  }

  typedef Index_State State;
  static const State STATE_UNSPECIFIED =
    Index_State_STATE_UNSPECIFIED;
  static const State CREATING =
    Index_State_CREATING;
  static const State READY =
    Index_State_READY;
  static const State NEEDS_REPAIR =
    Index_State_NEEDS_REPAIR;
  static inline bool State_IsValid(int value) {
    return Index_State_IsValid(value);
  }
  static const State State_MIN =
    Index_State_State_MIN;
  static const State State_MAX =
    Index_State_State_MAX;
  static const int State_ARRAYSIZE =
    Index_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Index_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Index_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Index_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.firestore.admin.v1beta2.Index.IndexField fields = 3;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 3;
  ::google::firestore::admin::v1beta2::Index_IndexField* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1beta2::Index_IndexField >*
      mutable_fields();
  const ::google::firestore::admin::v1beta2::Index_IndexField& fields(int index) const;
  ::google::firestore::admin::v1beta2::Index_IndexField* add_fields();
  const ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1beta2::Index_IndexField >&
      fields() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.firestore.admin.v1beta2.Index.QueryScope query_scope = 2;
  void clear_query_scope();
  static const int kQueryScopeFieldNumber = 2;
  ::google::firestore::admin::v1beta2::Index_QueryScope query_scope() const;
  void set_query_scope(::google::firestore::admin::v1beta2::Index_QueryScope value);

  // .google.firestore.admin.v1beta2.Index.State state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::firestore::admin::v1beta2::Index_State state() const;
  void set_state(::google::firestore::admin::v1beta2::Index_State value);

  // @@protoc_insertion_point(class_scope:google.firestore.admin.v1beta2.Index)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1beta2::Index_IndexField > fields_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int query_scope_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2ffirestore_2fadmin_2fv1beta2_2findex_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Index_IndexField

// string field_path = 1;
inline void Index_IndexField::clear_field_path() {
  field_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Index_IndexField::field_path() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta2.Index.IndexField.field_path)
  return field_path_.GetNoArena();
}
inline void Index_IndexField::set_field_path(const ::std::string& value) {
  
  field_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1beta2.Index.IndexField.field_path)
}
#if LANG_CXX11
inline void Index_IndexField::set_field_path(::std::string&& value) {
  
  field_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.admin.v1beta2.Index.IndexField.field_path)
}
#endif
inline void Index_IndexField::set_field_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.admin.v1beta2.Index.IndexField.field_path)
}
inline void Index_IndexField::set_field_path(const char* value, size_t size) {
  
  field_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.admin.v1beta2.Index.IndexField.field_path)
}
inline ::std::string* Index_IndexField::mutable_field_path() {
  
  // @@protoc_insertion_point(field_mutable:google.firestore.admin.v1beta2.Index.IndexField.field_path)
  return field_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Index_IndexField::release_field_path() {
  // @@protoc_insertion_point(field_release:google.firestore.admin.v1beta2.Index.IndexField.field_path)
  
  return field_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Index_IndexField::set_allocated_field_path(::std::string* field_path) {
  if (field_path != NULL) {
    
  } else {
    
  }
  field_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_path);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.admin.v1beta2.Index.IndexField.field_path)
}

// .google.firestore.admin.v1beta2.Index.IndexField.Order order = 2;
inline bool Index_IndexField::has_order() const {
  return value_mode_case() == kOrder;
}
inline void Index_IndexField::set_has_order() {
  _oneof_case_[0] = kOrder;
}
inline void Index_IndexField::clear_order() {
  if (has_order()) {
    value_mode_.order_ = 0;
    clear_has_value_mode();
  }
}
inline ::google::firestore::admin::v1beta2::Index_IndexField_Order Index_IndexField::order() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta2.Index.IndexField.order)
  if (has_order()) {
    return static_cast< ::google::firestore::admin::v1beta2::Index_IndexField_Order >(value_mode_.order_);
  }
  return static_cast< ::google::firestore::admin::v1beta2::Index_IndexField_Order >(0);
}
inline void Index_IndexField::set_order(::google::firestore::admin::v1beta2::Index_IndexField_Order value) {
  if (!has_order()) {
    clear_value_mode();
    set_has_order();
  }
  value_mode_.order_ = value;
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1beta2.Index.IndexField.order)
}

// .google.firestore.admin.v1beta2.Index.IndexField.ArrayConfig array_config = 3;
inline bool Index_IndexField::has_array_config() const {
  return value_mode_case() == kArrayConfig;
}
inline void Index_IndexField::set_has_array_config() {
  _oneof_case_[0] = kArrayConfig;
}
inline void Index_IndexField::clear_array_config() {
  if (has_array_config()) {
    value_mode_.array_config_ = 0;
    clear_has_value_mode();
  }
}
inline ::google::firestore::admin::v1beta2::Index_IndexField_ArrayConfig Index_IndexField::array_config() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta2.Index.IndexField.array_config)
  if (has_array_config()) {
    return static_cast< ::google::firestore::admin::v1beta2::Index_IndexField_ArrayConfig >(value_mode_.array_config_);
  }
  return static_cast< ::google::firestore::admin::v1beta2::Index_IndexField_ArrayConfig >(0);
}
inline void Index_IndexField::set_array_config(::google::firestore::admin::v1beta2::Index_IndexField_ArrayConfig value) {
  if (!has_array_config()) {
    clear_value_mode();
    set_has_array_config();
  }
  value_mode_.array_config_ = value;
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1beta2.Index.IndexField.array_config)
}

inline bool Index_IndexField::has_value_mode() const {
  return value_mode_case() != VALUE_MODE_NOT_SET;
}
inline void Index_IndexField::clear_has_value_mode() {
  _oneof_case_[0] = VALUE_MODE_NOT_SET;
}
inline Index_IndexField::ValueModeCase Index_IndexField::value_mode_case() const {
  return Index_IndexField::ValueModeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Index

// string name = 1;
inline void Index::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Index::name() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta2.Index.name)
  return name_.GetNoArena();
}
inline void Index::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1beta2.Index.name)
}
#if LANG_CXX11
inline void Index::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.admin.v1beta2.Index.name)
}
#endif
inline void Index::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.admin.v1beta2.Index.name)
}
inline void Index::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.admin.v1beta2.Index.name)
}
inline ::std::string* Index::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.firestore.admin.v1beta2.Index.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Index::release_name() {
  // @@protoc_insertion_point(field_release:google.firestore.admin.v1beta2.Index.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Index::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.admin.v1beta2.Index.name)
}

// .google.firestore.admin.v1beta2.Index.QueryScope query_scope = 2;
inline void Index::clear_query_scope() {
  query_scope_ = 0;
}
inline ::google::firestore::admin::v1beta2::Index_QueryScope Index::query_scope() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta2.Index.query_scope)
  return static_cast< ::google::firestore::admin::v1beta2::Index_QueryScope >(query_scope_);
}
inline void Index::set_query_scope(::google::firestore::admin::v1beta2::Index_QueryScope value) {
  
  query_scope_ = value;
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1beta2.Index.query_scope)
}

// repeated .google.firestore.admin.v1beta2.Index.IndexField fields = 3;
inline int Index::fields_size() const {
  return fields_.size();
}
inline void Index::clear_fields() {
  fields_.Clear();
}
inline ::google::firestore::admin::v1beta2::Index_IndexField* Index::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.firestore.admin.v1beta2.Index.fields)
  return fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1beta2::Index_IndexField >*
Index::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.admin.v1beta2.Index.fields)
  return &fields_;
}
inline const ::google::firestore::admin::v1beta2::Index_IndexField& Index::fields(int index) const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta2.Index.fields)
  return fields_.Get(index);
}
inline ::google::firestore::admin::v1beta2::Index_IndexField* Index::add_fields() {
  // @@protoc_insertion_point(field_add:google.firestore.admin.v1beta2.Index.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1beta2::Index_IndexField >&
Index::fields() const {
  // @@protoc_insertion_point(field_list:google.firestore.admin.v1beta2.Index.fields)
  return fields_;
}

// .google.firestore.admin.v1beta2.Index.State state = 4;
inline void Index::clear_state() {
  state_ = 0;
}
inline ::google::firestore::admin::v1beta2::Index_State Index::state() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta2.Index.state)
  return static_cast< ::google::firestore::admin::v1beta2::Index_State >(state_);
}
inline void Index::set_state(::google::firestore::admin::v1beta2::Index_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1beta2.Index.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta2
}  // namespace admin
}  // namespace firestore
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::firestore::admin::v1beta2::Index_IndexField_Order> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::firestore::admin::v1beta2::Index_IndexField_Order>() {
  return ::google::firestore::admin::v1beta2::Index_IndexField_Order_descriptor();
}
template <> struct is_proto_enum< ::google::firestore::admin::v1beta2::Index_IndexField_ArrayConfig> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::firestore::admin::v1beta2::Index_IndexField_ArrayConfig>() {
  return ::google::firestore::admin::v1beta2::Index_IndexField_ArrayConfig_descriptor();
}
template <> struct is_proto_enum< ::google::firestore::admin::v1beta2::Index_QueryScope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::firestore::admin::v1beta2::Index_QueryScope>() {
  return ::google::firestore::admin::v1beta2::Index_QueryScope_descriptor();
}
template <> struct is_proto_enum< ::google::firestore::admin::v1beta2::Index_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::firestore::admin::v1beta2::Index_State>() {
  return ::google::firestore::admin::v1beta2::Index_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2ffirestore_2fadmin_2fv1beta2_2findex_2eproto
