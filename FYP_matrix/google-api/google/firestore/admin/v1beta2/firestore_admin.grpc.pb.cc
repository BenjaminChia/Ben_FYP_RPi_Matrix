// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/firestore/admin/v1beta2/firestore_admin.proto

#include "google/firestore/admin/v1beta2/firestore_admin.pb.h"
#include "google/firestore/admin/v1beta2/firestore_admin.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace firestore {
namespace admin {
namespace v1beta2 {

static const char* FirestoreAdmin_method_names[] = {
  "/google.firestore.admin.v1beta2.FirestoreAdmin/GetField",
  "/google.firestore.admin.v1beta2.FirestoreAdmin/UpdateField",
  "/google.firestore.admin.v1beta2.FirestoreAdmin/ListFields",
};

std::unique_ptr< FirestoreAdmin::Stub> FirestoreAdmin::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FirestoreAdmin::Stub> stub(new FirestoreAdmin::Stub(channel));
  return stub;
}

FirestoreAdmin::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetField_(FirestoreAdmin_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateField_(FirestoreAdmin_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFields_(FirestoreAdmin_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FirestoreAdmin::Stub::GetField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::google::firestore::admin::v1beta2::Field* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetField_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::Field>* FirestoreAdmin::Stub::AsyncGetFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::firestore::admin::v1beta2::Field>::Create(channel_.get(), cq, rpcmethod_GetField_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::Field>* FirestoreAdmin::Stub::PrepareAsyncGetFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::firestore::admin::v1beta2::Field>::Create(channel_.get(), cq, rpcmethod_GetField_, context, request, false);
}

::grpc::Status FirestoreAdmin::Stub::UpdateField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateField_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* FirestoreAdmin::Stub::AsyncUpdateFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateField_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* FirestoreAdmin::Stub::PrepareAsyncUpdateFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateField_, context, request, false);
}

::grpc::Status FirestoreAdmin::Stub::ListFields(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::google::firestore::admin::v1beta2::ListFieldsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListFields_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::ListFieldsResponse>* FirestoreAdmin::Stub::AsyncListFieldsRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::firestore::admin::v1beta2::ListFieldsResponse>::Create(channel_.get(), cq, rpcmethod_ListFields_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::ListFieldsResponse>* FirestoreAdmin::Stub::PrepareAsyncListFieldsRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::firestore::admin::v1beta2::ListFieldsResponse>::Create(channel_.get(), cq, rpcmethod_ListFields_, context, request, false);
}

FirestoreAdmin::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FirestoreAdmin_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FirestoreAdmin::Service, ::google::firestore::admin::v1beta2::GetFieldRequest, ::google::firestore::admin::v1beta2::Field>(
          std::mem_fn(&FirestoreAdmin::Service::GetField), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FirestoreAdmin_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FirestoreAdmin::Service, ::google::firestore::admin::v1beta2::UpdateFieldRequest, ::google::longrunning::Operation>(
          std::mem_fn(&FirestoreAdmin::Service::UpdateField), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FirestoreAdmin_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FirestoreAdmin::Service, ::google::firestore::admin::v1beta2::ListFieldsRequest, ::google::firestore::admin::v1beta2::ListFieldsResponse>(
          std::mem_fn(&FirestoreAdmin::Service::ListFields), this)));
}

FirestoreAdmin::Service::~Service() {
}

::grpc::Status FirestoreAdmin::Service::GetField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest* request, ::google::firestore::admin::v1beta2::Field* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FirestoreAdmin::Service::UpdateField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FirestoreAdmin::Service::ListFields(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest* request, ::google::firestore::admin::v1beta2::ListFieldsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace firestore
}  // namespace admin
}  // namespace v1beta2

