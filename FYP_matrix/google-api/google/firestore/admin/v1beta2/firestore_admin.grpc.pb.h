// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/firestore/admin/v1beta2/firestore_admin.proto
// Original file comments:
// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2ffirestore_2fadmin_2fv1beta2_2ffirestore_5fadmin_2eproto__INCLUDED
#define GRPC_google_2ffirestore_2fadmin_2fv1beta2_2ffirestore_5fadmin_2eproto__INCLUDED

#include "google/firestore/admin/v1beta2/firestore_admin.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace firestore {
namespace admin {
namespace v1beta2 {

// Operations are created by service `FirestoreAdmin`, but are accessed via
// service `google.longrunning.Operations`.
class FirestoreAdmin final {
 public:
  static constexpr char const* service_full_name() {
    return "google.firestore.admin.v1beta2.FirestoreAdmin";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Gets the metadata and configuration for a Field.
    virtual ::grpc::Status GetField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::google::firestore::admin::v1beta2::Field* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::Field>> AsyncGetField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::Field>>(AsyncGetFieldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::Field>> PrepareAsyncGetField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::Field>>(PrepareAsyncGetFieldRaw(context, request, cq));
    }
    // Updates a field configuration. Currently, field updates apply only to
    // single field index configuration. However, calls to
    // [FirestoreAdmin.UpdateField][google.firestore.admin.v1beta2.FirestoreAdmin.UpdateField] should provide a field mask to avoid
    // changing any configuration that the caller isn't aware of. The field mask
    // should be specified as: `{ paths: "index_config" }`.
    //
    // This call returns a [google.longrunning.Operation][google.longrunning.Operation] which may be used to
    // track the status of the field update. The metadata for
    // the operation will be the type [FieldOperationMetadata][google.firestore.admin.v1beta2.FieldOperationMetadata].
    //
    // To configure the default field settings for the database, use
    // the special `Field` with resource name:
    // `/projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
    virtual ::grpc::Status UpdateField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUpdateField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUpdateFieldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncUpdateField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncUpdateFieldRaw(context, request, cq));
    }
    // Lists the field configuration and metadata for this database.
    //
    // Currently, [FirestoreAdmin.ListFields][google.firestore.admin.v1beta2.FirestoreAdmin.ListFields] only supports listing fields
    // that have been explicitly overridden. To issue this query, call
    // [FirestoreAdmin.ListFields][google.firestore.admin.v1beta2.FirestoreAdmin.ListFields] with the filter set to
    // `indexConfig.usesAncestorConfig:false`.
    virtual ::grpc::Status ListFields(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::google::firestore::admin::v1beta2::ListFieldsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::ListFieldsResponse>> AsyncListFields(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::ListFieldsResponse>>(AsyncListFieldsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::ListFieldsResponse>> PrepareAsyncListFields(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::ListFieldsResponse>>(PrepareAsyncListFieldsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::Field>* AsyncGetFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::Field>* PrepareAsyncGetFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUpdateFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncUpdateFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::ListFieldsResponse>* AsyncListFieldsRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta2::ListFieldsResponse>* PrepareAsyncListFieldsRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::google::firestore::admin::v1beta2::Field* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::Field>> AsyncGetField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::Field>>(AsyncGetFieldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::Field>> PrepareAsyncGetField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::Field>>(PrepareAsyncGetFieldRaw(context, request, cq));
    }
    ::grpc::Status UpdateField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUpdateField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUpdateFieldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncUpdateField(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncUpdateFieldRaw(context, request, cq));
    }
    ::grpc::Status ListFields(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::google::firestore::admin::v1beta2::ListFieldsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::ListFieldsResponse>> AsyncListFields(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::ListFieldsResponse>>(AsyncListFieldsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::ListFieldsResponse>> PrepareAsyncListFields(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::ListFieldsResponse>>(PrepareAsyncListFieldsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::Field>* AsyncGetFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::Field>* PrepareAsyncGetFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUpdateFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncUpdateFieldRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::ListFieldsResponse>* AsyncListFieldsRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta2::ListFieldsResponse>* PrepareAsyncListFieldsRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetField_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateField_;
    const ::grpc::internal::RpcMethod rpcmethod_ListFields_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Gets the metadata and configuration for a Field.
    virtual ::grpc::Status GetField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest* request, ::google::firestore::admin::v1beta2::Field* response);
    // Updates a field configuration. Currently, field updates apply only to
    // single field index configuration. However, calls to
    // [FirestoreAdmin.UpdateField][google.firestore.admin.v1beta2.FirestoreAdmin.UpdateField] should provide a field mask to avoid
    // changing any configuration that the caller isn't aware of. The field mask
    // should be specified as: `{ paths: "index_config" }`.
    //
    // This call returns a [google.longrunning.Operation][google.longrunning.Operation] which may be used to
    // track the status of the field update. The metadata for
    // the operation will be the type [FieldOperationMetadata][google.firestore.admin.v1beta2.FieldOperationMetadata].
    //
    // To configure the default field settings for the database, use
    // the special `Field` with resource name:
    // `/projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
    virtual ::grpc::Status UpdateField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest* request, ::google::longrunning::Operation* response);
    // Lists the field configuration and metadata for this database.
    //
    // Currently, [FirestoreAdmin.ListFields][google.firestore.admin.v1beta2.FirestoreAdmin.ListFields] only supports listing fields
    // that have been explicitly overridden. To issue this query, call
    // [FirestoreAdmin.ListFields][google.firestore.admin.v1beta2.FirestoreAdmin.ListFields] with the filter set to
    // `indexConfig.usesAncestorConfig:false`.
    virtual ::grpc::Status ListFields(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest* request, ::google::firestore::admin::v1beta2::ListFieldsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetField() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest* request, ::google::firestore::admin::v1beta2::Field* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetField(::grpc::ServerContext* context, ::google::firestore::admin::v1beta2::GetFieldRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::firestore::admin::v1beta2::Field>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateField() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateField(::grpc::ServerContext* context, ::google::firestore::admin::v1beta2::UpdateFieldRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListFields() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFields(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest* request, ::google::firestore::admin::v1beta2::ListFieldsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFields(::grpc::ServerContext* context, ::google::firestore::admin::v1beta2::ListFieldsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::firestore::admin::v1beta2::ListFieldsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetField<WithAsyncMethod_UpdateField<WithAsyncMethod_ListFields<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetField() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest* request, ::google::firestore::admin::v1beta2::Field* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateField() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListFields() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFields(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest* request, ::google::firestore::admin::v1beta2::ListFieldsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetField() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest* request, ::google::firestore::admin::v1beta2::Field* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetField(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateField() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateField(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListFields() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFields(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest* request, ::google::firestore::admin::v1beta2::ListFieldsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFields(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetField() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::admin::v1beta2::GetFieldRequest, ::google::firestore::admin::v1beta2::Field>(std::bind(&WithStreamedUnaryMethod_GetField<BaseClass>::StreamedGetField, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::GetFieldRequest* request, ::google::firestore::admin::v1beta2::Field* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetField(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::admin::v1beta2::GetFieldRequest,::google::firestore::admin::v1beta2::Field>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateField() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::admin::v1beta2::UpdateFieldRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_UpdateField<BaseClass>::StreamedUpdateField, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateField(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::UpdateFieldRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateField(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::admin::v1beta2::UpdateFieldRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListFields : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListFields() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::admin::v1beta2::ListFieldsRequest, ::google::firestore::admin::v1beta2::ListFieldsResponse>(std::bind(&WithStreamedUnaryMethod_ListFields<BaseClass>::StreamedListFields, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListFields() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFields(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta2::ListFieldsRequest* request, ::google::firestore::admin::v1beta2::ListFieldsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListFields(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::admin::v1beta2::ListFieldsRequest,::google::firestore::admin::v1beta2::ListFieldsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetField<WithStreamedUnaryMethod_UpdateField<WithStreamedUnaryMethod_ListFields<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetField<WithStreamedUnaryMethod_UpdateField<WithStreamedUnaryMethod_ListFields<Service > > > StreamedService;
};

}  // namespace v1beta2
}  // namespace admin
}  // namespace firestore
}  // namespace google


#endif  // GRPC_google_2ffirestore_2fadmin_2fv1beta2_2ffirestore_5fadmin_2eproto__INCLUDED
