// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/ads/googleads/v0/common/policy.proto

#include "google/ads/googleads/v0/common/policy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace google {
namespace ads {
namespace googleads {
namespace v0 {
namespace common {
class PolicyViolationKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PolicyViolationKey>
      _instance;
} _PolicyViolationKey_default_instance_;
}  // namespace common
}  // namespace v0
}  // namespace googleads
}  // namespace ads
}  // namespace google
namespace protobuf_google_2fads_2fgoogleads_2fv0_2fcommon_2fpolicy_2eproto {
static void InitDefaultsPolicyViolationKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::ads::googleads::v0::common::_PolicyViolationKey_default_instance_;
    new (ptr) ::google::ads::googleads::v0::common::PolicyViolationKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::ads::googleads::v0::common::PolicyViolationKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PolicyViolationKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPolicyViolationKey}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PolicyViolationKey.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::ads::googleads::v0::common::PolicyViolationKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::ads::googleads::v0::common::PolicyViolationKey, policy_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::ads::googleads::v0::common::PolicyViolationKey, violating_text_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::ads::googleads::v0::common::PolicyViolationKey)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::ads::googleads::v0::common::_PolicyViolationKey_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/ads/googleads/v0/common/policy.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n+google/ads/googleads/v0/common/policy."
      "proto\022\036google.ads.googleads.v0.common\032\036g"
      "oogle/protobuf/wrappers.proto\"}\n\022PolicyV"
      "iolationKey\0221\n\013policy_name\030\001 \001(\0132\034.googl"
      "e.protobuf.StringValue\0224\n\016violating_text"
      "\030\002 \001(\0132\034.google.protobuf.StringValueB\234\001\n"
      "\"com.google.ads.googleads.v0.commonB\013Pol"
      "icyProtoP\001\242\002\003GAA\252\002\036Google.Ads.GoogleAds."
      "V0.Common\312\002\036Google\\Ads\\GoogleAds\\V0\\Comm"
      "on\342\002\036Google\\Ads\\GoogleAds\\V0\\Commonb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 403);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/ads/googleads/v0/common/policy.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fads_2fgoogleads_2fv0_2fcommon_2fpolicy_2eproto
namespace google {
namespace ads {
namespace googleads {
namespace v0 {
namespace common {

// ===================================================================

void PolicyViolationKey::InitAsDefaultInstance() {
  ::google::ads::googleads::v0::common::_PolicyViolationKey_default_instance_._instance.get_mutable()->policy_name_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::google::ads::googleads::v0::common::_PolicyViolationKey_default_instance_._instance.get_mutable()->violating_text_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
void PolicyViolationKey::clear_policy_name() {
  if (GetArenaNoVirtual() == NULL && policy_name_ != NULL) {
    delete policy_name_;
  }
  policy_name_ = NULL;
}
void PolicyViolationKey::clear_violating_text() {
  if (GetArenaNoVirtual() == NULL && violating_text_ != NULL) {
    delete violating_text_;
  }
  violating_text_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyViolationKey::kPolicyNameFieldNumber;
const int PolicyViolationKey::kViolatingTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyViolationKey::PolicyViolationKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fads_2fgoogleads_2fv0_2fcommon_2fpolicy_2eproto::scc_info_PolicyViolationKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.ads.googleads.v0.common.PolicyViolationKey)
}
PolicyViolationKey::PolicyViolationKey(const PolicyViolationKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_policy_name()) {
    policy_name_ = new ::google::protobuf::StringValue(*from.policy_name_);
  } else {
    policy_name_ = NULL;
  }
  if (from.has_violating_text()) {
    violating_text_ = new ::google::protobuf::StringValue(*from.violating_text_);
  } else {
    violating_text_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.ads.googleads.v0.common.PolicyViolationKey)
}

void PolicyViolationKey::SharedCtor() {
  ::memset(&policy_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&violating_text_) -
      reinterpret_cast<char*>(&policy_name_)) + sizeof(violating_text_));
}

PolicyViolationKey::~PolicyViolationKey() {
  // @@protoc_insertion_point(destructor:google.ads.googleads.v0.common.PolicyViolationKey)
  SharedDtor();
}

void PolicyViolationKey::SharedDtor() {
  if (this != internal_default_instance()) delete policy_name_;
  if (this != internal_default_instance()) delete violating_text_;
}

void PolicyViolationKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PolicyViolationKey::descriptor() {
  ::protobuf_google_2fads_2fgoogleads_2fv0_2fcommon_2fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fads_2fgoogleads_2fv0_2fcommon_2fpolicy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolicyViolationKey& PolicyViolationKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fads_2fgoogleads_2fv0_2fcommon_2fpolicy_2eproto::scc_info_PolicyViolationKey.base);
  return *internal_default_instance();
}


void PolicyViolationKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.ads.googleads.v0.common.PolicyViolationKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && policy_name_ != NULL) {
    delete policy_name_;
  }
  policy_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && violating_text_ != NULL) {
    delete violating_text_;
  }
  violating_text_ = NULL;
  _internal_metadata_.Clear();
}

bool PolicyViolationKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.ads.googleads.v0.common.PolicyViolationKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.StringValue policy_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_policy_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue violating_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_violating_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.ads.googleads.v0.common.PolicyViolationKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.ads.googleads.v0.common.PolicyViolationKey)
  return false;
#undef DO_
}

void PolicyViolationKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.ads.googleads.v0.common.PolicyViolationKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue policy_name = 1;
  if (this->has_policy_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_policy_name(), output);
  }

  // .google.protobuf.StringValue violating_text = 2;
  if (this->has_violating_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_violating_text(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.ads.googleads.v0.common.PolicyViolationKey)
}

::google::protobuf::uint8* PolicyViolationKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.ads.googleads.v0.common.PolicyViolationKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue policy_name = 1;
  if (this->has_policy_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_policy_name(), deterministic, target);
  }

  // .google.protobuf.StringValue violating_text = 2;
  if (this->has_violating_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_violating_text(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.ads.googleads.v0.common.PolicyViolationKey)
  return target;
}

size_t PolicyViolationKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.ads.googleads.v0.common.PolicyViolationKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.StringValue policy_name = 1;
  if (this->has_policy_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *policy_name_);
  }

  // .google.protobuf.StringValue violating_text = 2;
  if (this->has_violating_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *violating_text_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyViolationKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.ads.googleads.v0.common.PolicyViolationKey)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyViolationKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolicyViolationKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.ads.googleads.v0.common.PolicyViolationKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.ads.googleads.v0.common.PolicyViolationKey)
    MergeFrom(*source);
  }
}

void PolicyViolationKey::MergeFrom(const PolicyViolationKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.ads.googleads.v0.common.PolicyViolationKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policy_name()) {
    mutable_policy_name()->::google::protobuf::StringValue::MergeFrom(from.policy_name());
  }
  if (from.has_violating_text()) {
    mutable_violating_text()->::google::protobuf::StringValue::MergeFrom(from.violating_text());
  }
}

void PolicyViolationKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.ads.googleads.v0.common.PolicyViolationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyViolationKey::CopyFrom(const PolicyViolationKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.ads.googleads.v0.common.PolicyViolationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyViolationKey::IsInitialized() const {
  return true;
}

void PolicyViolationKey::Swap(PolicyViolationKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolicyViolationKey::InternalSwap(PolicyViolationKey* other) {
  using std::swap;
  swap(policy_name_, other->policy_name_);
  swap(violating_text_, other->violating_text_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PolicyViolationKey::GetMetadata() const {
  protobuf_google_2fads_2fgoogleads_2fv0_2fcommon_2fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fads_2fgoogleads_2fv0_2fcommon_2fpolicy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace v0
}  // namespace googleads
}  // namespace ads
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::ads::googleads::v0::common::PolicyViolationKey* Arena::CreateMaybeMessage< ::google::ads::googleads::v0::common::PolicyViolationKey >(Arena* arena) {
  return Arena::CreateInternal< ::google::ads::googleads::v0::common::PolicyViolationKey >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
