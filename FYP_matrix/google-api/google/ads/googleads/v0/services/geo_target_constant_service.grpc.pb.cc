// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/ads/googleads/v0/services/geo_target_constant_service.proto

#include "google/ads/googleads/v0/services/geo_target_constant_service.pb.h"
#include "google/ads/googleads/v0/services/geo_target_constant_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace ads {
namespace googleads {
namespace v0 {
namespace services {

static const char* GeoTargetConstantService_method_names[] = {
  "/google.ads.googleads.v0.services.GeoTargetConstantService/GetGeoTargetConstant",
};

std::unique_ptr< GeoTargetConstantService::Stub> GeoTargetConstantService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GeoTargetConstantService::Stub> stub(new GeoTargetConstantService::Stub(channel));
  return stub;
}

GeoTargetConstantService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetGeoTargetConstant_(GeoTargetConstantService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GeoTargetConstantService::Stub::GetGeoTargetConstant(::grpc::ClientContext* context, const ::google::ads::googleads::v0::services::GetGeoTargetConstantRequest& request, ::google::ads::googleads::v0::resources::GeoTargetConstant* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGeoTargetConstant_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::ads::googleads::v0::resources::GeoTargetConstant>* GeoTargetConstantService::Stub::AsyncGetGeoTargetConstantRaw(::grpc::ClientContext* context, const ::google::ads::googleads::v0::services::GetGeoTargetConstantRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::ads::googleads::v0::resources::GeoTargetConstant>::Create(channel_.get(), cq, rpcmethod_GetGeoTargetConstant_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::ads::googleads::v0::resources::GeoTargetConstant>* GeoTargetConstantService::Stub::PrepareAsyncGetGeoTargetConstantRaw(::grpc::ClientContext* context, const ::google::ads::googleads::v0::services::GetGeoTargetConstantRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::ads::googleads::v0::resources::GeoTargetConstant>::Create(channel_.get(), cq, rpcmethod_GetGeoTargetConstant_, context, request, false);
}

GeoTargetConstantService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoTargetConstantService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoTargetConstantService::Service, ::google::ads::googleads::v0::services::GetGeoTargetConstantRequest, ::google::ads::googleads::v0::resources::GeoTargetConstant>(
          std::mem_fn(&GeoTargetConstantService::Service::GetGeoTargetConstant), this)));
}

GeoTargetConstantService::Service::~Service() {
}

::grpc::Status GeoTargetConstantService::Service::GetGeoTargetConstant(::grpc::ServerContext* context, const ::google::ads::googleads::v0::services::GetGeoTargetConstantRequest* request, ::google::ads::googleads::v0::resources::GeoTargetConstant* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace ads
}  // namespace googleads
}  // namespace v0
}  // namespace services

