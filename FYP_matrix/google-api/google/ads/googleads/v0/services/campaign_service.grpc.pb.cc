// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/ads/googleads/v0/services/campaign_service.proto

#include "google/ads/googleads/v0/services/campaign_service.pb.h"
#include "google/ads/googleads/v0/services/campaign_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace ads {
namespace googleads {
namespace v0 {
namespace services {

static const char* CampaignService_method_names[] = {
  "/google.ads.googleads.v0.services.CampaignService/GetCampaign",
  "/google.ads.googleads.v0.services.CampaignService/MutateCampaigns",
};

std::unique_ptr< CampaignService::Stub> CampaignService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CampaignService::Stub> stub(new CampaignService::Stub(channel));
  return stub;
}

CampaignService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetCampaign_(CampaignService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MutateCampaigns_(CampaignService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CampaignService::Stub::GetCampaign(::grpc::ClientContext* context, const ::google::ads::googleads::v0::services::GetCampaignRequest& request, ::google::ads::googleads::v0::resources::Campaign* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCampaign_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::ads::googleads::v0::resources::Campaign>* CampaignService::Stub::AsyncGetCampaignRaw(::grpc::ClientContext* context, const ::google::ads::googleads::v0::services::GetCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::ads::googleads::v0::resources::Campaign>::Create(channel_.get(), cq, rpcmethod_GetCampaign_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::ads::googleads::v0::resources::Campaign>* CampaignService::Stub::PrepareAsyncGetCampaignRaw(::grpc::ClientContext* context, const ::google::ads::googleads::v0::services::GetCampaignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::ads::googleads::v0::resources::Campaign>::Create(channel_.get(), cq, rpcmethod_GetCampaign_, context, request, false);
}

::grpc::Status CampaignService::Stub::MutateCampaigns(::grpc::ClientContext* context, const ::google::ads::googleads::v0::services::MutateCampaignsRequest& request, ::google::ads::googleads::v0::services::MutateCampaignsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MutateCampaigns_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::ads::googleads::v0::services::MutateCampaignsResponse>* CampaignService::Stub::AsyncMutateCampaignsRaw(::grpc::ClientContext* context, const ::google::ads::googleads::v0::services::MutateCampaignsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::ads::googleads::v0::services::MutateCampaignsResponse>::Create(channel_.get(), cq, rpcmethod_MutateCampaigns_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::ads::googleads::v0::services::MutateCampaignsResponse>* CampaignService::Stub::PrepareAsyncMutateCampaignsRaw(::grpc::ClientContext* context, const ::google::ads::googleads::v0::services::MutateCampaignsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::ads::googleads::v0::services::MutateCampaignsResponse>::Create(channel_.get(), cq, rpcmethod_MutateCampaigns_, context, request, false);
}

CampaignService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::google::ads::googleads::v0::services::GetCampaignRequest, ::google::ads::googleads::v0::resources::Campaign>(
          std::mem_fn(&CampaignService::Service::GetCampaign), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CampaignService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CampaignService::Service, ::google::ads::googleads::v0::services::MutateCampaignsRequest, ::google::ads::googleads::v0::services::MutateCampaignsResponse>(
          std::mem_fn(&CampaignService::Service::MutateCampaigns), this)));
}

CampaignService::Service::~Service() {
}

::grpc::Status CampaignService::Service::GetCampaign(::grpc::ServerContext* context, const ::google::ads::googleads::v0::services::GetCampaignRequest* request, ::google::ads::googleads::v0::resources::Campaign* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CampaignService::Service::MutateCampaigns(::grpc::ServerContext* context, const ::google::ads::googleads::v0::services::MutateCampaignsRequest* request, ::google::ads::googleads::v0::services::MutateCampaignsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace ads
}  // namespace googleads
}  // namespace v0
}  // namespace services

