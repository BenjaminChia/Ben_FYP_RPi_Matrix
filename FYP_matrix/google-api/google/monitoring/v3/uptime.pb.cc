// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/uptime.proto

#include "google/monitoring/v3/uptime.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fapi_2fmonitored_5fresource_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fapi_2fmonitored_5fresource_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MonitoredResource;
}  // namespace protobuf_google_2fapi_2fmonitored_5fresource_2eproto
namespace protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InternalChecker;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UptimeCheckConfig_ContentMatcher;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UptimeCheckConfig_HttpCheck_BasicAuthentication;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UptimeCheckConfig_ResourceGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UptimeCheckConfig_TcpCheck;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UptimeCheckConfig_HttpCheck;
}  // namespace protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto
namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace google {
namespace monitoring {
namespace v3 {
class InternalCheckerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InternalChecker>
      _instance;
} _InternalChecker_default_instance_;
class UptimeCheckConfig_ResourceGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UptimeCheckConfig_ResourceGroup>
      _instance;
} _UptimeCheckConfig_ResourceGroup_default_instance_;
class UptimeCheckConfig_HttpCheck_BasicAuthenticationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UptimeCheckConfig_HttpCheck_BasicAuthentication>
      _instance;
} _UptimeCheckConfig_HttpCheck_BasicAuthentication_default_instance_;
class UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse>
      _instance;
} _UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse_default_instance_;
class UptimeCheckConfig_HttpCheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UptimeCheckConfig_HttpCheck>
      _instance;
} _UptimeCheckConfig_HttpCheck_default_instance_;
class UptimeCheckConfig_TcpCheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UptimeCheckConfig_TcpCheck>
      _instance;
} _UptimeCheckConfig_TcpCheck_default_instance_;
class UptimeCheckConfig_ContentMatcherDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UptimeCheckConfig_ContentMatcher>
      _instance;
} _UptimeCheckConfig_ContentMatcher_default_instance_;
class UptimeCheckConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UptimeCheckConfig>
      _instance;
  const ::google::api::MonitoredResource* monitored_resource_;
  const ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup* resource_group_;
  const ::google::monitoring::v3::UptimeCheckConfig_HttpCheck* http_check_;
  const ::google::monitoring::v3::UptimeCheckConfig_TcpCheck* tcp_check_;
} _UptimeCheckConfig_default_instance_;
class UptimeCheckIpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UptimeCheckIp>
      _instance;
} _UptimeCheckIp_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
namespace protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto {
static void InitDefaultsInternalChecker() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::monitoring::v3::_InternalChecker_default_instance_;
    new (ptr) ::google::monitoring::v3::InternalChecker();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::monitoring::v3::InternalChecker::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InternalChecker =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInternalChecker}, {}};

static void InitDefaultsUptimeCheckConfig_ResourceGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::monitoring::v3::_UptimeCheckConfig_ResourceGroup_default_instance_;
    new (ptr) ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UptimeCheckConfig_ResourceGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUptimeCheckConfig_ResourceGroup}, {}};

static void InitDefaultsUptimeCheckConfig_HttpCheck_BasicAuthentication() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::monitoring::v3::_UptimeCheckConfig_HttpCheck_BasicAuthentication_default_instance_;
    new (ptr) ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UptimeCheckConfig_HttpCheck_BasicAuthentication =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUptimeCheckConfig_HttpCheck_BasicAuthentication}, {}};

static void InitDefaultsUptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::monitoring::v3::_UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse();
  }
  ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse}, {}};

static void InitDefaultsUptimeCheckConfig_HttpCheck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::monitoring::v3::_UptimeCheckConfig_HttpCheck_default_instance_;
    new (ptr) ::google::monitoring::v3::UptimeCheckConfig_HttpCheck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::monitoring::v3::UptimeCheckConfig_HttpCheck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UptimeCheckConfig_HttpCheck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUptimeCheckConfig_HttpCheck}, {
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_HttpCheck_BasicAuthentication.base,
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse.base,}};

static void InitDefaultsUptimeCheckConfig_TcpCheck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::monitoring::v3::_UptimeCheckConfig_TcpCheck_default_instance_;
    new (ptr) ::google::monitoring::v3::UptimeCheckConfig_TcpCheck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::monitoring::v3::UptimeCheckConfig_TcpCheck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UptimeCheckConfig_TcpCheck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUptimeCheckConfig_TcpCheck}, {}};

static void InitDefaultsUptimeCheckConfig_ContentMatcher() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::monitoring::v3::_UptimeCheckConfig_ContentMatcher_default_instance_;
    new (ptr) ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UptimeCheckConfig_ContentMatcher =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUptimeCheckConfig_ContentMatcher}, {}};

static void InitDefaultsUptimeCheckConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::monitoring::v3::_UptimeCheckConfig_default_instance_;
    new (ptr) ::google::monitoring::v3::UptimeCheckConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::monitoring::v3::UptimeCheckConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_UptimeCheckConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsUptimeCheckConfig}, {
      &protobuf_google_2fapi_2fmonitored_5fresource_2eproto::scc_info_MonitoredResource.base,
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_ResourceGroup.base,
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_HttpCheck.base,
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_TcpCheck.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_ContentMatcher.base,
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_InternalChecker.base,}};

static void InitDefaultsUptimeCheckIp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::monitoring::v3::_UptimeCheckIp_default_instance_;
    new (ptr) ::google::monitoring::v3::UptimeCheckIp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::monitoring::v3::UptimeCheckIp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UptimeCheckIp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUptimeCheckIp}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_InternalChecker.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UptimeCheckConfig_ResourceGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UptimeCheckConfig_HttpCheck_BasicAuthentication.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UptimeCheckConfig_HttpCheck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UptimeCheckConfig_TcpCheck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UptimeCheckConfig_ContentMatcher.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UptimeCheckConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UptimeCheckIp.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::InternalChecker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::InternalChecker, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::InternalChecker, network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::InternalChecker, gcp_zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::InternalChecker, checker_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::InternalChecker, display_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_ResourceGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_ResourceGroup, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_ResourceGroup, resource_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck, use_ssl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck, auth_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck, mask_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_HttpCheck, headers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_TcpCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_TcpCheck, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_ContentMatcher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig_ContentMatcher, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, display_name_),
  offsetof(::google::monitoring::v3::UptimeCheckConfigDefaultTypeInternal, monitored_resource_),
  offsetof(::google::monitoring::v3::UptimeCheckConfigDefaultTypeInternal, resource_group_),
  offsetof(::google::monitoring::v3::UptimeCheckConfigDefaultTypeInternal, http_check_),
  offsetof(::google::monitoring::v3::UptimeCheckConfigDefaultTypeInternal, tcp_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, content_matchers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, selected_regions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, is_internal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, internal_checkers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckConfig, check_request_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckIp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckIp, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckIp, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::monitoring::v3::UptimeCheckIp, ip_address_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::monitoring::v3::InternalChecker)},
  { 10, -1, sizeof(::google::monitoring::v3::UptimeCheckConfig_ResourceGroup)},
  { 17, -1, sizeof(::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication)},
  { 24, 31, sizeof(::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse)},
  { 33, -1, sizeof(::google::monitoring::v3::UptimeCheckConfig_HttpCheck)},
  { 44, -1, sizeof(::google::monitoring::v3::UptimeCheckConfig_TcpCheck)},
  { 50, -1, sizeof(::google::monitoring::v3::UptimeCheckConfig_ContentMatcher)},
  { 56, -1, sizeof(::google::monitoring::v3::UptimeCheckConfig)},
  { 75, -1, sizeof(::google::monitoring::v3::UptimeCheckIp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::monitoring::v3::_InternalChecker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::monitoring::v3::_UptimeCheckConfig_ResourceGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::monitoring::v3::_UptimeCheckConfig_HttpCheck_BasicAuthentication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::monitoring::v3::_UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::monitoring::v3::_UptimeCheckConfig_HttpCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::monitoring::v3::_UptimeCheckConfig_TcpCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::monitoring::v3::_UptimeCheckConfig_ContentMatcher_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::monitoring::v3::_UptimeCheckConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::monitoring::v3::_UptimeCheckIp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/monitoring/v3/uptime.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!google/monitoring/v3/uptime.proto\022\024goo"
      "gle.monitoring.v3\032#google/api/monitored_"
      "resource.proto\032\036google/protobuf/duration"
      ".proto\"r\n\017InternalChecker\022\022\n\nproject_id\030"
      "\001 \001(\t\022\017\n\007network\030\002 \001(\t\022\020\n\010gcp_zone\030\003 \001(\t"
      "\022\022\n\nchecker_id\030\004 \001(\t\022\024\n\014display_name\030\005 \001"
      "(\t\"\301\t\n\021UptimeCheckConfig\022\014\n\004name\030\001 \001(\t\022\024"
      "\n\014display_name\030\002 \001(\t\022;\n\022monitored_resour"
      "ce\030\003 \001(\0132\035.google.api.MonitoredResourceH"
      "\000\022O\n\016resource_group\030\004 \001(\01325.google.monit"
      "oring.v3.UptimeCheckConfig.ResourceGroup"
      "H\000\022G\n\nhttp_check\030\005 \001(\01321.google.monitori"
      "ng.v3.UptimeCheckConfig.HttpCheckH\001\022E\n\tt"
      "cp_check\030\006 \001(\01320.google.monitoring.v3.Up"
      "timeCheckConfig.TcpCheckH\001\022)\n\006period\030\007 \001"
      "(\0132\031.google.protobuf.Duration\022*\n\007timeout"
      "\030\010 \001(\0132\031.google.protobuf.Duration\022P\n\020con"
      "tent_matchers\030\t \003(\01326.google.monitoring."
      "v3.UptimeCheckConfig.ContentMatcher\022A\n\020s"
      "elected_regions\030\n \003(\0162\'.google.monitorin"
      "g.v3.UptimeCheckRegion\022\023\n\013is_internal\030\017 "
      "\001(\010\022@\n\021internal_checkers\030\016 \003(\0132%.google."
      "monitoring.v3.InternalChecker\032a\n\rResourc"
      "eGroup\022\020\n\010group_id\030\001 \001(\t\022>\n\rresource_typ"
      "e\030\002 \001(\0162\'.google.monitoring.v3.GroupReso"
      "urceType\032\344\002\n\tHttpCheck\022\017\n\007use_ssl\030\001 \001(\010\022"
      "\014\n\004path\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022X\n\tauth_info"
      "\030\004 \001(\0132E.google.monitoring.v3.UptimeChec"
      "kConfig.HttpCheck.BasicAuthentication\022\024\n"
      "\014mask_headers\030\005 \001(\010\022O\n\007headers\030\006 \003(\0132>.g"
      "oogle.monitoring.v3.UptimeCheckConfig.Ht"
      "tpCheck.HeadersEntry\0329\n\023BasicAuthenticat"
      "ion\022\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\032"
      ".\n\014HeadersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
      "\001(\t:\0028\001\032\030\n\010TcpCheck\022\014\n\004port\030\001 \001(\005\032!\n\016Con"
      "tentMatcher\022\017\n\007content\030\001 \001(\tB\n\n\010resource"
      "B\024\n\022check_request_type\"n\n\rUptimeCheckIp\022"
      "7\n\006region\030\001 \001(\0162\'.google.monitoring.v3.U"
      "ptimeCheckRegion\022\020\n\010location\030\002 \001(\t\022\022\n\nip"
      "_address\030\003 \001(\t*e\n\021UptimeCheckRegion\022\026\n\022R"
      "EGION_UNSPECIFIED\020\000\022\007\n\003USA\020\001\022\n\n\006EUROPE\020\002"
      "\022\021\n\rSOUTH_AMERICA\020\003\022\020\n\014ASIA_PACIFIC\020\004*[\n"
      "\021GroupResourceType\022\035\n\031RESOURCE_TYPE_UNSP"
      "ECIFIED\020\000\022\014\n\010INSTANCE\020\001\022\031\n\025AWS_ELB_LOAD_"
      "BALANCER\020\002B\243\001\n\030com.google.monitoring.v3B"
      "\013UptimeProtoP\001Z>google.golang.org/genpro"
      "to/googleapis/monitoring/v3;monitoring\252\002"
      "\032Google.Cloud.Monitoring.V3\312\002\032Google\\Clo"
      "ud\\Monitoring\\V3b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1944);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/monitoring/v3/uptime.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fmonitored_5fresource_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto
namespace google {
namespace monitoring {
namespace v3 {
const ::google::protobuf::EnumDescriptor* UptimeCheckRegion_descriptor() {
  protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_enum_descriptors[0];
}
bool UptimeCheckRegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GroupResourceType_descriptor() {
  protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_enum_descriptors[1];
}
bool GroupResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void InternalChecker::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalChecker::kProjectIdFieldNumber;
const int InternalChecker::kNetworkFieldNumber;
const int InternalChecker::kGcpZoneFieldNumber;
const int InternalChecker::kCheckerIdFieldNumber;
const int InternalChecker::kDisplayNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalChecker::InternalChecker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_InternalChecker.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.monitoring.v3.InternalChecker)
}
InternalChecker::InternalChecker(const InternalChecker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.network().size() > 0) {
    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  gcp_zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gcp_zone().size() > 0) {
    gcp_zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gcp_zone_);
  }
  checker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.checker_id().size() > 0) {
    checker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checker_id_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.monitoring.v3.InternalChecker)
}

void InternalChecker::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gcp_zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InternalChecker::~InternalChecker() {
  // @@protoc_insertion_point(destructor:google.monitoring.v3.InternalChecker)
  SharedDtor();
}

void InternalChecker::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gcp_zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InternalChecker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InternalChecker::descriptor() {
  ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InternalChecker& InternalChecker::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_InternalChecker.base);
  return *internal_default_instance();
}


void InternalChecker::Clear() {
// @@protoc_insertion_point(message_clear_start:google.monitoring.v3.InternalChecker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gcp_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool InternalChecker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.monitoring.v3.InternalChecker)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), static_cast<int>(this->project_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.InternalChecker.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string network = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network().data(), static_cast<int>(this->network().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.InternalChecker.network"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gcp_zone = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcp_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gcp_zone().data(), static_cast<int>(this->gcp_zone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.InternalChecker.gcp_zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string checker_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->checker_id().data(), static_cast<int>(this->checker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.InternalChecker.checker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.InternalChecker.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.monitoring.v3.InternalChecker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.monitoring.v3.InternalChecker)
  return false;
#undef DO_
}

void InternalChecker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.monitoring.v3.InternalChecker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.InternalChecker.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string network = 2;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), static_cast<int>(this->network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.InternalChecker.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->network(), output);
  }

  // string gcp_zone = 3;
  if (this->gcp_zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gcp_zone().data(), static_cast<int>(this->gcp_zone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.InternalChecker.gcp_zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gcp_zone(), output);
  }

  // string checker_id = 4;
  if (this->checker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checker_id().data(), static_cast<int>(this->checker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.InternalChecker.checker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->checker_id(), output);
  }

  // string display_name = 5;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.InternalChecker.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->display_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.monitoring.v3.InternalChecker)
}

::google::protobuf::uint8* InternalChecker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.monitoring.v3.InternalChecker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.InternalChecker.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string network = 2;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), static_cast<int>(this->network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.InternalChecker.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network(), target);
  }

  // string gcp_zone = 3;
  if (this->gcp_zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gcp_zone().data(), static_cast<int>(this->gcp_zone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.InternalChecker.gcp_zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gcp_zone(), target);
  }

  // string checker_id = 4;
  if (this->checker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checker_id().data(), static_cast<int>(this->checker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.InternalChecker.checker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->checker_id(), target);
  }

  // string display_name = 5;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.InternalChecker.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->display_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.monitoring.v3.InternalChecker)
  return target;
}

size_t InternalChecker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.monitoring.v3.InternalChecker)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string network = 2;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network());
  }

  // string gcp_zone = 3;
  if (this->gcp_zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gcp_zone());
  }

  // string checker_id = 4;
  if (this->checker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checker_id());
  }

  // string display_name = 5;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalChecker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.monitoring.v3.InternalChecker)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalChecker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalChecker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.monitoring.v3.InternalChecker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.monitoring.v3.InternalChecker)
    MergeFrom(*source);
  }
}

void InternalChecker::MergeFrom(const InternalChecker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.monitoring.v3.InternalChecker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.network().size() > 0) {

    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  if (from.gcp_zone().size() > 0) {

    gcp_zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gcp_zone_);
  }
  if (from.checker_id().size() > 0) {

    checker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checker_id_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
}

void InternalChecker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.monitoring.v3.InternalChecker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalChecker::CopyFrom(const InternalChecker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.monitoring.v3.InternalChecker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalChecker::IsInitialized() const {
  return true;
}

void InternalChecker::Swap(InternalChecker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalChecker::InternalSwap(InternalChecker* other) {
  using std::swap;
  project_id_.Swap(&other->project_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  network_.Swap(&other->network_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gcp_zone_.Swap(&other->gcp_zone_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  checker_id_.Swap(&other->checker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InternalChecker::GetMetadata() const {
  protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UptimeCheckConfig_ResourceGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UptimeCheckConfig_ResourceGroup::kGroupIdFieldNumber;
const int UptimeCheckConfig_ResourceGroup::kResourceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UptimeCheckConfig_ResourceGroup::UptimeCheckConfig_ResourceGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_ResourceGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
}
UptimeCheckConfig_ResourceGroup::UptimeCheckConfig_ResourceGroup(const UptimeCheckConfig_ResourceGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  resource_type_ = from.resource_type_;
  // @@protoc_insertion_point(copy_constructor:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
}

void UptimeCheckConfig_ResourceGroup::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_type_ = 0;
}

UptimeCheckConfig_ResourceGroup::~UptimeCheckConfig_ResourceGroup() {
  // @@protoc_insertion_point(destructor:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  SharedDtor();
}

void UptimeCheckConfig_ResourceGroup::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UptimeCheckConfig_ResourceGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UptimeCheckConfig_ResourceGroup::descriptor() {
  ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UptimeCheckConfig_ResourceGroup& UptimeCheckConfig_ResourceGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_ResourceGroup.base);
  return *internal_default_instance();
}


void UptimeCheckConfig_ResourceGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_type_ = 0;
  _internal_metadata_.Clear();
}

bool UptimeCheckConfig_ResourceGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.UptimeCheckConfig.ResourceGroup.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.monitoring.v3.GroupResourceType resource_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource_type(static_cast< ::google::monitoring::v3::GroupResourceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  return false;
#undef DO_
}

void UptimeCheckConfig_ResourceGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.ResourceGroup.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // .google.monitoring.v3.GroupResourceType resource_type = 2;
  if (this->resource_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->resource_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
}

::google::protobuf::uint8* UptimeCheckConfig_ResourceGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.ResourceGroup.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // .google.monitoring.v3.GroupResourceType resource_type = 2;
  if (this->resource_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->resource_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  return target;
}

size_t UptimeCheckConfig_ResourceGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // .google.monitoring.v3.GroupResourceType resource_type = 2;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UptimeCheckConfig_ResourceGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const UptimeCheckConfig_ResourceGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UptimeCheckConfig_ResourceGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
    MergeFrom(*source);
  }
}

void UptimeCheckConfig_ResourceGroup::MergeFrom(const UptimeCheckConfig_ResourceGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.resource_type() != 0) {
    set_resource_type(from.resource_type());
  }
}

void UptimeCheckConfig_ResourceGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UptimeCheckConfig_ResourceGroup::CopyFrom(const UptimeCheckConfig_ResourceGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UptimeCheckConfig_ResourceGroup::IsInitialized() const {
  return true;
}

void UptimeCheckConfig_ResourceGroup::Swap(UptimeCheckConfig_ResourceGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UptimeCheckConfig_ResourceGroup::InternalSwap(UptimeCheckConfig_ResourceGroup* other) {
  using std::swap;
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resource_type_, other->resource_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UptimeCheckConfig_ResourceGroup::GetMetadata() const {
  protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UptimeCheckConfig_HttpCheck_BasicAuthentication::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UptimeCheckConfig_HttpCheck_BasicAuthentication::kUsernameFieldNumber;
const int UptimeCheckConfig_HttpCheck_BasicAuthentication::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UptimeCheckConfig_HttpCheck_BasicAuthentication::UptimeCheckConfig_HttpCheck_BasicAuthentication()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_HttpCheck_BasicAuthentication.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
}
UptimeCheckConfig_HttpCheck_BasicAuthentication::UptimeCheckConfig_HttpCheck_BasicAuthentication(const UptimeCheckConfig_HttpCheck_BasicAuthentication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
}

void UptimeCheckConfig_HttpCheck_BasicAuthentication::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UptimeCheckConfig_HttpCheck_BasicAuthentication::~UptimeCheckConfig_HttpCheck_BasicAuthentication() {
  // @@protoc_insertion_point(destructor:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  SharedDtor();
}

void UptimeCheckConfig_HttpCheck_BasicAuthentication::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UptimeCheckConfig_HttpCheck_BasicAuthentication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UptimeCheckConfig_HttpCheck_BasicAuthentication::descriptor() {
  ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UptimeCheckConfig_HttpCheck_BasicAuthentication& UptimeCheckConfig_HttpCheck_BasicAuthentication::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_HttpCheck_BasicAuthentication.base);
  return *internal_default_instance();
}


void UptimeCheckConfig_HttpCheck_BasicAuthentication::Clear() {
// @@protoc_insertion_point(message_clear_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UptimeCheckConfig_HttpCheck_BasicAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  return false;
#undef DO_
}

void UptimeCheckConfig_HttpCheck_BasicAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
}

::google::protobuf::uint8* UptimeCheckConfig_HttpCheck_BasicAuthentication::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  return target;
}

size_t UptimeCheckConfig_HttpCheck_BasicAuthentication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UptimeCheckConfig_HttpCheck_BasicAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  GOOGLE_DCHECK_NE(&from, this);
  const UptimeCheckConfig_HttpCheck_BasicAuthentication* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UptimeCheckConfig_HttpCheck_BasicAuthentication>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
    MergeFrom(*source);
  }
}

void UptimeCheckConfig_HttpCheck_BasicAuthentication::MergeFrom(const UptimeCheckConfig_HttpCheck_BasicAuthentication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void UptimeCheckConfig_HttpCheck_BasicAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UptimeCheckConfig_HttpCheck_BasicAuthentication::CopyFrom(const UptimeCheckConfig_HttpCheck_BasicAuthentication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UptimeCheckConfig_HttpCheck_BasicAuthentication::IsInitialized() const {
  return true;
}

void UptimeCheckConfig_HttpCheck_BasicAuthentication::Swap(UptimeCheckConfig_HttpCheck_BasicAuthentication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UptimeCheckConfig_HttpCheck_BasicAuthentication::InternalSwap(UptimeCheckConfig_HttpCheck_BasicAuthentication* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UptimeCheckConfig_HttpCheck_BasicAuthentication::GetMetadata() const {
  protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse() {}
UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse::MergeFrom(const UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[3];
}
void UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void UptimeCheckConfig_HttpCheck::InitAsDefaultInstance() {
  ::google::monitoring::v3::_UptimeCheckConfig_HttpCheck_default_instance_._instance.get_mutable()->auth_info_ = const_cast< ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication*>(
      ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UptimeCheckConfig_HttpCheck::kUseSslFieldNumber;
const int UptimeCheckConfig_HttpCheck::kPathFieldNumber;
const int UptimeCheckConfig_HttpCheck::kPortFieldNumber;
const int UptimeCheckConfig_HttpCheck::kAuthInfoFieldNumber;
const int UptimeCheckConfig_HttpCheck::kMaskHeadersFieldNumber;
const int UptimeCheckConfig_HttpCheck::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UptimeCheckConfig_HttpCheck::UptimeCheckConfig_HttpCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_HttpCheck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
}
UptimeCheckConfig_HttpCheck::UptimeCheckConfig_HttpCheck(const UptimeCheckConfig_HttpCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_auth_info()) {
    auth_info_ = new ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication(*from.auth_info_);
  } else {
    auth_info_ = NULL;
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_headers_) -
    reinterpret_cast<char*>(&port_)) + sizeof(mask_headers_));
  // @@protoc_insertion_point(copy_constructor:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
}

void UptimeCheckConfig_HttpCheck::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&auth_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_headers_) -
      reinterpret_cast<char*>(&auth_info_)) + sizeof(mask_headers_));
}

UptimeCheckConfig_HttpCheck::~UptimeCheckConfig_HttpCheck() {
  // @@protoc_insertion_point(destructor:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  SharedDtor();
}

void UptimeCheckConfig_HttpCheck::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auth_info_;
}

void UptimeCheckConfig_HttpCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UptimeCheckConfig_HttpCheck::descriptor() {
  ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UptimeCheckConfig_HttpCheck& UptimeCheckConfig_HttpCheck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_HttpCheck.base);
  return *internal_default_instance();
}


void UptimeCheckConfig_HttpCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && auth_info_ != NULL) {
    delete auth_info_;
  }
  auth_info_ = NULL;
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_headers_) -
      reinterpret_cast<char*>(&port_)) + sizeof(mask_headers_));
  _internal_metadata_.Clear();
}

bool UptimeCheckConfig_HttpCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool use_ssl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ssl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.UptimeCheckConfig.HttpCheck.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication auth_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mask_headers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mask_headers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> headers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.UptimeCheckConfig.HttpCheck.HeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.UptimeCheckConfig.HttpCheck.HeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  return false;
#undef DO_
}

void UptimeCheckConfig_HttpCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_ssl = 1;
  if (this->use_ssl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_ssl(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.HttpCheck.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // .google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication auth_info = 4;
  if (this->has_auth_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_auth_info(), output);
  }

  // bool mask_headers = 5;
  if (this->mask_headers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->mask_headers(), output);
  }

  // map<string, string> headers = 6;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.monitoring.v3.UptimeCheckConfig.HttpCheck.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.monitoring.v3.UptimeCheckConfig.HttpCheck.HeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
}

::google::protobuf::uint8* UptimeCheckConfig_HttpCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_ssl = 1;
  if (this->use_ssl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_ssl(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.HttpCheck.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // .google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication auth_info = 4;
  if (this->has_auth_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_auth_info(), deterministic, target);
  }

  // bool mask_headers = 5;
  if (this->mask_headers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->mask_headers(), target);
  }

  // map<string, string> headers = 6;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.monitoring.v3.UptimeCheckConfig.HttpCheck.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.monitoring.v3.UptimeCheckConfig.HttpCheck.HeadersEntry.value");
      }
    };

    if (deterministic &&
        this->headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  return target;
}

size_t UptimeCheckConfig_HttpCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> headers = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->headers_size());
  {
    ::std::unique_ptr<UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->headers().begin();
        it != this->headers().end(); ++it) {
      entry.reset(headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication auth_info = 4;
  if (this->has_auth_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *auth_info_);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // bool use_ssl = 1;
  if (this->use_ssl() != 0) {
    total_size += 1 + 1;
  }

  // bool mask_headers = 5;
  if (this->mask_headers() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UptimeCheckConfig_HttpCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const UptimeCheckConfig_HttpCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UptimeCheckConfig_HttpCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
    MergeFrom(*source);
  }
}

void UptimeCheckConfig_HttpCheck::MergeFrom(const UptimeCheckConfig_HttpCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_auth_info()) {
    mutable_auth_info()->::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication::MergeFrom(from.auth_info());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.use_ssl() != 0) {
    set_use_ssl(from.use_ssl());
  }
  if (from.mask_headers() != 0) {
    set_mask_headers(from.mask_headers());
  }
}

void UptimeCheckConfig_HttpCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UptimeCheckConfig_HttpCheck::CopyFrom(const UptimeCheckConfig_HttpCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UptimeCheckConfig_HttpCheck::IsInitialized() const {
  return true;
}

void UptimeCheckConfig_HttpCheck::Swap(UptimeCheckConfig_HttpCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UptimeCheckConfig_HttpCheck::InternalSwap(UptimeCheckConfig_HttpCheck* other) {
  using std::swap;
  headers_.Swap(&other->headers_);
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_info_, other->auth_info_);
  swap(port_, other->port_);
  swap(use_ssl_, other->use_ssl_);
  swap(mask_headers_, other->mask_headers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UptimeCheckConfig_HttpCheck::GetMetadata() const {
  protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UptimeCheckConfig_TcpCheck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UptimeCheckConfig_TcpCheck::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UptimeCheckConfig_TcpCheck::UptimeCheckConfig_TcpCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_TcpCheck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
}
UptimeCheckConfig_TcpCheck::UptimeCheckConfig_TcpCheck(const UptimeCheckConfig_TcpCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
}

void UptimeCheckConfig_TcpCheck::SharedCtor() {
  port_ = 0;
}

UptimeCheckConfig_TcpCheck::~UptimeCheckConfig_TcpCheck() {
  // @@protoc_insertion_point(destructor:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  SharedDtor();
}

void UptimeCheckConfig_TcpCheck::SharedDtor() {
}

void UptimeCheckConfig_TcpCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UptimeCheckConfig_TcpCheck::descriptor() {
  ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UptimeCheckConfig_TcpCheck& UptimeCheckConfig_TcpCheck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_TcpCheck.base);
  return *internal_default_instance();
}


void UptimeCheckConfig_TcpCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_ = 0;
  _internal_metadata_.Clear();
}

bool UptimeCheckConfig_TcpCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  return false;
#undef DO_
}

void UptimeCheckConfig_TcpCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
}

::google::protobuf::uint8* UptimeCheckConfig_TcpCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  return target;
}

size_t UptimeCheckConfig_TcpCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UptimeCheckConfig_TcpCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const UptimeCheckConfig_TcpCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UptimeCheckConfig_TcpCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
    MergeFrom(*source);
  }
}

void UptimeCheckConfig_TcpCheck::MergeFrom(const UptimeCheckConfig_TcpCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port() != 0) {
    set_port(from.port());
  }
}

void UptimeCheckConfig_TcpCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UptimeCheckConfig_TcpCheck::CopyFrom(const UptimeCheckConfig_TcpCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UptimeCheckConfig_TcpCheck::IsInitialized() const {
  return true;
}

void UptimeCheckConfig_TcpCheck::Swap(UptimeCheckConfig_TcpCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UptimeCheckConfig_TcpCheck::InternalSwap(UptimeCheckConfig_TcpCheck* other) {
  using std::swap;
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UptimeCheckConfig_TcpCheck::GetMetadata() const {
  protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UptimeCheckConfig_ContentMatcher::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UptimeCheckConfig_ContentMatcher::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UptimeCheckConfig_ContentMatcher::UptimeCheckConfig_ContentMatcher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_ContentMatcher.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
}
UptimeCheckConfig_ContentMatcher::UptimeCheckConfig_ContentMatcher(const UptimeCheckConfig_ContentMatcher& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
}

void UptimeCheckConfig_ContentMatcher::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UptimeCheckConfig_ContentMatcher::~UptimeCheckConfig_ContentMatcher() {
  // @@protoc_insertion_point(destructor:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  SharedDtor();
}

void UptimeCheckConfig_ContentMatcher::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UptimeCheckConfig_ContentMatcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UptimeCheckConfig_ContentMatcher::descriptor() {
  ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UptimeCheckConfig_ContentMatcher& UptimeCheckConfig_ContentMatcher::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig_ContentMatcher.base);
  return *internal_default_instance();
}


void UptimeCheckConfig_ContentMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UptimeCheckConfig_ContentMatcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.UptimeCheckConfig.ContentMatcher.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  return false;
#undef DO_
}

void UptimeCheckConfig_ContentMatcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.ContentMatcher.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
}

::google::protobuf::uint8* UptimeCheckConfig_ContentMatcher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.ContentMatcher.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  return target;
}

size_t UptimeCheckConfig_ContentMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UptimeCheckConfig_ContentMatcher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  const UptimeCheckConfig_ContentMatcher* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UptimeCheckConfig_ContentMatcher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
    MergeFrom(*source);
  }
}

void UptimeCheckConfig_ContentMatcher::MergeFrom(const UptimeCheckConfig_ContentMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void UptimeCheckConfig_ContentMatcher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UptimeCheckConfig_ContentMatcher::CopyFrom(const UptimeCheckConfig_ContentMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UptimeCheckConfig_ContentMatcher::IsInitialized() const {
  return true;
}

void UptimeCheckConfig_ContentMatcher::Swap(UptimeCheckConfig_ContentMatcher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UptimeCheckConfig_ContentMatcher::InternalSwap(UptimeCheckConfig_ContentMatcher* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UptimeCheckConfig_ContentMatcher::GetMetadata() const {
  protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UptimeCheckConfig::InitAsDefaultInstance() {
  ::google::monitoring::v3::_UptimeCheckConfig_default_instance_.monitored_resource_ = const_cast< ::google::api::MonitoredResource*>(
      ::google::api::MonitoredResource::internal_default_instance());
  ::google::monitoring::v3::_UptimeCheckConfig_default_instance_.resource_group_ = const_cast< ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup*>(
      ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup::internal_default_instance());
  ::google::monitoring::v3::_UptimeCheckConfig_default_instance_.http_check_ = const_cast< ::google::monitoring::v3::UptimeCheckConfig_HttpCheck*>(
      ::google::monitoring::v3::UptimeCheckConfig_HttpCheck::internal_default_instance());
  ::google::monitoring::v3::_UptimeCheckConfig_default_instance_.tcp_check_ = const_cast< ::google::monitoring::v3::UptimeCheckConfig_TcpCheck*>(
      ::google::monitoring::v3::UptimeCheckConfig_TcpCheck::internal_default_instance());
  ::google::monitoring::v3::_UptimeCheckConfig_default_instance_._instance.get_mutable()->period_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::monitoring::v3::_UptimeCheckConfig_default_instance_._instance.get_mutable()->timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void UptimeCheckConfig::set_allocated_monitored_resource(::google::api::MonitoredResource* monitored_resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (monitored_resource) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(monitored_resource)->GetArena();
    if (message_arena != submessage_arena) {
      monitored_resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, monitored_resource, submessage_arena);
    }
    set_has_monitored_resource();
    resource_.monitored_resource_ = monitored_resource;
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.monitored_resource)
}
void UptimeCheckConfig::clear_monitored_resource() {
  if (has_monitored_resource()) {
    delete resource_.monitored_resource_;
    clear_has_resource();
  }
}
void UptimeCheckConfig::set_allocated_resource_group(::google::monitoring::v3::UptimeCheckConfig_ResourceGroup* resource_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (resource_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource_group, submessage_arena);
    }
    set_has_resource_group();
    resource_.resource_group_ = resource_group;
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.resource_group)
}
void UptimeCheckConfig::set_allocated_http_check(::google::monitoring::v3::UptimeCheckConfig_HttpCheck* http_check) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_check_request_type();
  if (http_check) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      http_check = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http_check, submessage_arena);
    }
    set_has_http_check();
    check_request_type_.http_check_ = http_check;
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.http_check)
}
void UptimeCheckConfig::set_allocated_tcp_check(::google::monitoring::v3::UptimeCheckConfig_TcpCheck* tcp_check) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_check_request_type();
  if (tcp_check) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tcp_check = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tcp_check, submessage_arena);
    }
    set_has_tcp_check();
    check_request_type_.tcp_check_ = tcp_check;
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.tcp_check)
}
void UptimeCheckConfig::clear_period() {
  if (GetArenaNoVirtual() == NULL && period_ != NULL) {
    delete period_;
  }
  period_ = NULL;
}
void UptimeCheckConfig::clear_timeout() {
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UptimeCheckConfig::kNameFieldNumber;
const int UptimeCheckConfig::kDisplayNameFieldNumber;
const int UptimeCheckConfig::kMonitoredResourceFieldNumber;
const int UptimeCheckConfig::kResourceGroupFieldNumber;
const int UptimeCheckConfig::kHttpCheckFieldNumber;
const int UptimeCheckConfig::kTcpCheckFieldNumber;
const int UptimeCheckConfig::kPeriodFieldNumber;
const int UptimeCheckConfig::kTimeoutFieldNumber;
const int UptimeCheckConfig::kContentMatchersFieldNumber;
const int UptimeCheckConfig::kSelectedRegionsFieldNumber;
const int UptimeCheckConfig::kIsInternalFieldNumber;
const int UptimeCheckConfig::kInternalCheckersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UptimeCheckConfig::UptimeCheckConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.monitoring.v3.UptimeCheckConfig)
}
UptimeCheckConfig::UptimeCheckConfig(const UptimeCheckConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      content_matchers_(from.content_matchers_),
      selected_regions_(from.selected_regions_),
      internal_checkers_(from.internal_checkers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.has_period()) {
    period_ = new ::google::protobuf::Duration(*from.period_);
  } else {
    period_ = NULL;
  }
  if (from.has_timeout()) {
    timeout_ = new ::google::protobuf::Duration(*from.timeout_);
  } else {
    timeout_ = NULL;
  }
  is_internal_ = from.is_internal_;
  clear_has_resource();
  switch (from.resource_case()) {
    case kMonitoredResource: {
      mutable_monitored_resource()->::google::api::MonitoredResource::MergeFrom(from.monitored_resource());
      break;
    }
    case kResourceGroup: {
      mutable_resource_group()->::google::monitoring::v3::UptimeCheckConfig_ResourceGroup::MergeFrom(from.resource_group());
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  clear_has_check_request_type();
  switch (from.check_request_type_case()) {
    case kHttpCheck: {
      mutable_http_check()->::google::monitoring::v3::UptimeCheckConfig_HttpCheck::MergeFrom(from.http_check());
      break;
    }
    case kTcpCheck: {
      mutable_tcp_check()->::google::monitoring::v3::UptimeCheckConfig_TcpCheck::MergeFrom(from.tcp_check());
      break;
    }
    case CHECK_REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.monitoring.v3.UptimeCheckConfig)
}

void UptimeCheckConfig::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_internal_) -
      reinterpret_cast<char*>(&period_)) + sizeof(is_internal_));
  clear_has_resource();
  clear_has_check_request_type();
}

UptimeCheckConfig::~UptimeCheckConfig() {
  // @@protoc_insertion_point(destructor:google.monitoring.v3.UptimeCheckConfig)
  SharedDtor();
}

void UptimeCheckConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete period_;
  if (this != internal_default_instance()) delete timeout_;
  if (has_resource()) {
    clear_resource();
  }
  if (has_check_request_type()) {
    clear_check_request_type();
  }
}

void UptimeCheckConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UptimeCheckConfig::descriptor() {
  ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UptimeCheckConfig& UptimeCheckConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckConfig.base);
  return *internal_default_instance();
}


void UptimeCheckConfig::clear_resource() {
// @@protoc_insertion_point(one_of_clear_start:google.monitoring.v3.UptimeCheckConfig)
  switch (resource_case()) {
    case kMonitoredResource: {
      delete resource_.monitored_resource_;
      break;
    }
    case kResourceGroup: {
      delete resource_.resource_group_;
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESOURCE_NOT_SET;
}

void UptimeCheckConfig::clear_check_request_type() {
// @@protoc_insertion_point(one_of_clear_start:google.monitoring.v3.UptimeCheckConfig)
  switch (check_request_type_case()) {
    case kHttpCheck: {
      delete check_request_type_.http_check_;
      break;
    }
    case kTcpCheck: {
      delete check_request_type_.tcp_check_;
      break;
    }
    case CHECK_REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = CHECK_REQUEST_TYPE_NOT_SET;
}


void UptimeCheckConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.monitoring.v3.UptimeCheckConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_matchers_.Clear();
  selected_regions_.Clear();
  internal_checkers_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && period_ != NULL) {
    delete period_;
  }
  period_ = NULL;
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
  is_internal_ = false;
  clear_resource();
  clear_check_request_type();
  _internal_metadata_.Clear();
}

bool UptimeCheckConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.monitoring.v3.UptimeCheckConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.UptimeCheckConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.UptimeCheckConfig.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.api.MonitoredResource monitored_resource = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monitored_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.monitoring.v3.UptimeCheckConfig.ResourceGroup resource_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resource_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.monitoring.v3.UptimeCheckConfig.HttpCheck http_check = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_http_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.monitoring.v3.UptimeCheckConfig.TcpCheck tcp_check = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration period = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration timeout = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.monitoring.v3.UptimeCheckConfig.ContentMatcher content_matchers = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_content_matchers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.monitoring.v3.UptimeCheckRegion selected_regions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_selected_regions(static_cast< ::google::monitoring::v3::UptimeCheckRegion >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_selected_regions(static_cast< ::google::monitoring::v3::UptimeCheckRegion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.monitoring.v3.InternalChecker internal_checkers = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_internal_checkers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_internal = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_internal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.monitoring.v3.UptimeCheckConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.monitoring.v3.UptimeCheckConfig)
  return false;
#undef DO_
}

void UptimeCheckConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.monitoring.v3.UptimeCheckConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // .google.api.MonitoredResource monitored_resource = 3;
  if (has_monitored_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_monitored_resource(), output);
  }

  // .google.monitoring.v3.UptimeCheckConfig.ResourceGroup resource_group = 4;
  if (has_resource_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_resource_group(), output);
  }

  // .google.monitoring.v3.UptimeCheckConfig.HttpCheck http_check = 5;
  if (has_http_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_http_check(), output);
  }

  // .google.monitoring.v3.UptimeCheckConfig.TcpCheck tcp_check = 6;
  if (has_tcp_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_tcp_check(), output);
  }

  // .google.protobuf.Duration period = 7;
  if (this->has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_period(), output);
  }

  // .google.protobuf.Duration timeout = 8;
  if (this->has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_timeout(), output);
  }

  // repeated .google.monitoring.v3.UptimeCheckConfig.ContentMatcher content_matchers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_matchers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->content_matchers(static_cast<int>(i)),
      output);
  }

  // repeated .google.monitoring.v3.UptimeCheckRegion selected_regions = 10;
  if (this->selected_regions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_selected_regions_cached_byte_size_));
  }
  for (int i = 0, n = this->selected_regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->selected_regions(i), output);
  }

  // repeated .google.monitoring.v3.InternalChecker internal_checkers = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internal_checkers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->internal_checkers(static_cast<int>(i)),
      output);
  }

  // bool is_internal = 15;
  if (this->is_internal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_internal(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.monitoring.v3.UptimeCheckConfig)
}

::google::protobuf::uint8* UptimeCheckConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.monitoring.v3.UptimeCheckConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckConfig.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // .google.api.MonitoredResource monitored_resource = 3;
  if (has_monitored_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_monitored_resource(), deterministic, target);
  }

  // .google.monitoring.v3.UptimeCheckConfig.ResourceGroup resource_group = 4;
  if (has_resource_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_resource_group(), deterministic, target);
  }

  // .google.monitoring.v3.UptimeCheckConfig.HttpCheck http_check = 5;
  if (has_http_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_http_check(), deterministic, target);
  }

  // .google.monitoring.v3.UptimeCheckConfig.TcpCheck tcp_check = 6;
  if (has_tcp_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_tcp_check(), deterministic, target);
  }

  // .google.protobuf.Duration period = 7;
  if (this->has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_period(), deterministic, target);
  }

  // .google.protobuf.Duration timeout = 8;
  if (this->has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_timeout(), deterministic, target);
  }

  // repeated .google.monitoring.v3.UptimeCheckConfig.ContentMatcher content_matchers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_matchers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->content_matchers(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.monitoring.v3.UptimeCheckRegion selected_regions = 10;
  if (this->selected_regions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _selected_regions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->selected_regions_, target);
  }

  // repeated .google.monitoring.v3.InternalChecker internal_checkers = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internal_checkers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->internal_checkers(static_cast<int>(i)), deterministic, target);
  }

  // bool is_internal = 15;
  if (this->is_internal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_internal(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.monitoring.v3.UptimeCheckConfig)
  return target;
}

size_t UptimeCheckConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.monitoring.v3.UptimeCheckConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.monitoring.v3.UptimeCheckConfig.ContentMatcher content_matchers = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->content_matchers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->content_matchers(static_cast<int>(i)));
    }
  }

  // repeated .google.monitoring.v3.UptimeCheckRegion selected_regions = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->selected_regions_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->selected_regions(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _selected_regions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .google.monitoring.v3.InternalChecker internal_checkers = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->internal_checkers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->internal_checkers(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // .google.protobuf.Duration period = 7;
  if (this->has_period()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *period_);
  }

  // .google.protobuf.Duration timeout = 8;
  if (this->has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timeout_);
  }

  // bool is_internal = 15;
  if (this->is_internal() != 0) {
    total_size += 1 + 1;
  }

  switch (resource_case()) {
    // .google.api.MonitoredResource monitored_resource = 3;
    case kMonitoredResource: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resource_.monitored_resource_);
      break;
    }
    // .google.monitoring.v3.UptimeCheckConfig.ResourceGroup resource_group = 4;
    case kResourceGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resource_.resource_group_);
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  switch (check_request_type_case()) {
    // .google.monitoring.v3.UptimeCheckConfig.HttpCheck http_check = 5;
    case kHttpCheck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *check_request_type_.http_check_);
      break;
    }
    // .google.monitoring.v3.UptimeCheckConfig.TcpCheck tcp_check = 6;
    case kTcpCheck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *check_request_type_.tcp_check_);
      break;
    }
    case CHECK_REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UptimeCheckConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.monitoring.v3.UptimeCheckConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UptimeCheckConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UptimeCheckConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.monitoring.v3.UptimeCheckConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.monitoring.v3.UptimeCheckConfig)
    MergeFrom(*source);
  }
}

void UptimeCheckConfig::MergeFrom(const UptimeCheckConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.monitoring.v3.UptimeCheckConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_matchers_.MergeFrom(from.content_matchers_);
  selected_regions_.MergeFrom(from.selected_regions_);
  internal_checkers_.MergeFrom(from.internal_checkers_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.has_period()) {
    mutable_period()->::google::protobuf::Duration::MergeFrom(from.period());
  }
  if (from.has_timeout()) {
    mutable_timeout()->::google::protobuf::Duration::MergeFrom(from.timeout());
  }
  if (from.is_internal() != 0) {
    set_is_internal(from.is_internal());
  }
  switch (from.resource_case()) {
    case kMonitoredResource: {
      mutable_monitored_resource()->::google::api::MonitoredResource::MergeFrom(from.monitored_resource());
      break;
    }
    case kResourceGroup: {
      mutable_resource_group()->::google::monitoring::v3::UptimeCheckConfig_ResourceGroup::MergeFrom(from.resource_group());
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  switch (from.check_request_type_case()) {
    case kHttpCheck: {
      mutable_http_check()->::google::monitoring::v3::UptimeCheckConfig_HttpCheck::MergeFrom(from.http_check());
      break;
    }
    case kTcpCheck: {
      mutable_tcp_check()->::google::monitoring::v3::UptimeCheckConfig_TcpCheck::MergeFrom(from.tcp_check());
      break;
    }
    case CHECK_REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
}

void UptimeCheckConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.monitoring.v3.UptimeCheckConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UptimeCheckConfig::CopyFrom(const UptimeCheckConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.monitoring.v3.UptimeCheckConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UptimeCheckConfig::IsInitialized() const {
  return true;
}

void UptimeCheckConfig::Swap(UptimeCheckConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UptimeCheckConfig::InternalSwap(UptimeCheckConfig* other) {
  using std::swap;
  CastToBase(&content_matchers_)->InternalSwap(CastToBase(&other->content_matchers_));
  selected_regions_.InternalSwap(&other->selected_regions_);
  CastToBase(&internal_checkers_)->InternalSwap(CastToBase(&other->internal_checkers_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(period_, other->period_);
  swap(timeout_, other->timeout_);
  swap(is_internal_, other->is_internal_);
  swap(resource_, other->resource_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(check_request_type_, other->check_request_type_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UptimeCheckConfig::GetMetadata() const {
  protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UptimeCheckIp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UptimeCheckIp::kRegionFieldNumber;
const int UptimeCheckIp::kLocationFieldNumber;
const int UptimeCheckIp::kIpAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UptimeCheckIp::UptimeCheckIp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckIp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.monitoring.v3.UptimeCheckIp)
}
UptimeCheckIp::UptimeCheckIp(const UptimeCheckIp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_address().size() > 0) {
    ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  region_ = from.region_;
  // @@protoc_insertion_point(copy_constructor:google.monitoring.v3.UptimeCheckIp)
}

void UptimeCheckIp::SharedCtor() {
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_ = 0;
}

UptimeCheckIp::~UptimeCheckIp() {
  // @@protoc_insertion_point(destructor:google.monitoring.v3.UptimeCheckIp)
  SharedDtor();
}

void UptimeCheckIp::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UptimeCheckIp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UptimeCheckIp::descriptor() {
  ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UptimeCheckIp& UptimeCheckIp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::scc_info_UptimeCheckIp.base);
  return *internal_default_instance();
}


void UptimeCheckIp::Clear() {
// @@protoc_insertion_point(message_clear_start:google.monitoring.v3.UptimeCheckIp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_ = 0;
  _internal_metadata_.Clear();
}

bool UptimeCheckIp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.monitoring.v3.UptimeCheckIp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.monitoring.v3.UptimeCheckRegion region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_region(static_cast< ::google::monitoring::v3::UptimeCheckRegion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.UptimeCheckIp.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_address().data(), static_cast<int>(this->ip_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.monitoring.v3.UptimeCheckIp.ip_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.monitoring.v3.UptimeCheckIp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.monitoring.v3.UptimeCheckIp)
  return false;
#undef DO_
}

void UptimeCheckIp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.monitoring.v3.UptimeCheckIp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.monitoring.v3.UptimeCheckRegion region = 1;
  if (this->region() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->region(), output);
  }

  // string location = 2;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckIp.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->location(), output);
  }

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_address().data(), static_cast<int>(this->ip_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckIp.ip_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip_address(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.monitoring.v3.UptimeCheckIp)
}

::google::protobuf::uint8* UptimeCheckIp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.monitoring.v3.UptimeCheckIp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.monitoring.v3.UptimeCheckRegion region = 1;
  if (this->region() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->region(), target);
  }

  // string location = 2;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckIp.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->location(), target);
  }

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_address().data(), static_cast<int>(this->ip_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.monitoring.v3.UptimeCheckIp.ip_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip_address(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.monitoring.v3.UptimeCheckIp)
  return target;
}

size_t UptimeCheckIp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.monitoring.v3.UptimeCheckIp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string location = 2;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_address());
  }

  // .google.monitoring.v3.UptimeCheckRegion region = 1;
  if (this->region() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UptimeCheckIp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.monitoring.v3.UptimeCheckIp)
  GOOGLE_DCHECK_NE(&from, this);
  const UptimeCheckIp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UptimeCheckIp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.monitoring.v3.UptimeCheckIp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.monitoring.v3.UptimeCheckIp)
    MergeFrom(*source);
  }
}

void UptimeCheckIp::MergeFrom(const UptimeCheckIp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.monitoring.v3.UptimeCheckIp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.ip_address().size() > 0) {

    ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  if (from.region() != 0) {
    set_region(from.region());
  }
}

void UptimeCheckIp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.monitoring.v3.UptimeCheckIp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UptimeCheckIp::CopyFrom(const UptimeCheckIp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.monitoring.v3.UptimeCheckIp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UptimeCheckIp::IsInitialized() const {
  return true;
}

void UptimeCheckIp::Swap(UptimeCheckIp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UptimeCheckIp::InternalSwap(UptimeCheckIp* other) {
  using std::swap;
  location_.Swap(&other->location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_address_.Swap(&other->ip_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_, other->region_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UptimeCheckIp::GetMetadata() const {
  protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v3
}  // namespace monitoring
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::monitoring::v3::InternalChecker* Arena::CreateMaybeMessage< ::google::monitoring::v3::InternalChecker >(Arena* arena) {
  return Arena::CreateInternal< ::google::monitoring::v3::InternalChecker >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup* Arena::CreateMaybeMessage< ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup >(Arena* arena) {
  return Arena::CreateInternal< ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication* Arena::CreateMaybeMessage< ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication >(Arena* arena) {
  return Arena::CreateInternal< ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::monitoring::v3::UptimeCheckConfig_HttpCheck* Arena::CreateMaybeMessage< ::google::monitoring::v3::UptimeCheckConfig_HttpCheck >(Arena* arena) {
  return Arena::CreateInternal< ::google::monitoring::v3::UptimeCheckConfig_HttpCheck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::monitoring::v3::UptimeCheckConfig_TcpCheck* Arena::CreateMaybeMessage< ::google::monitoring::v3::UptimeCheckConfig_TcpCheck >(Arena* arena) {
  return Arena::CreateInternal< ::google::monitoring::v3::UptimeCheckConfig_TcpCheck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher* Arena::CreateMaybeMessage< ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher >(Arena* arena) {
  return Arena::CreateInternal< ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::monitoring::v3::UptimeCheckConfig* Arena::CreateMaybeMessage< ::google::monitoring::v3::UptimeCheckConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::monitoring::v3::UptimeCheckConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::monitoring::v3::UptimeCheckIp* Arena::CreateMaybeMessage< ::google::monitoring::v3::UptimeCheckIp >(Arena* arena) {
  return Arena::CreateInternal< ::google::monitoring::v3::UptimeCheckIp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
