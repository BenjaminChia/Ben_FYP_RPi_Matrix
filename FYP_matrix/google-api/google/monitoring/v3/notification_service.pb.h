// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/notification_service.proto

#ifndef PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto
#define PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/monitoring/v3/notification.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto 

namespace protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto
namespace google {
namespace monitoring {
namespace v3 {
class CreateNotificationChannelRequest;
class CreateNotificationChannelRequestDefaultTypeInternal;
extern CreateNotificationChannelRequestDefaultTypeInternal _CreateNotificationChannelRequest_default_instance_;
class DeleteNotificationChannelRequest;
class DeleteNotificationChannelRequestDefaultTypeInternal;
extern DeleteNotificationChannelRequestDefaultTypeInternal _DeleteNotificationChannelRequest_default_instance_;
class GetNotificationChannelDescriptorRequest;
class GetNotificationChannelDescriptorRequestDefaultTypeInternal;
extern GetNotificationChannelDescriptorRequestDefaultTypeInternal _GetNotificationChannelDescriptorRequest_default_instance_;
class GetNotificationChannelRequest;
class GetNotificationChannelRequestDefaultTypeInternal;
extern GetNotificationChannelRequestDefaultTypeInternal _GetNotificationChannelRequest_default_instance_;
class GetNotificationChannelVerificationCodeRequest;
class GetNotificationChannelVerificationCodeRequestDefaultTypeInternal;
extern GetNotificationChannelVerificationCodeRequestDefaultTypeInternal _GetNotificationChannelVerificationCodeRequest_default_instance_;
class GetNotificationChannelVerificationCodeResponse;
class GetNotificationChannelVerificationCodeResponseDefaultTypeInternal;
extern GetNotificationChannelVerificationCodeResponseDefaultTypeInternal _GetNotificationChannelVerificationCodeResponse_default_instance_;
class ListNotificationChannelDescriptorsRequest;
class ListNotificationChannelDescriptorsRequestDefaultTypeInternal;
extern ListNotificationChannelDescriptorsRequestDefaultTypeInternal _ListNotificationChannelDescriptorsRequest_default_instance_;
class ListNotificationChannelDescriptorsResponse;
class ListNotificationChannelDescriptorsResponseDefaultTypeInternal;
extern ListNotificationChannelDescriptorsResponseDefaultTypeInternal _ListNotificationChannelDescriptorsResponse_default_instance_;
class ListNotificationChannelsRequest;
class ListNotificationChannelsRequestDefaultTypeInternal;
extern ListNotificationChannelsRequestDefaultTypeInternal _ListNotificationChannelsRequest_default_instance_;
class ListNotificationChannelsResponse;
class ListNotificationChannelsResponseDefaultTypeInternal;
extern ListNotificationChannelsResponseDefaultTypeInternal _ListNotificationChannelsResponse_default_instance_;
class SendNotificationChannelVerificationCodeRequest;
class SendNotificationChannelVerificationCodeRequestDefaultTypeInternal;
extern SendNotificationChannelVerificationCodeRequestDefaultTypeInternal _SendNotificationChannelVerificationCodeRequest_default_instance_;
class UpdateNotificationChannelRequest;
class UpdateNotificationChannelRequestDefaultTypeInternal;
extern UpdateNotificationChannelRequestDefaultTypeInternal _UpdateNotificationChannelRequest_default_instance_;
class VerifyNotificationChannelRequest;
class VerifyNotificationChannelRequestDefaultTypeInternal;
extern VerifyNotificationChannelRequestDefaultTypeInternal _VerifyNotificationChannelRequest_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::monitoring::v3::CreateNotificationChannelRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateNotificationChannelRequest>(Arena*);
template<> ::google::monitoring::v3::DeleteNotificationChannelRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::DeleteNotificationChannelRequest>(Arena*);
template<> ::google::monitoring::v3::GetNotificationChannelDescriptorRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetNotificationChannelDescriptorRequest>(Arena*);
template<> ::google::monitoring::v3::GetNotificationChannelRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetNotificationChannelRequest>(Arena*);
template<> ::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetNotificationChannelVerificationCodeRequest>(Arena*);
template<> ::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::GetNotificationChannelVerificationCodeResponse>(Arena*);
template<> ::google::monitoring::v3::ListNotificationChannelDescriptorsRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListNotificationChannelDescriptorsRequest>(Arena*);
template<> ::google::monitoring::v3::ListNotificationChannelDescriptorsResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListNotificationChannelDescriptorsResponse>(Arena*);
template<> ::google::monitoring::v3::ListNotificationChannelsRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListNotificationChannelsRequest>(Arena*);
template<> ::google::monitoring::v3::ListNotificationChannelsResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListNotificationChannelsResponse>(Arena*);
template<> ::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::SendNotificationChannelVerificationCodeRequest>(Arena*);
template<> ::google::monitoring::v3::UpdateNotificationChannelRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::UpdateNotificationChannelRequest>(Arena*);
template<> ::google::monitoring::v3::VerifyNotificationChannelRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::VerifyNotificationChannelRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class ListNotificationChannelDescriptorsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListNotificationChannelDescriptorsRequest) */ {
 public:
  ListNotificationChannelDescriptorsRequest();
  virtual ~ListNotificationChannelDescriptorsRequest();

  ListNotificationChannelDescriptorsRequest(const ListNotificationChannelDescriptorsRequest& from);

  inline ListNotificationChannelDescriptorsRequest& operator=(const ListNotificationChannelDescriptorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNotificationChannelDescriptorsRequest(ListNotificationChannelDescriptorsRequest&& from) noexcept
    : ListNotificationChannelDescriptorsRequest() {
    *this = ::std::move(from);
  }

  inline ListNotificationChannelDescriptorsRequest& operator=(ListNotificationChannelDescriptorsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNotificationChannelDescriptorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNotificationChannelDescriptorsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelDescriptorsRequest*>(
               &_ListNotificationChannelDescriptorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ListNotificationChannelDescriptorsRequest* other);
  friend void swap(ListNotificationChannelDescriptorsRequest& a, ListNotificationChannelDescriptorsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNotificationChannelDescriptorsRequest* New() const final {
    return CreateMaybeMessage<ListNotificationChannelDescriptorsRequest>(NULL);
  }

  ListNotificationChannelDescriptorsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNotificationChannelDescriptorsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNotificationChannelDescriptorsRequest& from);
  void MergeFrom(const ListNotificationChannelDescriptorsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationChannelDescriptorsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListNotificationChannelDescriptorsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNotificationChannelDescriptorsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListNotificationChannelDescriptorsResponse) */ {
 public:
  ListNotificationChannelDescriptorsResponse();
  virtual ~ListNotificationChannelDescriptorsResponse();

  ListNotificationChannelDescriptorsResponse(const ListNotificationChannelDescriptorsResponse& from);

  inline ListNotificationChannelDescriptorsResponse& operator=(const ListNotificationChannelDescriptorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNotificationChannelDescriptorsResponse(ListNotificationChannelDescriptorsResponse&& from) noexcept
    : ListNotificationChannelDescriptorsResponse() {
    *this = ::std::move(from);
  }

  inline ListNotificationChannelDescriptorsResponse& operator=(ListNotificationChannelDescriptorsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNotificationChannelDescriptorsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNotificationChannelDescriptorsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelDescriptorsResponse*>(
               &_ListNotificationChannelDescriptorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ListNotificationChannelDescriptorsResponse* other);
  friend void swap(ListNotificationChannelDescriptorsResponse& a, ListNotificationChannelDescriptorsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNotificationChannelDescriptorsResponse* New() const final {
    return CreateMaybeMessage<ListNotificationChannelDescriptorsResponse>(NULL);
  }

  ListNotificationChannelDescriptorsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNotificationChannelDescriptorsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNotificationChannelDescriptorsResponse& from);
  void MergeFrom(const ListNotificationChannelDescriptorsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationChannelDescriptorsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.monitoring.v3.NotificationChannelDescriptor channel_descriptors = 1;
  int channel_descriptors_size() const;
  void clear_channel_descriptors();
  static const int kChannelDescriptorsFieldNumber = 1;
  ::google::monitoring::v3::NotificationChannelDescriptor* mutable_channel_descriptors(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::NotificationChannelDescriptor >*
      mutable_channel_descriptors();
  const ::google::monitoring::v3::NotificationChannelDescriptor& channel_descriptors(int index) const;
  ::google::monitoring::v3::NotificationChannelDescriptor* add_channel_descriptors();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::NotificationChannelDescriptor >&
      channel_descriptors() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListNotificationChannelDescriptorsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::NotificationChannelDescriptor > channel_descriptors_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNotificationChannelDescriptorRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetNotificationChannelDescriptorRequest) */ {
 public:
  GetNotificationChannelDescriptorRequest();
  virtual ~GetNotificationChannelDescriptorRequest();

  GetNotificationChannelDescriptorRequest(const GetNotificationChannelDescriptorRequest& from);

  inline GetNotificationChannelDescriptorRequest& operator=(const GetNotificationChannelDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNotificationChannelDescriptorRequest(GetNotificationChannelDescriptorRequest&& from) noexcept
    : GetNotificationChannelDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetNotificationChannelDescriptorRequest& operator=(GetNotificationChannelDescriptorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNotificationChannelDescriptorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNotificationChannelDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelDescriptorRequest*>(
               &_GetNotificationChannelDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetNotificationChannelDescriptorRequest* other);
  friend void swap(GetNotificationChannelDescriptorRequest& a, GetNotificationChannelDescriptorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNotificationChannelDescriptorRequest* New() const final {
    return CreateMaybeMessage<GetNotificationChannelDescriptorRequest>(NULL);
  }

  GetNotificationChannelDescriptorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNotificationChannelDescriptorRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNotificationChannelDescriptorRequest& from);
  void MergeFrom(const GetNotificationChannelDescriptorRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationChannelDescriptorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetNotificationChannelDescriptorRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateNotificationChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateNotificationChannelRequest) */ {
 public:
  CreateNotificationChannelRequest();
  virtual ~CreateNotificationChannelRequest();

  CreateNotificationChannelRequest(const CreateNotificationChannelRequest& from);

  inline CreateNotificationChannelRequest& operator=(const CreateNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateNotificationChannelRequest(CreateNotificationChannelRequest&& from) noexcept
    : CreateNotificationChannelRequest() {
    *this = ::std::move(from);
  }

  inline CreateNotificationChannelRequest& operator=(CreateNotificationChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateNotificationChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNotificationChannelRequest*>(
               &_CreateNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateNotificationChannelRequest* other);
  friend void swap(CreateNotificationChannelRequest& a, CreateNotificationChannelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateNotificationChannelRequest* New() const final {
    return CreateMaybeMessage<CreateNotificationChannelRequest>(NULL);
  }

  CreateNotificationChannelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateNotificationChannelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateNotificationChannelRequest& from);
  void MergeFrom(const CreateNotificationChannelRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNotificationChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.monitoring.v3.NotificationChannel notification_channel = 2;
  bool has_notification_channel() const;
  void clear_notification_channel();
  static const int kNotificationChannelFieldNumber = 2;
  private:
  const ::google::monitoring::v3::NotificationChannel& _internal_notification_channel() const;
  public:
  const ::google::monitoring::v3::NotificationChannel& notification_channel() const;
  ::google::monitoring::v3::NotificationChannel* release_notification_channel();
  ::google::monitoring::v3::NotificationChannel* mutable_notification_channel();
  void set_allocated_notification_channel(::google::monitoring::v3::NotificationChannel* notification_channel);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateNotificationChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::monitoring::v3::NotificationChannel* notification_channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNotificationChannelsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListNotificationChannelsRequest) */ {
 public:
  ListNotificationChannelsRequest();
  virtual ~ListNotificationChannelsRequest();

  ListNotificationChannelsRequest(const ListNotificationChannelsRequest& from);

  inline ListNotificationChannelsRequest& operator=(const ListNotificationChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNotificationChannelsRequest(ListNotificationChannelsRequest&& from) noexcept
    : ListNotificationChannelsRequest() {
    *this = ::std::move(from);
  }

  inline ListNotificationChannelsRequest& operator=(ListNotificationChannelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNotificationChannelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNotificationChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelsRequest*>(
               &_ListNotificationChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ListNotificationChannelsRequest* other);
  friend void swap(ListNotificationChannelsRequest& a, ListNotificationChannelsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNotificationChannelsRequest* New() const final {
    return CreateMaybeMessage<ListNotificationChannelsRequest>(NULL);
  }

  ListNotificationChannelsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNotificationChannelsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNotificationChannelsRequest& from);
  void MergeFrom(const ListNotificationChannelsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationChannelsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string filter = 6;
  void clear_filter();
  static const int kFilterFieldNumber = 6;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string order_by = 7;
  void clear_order_by();
  static const int kOrderByFieldNumber = 7;
  const ::std::string& order_by() const;
  void set_order_by(const ::std::string& value);
  #if LANG_CXX11
  void set_order_by(::std::string&& value);
  #endif
  void set_order_by(const char* value);
  void set_order_by(const char* value, size_t size);
  ::std::string* mutable_order_by();
  ::std::string* release_order_by();
  void set_allocated_order_by(::std::string* order_by);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListNotificationChannelsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr order_by_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNotificationChannelsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListNotificationChannelsResponse) */ {
 public:
  ListNotificationChannelsResponse();
  virtual ~ListNotificationChannelsResponse();

  ListNotificationChannelsResponse(const ListNotificationChannelsResponse& from);

  inline ListNotificationChannelsResponse& operator=(const ListNotificationChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNotificationChannelsResponse(ListNotificationChannelsResponse&& from) noexcept
    : ListNotificationChannelsResponse() {
    *this = ::std::move(from);
  }

  inline ListNotificationChannelsResponse& operator=(ListNotificationChannelsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNotificationChannelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNotificationChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelsResponse*>(
               &_ListNotificationChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ListNotificationChannelsResponse* other);
  friend void swap(ListNotificationChannelsResponse& a, ListNotificationChannelsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNotificationChannelsResponse* New() const final {
    return CreateMaybeMessage<ListNotificationChannelsResponse>(NULL);
  }

  ListNotificationChannelsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNotificationChannelsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNotificationChannelsResponse& from);
  void MergeFrom(const ListNotificationChannelsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationChannelsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.monitoring.v3.NotificationChannel notification_channels = 3;
  int notification_channels_size() const;
  void clear_notification_channels();
  static const int kNotificationChannelsFieldNumber = 3;
  ::google::monitoring::v3::NotificationChannel* mutable_notification_channels(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::NotificationChannel >*
      mutable_notification_channels();
  const ::google::monitoring::v3::NotificationChannel& notification_channels(int index) const;
  ::google::monitoring::v3::NotificationChannel* add_notification_channels();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::NotificationChannel >&
      notification_channels() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListNotificationChannelsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::NotificationChannel > notification_channels_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNotificationChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetNotificationChannelRequest) */ {
 public:
  GetNotificationChannelRequest();
  virtual ~GetNotificationChannelRequest();

  GetNotificationChannelRequest(const GetNotificationChannelRequest& from);

  inline GetNotificationChannelRequest& operator=(const GetNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNotificationChannelRequest(GetNotificationChannelRequest&& from) noexcept
    : GetNotificationChannelRequest() {
    *this = ::std::move(from);
  }

  inline GetNotificationChannelRequest& operator=(GetNotificationChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNotificationChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelRequest*>(
               &_GetNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetNotificationChannelRequest* other);
  friend void swap(GetNotificationChannelRequest& a, GetNotificationChannelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNotificationChannelRequest* New() const final {
    return CreateMaybeMessage<GetNotificationChannelRequest>(NULL);
  }

  GetNotificationChannelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNotificationChannelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNotificationChannelRequest& from);
  void MergeFrom(const GetNotificationChannelRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetNotificationChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateNotificationChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UpdateNotificationChannelRequest) */ {
 public:
  UpdateNotificationChannelRequest();
  virtual ~UpdateNotificationChannelRequest();

  UpdateNotificationChannelRequest(const UpdateNotificationChannelRequest& from);

  inline UpdateNotificationChannelRequest& operator=(const UpdateNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateNotificationChannelRequest(UpdateNotificationChannelRequest&& from) noexcept
    : UpdateNotificationChannelRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNotificationChannelRequest& operator=(UpdateNotificationChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateNotificationChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNotificationChannelRequest*>(
               &_UpdateNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UpdateNotificationChannelRequest* other);
  friend void swap(UpdateNotificationChannelRequest& a, UpdateNotificationChannelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateNotificationChannelRequest* New() const final {
    return CreateMaybeMessage<UpdateNotificationChannelRequest>(NULL);
  }

  UpdateNotificationChannelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateNotificationChannelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateNotificationChannelRequest& from);
  void MergeFrom(const UpdateNotificationChannelRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNotificationChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // .google.monitoring.v3.NotificationChannel notification_channel = 3;
  bool has_notification_channel() const;
  void clear_notification_channel();
  static const int kNotificationChannelFieldNumber = 3;
  private:
  const ::google::monitoring::v3::NotificationChannel& _internal_notification_channel() const;
  public:
  const ::google::monitoring::v3::NotificationChannel& notification_channel() const;
  ::google::monitoring::v3::NotificationChannel* release_notification_channel();
  ::google::monitoring::v3::NotificationChannel* mutable_notification_channel();
  void set_allocated_notification_channel(::google::monitoring::v3::NotificationChannel* notification_channel);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UpdateNotificationChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::FieldMask* update_mask_;
  ::google::monitoring::v3::NotificationChannel* notification_channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteNotificationChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.DeleteNotificationChannelRequest) */ {
 public:
  DeleteNotificationChannelRequest();
  virtual ~DeleteNotificationChannelRequest();

  DeleteNotificationChannelRequest(const DeleteNotificationChannelRequest& from);

  inline DeleteNotificationChannelRequest& operator=(const DeleteNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteNotificationChannelRequest(DeleteNotificationChannelRequest&& from) noexcept
    : DeleteNotificationChannelRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNotificationChannelRequest& operator=(DeleteNotificationChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNotificationChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNotificationChannelRequest*>(
               &_DeleteNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeleteNotificationChannelRequest* other);
  friend void swap(DeleteNotificationChannelRequest& a, DeleteNotificationChannelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteNotificationChannelRequest* New() const final {
    return CreateMaybeMessage<DeleteNotificationChannelRequest>(NULL);
  }

  DeleteNotificationChannelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteNotificationChannelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteNotificationChannelRequest& from);
  void MergeFrom(const DeleteNotificationChannelRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNotificationChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool force = 5;
  void clear_force();
  static const int kForceFieldNumber = 5;
  bool force() const;
  void set_force(bool value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.DeleteNotificationChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool force_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendNotificationChannelVerificationCodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest) */ {
 public:
  SendNotificationChannelVerificationCodeRequest();
  virtual ~SendNotificationChannelVerificationCodeRequest();

  SendNotificationChannelVerificationCodeRequest(const SendNotificationChannelVerificationCodeRequest& from);

  inline SendNotificationChannelVerificationCodeRequest& operator=(const SendNotificationChannelVerificationCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendNotificationChannelVerificationCodeRequest(SendNotificationChannelVerificationCodeRequest&& from) noexcept
    : SendNotificationChannelVerificationCodeRequest() {
    *this = ::std::move(from);
  }

  inline SendNotificationChannelVerificationCodeRequest& operator=(SendNotificationChannelVerificationCodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendNotificationChannelVerificationCodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendNotificationChannelVerificationCodeRequest* internal_default_instance() {
    return reinterpret_cast<const SendNotificationChannelVerificationCodeRequest*>(
               &_SendNotificationChannelVerificationCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SendNotificationChannelVerificationCodeRequest* other);
  friend void swap(SendNotificationChannelVerificationCodeRequest& a, SendNotificationChannelVerificationCodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendNotificationChannelVerificationCodeRequest* New() const final {
    return CreateMaybeMessage<SendNotificationChannelVerificationCodeRequest>(NULL);
  }

  SendNotificationChannelVerificationCodeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendNotificationChannelVerificationCodeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendNotificationChannelVerificationCodeRequest& from);
  void MergeFrom(const SendNotificationChannelVerificationCodeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendNotificationChannelVerificationCodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNotificationChannelVerificationCodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest) */ {
 public:
  GetNotificationChannelVerificationCodeRequest();
  virtual ~GetNotificationChannelVerificationCodeRequest();

  GetNotificationChannelVerificationCodeRequest(const GetNotificationChannelVerificationCodeRequest& from);

  inline GetNotificationChannelVerificationCodeRequest& operator=(const GetNotificationChannelVerificationCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNotificationChannelVerificationCodeRequest(GetNotificationChannelVerificationCodeRequest&& from) noexcept
    : GetNotificationChannelVerificationCodeRequest() {
    *this = ::std::move(from);
  }

  inline GetNotificationChannelVerificationCodeRequest& operator=(GetNotificationChannelVerificationCodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNotificationChannelVerificationCodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNotificationChannelVerificationCodeRequest* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelVerificationCodeRequest*>(
               &_GetNotificationChannelVerificationCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetNotificationChannelVerificationCodeRequest* other);
  friend void swap(GetNotificationChannelVerificationCodeRequest& a, GetNotificationChannelVerificationCodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNotificationChannelVerificationCodeRequest* New() const final {
    return CreateMaybeMessage<GetNotificationChannelVerificationCodeRequest>(NULL);
  }

  GetNotificationChannelVerificationCodeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNotificationChannelVerificationCodeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNotificationChannelVerificationCodeRequest& from);
  void MergeFrom(const GetNotificationChannelVerificationCodeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationChannelVerificationCodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp expire_time = 2;
  bool has_expire_time() const;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_expire_time() const;
  public:
  const ::google::protobuf::Timestamp& expire_time() const;
  ::google::protobuf::Timestamp* release_expire_time();
  ::google::protobuf::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::google::protobuf::Timestamp* expire_time);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* expire_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNotificationChannelVerificationCodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse) */ {
 public:
  GetNotificationChannelVerificationCodeResponse();
  virtual ~GetNotificationChannelVerificationCodeResponse();

  GetNotificationChannelVerificationCodeResponse(const GetNotificationChannelVerificationCodeResponse& from);

  inline GetNotificationChannelVerificationCodeResponse& operator=(const GetNotificationChannelVerificationCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNotificationChannelVerificationCodeResponse(GetNotificationChannelVerificationCodeResponse&& from) noexcept
    : GetNotificationChannelVerificationCodeResponse() {
    *this = ::std::move(from);
  }

  inline GetNotificationChannelVerificationCodeResponse& operator=(GetNotificationChannelVerificationCodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNotificationChannelVerificationCodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNotificationChannelVerificationCodeResponse* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelVerificationCodeResponse*>(
               &_GetNotificationChannelVerificationCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetNotificationChannelVerificationCodeResponse* other);
  friend void swap(GetNotificationChannelVerificationCodeResponse& a, GetNotificationChannelVerificationCodeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNotificationChannelVerificationCodeResponse* New() const final {
    return CreateMaybeMessage<GetNotificationChannelVerificationCodeResponse>(NULL);
  }

  GetNotificationChannelVerificationCodeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNotificationChannelVerificationCodeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNotificationChannelVerificationCodeResponse& from);
  void MergeFrom(const GetNotificationChannelVerificationCodeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationChannelVerificationCodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // .google.protobuf.Timestamp expire_time = 2;
  bool has_expire_time() const;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_expire_time() const;
  public:
  const ::google::protobuf::Timestamp& expire_time() const;
  ::google::protobuf::Timestamp* release_expire_time();
  ::google::protobuf::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::google::protobuf::Timestamp* expire_time);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::Timestamp* expire_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyNotificationChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.VerifyNotificationChannelRequest) */ {
 public:
  VerifyNotificationChannelRequest();
  virtual ~VerifyNotificationChannelRequest();

  VerifyNotificationChannelRequest(const VerifyNotificationChannelRequest& from);

  inline VerifyNotificationChannelRequest& operator=(const VerifyNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyNotificationChannelRequest(VerifyNotificationChannelRequest&& from) noexcept
    : VerifyNotificationChannelRequest() {
    *this = ::std::move(from);
  }

  inline VerifyNotificationChannelRequest& operator=(VerifyNotificationChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyNotificationChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyNotificationChannelRequest*>(
               &_VerifyNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(VerifyNotificationChannelRequest* other);
  friend void swap(VerifyNotificationChannelRequest& a, VerifyNotificationChannelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyNotificationChannelRequest* New() const final {
    return CreateMaybeMessage<VerifyNotificationChannelRequest>(NULL);
  }

  VerifyNotificationChannelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyNotificationChannelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyNotificationChannelRequest& from);
  void MergeFrom(const VerifyNotificationChannelRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyNotificationChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.VerifyNotificationChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListNotificationChannelDescriptorsRequest

// string name = 4;
inline void ListNotificationChannelDescriptorsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotificationChannelDescriptorsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
  return name_.GetNoArena();
}
inline void ListNotificationChannelDescriptorsRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
}
#if LANG_CXX11
inline void ListNotificationChannelDescriptorsRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
}
#endif
inline void ListNotificationChannelDescriptorsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
}
inline void ListNotificationChannelDescriptorsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
}
inline ::std::string* ListNotificationChannelDescriptorsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotificationChannelDescriptorsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotificationChannelDescriptorsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.name)
}

// int32 page_size = 2;
inline void ListNotificationChannelDescriptorsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListNotificationChannelDescriptorsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_size)
  return page_size_;
}
inline void ListNotificationChannelDescriptorsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_size)
}

// string page_token = 3;
inline void ListNotificationChannelDescriptorsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotificationChannelDescriptorsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListNotificationChannelDescriptorsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
}
#if LANG_CXX11
inline void ListNotificationChannelDescriptorsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
}
#endif
inline void ListNotificationChannelDescriptorsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
}
inline void ListNotificationChannelDescriptorsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
}
inline ::std::string* ListNotificationChannelDescriptorsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotificationChannelDescriptorsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotificationChannelDescriptorsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelDescriptorsRequest.page_token)
}

// -------------------------------------------------------------------

// ListNotificationChannelDescriptorsResponse

// repeated .google.monitoring.v3.NotificationChannelDescriptor channel_descriptors = 1;
inline int ListNotificationChannelDescriptorsResponse::channel_descriptors_size() const {
  return channel_descriptors_.size();
}
inline ::google::monitoring::v3::NotificationChannelDescriptor* ListNotificationChannelDescriptorsResponse::mutable_channel_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.channel_descriptors)
  return channel_descriptors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::NotificationChannelDescriptor >*
ListNotificationChannelDescriptorsResponse::mutable_channel_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.channel_descriptors)
  return &channel_descriptors_;
}
inline const ::google::monitoring::v3::NotificationChannelDescriptor& ListNotificationChannelDescriptorsResponse::channel_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.channel_descriptors)
  return channel_descriptors_.Get(index);
}
inline ::google::monitoring::v3::NotificationChannelDescriptor* ListNotificationChannelDescriptorsResponse::add_channel_descriptors() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.channel_descriptors)
  return channel_descriptors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::NotificationChannelDescriptor >&
ListNotificationChannelDescriptorsResponse::channel_descriptors() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.channel_descriptors)
  return channel_descriptors_;
}

// string next_page_token = 2;
inline void ListNotificationChannelDescriptorsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotificationChannelDescriptorsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListNotificationChannelDescriptorsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListNotificationChannelDescriptorsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
}
#endif
inline void ListNotificationChannelDescriptorsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
}
inline void ListNotificationChannelDescriptorsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
}
inline ::std::string* ListNotificationChannelDescriptorsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotificationChannelDescriptorsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotificationChannelDescriptorsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelDescriptorsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetNotificationChannelDescriptorRequest

// string name = 3;
inline void GetNotificationChannelDescriptorRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNotificationChannelDescriptorRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
  return name_.GetNoArena();
}
inline void GetNotificationChannelDescriptorRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
}
#if LANG_CXX11
inline void GetNotificationChannelDescriptorRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
}
#endif
inline void GetNotificationChannelDescriptorRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
}
inline void GetNotificationChannelDescriptorRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
}
inline ::std::string* GetNotificationChannelDescriptorRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNotificationChannelDescriptorRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNotificationChannelDescriptorRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelDescriptorRequest.name)
}

// -------------------------------------------------------------------

// CreateNotificationChannelRequest

// string name = 3;
inline void CreateNotificationChannelRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNotificationChannelRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateNotificationChannelRequest.name)
  return name_.GetNoArena();
}
inline void CreateNotificationChannelRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateNotificationChannelRequest.name)
}
#if LANG_CXX11
inline void CreateNotificationChannelRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.CreateNotificationChannelRequest.name)
}
#endif
inline void CreateNotificationChannelRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.CreateNotificationChannelRequest.name)
}
inline void CreateNotificationChannelRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.CreateNotificationChannelRequest.name)
}
inline ::std::string* CreateNotificationChannelRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateNotificationChannelRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNotificationChannelRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateNotificationChannelRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNotificationChannelRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateNotificationChannelRequest.name)
}

// .google.monitoring.v3.NotificationChannel notification_channel = 2;
inline bool CreateNotificationChannelRequest::has_notification_channel() const {
  return this != internal_default_instance() && notification_channel_ != NULL;
}
inline const ::google::monitoring::v3::NotificationChannel& CreateNotificationChannelRequest::_internal_notification_channel() const {
  return *notification_channel_;
}
inline const ::google::monitoring::v3::NotificationChannel& CreateNotificationChannelRequest::notification_channel() const {
  const ::google::monitoring::v3::NotificationChannel* p = notification_channel_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateNotificationChannelRequest.notification_channel)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::NotificationChannel*>(
      &::google::monitoring::v3::_NotificationChannel_default_instance_);
}
inline ::google::monitoring::v3::NotificationChannel* CreateNotificationChannelRequest::release_notification_channel() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateNotificationChannelRequest.notification_channel)
  
  ::google::monitoring::v3::NotificationChannel* temp = notification_channel_;
  notification_channel_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::NotificationChannel* CreateNotificationChannelRequest::mutable_notification_channel() {
  
  if (notification_channel_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::NotificationChannel>(GetArenaNoVirtual());
    notification_channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateNotificationChannelRequest.notification_channel)
  return notification_channel_;
}
inline void CreateNotificationChannelRequest::set_allocated_notification_channel(::google::monitoring::v3::NotificationChannel* notification_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(notification_channel_);
  }
  if (notification_channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      notification_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, notification_channel, submessage_arena);
    }
    
  } else {
    
  }
  notification_channel_ = notification_channel;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateNotificationChannelRequest.notification_channel)
}

// -------------------------------------------------------------------

// ListNotificationChannelsRequest

// string name = 5;
inline void ListNotificationChannelsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotificationChannelsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsRequest.name)
  return name_.GetNoArena();
}
inline void ListNotificationChannelsRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsRequest.name)
}
#if LANG_CXX11
inline void ListNotificationChannelsRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListNotificationChannelsRequest.name)
}
#endif
inline void ListNotificationChannelsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListNotificationChannelsRequest.name)
}
inline void ListNotificationChannelsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListNotificationChannelsRequest.name)
}
inline ::std::string* ListNotificationChannelsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotificationChannelsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelsRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotificationChannelsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelsRequest.name)
}

// string filter = 6;
inline void ListNotificationChannelsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotificationChannelsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsRequest.filter)
  return filter_.GetNoArena();
}
inline void ListNotificationChannelsRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsRequest.filter)
}
#if LANG_CXX11
inline void ListNotificationChannelsRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListNotificationChannelsRequest.filter)
}
#endif
inline void ListNotificationChannelsRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListNotificationChannelsRequest.filter)
}
inline void ListNotificationChannelsRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListNotificationChannelsRequest.filter)
}
inline ::std::string* ListNotificationChannelsRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotificationChannelsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelsRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotificationChannelsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelsRequest.filter)
}

// string order_by = 7;
inline void ListNotificationChannelsRequest::clear_order_by() {
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotificationChannelsRequest::order_by() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
  return order_by_.GetNoArena();
}
inline void ListNotificationChannelsRequest::set_order_by(const ::std::string& value) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
}
#if LANG_CXX11
inline void ListNotificationChannelsRequest::set_order_by(::std::string&& value) {
  
  order_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
}
#endif
inline void ListNotificationChannelsRequest::set_order_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
}
inline void ListNotificationChannelsRequest::set_order_by(const char* value, size_t size) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
}
inline ::std::string* ListNotificationChannelsRequest::mutable_order_by() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
  return order_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotificationChannelsRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
  
  return order_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotificationChannelsRequest::set_allocated_order_by(::std::string* order_by) {
  if (order_by != NULL) {
    
  } else {
    
  }
  order_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_by);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelsRequest.order_by)
}

// int32 page_size = 3;
inline void ListNotificationChannelsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListNotificationChannelsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsRequest.page_size)
  return page_size_;
}
inline void ListNotificationChannelsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsRequest.page_size)
}

// string page_token = 4;
inline void ListNotificationChannelsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotificationChannelsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListNotificationChannelsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
}
#if LANG_CXX11
inline void ListNotificationChannelsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
}
#endif
inline void ListNotificationChannelsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
}
inline void ListNotificationChannelsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
}
inline ::std::string* ListNotificationChannelsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotificationChannelsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotificationChannelsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelsRequest.page_token)
}

// -------------------------------------------------------------------

// ListNotificationChannelsResponse

// repeated .google.monitoring.v3.NotificationChannel notification_channels = 3;
inline int ListNotificationChannelsResponse::notification_channels_size() const {
  return notification_channels_.size();
}
inline ::google::monitoring::v3::NotificationChannel* ListNotificationChannelsResponse::mutable_notification_channels(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsResponse.notification_channels)
  return notification_channels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::NotificationChannel >*
ListNotificationChannelsResponse::mutable_notification_channels() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListNotificationChannelsResponse.notification_channels)
  return &notification_channels_;
}
inline const ::google::monitoring::v3::NotificationChannel& ListNotificationChannelsResponse::notification_channels(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsResponse.notification_channels)
  return notification_channels_.Get(index);
}
inline ::google::monitoring::v3::NotificationChannel* ListNotificationChannelsResponse::add_notification_channels() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListNotificationChannelsResponse.notification_channels)
  return notification_channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::NotificationChannel >&
ListNotificationChannelsResponse::notification_channels() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListNotificationChannelsResponse.notification_channels)
  return notification_channels_;
}

// string next_page_token = 2;
inline void ListNotificationChannelsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNotificationChannelsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListNotificationChannelsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListNotificationChannelsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
}
#endif
inline void ListNotificationChannelsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
}
inline void ListNotificationChannelsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
}
inline ::std::string* ListNotificationChannelsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNotificationChannelsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNotificationChannelsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListNotificationChannelsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetNotificationChannelRequest

// string name = 3;
inline void GetNotificationChannelRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNotificationChannelRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelRequest.name)
  return name_.GetNoArena();
}
inline void GetNotificationChannelRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetNotificationChannelRequest.name)
}
#if LANG_CXX11
inline void GetNotificationChannelRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.GetNotificationChannelRequest.name)
}
#endif
inline void GetNotificationChannelRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.GetNotificationChannelRequest.name)
}
inline void GetNotificationChannelRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.GetNotificationChannelRequest.name)
}
inline ::std::string* GetNotificationChannelRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNotificationChannelRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNotificationChannelRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelRequest.name)
}

// -------------------------------------------------------------------

// UpdateNotificationChannelRequest

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNotificationChannelRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateNotificationChannelRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateNotificationChannelRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateNotificationChannelRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateNotificationChannelRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateNotificationChannelRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateNotificationChannelRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateNotificationChannelRequest.update_mask)
  return update_mask_;
}
inline void UpdateNotificationChannelRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateNotificationChannelRequest.update_mask)
}

// .google.monitoring.v3.NotificationChannel notification_channel = 3;
inline bool UpdateNotificationChannelRequest::has_notification_channel() const {
  return this != internal_default_instance() && notification_channel_ != NULL;
}
inline const ::google::monitoring::v3::NotificationChannel& UpdateNotificationChannelRequest::_internal_notification_channel() const {
  return *notification_channel_;
}
inline const ::google::monitoring::v3::NotificationChannel& UpdateNotificationChannelRequest::notification_channel() const {
  const ::google::monitoring::v3::NotificationChannel* p = notification_channel_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateNotificationChannelRequest.notification_channel)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::NotificationChannel*>(
      &::google::monitoring::v3::_NotificationChannel_default_instance_);
}
inline ::google::monitoring::v3::NotificationChannel* UpdateNotificationChannelRequest::release_notification_channel() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateNotificationChannelRequest.notification_channel)
  
  ::google::monitoring::v3::NotificationChannel* temp = notification_channel_;
  notification_channel_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::NotificationChannel* UpdateNotificationChannelRequest::mutable_notification_channel() {
  
  if (notification_channel_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::NotificationChannel>(GetArenaNoVirtual());
    notification_channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateNotificationChannelRequest.notification_channel)
  return notification_channel_;
}
inline void UpdateNotificationChannelRequest::set_allocated_notification_channel(::google::monitoring::v3::NotificationChannel* notification_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(notification_channel_);
  }
  if (notification_channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      notification_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, notification_channel, submessage_arena);
    }
    
  } else {
    
  }
  notification_channel_ = notification_channel;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateNotificationChannelRequest.notification_channel)
}

// -------------------------------------------------------------------

// DeleteNotificationChannelRequest

// string name = 3;
inline void DeleteNotificationChannelRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNotificationChannelRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteNotificationChannelRequest.name)
  return name_.GetNoArena();
}
inline void DeleteNotificationChannelRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteNotificationChannelRequest.name)
}
#if LANG_CXX11
inline void DeleteNotificationChannelRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.DeleteNotificationChannelRequest.name)
}
#endif
inline void DeleteNotificationChannelRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.DeleteNotificationChannelRequest.name)
}
inline void DeleteNotificationChannelRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.DeleteNotificationChannelRequest.name)
}
inline ::std::string* DeleteNotificationChannelRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.DeleteNotificationChannelRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNotificationChannelRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.DeleteNotificationChannelRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNotificationChannelRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.DeleteNotificationChannelRequest.name)
}

// bool force = 5;
inline void DeleteNotificationChannelRequest::clear_force() {
  force_ = false;
}
inline bool DeleteNotificationChannelRequest::force() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteNotificationChannelRequest.force)
  return force_;
}
inline void DeleteNotificationChannelRequest::set_force(bool value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteNotificationChannelRequest.force)
}

// -------------------------------------------------------------------

// SendNotificationChannelVerificationCodeRequest

// string name = 1;
inline void SendNotificationChannelVerificationCodeRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendNotificationChannelVerificationCodeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
  return name_.GetNoArena();
}
inline void SendNotificationChannelVerificationCodeRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
}
#if LANG_CXX11
inline void SendNotificationChannelVerificationCodeRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
}
#endif
inline void SendNotificationChannelVerificationCodeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
}
inline void SendNotificationChannelVerificationCodeRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
}
inline ::std::string* SendNotificationChannelVerificationCodeRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendNotificationChannelVerificationCodeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendNotificationChannelVerificationCodeRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.name)
}

// -------------------------------------------------------------------

// GetNotificationChannelVerificationCodeRequest

// string name = 1;
inline void GetNotificationChannelVerificationCodeRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNotificationChannelVerificationCodeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
  return name_.GetNoArena();
}
inline void GetNotificationChannelVerificationCodeRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
}
#if LANG_CXX11
inline void GetNotificationChannelVerificationCodeRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
}
#endif
inline void GetNotificationChannelVerificationCodeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
}
inline void GetNotificationChannelVerificationCodeRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
}
inline ::std::string* GetNotificationChannelVerificationCodeRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNotificationChannelVerificationCodeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNotificationChannelVerificationCodeRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.name)
}

// .google.protobuf.Timestamp expire_time = 2;
inline bool GetNotificationChannelVerificationCodeRequest::has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& GetNotificationChannelVerificationCodeRequest::_internal_expire_time() const {
  return *expire_time_;
}
inline const ::google::protobuf::Timestamp& GetNotificationChannelVerificationCodeRequest::expire_time() const {
  const ::google::protobuf::Timestamp* p = expire_time_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.expire_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* GetNotificationChannelVerificationCodeRequest::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.expire_time)
  
  ::google::protobuf::Timestamp* temp = expire_time_;
  expire_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* GetNotificationChannelVerificationCodeRequest::mutable_expire_time() {
  
  if (expire_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expire_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.expire_time)
  return expire_time_;
}
inline void GetNotificationChannelVerificationCodeRequest::set_allocated_expire_time(::google::protobuf::Timestamp* expire_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      expire_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.expire_time)
}

// -------------------------------------------------------------------

// GetNotificationChannelVerificationCodeResponse

// string code = 1;
inline void GetNotificationChannelVerificationCodeResponse::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNotificationChannelVerificationCodeResponse::code() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
  return code_.GetNoArena();
}
inline void GetNotificationChannelVerificationCodeResponse::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
}
#if LANG_CXX11
inline void GetNotificationChannelVerificationCodeResponse::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
}
#endif
inline void GetNotificationChannelVerificationCodeResponse::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
}
inline void GetNotificationChannelVerificationCodeResponse::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
}
inline ::std::string* GetNotificationChannelVerificationCodeResponse::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNotificationChannelVerificationCodeResponse::release_code() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNotificationChannelVerificationCodeResponse::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.code)
}

// .google.protobuf.Timestamp expire_time = 2;
inline bool GetNotificationChannelVerificationCodeResponse::has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& GetNotificationChannelVerificationCodeResponse::_internal_expire_time() const {
  return *expire_time_;
}
inline const ::google::protobuf::Timestamp& GetNotificationChannelVerificationCodeResponse::expire_time() const {
  const ::google::protobuf::Timestamp* p = expire_time_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.expire_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* GetNotificationChannelVerificationCodeResponse::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.expire_time)
  
  ::google::protobuf::Timestamp* temp = expire_time_;
  expire_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* GetNotificationChannelVerificationCodeResponse::mutable_expire_time() {
  
  if (expire_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expire_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.expire_time)
  return expire_time_;
}
inline void GetNotificationChannelVerificationCodeResponse::set_allocated_expire_time(::google::protobuf::Timestamp* expire_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      expire_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.expire_time)
}

// -------------------------------------------------------------------

// VerifyNotificationChannelRequest

// string name = 1;
inline void VerifyNotificationChannelRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyNotificationChannelRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.VerifyNotificationChannelRequest.name)
  return name_.GetNoArena();
}
inline void VerifyNotificationChannelRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.VerifyNotificationChannelRequest.name)
}
#if LANG_CXX11
inline void VerifyNotificationChannelRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.VerifyNotificationChannelRequest.name)
}
#endif
inline void VerifyNotificationChannelRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.VerifyNotificationChannelRequest.name)
}
inline void VerifyNotificationChannelRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.VerifyNotificationChannelRequest.name)
}
inline ::std::string* VerifyNotificationChannelRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.VerifyNotificationChannelRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyNotificationChannelRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.VerifyNotificationChannelRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyNotificationChannelRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.VerifyNotificationChannelRequest.name)
}

// string code = 2;
inline void VerifyNotificationChannelRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyNotificationChannelRequest::code() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.VerifyNotificationChannelRequest.code)
  return code_.GetNoArena();
}
inline void VerifyNotificationChannelRequest::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.VerifyNotificationChannelRequest.code)
}
#if LANG_CXX11
inline void VerifyNotificationChannelRequest::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.VerifyNotificationChannelRequest.code)
}
#endif
inline void VerifyNotificationChannelRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.VerifyNotificationChannelRequest.code)
}
inline void VerifyNotificationChannelRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.VerifyNotificationChannelRequest.code)
}
inline ::std::string* VerifyNotificationChannelRequest::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.VerifyNotificationChannelRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyNotificationChannelRequest::release_code() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.VerifyNotificationChannelRequest.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyNotificationChannelRequest::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.VerifyNotificationChannelRequest.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_5fservice_2eproto
