// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/uptime.proto

#ifndef PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fuptime_2eproto
#define PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fuptime_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/monitored_resource.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto 

namespace protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto
namespace google {
namespace monitoring {
namespace v3 {
class InternalChecker;
class InternalCheckerDefaultTypeInternal;
extern InternalCheckerDefaultTypeInternal _InternalChecker_default_instance_;
class UptimeCheckConfig;
class UptimeCheckConfigDefaultTypeInternal;
extern UptimeCheckConfigDefaultTypeInternal _UptimeCheckConfig_default_instance_;
class UptimeCheckConfig_ContentMatcher;
class UptimeCheckConfig_ContentMatcherDefaultTypeInternal;
extern UptimeCheckConfig_ContentMatcherDefaultTypeInternal _UptimeCheckConfig_ContentMatcher_default_instance_;
class UptimeCheckConfig_HttpCheck;
class UptimeCheckConfig_HttpCheckDefaultTypeInternal;
extern UptimeCheckConfig_HttpCheckDefaultTypeInternal _UptimeCheckConfig_HttpCheck_default_instance_;
class UptimeCheckConfig_HttpCheck_BasicAuthentication;
class UptimeCheckConfig_HttpCheck_BasicAuthenticationDefaultTypeInternal;
extern UptimeCheckConfig_HttpCheck_BasicAuthenticationDefaultTypeInternal _UptimeCheckConfig_HttpCheck_BasicAuthentication_default_instance_;
class UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse;
class UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUseDefaultTypeInternal;
extern UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUseDefaultTypeInternal _UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse_default_instance_;
class UptimeCheckConfig_ResourceGroup;
class UptimeCheckConfig_ResourceGroupDefaultTypeInternal;
extern UptimeCheckConfig_ResourceGroupDefaultTypeInternal _UptimeCheckConfig_ResourceGroup_default_instance_;
class UptimeCheckConfig_TcpCheck;
class UptimeCheckConfig_TcpCheckDefaultTypeInternal;
extern UptimeCheckConfig_TcpCheckDefaultTypeInternal _UptimeCheckConfig_TcpCheck_default_instance_;
class UptimeCheckIp;
class UptimeCheckIpDefaultTypeInternal;
extern UptimeCheckIpDefaultTypeInternal _UptimeCheckIp_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::monitoring::v3::InternalChecker* Arena::CreateMaybeMessage<::google::monitoring::v3::InternalChecker>(Arena*);
template<> ::google::monitoring::v3::UptimeCheckConfig* Arena::CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig>(Arena*);
template<> ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher* Arena::CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig_ContentMatcher>(Arena*);
template<> ::google::monitoring::v3::UptimeCheckConfig_HttpCheck* Arena::CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig_HttpCheck>(Arena*);
template<> ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication* Arena::CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication>(Arena*);
template<> ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse>(Arena*);
template<> ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup* Arena::CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig_ResourceGroup>(Arena*);
template<> ::google::monitoring::v3::UptimeCheckConfig_TcpCheck* Arena::CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig_TcpCheck>(Arena*);
template<> ::google::monitoring::v3::UptimeCheckIp* Arena::CreateMaybeMessage<::google::monitoring::v3::UptimeCheckIp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace monitoring {
namespace v3 {

enum UptimeCheckRegion {
  REGION_UNSPECIFIED = 0,
  USA = 1,
  EUROPE = 2,
  SOUTH_AMERICA = 3,
  ASIA_PACIFIC = 4,
  UptimeCheckRegion_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UptimeCheckRegion_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UptimeCheckRegion_IsValid(int value);
const UptimeCheckRegion UptimeCheckRegion_MIN = REGION_UNSPECIFIED;
const UptimeCheckRegion UptimeCheckRegion_MAX = ASIA_PACIFIC;
const int UptimeCheckRegion_ARRAYSIZE = UptimeCheckRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* UptimeCheckRegion_descriptor();
inline const ::std::string& UptimeCheckRegion_Name(UptimeCheckRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    UptimeCheckRegion_descriptor(), value);
}
inline bool UptimeCheckRegion_Parse(
    const ::std::string& name, UptimeCheckRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UptimeCheckRegion>(
    UptimeCheckRegion_descriptor(), name, value);
}
enum GroupResourceType {
  RESOURCE_TYPE_UNSPECIFIED = 0,
  INSTANCE = 1,
  AWS_ELB_LOAD_BALANCER = 2,
  GroupResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GroupResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GroupResourceType_IsValid(int value);
const GroupResourceType GroupResourceType_MIN = RESOURCE_TYPE_UNSPECIFIED;
const GroupResourceType GroupResourceType_MAX = AWS_ELB_LOAD_BALANCER;
const int GroupResourceType_ARRAYSIZE = GroupResourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GroupResourceType_descriptor();
inline const ::std::string& GroupResourceType_Name(GroupResourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GroupResourceType_descriptor(), value);
}
inline bool GroupResourceType_Parse(
    const ::std::string& name, GroupResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GroupResourceType>(
    GroupResourceType_descriptor(), name, value);
}
// ===================================================================

class InternalChecker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.InternalChecker) */ {
 public:
  InternalChecker();
  virtual ~InternalChecker();

  InternalChecker(const InternalChecker& from);

  inline InternalChecker& operator=(const InternalChecker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InternalChecker(InternalChecker&& from) noexcept
    : InternalChecker() {
    *this = ::std::move(from);
  }

  inline InternalChecker& operator=(InternalChecker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InternalChecker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalChecker* internal_default_instance() {
    return reinterpret_cast<const InternalChecker*>(
               &_InternalChecker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InternalChecker* other);
  friend void swap(InternalChecker& a, InternalChecker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InternalChecker* New() const final {
    return CreateMaybeMessage<InternalChecker>(NULL);
  }

  InternalChecker* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InternalChecker>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InternalChecker& from);
  void MergeFrom(const InternalChecker& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalChecker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string network = 2;
  void clear_network();
  static const int kNetworkFieldNumber = 2;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  #if LANG_CXX11
  void set_network(::std::string&& value);
  #endif
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // string gcp_zone = 3;
  void clear_gcp_zone();
  static const int kGcpZoneFieldNumber = 3;
  const ::std::string& gcp_zone() const;
  void set_gcp_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_gcp_zone(::std::string&& value);
  #endif
  void set_gcp_zone(const char* value);
  void set_gcp_zone(const char* value, size_t size);
  ::std::string* mutable_gcp_zone();
  ::std::string* release_gcp_zone();
  void set_allocated_gcp_zone(::std::string* gcp_zone);

  // string checker_id = 4;
  void clear_checker_id();
  static const int kCheckerIdFieldNumber = 4;
  const ::std::string& checker_id() const;
  void set_checker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_checker_id(::std::string&& value);
  #endif
  void set_checker_id(const char* value);
  void set_checker_id(const char* value, size_t size);
  ::std::string* mutable_checker_id();
  ::std::string* release_checker_id();
  void set_allocated_checker_id(::std::string* checker_id);

  // string display_name = 5;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 5;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.InternalChecker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr gcp_zone_;
  ::google::protobuf::internal::ArenaStringPtr checker_id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UptimeCheckConfig_ResourceGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UptimeCheckConfig.ResourceGroup) */ {
 public:
  UptimeCheckConfig_ResourceGroup();
  virtual ~UptimeCheckConfig_ResourceGroup();

  UptimeCheckConfig_ResourceGroup(const UptimeCheckConfig_ResourceGroup& from);

  inline UptimeCheckConfig_ResourceGroup& operator=(const UptimeCheckConfig_ResourceGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UptimeCheckConfig_ResourceGroup(UptimeCheckConfig_ResourceGroup&& from) noexcept
    : UptimeCheckConfig_ResourceGroup() {
    *this = ::std::move(from);
  }

  inline UptimeCheckConfig_ResourceGroup& operator=(UptimeCheckConfig_ResourceGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UptimeCheckConfig_ResourceGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UptimeCheckConfig_ResourceGroup* internal_default_instance() {
    return reinterpret_cast<const UptimeCheckConfig_ResourceGroup*>(
               &_UptimeCheckConfig_ResourceGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UptimeCheckConfig_ResourceGroup* other);
  friend void swap(UptimeCheckConfig_ResourceGroup& a, UptimeCheckConfig_ResourceGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UptimeCheckConfig_ResourceGroup* New() const final {
    return CreateMaybeMessage<UptimeCheckConfig_ResourceGroup>(NULL);
  }

  UptimeCheckConfig_ResourceGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UptimeCheckConfig_ResourceGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UptimeCheckConfig_ResourceGroup& from);
  void MergeFrom(const UptimeCheckConfig_ResourceGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UptimeCheckConfig_ResourceGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // .google.monitoring.v3.GroupResourceType resource_type = 2;
  void clear_resource_type();
  static const int kResourceTypeFieldNumber = 2;
  ::google::monitoring::v3::GroupResourceType resource_type() const;
  void set_resource_type(::google::monitoring::v3::GroupResourceType value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UptimeCheckConfig.ResourceGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  int resource_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UptimeCheckConfig_HttpCheck_BasicAuthentication : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication) */ {
 public:
  UptimeCheckConfig_HttpCheck_BasicAuthentication();
  virtual ~UptimeCheckConfig_HttpCheck_BasicAuthentication();

  UptimeCheckConfig_HttpCheck_BasicAuthentication(const UptimeCheckConfig_HttpCheck_BasicAuthentication& from);

  inline UptimeCheckConfig_HttpCheck_BasicAuthentication& operator=(const UptimeCheckConfig_HttpCheck_BasicAuthentication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UptimeCheckConfig_HttpCheck_BasicAuthentication(UptimeCheckConfig_HttpCheck_BasicAuthentication&& from) noexcept
    : UptimeCheckConfig_HttpCheck_BasicAuthentication() {
    *this = ::std::move(from);
  }

  inline UptimeCheckConfig_HttpCheck_BasicAuthentication& operator=(UptimeCheckConfig_HttpCheck_BasicAuthentication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UptimeCheckConfig_HttpCheck_BasicAuthentication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UptimeCheckConfig_HttpCheck_BasicAuthentication* internal_default_instance() {
    return reinterpret_cast<const UptimeCheckConfig_HttpCheck_BasicAuthentication*>(
               &_UptimeCheckConfig_HttpCheck_BasicAuthentication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UptimeCheckConfig_HttpCheck_BasicAuthentication* other);
  friend void swap(UptimeCheckConfig_HttpCheck_BasicAuthentication& a, UptimeCheckConfig_HttpCheck_BasicAuthentication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UptimeCheckConfig_HttpCheck_BasicAuthentication* New() const final {
    return CreateMaybeMessage<UptimeCheckConfig_HttpCheck_BasicAuthentication>(NULL);
  }

  UptimeCheckConfig_HttpCheck_BasicAuthentication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UptimeCheckConfig_HttpCheck_BasicAuthentication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UptimeCheckConfig_HttpCheck_BasicAuthentication& from);
  void MergeFrom(const UptimeCheckConfig_HttpCheck_BasicAuthentication& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UptimeCheckConfig_HttpCheck_BasicAuthentication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse();
  UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse& other);
  static const UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse*>(&_UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class UptimeCheckConfig_HttpCheck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UptimeCheckConfig.HttpCheck) */ {
 public:
  UptimeCheckConfig_HttpCheck();
  virtual ~UptimeCheckConfig_HttpCheck();

  UptimeCheckConfig_HttpCheck(const UptimeCheckConfig_HttpCheck& from);

  inline UptimeCheckConfig_HttpCheck& operator=(const UptimeCheckConfig_HttpCheck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UptimeCheckConfig_HttpCheck(UptimeCheckConfig_HttpCheck&& from) noexcept
    : UptimeCheckConfig_HttpCheck() {
    *this = ::std::move(from);
  }

  inline UptimeCheckConfig_HttpCheck& operator=(UptimeCheckConfig_HttpCheck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UptimeCheckConfig_HttpCheck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UptimeCheckConfig_HttpCheck* internal_default_instance() {
    return reinterpret_cast<const UptimeCheckConfig_HttpCheck*>(
               &_UptimeCheckConfig_HttpCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UptimeCheckConfig_HttpCheck* other);
  friend void swap(UptimeCheckConfig_HttpCheck& a, UptimeCheckConfig_HttpCheck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UptimeCheckConfig_HttpCheck* New() const final {
    return CreateMaybeMessage<UptimeCheckConfig_HttpCheck>(NULL);
  }

  UptimeCheckConfig_HttpCheck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UptimeCheckConfig_HttpCheck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UptimeCheckConfig_HttpCheck& from);
  void MergeFrom(const UptimeCheckConfig_HttpCheck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UptimeCheckConfig_HttpCheck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UptimeCheckConfig_HttpCheck_BasicAuthentication BasicAuthentication;

  // accessors -------------------------------------------------------

  // map<string, string> headers = 6;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      headers() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_headers();

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication auth_info = 4;
  bool has_auth_info() const;
  void clear_auth_info();
  static const int kAuthInfoFieldNumber = 4;
  private:
  const ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication& _internal_auth_info() const;
  public:
  const ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication& auth_info() const;
  ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication* release_auth_info();
  ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication* mutable_auth_info();
  void set_allocated_auth_info(::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication* auth_info);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // bool use_ssl = 1;
  void clear_use_ssl();
  static const int kUseSslFieldNumber = 1;
  bool use_ssl() const;
  void set_use_ssl(bool value);

  // bool mask_headers = 5;
  void clear_mask_headers();
  static const int kMaskHeadersFieldNumber = 5;
  bool mask_headers() const;
  void set_mask_headers(bool value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UptimeCheckConfig.HttpCheck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      UptimeCheckConfig_HttpCheck_HeadersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication* auth_info_;
  ::google::protobuf::int32 port_;
  bool use_ssl_;
  bool mask_headers_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UptimeCheckConfig_TcpCheck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UptimeCheckConfig.TcpCheck) */ {
 public:
  UptimeCheckConfig_TcpCheck();
  virtual ~UptimeCheckConfig_TcpCheck();

  UptimeCheckConfig_TcpCheck(const UptimeCheckConfig_TcpCheck& from);

  inline UptimeCheckConfig_TcpCheck& operator=(const UptimeCheckConfig_TcpCheck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UptimeCheckConfig_TcpCheck(UptimeCheckConfig_TcpCheck&& from) noexcept
    : UptimeCheckConfig_TcpCheck() {
    *this = ::std::move(from);
  }

  inline UptimeCheckConfig_TcpCheck& operator=(UptimeCheckConfig_TcpCheck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UptimeCheckConfig_TcpCheck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UptimeCheckConfig_TcpCheck* internal_default_instance() {
    return reinterpret_cast<const UptimeCheckConfig_TcpCheck*>(
               &_UptimeCheckConfig_TcpCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UptimeCheckConfig_TcpCheck* other);
  friend void swap(UptimeCheckConfig_TcpCheck& a, UptimeCheckConfig_TcpCheck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UptimeCheckConfig_TcpCheck* New() const final {
    return CreateMaybeMessage<UptimeCheckConfig_TcpCheck>(NULL);
  }

  UptimeCheckConfig_TcpCheck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UptimeCheckConfig_TcpCheck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UptimeCheckConfig_TcpCheck& from);
  void MergeFrom(const UptimeCheckConfig_TcpCheck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UptimeCheckConfig_TcpCheck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 port = 1;
  void clear_port();
  static const int kPortFieldNumber = 1;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UptimeCheckConfig.TcpCheck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UptimeCheckConfig_ContentMatcher : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UptimeCheckConfig.ContentMatcher) */ {
 public:
  UptimeCheckConfig_ContentMatcher();
  virtual ~UptimeCheckConfig_ContentMatcher();

  UptimeCheckConfig_ContentMatcher(const UptimeCheckConfig_ContentMatcher& from);

  inline UptimeCheckConfig_ContentMatcher& operator=(const UptimeCheckConfig_ContentMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UptimeCheckConfig_ContentMatcher(UptimeCheckConfig_ContentMatcher&& from) noexcept
    : UptimeCheckConfig_ContentMatcher() {
    *this = ::std::move(from);
  }

  inline UptimeCheckConfig_ContentMatcher& operator=(UptimeCheckConfig_ContentMatcher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UptimeCheckConfig_ContentMatcher& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UptimeCheckConfig_ContentMatcher* internal_default_instance() {
    return reinterpret_cast<const UptimeCheckConfig_ContentMatcher*>(
               &_UptimeCheckConfig_ContentMatcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UptimeCheckConfig_ContentMatcher* other);
  friend void swap(UptimeCheckConfig_ContentMatcher& a, UptimeCheckConfig_ContentMatcher& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UptimeCheckConfig_ContentMatcher* New() const final {
    return CreateMaybeMessage<UptimeCheckConfig_ContentMatcher>(NULL);
  }

  UptimeCheckConfig_ContentMatcher* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UptimeCheckConfig_ContentMatcher>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UptimeCheckConfig_ContentMatcher& from);
  void MergeFrom(const UptimeCheckConfig_ContentMatcher& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UptimeCheckConfig_ContentMatcher* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UptimeCheckConfig.ContentMatcher)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UptimeCheckConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UptimeCheckConfig) */ {
 public:
  UptimeCheckConfig();
  virtual ~UptimeCheckConfig();

  UptimeCheckConfig(const UptimeCheckConfig& from);

  inline UptimeCheckConfig& operator=(const UptimeCheckConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UptimeCheckConfig(UptimeCheckConfig&& from) noexcept
    : UptimeCheckConfig() {
    *this = ::std::move(from);
  }

  inline UptimeCheckConfig& operator=(UptimeCheckConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UptimeCheckConfig& default_instance();

  enum ResourceCase {
    kMonitoredResource = 3,
    kResourceGroup = 4,
    RESOURCE_NOT_SET = 0,
  };

  enum CheckRequestTypeCase {
    kHttpCheck = 5,
    kTcpCheck = 6,
    CHECK_REQUEST_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UptimeCheckConfig* internal_default_instance() {
    return reinterpret_cast<const UptimeCheckConfig*>(
               &_UptimeCheckConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UptimeCheckConfig* other);
  friend void swap(UptimeCheckConfig& a, UptimeCheckConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UptimeCheckConfig* New() const final {
    return CreateMaybeMessage<UptimeCheckConfig>(NULL);
  }

  UptimeCheckConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UptimeCheckConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UptimeCheckConfig& from);
  void MergeFrom(const UptimeCheckConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UptimeCheckConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UptimeCheckConfig_ResourceGroup ResourceGroup;
  typedef UptimeCheckConfig_HttpCheck HttpCheck;
  typedef UptimeCheckConfig_TcpCheck TcpCheck;
  typedef UptimeCheckConfig_ContentMatcher ContentMatcher;

  // accessors -------------------------------------------------------

  // repeated .google.monitoring.v3.UptimeCheckConfig.ContentMatcher content_matchers = 9;
  int content_matchers_size() const;
  void clear_content_matchers();
  static const int kContentMatchersFieldNumber = 9;
  ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher* mutable_content_matchers(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher >*
      mutable_content_matchers();
  const ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher& content_matchers(int index) const;
  ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher* add_content_matchers();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher >&
      content_matchers() const;

  // repeated .google.monitoring.v3.UptimeCheckRegion selected_regions = 10;
  int selected_regions_size() const;
  void clear_selected_regions();
  static const int kSelectedRegionsFieldNumber = 10;
  ::google::monitoring::v3::UptimeCheckRegion selected_regions(int index) const;
  void set_selected_regions(int index, ::google::monitoring::v3::UptimeCheckRegion value);
  void add_selected_regions(::google::monitoring::v3::UptimeCheckRegion value);
  const ::google::protobuf::RepeatedField<int>& selected_regions() const;
  ::google::protobuf::RepeatedField<int>* mutable_selected_regions();

  // repeated .google.monitoring.v3.InternalChecker internal_checkers = 14;
  int internal_checkers_size() const;
  void clear_internal_checkers();
  static const int kInternalCheckersFieldNumber = 14;
  ::google::monitoring::v3::InternalChecker* mutable_internal_checkers(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::InternalChecker >*
      mutable_internal_checkers();
  const ::google::monitoring::v3::InternalChecker& internal_checkers(int index) const;
  ::google::monitoring::v3::InternalChecker* add_internal_checkers();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::InternalChecker >&
      internal_checkers() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // .google.protobuf.Duration period = 7;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 7;
  private:
  const ::google::protobuf::Duration& _internal_period() const;
  public:
  const ::google::protobuf::Duration& period() const;
  ::google::protobuf::Duration* release_period();
  ::google::protobuf::Duration* mutable_period();
  void set_allocated_period(::google::protobuf::Duration* period);

  // .google.protobuf.Duration timeout = 8;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 8;
  private:
  const ::google::protobuf::Duration& _internal_timeout() const;
  public:
  const ::google::protobuf::Duration& timeout() const;
  ::google::protobuf::Duration* release_timeout();
  ::google::protobuf::Duration* mutable_timeout();
  void set_allocated_timeout(::google::protobuf::Duration* timeout);

  // bool is_internal = 15;
  void clear_is_internal();
  static const int kIsInternalFieldNumber = 15;
  bool is_internal() const;
  void set_is_internal(bool value);

  // .google.api.MonitoredResource monitored_resource = 3;
  bool has_monitored_resource() const;
  void clear_monitored_resource();
  static const int kMonitoredResourceFieldNumber = 3;
  private:
  const ::google::api::MonitoredResource& _internal_monitored_resource() const;
  public:
  const ::google::api::MonitoredResource& monitored_resource() const;
  ::google::api::MonitoredResource* release_monitored_resource();
  ::google::api::MonitoredResource* mutable_monitored_resource();
  void set_allocated_monitored_resource(::google::api::MonitoredResource* monitored_resource);

  // .google.monitoring.v3.UptimeCheckConfig.ResourceGroup resource_group = 4;
  bool has_resource_group() const;
  void clear_resource_group();
  static const int kResourceGroupFieldNumber = 4;
  private:
  const ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup& _internal_resource_group() const;
  public:
  const ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup& resource_group() const;
  ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup* release_resource_group();
  ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup* mutable_resource_group();
  void set_allocated_resource_group(::google::monitoring::v3::UptimeCheckConfig_ResourceGroup* resource_group);

  // .google.monitoring.v3.UptimeCheckConfig.HttpCheck http_check = 5;
  bool has_http_check() const;
  void clear_http_check();
  static const int kHttpCheckFieldNumber = 5;
  private:
  const ::google::monitoring::v3::UptimeCheckConfig_HttpCheck& _internal_http_check() const;
  public:
  const ::google::monitoring::v3::UptimeCheckConfig_HttpCheck& http_check() const;
  ::google::monitoring::v3::UptimeCheckConfig_HttpCheck* release_http_check();
  ::google::monitoring::v3::UptimeCheckConfig_HttpCheck* mutable_http_check();
  void set_allocated_http_check(::google::monitoring::v3::UptimeCheckConfig_HttpCheck* http_check);

  // .google.monitoring.v3.UptimeCheckConfig.TcpCheck tcp_check = 6;
  bool has_tcp_check() const;
  void clear_tcp_check();
  static const int kTcpCheckFieldNumber = 6;
  private:
  const ::google::monitoring::v3::UptimeCheckConfig_TcpCheck& _internal_tcp_check() const;
  public:
  const ::google::monitoring::v3::UptimeCheckConfig_TcpCheck& tcp_check() const;
  ::google::monitoring::v3::UptimeCheckConfig_TcpCheck* release_tcp_check();
  ::google::monitoring::v3::UptimeCheckConfig_TcpCheck* mutable_tcp_check();
  void set_allocated_tcp_check(::google::monitoring::v3::UptimeCheckConfig_TcpCheck* tcp_check);

  void clear_resource();
  ResourceCase resource_case() const;
  void clear_check_request_type();
  CheckRequestTypeCase check_request_type_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UptimeCheckConfig)
 private:
  void set_has_monitored_resource();
  void set_has_resource_group();
  void set_has_http_check();
  void set_has_tcp_check();

  inline bool has_resource() const;
  inline void clear_has_resource();

  inline bool has_check_request_type() const;
  inline void clear_has_check_request_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher > content_matchers_;
  ::google::protobuf::RepeatedField<int> selected_regions_;
  mutable int _selected_regions_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::InternalChecker > internal_checkers_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::Duration* period_;
  ::google::protobuf::Duration* timeout_;
  bool is_internal_;
  union ResourceUnion {
    ResourceUnion() {}
    ::google::api::MonitoredResource* monitored_resource_;
    ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup* resource_group_;
  } resource_;
  union CheckRequestTypeUnion {
    CheckRequestTypeUnion() {}
    ::google::monitoring::v3::UptimeCheckConfig_HttpCheck* http_check_;
    ::google::monitoring::v3::UptimeCheckConfig_TcpCheck* tcp_check_;
  } check_request_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UptimeCheckIp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UptimeCheckIp) */ {
 public:
  UptimeCheckIp();
  virtual ~UptimeCheckIp();

  UptimeCheckIp(const UptimeCheckIp& from);

  inline UptimeCheckIp& operator=(const UptimeCheckIp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UptimeCheckIp(UptimeCheckIp&& from) noexcept
    : UptimeCheckIp() {
    *this = ::std::move(from);
  }

  inline UptimeCheckIp& operator=(UptimeCheckIp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UptimeCheckIp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UptimeCheckIp* internal_default_instance() {
    return reinterpret_cast<const UptimeCheckIp*>(
               &_UptimeCheckIp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UptimeCheckIp* other);
  friend void swap(UptimeCheckIp& a, UptimeCheckIp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UptimeCheckIp* New() const final {
    return CreateMaybeMessage<UptimeCheckIp>(NULL);
  }

  UptimeCheckIp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UptimeCheckIp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UptimeCheckIp& from);
  void MergeFrom(const UptimeCheckIp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UptimeCheckIp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string location = 2;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // string ip_address = 3;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 3;
  const ::std::string& ip_address() const;
  void set_ip_address(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_address(::std::string&& value);
  #endif
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  ::std::string* mutable_ip_address();
  ::std::string* release_ip_address();
  void set_allocated_ip_address(::std::string* ip_address);

  // .google.monitoring.v3.UptimeCheckRegion region = 1;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  ::google::monitoring::v3::UptimeCheckRegion region() const;
  void set_region(::google::monitoring::v3::UptimeCheckRegion value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UptimeCheckIp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr ip_address_;
  int region_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InternalChecker

// string project_id = 1;
inline void InternalChecker::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalChecker::project_id() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.InternalChecker.project_id)
  return project_id_.GetNoArena();
}
inline void InternalChecker::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.InternalChecker.project_id)
}
#if LANG_CXX11
inline void InternalChecker::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.InternalChecker.project_id)
}
#endif
inline void InternalChecker::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.InternalChecker.project_id)
}
inline void InternalChecker::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.InternalChecker.project_id)
}
inline ::std::string* InternalChecker::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.InternalChecker.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalChecker::release_project_id() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.InternalChecker.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalChecker::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.InternalChecker.project_id)
}

// string network = 2;
inline void InternalChecker::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalChecker::network() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.InternalChecker.network)
  return network_.GetNoArena();
}
inline void InternalChecker::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.InternalChecker.network)
}
#if LANG_CXX11
inline void InternalChecker::set_network(::std::string&& value) {
  
  network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.InternalChecker.network)
}
#endif
inline void InternalChecker::set_network(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.InternalChecker.network)
}
inline void InternalChecker::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.InternalChecker.network)
}
inline ::std::string* InternalChecker::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.InternalChecker.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalChecker::release_network() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.InternalChecker.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalChecker::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.InternalChecker.network)
}

// string gcp_zone = 3;
inline void InternalChecker::clear_gcp_zone() {
  gcp_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalChecker::gcp_zone() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.InternalChecker.gcp_zone)
  return gcp_zone_.GetNoArena();
}
inline void InternalChecker::set_gcp_zone(const ::std::string& value) {
  
  gcp_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.InternalChecker.gcp_zone)
}
#if LANG_CXX11
inline void InternalChecker::set_gcp_zone(::std::string&& value) {
  
  gcp_zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.InternalChecker.gcp_zone)
}
#endif
inline void InternalChecker::set_gcp_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gcp_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.InternalChecker.gcp_zone)
}
inline void InternalChecker::set_gcp_zone(const char* value, size_t size) {
  
  gcp_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.InternalChecker.gcp_zone)
}
inline ::std::string* InternalChecker::mutable_gcp_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.InternalChecker.gcp_zone)
  return gcp_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalChecker::release_gcp_zone() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.InternalChecker.gcp_zone)
  
  return gcp_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalChecker::set_allocated_gcp_zone(::std::string* gcp_zone) {
  if (gcp_zone != NULL) {
    
  } else {
    
  }
  gcp_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gcp_zone);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.InternalChecker.gcp_zone)
}

// string checker_id = 4;
inline void InternalChecker::clear_checker_id() {
  checker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalChecker::checker_id() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.InternalChecker.checker_id)
  return checker_id_.GetNoArena();
}
inline void InternalChecker::set_checker_id(const ::std::string& value) {
  
  checker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.InternalChecker.checker_id)
}
#if LANG_CXX11
inline void InternalChecker::set_checker_id(::std::string&& value) {
  
  checker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.InternalChecker.checker_id)
}
#endif
inline void InternalChecker::set_checker_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.InternalChecker.checker_id)
}
inline void InternalChecker::set_checker_id(const char* value, size_t size) {
  
  checker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.InternalChecker.checker_id)
}
inline ::std::string* InternalChecker::mutable_checker_id() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.InternalChecker.checker_id)
  return checker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalChecker::release_checker_id() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.InternalChecker.checker_id)
  
  return checker_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalChecker::set_allocated_checker_id(::std::string* checker_id) {
  if (checker_id != NULL) {
    
  } else {
    
  }
  checker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checker_id);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.InternalChecker.checker_id)
}

// string display_name = 5;
inline void InternalChecker::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InternalChecker::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.InternalChecker.display_name)
  return display_name_.GetNoArena();
}
inline void InternalChecker::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.InternalChecker.display_name)
}
#if LANG_CXX11
inline void InternalChecker::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.InternalChecker.display_name)
}
#endif
inline void InternalChecker::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.InternalChecker.display_name)
}
inline void InternalChecker::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.InternalChecker.display_name)
}
inline ::std::string* InternalChecker::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.InternalChecker.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InternalChecker::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.InternalChecker.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InternalChecker::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.InternalChecker.display_name)
}

// -------------------------------------------------------------------

// UptimeCheckConfig_ResourceGroup

// string group_id = 1;
inline void UptimeCheckConfig_ResourceGroup::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UptimeCheckConfig_ResourceGroup::group_id() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.ResourceGroup.group_id)
  return group_id_.GetNoArena();
}
inline void UptimeCheckConfig_ResourceGroup::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.ResourceGroup.group_id)
}
#if LANG_CXX11
inline void UptimeCheckConfig_ResourceGroup::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.UptimeCheckConfig.ResourceGroup.group_id)
}
#endif
inline void UptimeCheckConfig_ResourceGroup::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.UptimeCheckConfig.ResourceGroup.group_id)
}
inline void UptimeCheckConfig_ResourceGroup::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.UptimeCheckConfig.ResourceGroup.group_id)
}
inline ::std::string* UptimeCheckConfig_ResourceGroup::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.ResourceGroup.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UptimeCheckConfig_ResourceGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.ResourceGroup.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UptimeCheckConfig_ResourceGroup::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.ResourceGroup.group_id)
}

// .google.monitoring.v3.GroupResourceType resource_type = 2;
inline void UptimeCheckConfig_ResourceGroup::clear_resource_type() {
  resource_type_ = 0;
}
inline ::google::monitoring::v3::GroupResourceType UptimeCheckConfig_ResourceGroup::resource_type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.ResourceGroup.resource_type)
  return static_cast< ::google::monitoring::v3::GroupResourceType >(resource_type_);
}
inline void UptimeCheckConfig_ResourceGroup::set_resource_type(::google::monitoring::v3::GroupResourceType value) {
  
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.ResourceGroup.resource_type)
}

// -------------------------------------------------------------------

// UptimeCheckConfig_HttpCheck_BasicAuthentication

// string username = 1;
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UptimeCheckConfig_HttpCheck_BasicAuthentication::username() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.username)
  return username_.GetNoArena();
}
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.username)
}
#if LANG_CXX11
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.username)
}
#endif
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.username)
}
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.username)
}
inline ::std::string* UptimeCheckConfig_HttpCheck_BasicAuthentication::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UptimeCheckConfig_HttpCheck_BasicAuthentication::release_username() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.username)
}

// string password = 2;
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UptimeCheckConfig_HttpCheck_BasicAuthentication::password() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.password)
  return password_.GetNoArena();
}
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.password)
}
#if LANG_CXX11
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.password)
}
#endif
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.password)
}
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.password)
}
inline ::std::string* UptimeCheckConfig_HttpCheck_BasicAuthentication::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UptimeCheckConfig_HttpCheck_BasicAuthentication::release_password() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UptimeCheckConfig_HttpCheck_BasicAuthentication::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication.password)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UptimeCheckConfig_HttpCheck

// bool use_ssl = 1;
inline void UptimeCheckConfig_HttpCheck::clear_use_ssl() {
  use_ssl_ = false;
}
inline bool UptimeCheckConfig_HttpCheck::use_ssl() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.HttpCheck.use_ssl)
  return use_ssl_;
}
inline void UptimeCheckConfig_HttpCheck::set_use_ssl(bool value) {
  
  use_ssl_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.HttpCheck.use_ssl)
}

// string path = 2;
inline void UptimeCheckConfig_HttpCheck::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UptimeCheckConfig_HttpCheck::path() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.HttpCheck.path)
  return path_.GetNoArena();
}
inline void UptimeCheckConfig_HttpCheck::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.HttpCheck.path)
}
#if LANG_CXX11
inline void UptimeCheckConfig_HttpCheck::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.UptimeCheckConfig.HttpCheck.path)
}
#endif
inline void UptimeCheckConfig_HttpCheck::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.UptimeCheckConfig.HttpCheck.path)
}
inline void UptimeCheckConfig_HttpCheck::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.UptimeCheckConfig.HttpCheck.path)
}
inline ::std::string* UptimeCheckConfig_HttpCheck::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.HttpCheck.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UptimeCheckConfig_HttpCheck::release_path() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.HttpCheck.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UptimeCheckConfig_HttpCheck::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.HttpCheck.path)
}

// int32 port = 3;
inline void UptimeCheckConfig_HttpCheck::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 UptimeCheckConfig_HttpCheck::port() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.HttpCheck.port)
  return port_;
}
inline void UptimeCheckConfig_HttpCheck::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.HttpCheck.port)
}

// .google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication auth_info = 4;
inline bool UptimeCheckConfig_HttpCheck::has_auth_info() const {
  return this != internal_default_instance() && auth_info_ != NULL;
}
inline void UptimeCheckConfig_HttpCheck::clear_auth_info() {
  if (GetArenaNoVirtual() == NULL && auth_info_ != NULL) {
    delete auth_info_;
  }
  auth_info_ = NULL;
}
inline const ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication& UptimeCheckConfig_HttpCheck::_internal_auth_info() const {
  return *auth_info_;
}
inline const ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication& UptimeCheckConfig_HttpCheck::auth_info() const {
  const ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication* p = auth_info_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.HttpCheck.auth_info)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication*>(
      &::google::monitoring::v3::_UptimeCheckConfig_HttpCheck_BasicAuthentication_default_instance_);
}
inline ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication* UptimeCheckConfig_HttpCheck::release_auth_info() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.HttpCheck.auth_info)
  
  ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication* temp = auth_info_;
  auth_info_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication* UptimeCheckConfig_HttpCheck::mutable_auth_info() {
  
  if (auth_info_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication>(GetArenaNoVirtual());
    auth_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.HttpCheck.auth_info)
  return auth_info_;
}
inline void UptimeCheckConfig_HttpCheck::set_allocated_auth_info(::google::monitoring::v3::UptimeCheckConfig_HttpCheck_BasicAuthentication* auth_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete auth_info_;
  }
  if (auth_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      auth_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth_info, submessage_arena);
    }
    
  } else {
    
  }
  auth_info_ = auth_info;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.HttpCheck.auth_info)
}

// bool mask_headers = 5;
inline void UptimeCheckConfig_HttpCheck::clear_mask_headers() {
  mask_headers_ = false;
}
inline bool UptimeCheckConfig_HttpCheck::mask_headers() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.HttpCheck.mask_headers)
  return mask_headers_;
}
inline void UptimeCheckConfig_HttpCheck::set_mask_headers(bool value) {
  
  mask_headers_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.HttpCheck.mask_headers)
}

// map<string, string> headers = 6;
inline int UptimeCheckConfig_HttpCheck::headers_size() const {
  return headers_.size();
}
inline void UptimeCheckConfig_HttpCheck::clear_headers() {
  headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
UptimeCheckConfig_HttpCheck::headers() const {
  // @@protoc_insertion_point(field_map:google.monitoring.v3.UptimeCheckConfig.HttpCheck.headers)
  return headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
UptimeCheckConfig_HttpCheck::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:google.monitoring.v3.UptimeCheckConfig.HttpCheck.headers)
  return headers_.MutableMap();
}

// -------------------------------------------------------------------

// UptimeCheckConfig_TcpCheck

// int32 port = 1;
inline void UptimeCheckConfig_TcpCheck::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 UptimeCheckConfig_TcpCheck::port() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.TcpCheck.port)
  return port_;
}
inline void UptimeCheckConfig_TcpCheck::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.TcpCheck.port)
}

// -------------------------------------------------------------------

// UptimeCheckConfig_ContentMatcher

// string content = 1;
inline void UptimeCheckConfig_ContentMatcher::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UptimeCheckConfig_ContentMatcher::content() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.ContentMatcher.content)
  return content_.GetNoArena();
}
inline void UptimeCheckConfig_ContentMatcher::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.ContentMatcher.content)
}
#if LANG_CXX11
inline void UptimeCheckConfig_ContentMatcher::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.UptimeCheckConfig.ContentMatcher.content)
}
#endif
inline void UptimeCheckConfig_ContentMatcher::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.UptimeCheckConfig.ContentMatcher.content)
}
inline void UptimeCheckConfig_ContentMatcher::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.UptimeCheckConfig.ContentMatcher.content)
}
inline ::std::string* UptimeCheckConfig_ContentMatcher::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.ContentMatcher.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UptimeCheckConfig_ContentMatcher::release_content() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.ContentMatcher.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UptimeCheckConfig_ContentMatcher::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.ContentMatcher.content)
}

// -------------------------------------------------------------------

// UptimeCheckConfig

// string name = 1;
inline void UptimeCheckConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UptimeCheckConfig::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.name)
  return name_.GetNoArena();
}
inline void UptimeCheckConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.name)
}
#if LANG_CXX11
inline void UptimeCheckConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.UptimeCheckConfig.name)
}
#endif
inline void UptimeCheckConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.UptimeCheckConfig.name)
}
inline void UptimeCheckConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.UptimeCheckConfig.name)
}
inline ::std::string* UptimeCheckConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UptimeCheckConfig::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UptimeCheckConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.name)
}

// string display_name = 2;
inline void UptimeCheckConfig::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UptimeCheckConfig::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.display_name)
  return display_name_.GetNoArena();
}
inline void UptimeCheckConfig::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.display_name)
}
#if LANG_CXX11
inline void UptimeCheckConfig::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.UptimeCheckConfig.display_name)
}
#endif
inline void UptimeCheckConfig::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.UptimeCheckConfig.display_name)
}
inline void UptimeCheckConfig::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.UptimeCheckConfig.display_name)
}
inline ::std::string* UptimeCheckConfig::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UptimeCheckConfig::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UptimeCheckConfig::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.display_name)
}

// .google.api.MonitoredResource monitored_resource = 3;
inline bool UptimeCheckConfig::has_monitored_resource() const {
  return resource_case() == kMonitoredResource;
}
inline void UptimeCheckConfig::set_has_monitored_resource() {
  _oneof_case_[0] = kMonitoredResource;
}
inline const ::google::api::MonitoredResource& UptimeCheckConfig::_internal_monitored_resource() const {
  return *resource_.monitored_resource_;
}
inline ::google::api::MonitoredResource* UptimeCheckConfig::release_monitored_resource() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.monitored_resource)
  if (has_monitored_resource()) {
    clear_has_resource();
      ::google::api::MonitoredResource* temp = resource_.monitored_resource_;
    resource_.monitored_resource_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::api::MonitoredResource& UptimeCheckConfig::monitored_resource() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.monitored_resource)
  return has_monitored_resource()
      ? *resource_.monitored_resource_
      : *reinterpret_cast< ::google::api::MonitoredResource*>(&::google::api::_MonitoredResource_default_instance_);
}
inline ::google::api::MonitoredResource* UptimeCheckConfig::mutable_monitored_resource() {
  if (!has_monitored_resource()) {
    clear_resource();
    set_has_monitored_resource();
    resource_.monitored_resource_ = CreateMaybeMessage< ::google::api::MonitoredResource >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.monitored_resource)
  return resource_.monitored_resource_;
}

// .google.monitoring.v3.UptimeCheckConfig.ResourceGroup resource_group = 4;
inline bool UptimeCheckConfig::has_resource_group() const {
  return resource_case() == kResourceGroup;
}
inline void UptimeCheckConfig::set_has_resource_group() {
  _oneof_case_[0] = kResourceGroup;
}
inline void UptimeCheckConfig::clear_resource_group() {
  if (has_resource_group()) {
    delete resource_.resource_group_;
    clear_has_resource();
  }
}
inline const ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup& UptimeCheckConfig::_internal_resource_group() const {
  return *resource_.resource_group_;
}
inline ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup* UptimeCheckConfig::release_resource_group() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.resource_group)
  if (has_resource_group()) {
    clear_has_resource();
      ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup* temp = resource_.resource_group_;
    resource_.resource_group_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup& UptimeCheckConfig::resource_group() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.resource_group)
  return has_resource_group()
      ? *resource_.resource_group_
      : *reinterpret_cast< ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup*>(&::google::monitoring::v3::_UptimeCheckConfig_ResourceGroup_default_instance_);
}
inline ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup* UptimeCheckConfig::mutable_resource_group() {
  if (!has_resource_group()) {
    clear_resource();
    set_has_resource_group();
    resource_.resource_group_ = CreateMaybeMessage< ::google::monitoring::v3::UptimeCheckConfig_ResourceGroup >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.resource_group)
  return resource_.resource_group_;
}

// .google.monitoring.v3.UptimeCheckConfig.HttpCheck http_check = 5;
inline bool UptimeCheckConfig::has_http_check() const {
  return check_request_type_case() == kHttpCheck;
}
inline void UptimeCheckConfig::set_has_http_check() {
  _oneof_case_[1] = kHttpCheck;
}
inline void UptimeCheckConfig::clear_http_check() {
  if (has_http_check()) {
    delete check_request_type_.http_check_;
    clear_has_check_request_type();
  }
}
inline const ::google::monitoring::v3::UptimeCheckConfig_HttpCheck& UptimeCheckConfig::_internal_http_check() const {
  return *check_request_type_.http_check_;
}
inline ::google::monitoring::v3::UptimeCheckConfig_HttpCheck* UptimeCheckConfig::release_http_check() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.http_check)
  if (has_http_check()) {
    clear_has_check_request_type();
      ::google::monitoring::v3::UptimeCheckConfig_HttpCheck* temp = check_request_type_.http_check_;
    check_request_type_.http_check_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::monitoring::v3::UptimeCheckConfig_HttpCheck& UptimeCheckConfig::http_check() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.http_check)
  return has_http_check()
      ? *check_request_type_.http_check_
      : *reinterpret_cast< ::google::monitoring::v3::UptimeCheckConfig_HttpCheck*>(&::google::monitoring::v3::_UptimeCheckConfig_HttpCheck_default_instance_);
}
inline ::google::monitoring::v3::UptimeCheckConfig_HttpCheck* UptimeCheckConfig::mutable_http_check() {
  if (!has_http_check()) {
    clear_check_request_type();
    set_has_http_check();
    check_request_type_.http_check_ = CreateMaybeMessage< ::google::monitoring::v3::UptimeCheckConfig_HttpCheck >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.http_check)
  return check_request_type_.http_check_;
}

// .google.monitoring.v3.UptimeCheckConfig.TcpCheck tcp_check = 6;
inline bool UptimeCheckConfig::has_tcp_check() const {
  return check_request_type_case() == kTcpCheck;
}
inline void UptimeCheckConfig::set_has_tcp_check() {
  _oneof_case_[1] = kTcpCheck;
}
inline void UptimeCheckConfig::clear_tcp_check() {
  if (has_tcp_check()) {
    delete check_request_type_.tcp_check_;
    clear_has_check_request_type();
  }
}
inline const ::google::monitoring::v3::UptimeCheckConfig_TcpCheck& UptimeCheckConfig::_internal_tcp_check() const {
  return *check_request_type_.tcp_check_;
}
inline ::google::monitoring::v3::UptimeCheckConfig_TcpCheck* UptimeCheckConfig::release_tcp_check() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.tcp_check)
  if (has_tcp_check()) {
    clear_has_check_request_type();
      ::google::monitoring::v3::UptimeCheckConfig_TcpCheck* temp = check_request_type_.tcp_check_;
    check_request_type_.tcp_check_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::monitoring::v3::UptimeCheckConfig_TcpCheck& UptimeCheckConfig::tcp_check() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.tcp_check)
  return has_tcp_check()
      ? *check_request_type_.tcp_check_
      : *reinterpret_cast< ::google::monitoring::v3::UptimeCheckConfig_TcpCheck*>(&::google::monitoring::v3::_UptimeCheckConfig_TcpCheck_default_instance_);
}
inline ::google::monitoring::v3::UptimeCheckConfig_TcpCheck* UptimeCheckConfig::mutable_tcp_check() {
  if (!has_tcp_check()) {
    clear_check_request_type();
    set_has_tcp_check();
    check_request_type_.tcp_check_ = CreateMaybeMessage< ::google::monitoring::v3::UptimeCheckConfig_TcpCheck >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.tcp_check)
  return check_request_type_.tcp_check_;
}

// .google.protobuf.Duration period = 7;
inline bool UptimeCheckConfig::has_period() const {
  return this != internal_default_instance() && period_ != NULL;
}
inline const ::google::protobuf::Duration& UptimeCheckConfig::_internal_period() const {
  return *period_;
}
inline const ::google::protobuf::Duration& UptimeCheckConfig::period() const {
  const ::google::protobuf::Duration* p = period_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* UptimeCheckConfig::release_period() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.period)
  
  ::google::protobuf::Duration* temp = period_;
  period_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* UptimeCheckConfig::mutable_period() {
  
  if (period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.period)
  return period_;
}
inline void UptimeCheckConfig::set_allocated_period(::google::protobuf::Duration* period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(period_);
  }
  if (period) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(period)->GetArena();
    if (message_arena != submessage_arena) {
      period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.period)
}

// .google.protobuf.Duration timeout = 8;
inline bool UptimeCheckConfig::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
inline const ::google::protobuf::Duration& UptimeCheckConfig::_internal_timeout() const {
  return *timeout_;
}
inline const ::google::protobuf::Duration& UptimeCheckConfig::timeout() const {
  const ::google::protobuf::Duration* p = timeout_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* UptimeCheckConfig::release_timeout() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckConfig.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* UptimeCheckConfig::mutable_timeout() {
  
  if (timeout_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.timeout)
  return timeout_;
}
inline void UptimeCheckConfig::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckConfig.timeout)
}

// repeated .google.monitoring.v3.UptimeCheckConfig.ContentMatcher content_matchers = 9;
inline int UptimeCheckConfig::content_matchers_size() const {
  return content_matchers_.size();
}
inline void UptimeCheckConfig::clear_content_matchers() {
  content_matchers_.Clear();
}
inline ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher* UptimeCheckConfig::mutable_content_matchers(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.content_matchers)
  return content_matchers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher >*
UptimeCheckConfig::mutable_content_matchers() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.UptimeCheckConfig.content_matchers)
  return &content_matchers_;
}
inline const ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher& UptimeCheckConfig::content_matchers(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.content_matchers)
  return content_matchers_.Get(index);
}
inline ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher* UptimeCheckConfig::add_content_matchers() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.UptimeCheckConfig.content_matchers)
  return content_matchers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig_ContentMatcher >&
UptimeCheckConfig::content_matchers() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.UptimeCheckConfig.content_matchers)
  return content_matchers_;
}

// repeated .google.monitoring.v3.UptimeCheckRegion selected_regions = 10;
inline int UptimeCheckConfig::selected_regions_size() const {
  return selected_regions_.size();
}
inline void UptimeCheckConfig::clear_selected_regions() {
  selected_regions_.Clear();
}
inline ::google::monitoring::v3::UptimeCheckRegion UptimeCheckConfig::selected_regions(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.selected_regions)
  return static_cast< ::google::monitoring::v3::UptimeCheckRegion >(selected_regions_.Get(index));
}
inline void UptimeCheckConfig::set_selected_regions(int index, ::google::monitoring::v3::UptimeCheckRegion value) {
  selected_regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.selected_regions)
}
inline void UptimeCheckConfig::add_selected_regions(::google::monitoring::v3::UptimeCheckRegion value) {
  selected_regions_.Add(value);
  // @@protoc_insertion_point(field_add:google.monitoring.v3.UptimeCheckConfig.selected_regions)
}
inline const ::google::protobuf::RepeatedField<int>&
UptimeCheckConfig::selected_regions() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.UptimeCheckConfig.selected_regions)
  return selected_regions_;
}
inline ::google::protobuf::RepeatedField<int>*
UptimeCheckConfig::mutable_selected_regions() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.UptimeCheckConfig.selected_regions)
  return &selected_regions_;
}

// bool is_internal = 15;
inline void UptimeCheckConfig::clear_is_internal() {
  is_internal_ = false;
}
inline bool UptimeCheckConfig::is_internal() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.is_internal)
  return is_internal_;
}
inline void UptimeCheckConfig::set_is_internal(bool value) {
  
  is_internal_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckConfig.is_internal)
}

// repeated .google.monitoring.v3.InternalChecker internal_checkers = 14;
inline int UptimeCheckConfig::internal_checkers_size() const {
  return internal_checkers_.size();
}
inline void UptimeCheckConfig::clear_internal_checkers() {
  internal_checkers_.Clear();
}
inline ::google::monitoring::v3::InternalChecker* UptimeCheckConfig::mutable_internal_checkers(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckConfig.internal_checkers)
  return internal_checkers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::InternalChecker >*
UptimeCheckConfig::mutable_internal_checkers() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.UptimeCheckConfig.internal_checkers)
  return &internal_checkers_;
}
inline const ::google::monitoring::v3::InternalChecker& UptimeCheckConfig::internal_checkers(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckConfig.internal_checkers)
  return internal_checkers_.Get(index);
}
inline ::google::monitoring::v3::InternalChecker* UptimeCheckConfig::add_internal_checkers() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.UptimeCheckConfig.internal_checkers)
  return internal_checkers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::InternalChecker >&
UptimeCheckConfig::internal_checkers() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.UptimeCheckConfig.internal_checkers)
  return internal_checkers_;
}

inline bool UptimeCheckConfig::has_resource() const {
  return resource_case() != RESOURCE_NOT_SET;
}
inline void UptimeCheckConfig::clear_has_resource() {
  _oneof_case_[0] = RESOURCE_NOT_SET;
}
inline bool UptimeCheckConfig::has_check_request_type() const {
  return check_request_type_case() != CHECK_REQUEST_TYPE_NOT_SET;
}
inline void UptimeCheckConfig::clear_has_check_request_type() {
  _oneof_case_[1] = CHECK_REQUEST_TYPE_NOT_SET;
}
inline UptimeCheckConfig::ResourceCase UptimeCheckConfig::resource_case() const {
  return UptimeCheckConfig::ResourceCase(_oneof_case_[0]);
}
inline UptimeCheckConfig::CheckRequestTypeCase UptimeCheckConfig::check_request_type_case() const {
  return UptimeCheckConfig::CheckRequestTypeCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// UptimeCheckIp

// .google.monitoring.v3.UptimeCheckRegion region = 1;
inline void UptimeCheckIp::clear_region() {
  region_ = 0;
}
inline ::google::monitoring::v3::UptimeCheckRegion UptimeCheckIp::region() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckIp.region)
  return static_cast< ::google::monitoring::v3::UptimeCheckRegion >(region_);
}
inline void UptimeCheckIp::set_region(::google::monitoring::v3::UptimeCheckRegion value) {
  
  region_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckIp.region)
}

// string location = 2;
inline void UptimeCheckIp::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UptimeCheckIp::location() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckIp.location)
  return location_.GetNoArena();
}
inline void UptimeCheckIp::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckIp.location)
}
#if LANG_CXX11
inline void UptimeCheckIp::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.UptimeCheckIp.location)
}
#endif
inline void UptimeCheckIp::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.UptimeCheckIp.location)
}
inline void UptimeCheckIp::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.UptimeCheckIp.location)
}
inline ::std::string* UptimeCheckIp::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckIp.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UptimeCheckIp::release_location() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckIp.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UptimeCheckIp::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckIp.location)
}

// string ip_address = 3;
inline void UptimeCheckIp::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UptimeCheckIp::ip_address() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UptimeCheckIp.ip_address)
  return ip_address_.GetNoArena();
}
inline void UptimeCheckIp::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.UptimeCheckIp.ip_address)
}
#if LANG_CXX11
inline void UptimeCheckIp::set_ip_address(::std::string&& value) {
  
  ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.UptimeCheckIp.ip_address)
}
#endif
inline void UptimeCheckIp::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.UptimeCheckIp.ip_address)
}
inline void UptimeCheckIp::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.UptimeCheckIp.ip_address)
}
inline ::std::string* UptimeCheckIp::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UptimeCheckIp.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UptimeCheckIp::release_ip_address() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UptimeCheckIp.ip_address)
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UptimeCheckIp::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UptimeCheckIp.ip_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::monitoring::v3::UptimeCheckRegion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::v3::UptimeCheckRegion>() {
  return ::google::monitoring::v3::UptimeCheckRegion_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::v3::GroupResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::v3::GroupResourceType>() {
  return ::google::monitoring::v3::GroupResourceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fuptime_2eproto
