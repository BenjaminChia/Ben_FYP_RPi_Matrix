// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/alert.proto

#ifndef PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_2eproto
#define PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/monitoring/v3/common.pb.h"
#include "google/monitoring/v3/mutation_record.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2falert_2eproto 

namespace protobuf_google_2fmonitoring_2fv3_2falert_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fmonitoring_2fv3_2falert_2eproto
namespace google {
namespace monitoring {
namespace v3 {
class AlertPolicy;
class AlertPolicyDefaultTypeInternal;
extern AlertPolicyDefaultTypeInternal _AlertPolicy_default_instance_;
class AlertPolicy_Condition;
class AlertPolicy_ConditionDefaultTypeInternal;
extern AlertPolicy_ConditionDefaultTypeInternal _AlertPolicy_Condition_default_instance_;
class AlertPolicy_Condition_MetricAbsence;
class AlertPolicy_Condition_MetricAbsenceDefaultTypeInternal;
extern AlertPolicy_Condition_MetricAbsenceDefaultTypeInternal _AlertPolicy_Condition_MetricAbsence_default_instance_;
class AlertPolicy_Condition_MetricThreshold;
class AlertPolicy_Condition_MetricThresholdDefaultTypeInternal;
extern AlertPolicy_Condition_MetricThresholdDefaultTypeInternal _AlertPolicy_Condition_MetricThreshold_default_instance_;
class AlertPolicy_Condition_Trigger;
class AlertPolicy_Condition_TriggerDefaultTypeInternal;
extern AlertPolicy_Condition_TriggerDefaultTypeInternal _AlertPolicy_Condition_Trigger_default_instance_;
class AlertPolicy_Documentation;
class AlertPolicy_DocumentationDefaultTypeInternal;
extern AlertPolicy_DocumentationDefaultTypeInternal _AlertPolicy_Documentation_default_instance_;
class AlertPolicy_UserLabelsEntry_DoNotUse;
class AlertPolicy_UserLabelsEntry_DoNotUseDefaultTypeInternal;
extern AlertPolicy_UserLabelsEntry_DoNotUseDefaultTypeInternal _AlertPolicy_UserLabelsEntry_DoNotUse_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::monitoring::v3::AlertPolicy* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Condition_Trigger* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_Trigger>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_Documentation* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Documentation>(Arena*);
template<> ::google::monitoring::v3::AlertPolicy_UserLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_UserLabelsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace monitoring {
namespace v3 {

enum AlertPolicy_ConditionCombinerType {
  AlertPolicy_ConditionCombinerType_COMBINE_UNSPECIFIED = 0,
  AlertPolicy_ConditionCombinerType_AND = 1,
  AlertPolicy_ConditionCombinerType_OR = 2,
  AlertPolicy_ConditionCombinerType_AND_WITH_MATCHING_RESOURCE = 3,
  AlertPolicy_ConditionCombinerType_AlertPolicy_ConditionCombinerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AlertPolicy_ConditionCombinerType_AlertPolicy_ConditionCombinerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AlertPolicy_ConditionCombinerType_IsValid(int value);
const AlertPolicy_ConditionCombinerType AlertPolicy_ConditionCombinerType_ConditionCombinerType_MIN = AlertPolicy_ConditionCombinerType_COMBINE_UNSPECIFIED;
const AlertPolicy_ConditionCombinerType AlertPolicy_ConditionCombinerType_ConditionCombinerType_MAX = AlertPolicy_ConditionCombinerType_AND_WITH_MATCHING_RESOURCE;
const int AlertPolicy_ConditionCombinerType_ConditionCombinerType_ARRAYSIZE = AlertPolicy_ConditionCombinerType_ConditionCombinerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AlertPolicy_ConditionCombinerType_descriptor();
inline const ::std::string& AlertPolicy_ConditionCombinerType_Name(AlertPolicy_ConditionCombinerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AlertPolicy_ConditionCombinerType_descriptor(), value);
}
inline bool AlertPolicy_ConditionCombinerType_Parse(
    const ::std::string& name, AlertPolicy_ConditionCombinerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlertPolicy_ConditionCombinerType>(
    AlertPolicy_ConditionCombinerType_descriptor(), name, value);
}
// ===================================================================

class AlertPolicy_Documentation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Documentation) */ {
 public:
  AlertPolicy_Documentation();
  virtual ~AlertPolicy_Documentation();

  AlertPolicy_Documentation(const AlertPolicy_Documentation& from);

  inline AlertPolicy_Documentation& operator=(const AlertPolicy_Documentation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlertPolicy_Documentation(AlertPolicy_Documentation&& from) noexcept
    : AlertPolicy_Documentation() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Documentation& operator=(AlertPolicy_Documentation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlertPolicy_Documentation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlertPolicy_Documentation* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Documentation*>(
               &_AlertPolicy_Documentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AlertPolicy_Documentation* other);
  friend void swap(AlertPolicy_Documentation& a, AlertPolicy_Documentation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy_Documentation* New() const final {
    return CreateMaybeMessage<AlertPolicy_Documentation>(NULL);
  }

  AlertPolicy_Documentation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy_Documentation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlertPolicy_Documentation& from);
  void MergeFrom(const AlertPolicy_Documentation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Documentation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string mime_type = 2;
  void clear_mime_type();
  static const int kMimeTypeFieldNumber = 2;
  const ::std::string& mime_type() const;
  void set_mime_type(const ::std::string& value);
  #if LANG_CXX11
  void set_mime_type(::std::string&& value);
  #endif
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  ::std::string* mutable_mime_type();
  ::std::string* release_mime_type();
  void set_allocated_mime_type(::std::string* mime_type);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Documentation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr mime_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_Trigger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.Trigger) */ {
 public:
  AlertPolicy_Condition_Trigger();
  virtual ~AlertPolicy_Condition_Trigger();

  AlertPolicy_Condition_Trigger(const AlertPolicy_Condition_Trigger& from);

  inline AlertPolicy_Condition_Trigger& operator=(const AlertPolicy_Condition_Trigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlertPolicy_Condition_Trigger(AlertPolicy_Condition_Trigger&& from) noexcept
    : AlertPolicy_Condition_Trigger() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_Trigger& operator=(AlertPolicy_Condition_Trigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlertPolicy_Condition_Trigger& default_instance();

  enum TypeCase {
    kCount = 1,
    kPercent = 2,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlertPolicy_Condition_Trigger* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_Trigger*>(
               &_AlertPolicy_Condition_Trigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AlertPolicy_Condition_Trigger* other);
  friend void swap(AlertPolicy_Condition_Trigger& a, AlertPolicy_Condition_Trigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy_Condition_Trigger* New() const final {
    return CreateMaybeMessage<AlertPolicy_Condition_Trigger>(NULL);
  }

  AlertPolicy_Condition_Trigger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_Trigger>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlertPolicy_Condition_Trigger& from);
  void MergeFrom(const AlertPolicy_Condition_Trigger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_Trigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 count = 1;
  private:
  bool has_count() const;
  public:
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // double percent = 2;
  private:
  bool has_percent() const;
  public:
  void clear_percent();
  static const int kPercentFieldNumber = 2;
  double percent() const;
  void set_percent(double value);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.Trigger)
 private:
  void set_has_count();
  void set_has_percent();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::google::protobuf::int32 count_;
    double percent_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_MetricThreshold : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold) */ {
 public:
  AlertPolicy_Condition_MetricThreshold();
  virtual ~AlertPolicy_Condition_MetricThreshold();

  AlertPolicy_Condition_MetricThreshold(const AlertPolicy_Condition_MetricThreshold& from);

  inline AlertPolicy_Condition_MetricThreshold& operator=(const AlertPolicy_Condition_MetricThreshold& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlertPolicy_Condition_MetricThreshold(AlertPolicy_Condition_MetricThreshold&& from) noexcept
    : AlertPolicy_Condition_MetricThreshold() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_MetricThreshold& operator=(AlertPolicy_Condition_MetricThreshold&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlertPolicy_Condition_MetricThreshold& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlertPolicy_Condition_MetricThreshold* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_MetricThreshold*>(
               &_AlertPolicy_Condition_MetricThreshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AlertPolicy_Condition_MetricThreshold* other);
  friend void swap(AlertPolicy_Condition_MetricThreshold& a, AlertPolicy_Condition_MetricThreshold& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy_Condition_MetricThreshold* New() const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MetricThreshold>(NULL);
  }

  AlertPolicy_Condition_MetricThreshold* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MetricThreshold>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlertPolicy_Condition_MetricThreshold& from);
  void MergeFrom(const AlertPolicy_Condition_MetricThreshold& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_MetricThreshold* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.monitoring.v3.Aggregation aggregations = 8;
  int aggregations_size() const;
  void clear_aggregations();
  static const int kAggregationsFieldNumber = 8;
  ::google::monitoring::v3::Aggregation* mutable_aggregations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
      mutable_aggregations();
  const ::google::monitoring::v3::Aggregation& aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* add_aggregations();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
      aggregations() const;

  // repeated .google.monitoring.v3.Aggregation denominator_aggregations = 10;
  int denominator_aggregations_size() const;
  void clear_denominator_aggregations();
  static const int kDenominatorAggregationsFieldNumber = 10;
  ::google::monitoring::v3::Aggregation* mutable_denominator_aggregations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
      mutable_denominator_aggregations();
  const ::google::monitoring::v3::Aggregation& denominator_aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* add_denominator_aggregations();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
      denominator_aggregations() const;

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string denominator_filter = 9;
  void clear_denominator_filter();
  static const int kDenominatorFilterFieldNumber = 9;
  const ::std::string& denominator_filter() const;
  void set_denominator_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_denominator_filter(::std::string&& value);
  #endif
  void set_denominator_filter(const char* value);
  void set_denominator_filter(const char* value, size_t size);
  ::std::string* mutable_denominator_filter();
  ::std::string* release_denominator_filter();
  void set_allocated_denominator_filter(::std::string* denominator_filter);

  // .google.protobuf.Duration duration = 6;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 6;
  private:
  const ::google::protobuf::Duration& _internal_duration() const;
  public:
  const ::google::protobuf::Duration& duration() const;
  ::google::protobuf::Duration* release_duration();
  ::google::protobuf::Duration* mutable_duration();
  void set_allocated_duration(::google::protobuf::Duration* duration);

  // .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 7;
  bool has_trigger() const;
  void clear_trigger();
  static const int kTriggerFieldNumber = 7;
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& _internal_trigger() const;
  public:
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& trigger() const;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* release_trigger();
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* mutable_trigger();
  void set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);

  // double threshold_value = 5;
  void clear_threshold_value();
  static const int kThresholdValueFieldNumber = 5;
  double threshold_value() const;
  void set_threshold_value(double value);

  // .google.monitoring.v3.ComparisonType comparison = 4;
  void clear_comparison();
  static const int kComparisonFieldNumber = 4;
  ::google::monitoring::v3::ComparisonType comparison() const;
  void set_comparison(::google::monitoring::v3::ComparisonType value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation > aggregations_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation > denominator_aggregations_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr denominator_filter_;
  ::google::protobuf::Duration* duration_;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger_;
  double threshold_value_;
  int comparison_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition_MetricAbsence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence) */ {
 public:
  AlertPolicy_Condition_MetricAbsence();
  virtual ~AlertPolicy_Condition_MetricAbsence();

  AlertPolicy_Condition_MetricAbsence(const AlertPolicy_Condition_MetricAbsence& from);

  inline AlertPolicy_Condition_MetricAbsence& operator=(const AlertPolicy_Condition_MetricAbsence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlertPolicy_Condition_MetricAbsence(AlertPolicy_Condition_MetricAbsence&& from) noexcept
    : AlertPolicy_Condition_MetricAbsence() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition_MetricAbsence& operator=(AlertPolicy_Condition_MetricAbsence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlertPolicy_Condition_MetricAbsence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlertPolicy_Condition_MetricAbsence* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition_MetricAbsence*>(
               &_AlertPolicy_Condition_MetricAbsence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AlertPolicy_Condition_MetricAbsence* other);
  friend void swap(AlertPolicy_Condition_MetricAbsence& a, AlertPolicy_Condition_MetricAbsence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy_Condition_MetricAbsence* New() const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MetricAbsence>(NULL);
  }

  AlertPolicy_Condition_MetricAbsence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy_Condition_MetricAbsence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlertPolicy_Condition_MetricAbsence& from);
  void MergeFrom(const AlertPolicy_Condition_MetricAbsence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition_MetricAbsence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.monitoring.v3.Aggregation aggregations = 5;
  int aggregations_size() const;
  void clear_aggregations();
  static const int kAggregationsFieldNumber = 5;
  ::google::monitoring::v3::Aggregation* mutable_aggregations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
      mutable_aggregations();
  const ::google::monitoring::v3::Aggregation& aggregations(int index) const;
  ::google::monitoring::v3::Aggregation* add_aggregations();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
      aggregations() const;

  // string filter = 1;
  void clear_filter();
  static const int kFilterFieldNumber = 1;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // .google.protobuf.Duration duration = 2;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  private:
  const ::google::protobuf::Duration& _internal_duration() const;
  public:
  const ::google::protobuf::Duration& duration() const;
  ::google::protobuf::Duration* release_duration();
  ::google::protobuf::Duration* mutable_duration();
  void set_allocated_duration(::google::protobuf::Duration* duration);

  // .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 3;
  bool has_trigger() const;
  void clear_trigger();
  static const int kTriggerFieldNumber = 3;
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& _internal_trigger() const;
  public:
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& trigger() const;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* release_trigger();
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* mutable_trigger();
  void set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation > aggregations_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::Duration* duration_;
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlertPolicy_Condition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy.Condition) */ {
 public:
  AlertPolicy_Condition();
  virtual ~AlertPolicy_Condition();

  AlertPolicy_Condition(const AlertPolicy_Condition& from);

  inline AlertPolicy_Condition& operator=(const AlertPolicy_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlertPolicy_Condition(AlertPolicy_Condition&& from) noexcept
    : AlertPolicy_Condition() {
    *this = ::std::move(from);
  }

  inline AlertPolicy_Condition& operator=(AlertPolicy_Condition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlertPolicy_Condition& default_instance();

  enum ConditionCase {
    kConditionThreshold = 1,
    kConditionAbsent = 2,
    CONDITION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlertPolicy_Condition* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy_Condition*>(
               &_AlertPolicy_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AlertPolicy_Condition* other);
  friend void swap(AlertPolicy_Condition& a, AlertPolicy_Condition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy_Condition* New() const final {
    return CreateMaybeMessage<AlertPolicy_Condition>(NULL);
  }

  AlertPolicy_Condition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy_Condition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlertPolicy_Condition& from);
  void MergeFrom(const AlertPolicy_Condition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy_Condition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlertPolicy_Condition_Trigger Trigger;
  typedef AlertPolicy_Condition_MetricThreshold MetricThreshold;
  typedef AlertPolicy_Condition_MetricAbsence MetricAbsence;

  // accessors -------------------------------------------------------

  // string display_name = 6;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 6;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string name = 12;
  void clear_name();
  static const int kNameFieldNumber = 12;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.monitoring.v3.AlertPolicy.Condition.MetricThreshold condition_threshold = 1;
  bool has_condition_threshold() const;
  void clear_condition_threshold();
  static const int kConditionThresholdFieldNumber = 1;
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& _internal_condition_threshold() const;
  public:
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& condition_threshold() const;
  ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* release_condition_threshold();
  ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* mutable_condition_threshold();
  void set_allocated_condition_threshold(::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* condition_threshold);

  // .google.monitoring.v3.AlertPolicy.Condition.MetricAbsence condition_absent = 2;
  bool has_condition_absent() const;
  void clear_condition_absent();
  static const int kConditionAbsentFieldNumber = 2;
  private:
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& _internal_condition_absent() const;
  public:
  const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& condition_absent() const;
  ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* release_condition_absent();
  ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* mutable_condition_absent();
  void set_allocated_condition_absent(::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* condition_absent);

  void clear_condition();
  ConditionCase condition_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy.Condition)
 private:
  void set_has_condition_threshold();
  void set_has_condition_absent();

  inline bool has_condition() const;
  inline void clear_has_condition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ConditionUnion {
    ConditionUnion() {}
    ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* condition_threshold_;
    ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* condition_absent_;
  } condition_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlertPolicy_UserLabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AlertPolicy_UserLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<AlertPolicy_UserLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AlertPolicy_UserLabelsEntry_DoNotUse();
  AlertPolicy_UserLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AlertPolicy_UserLabelsEntry_DoNotUse& other);
  static const AlertPolicy_UserLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AlertPolicy_UserLabelsEntry_DoNotUse*>(&_AlertPolicy_UserLabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AlertPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.AlertPolicy) */ {
 public:
  AlertPolicy();
  virtual ~AlertPolicy();

  AlertPolicy(const AlertPolicy& from);

  inline AlertPolicy& operator=(const AlertPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlertPolicy(AlertPolicy&& from) noexcept
    : AlertPolicy() {
    *this = ::std::move(from);
  }

  inline AlertPolicy& operator=(AlertPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlertPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlertPolicy* internal_default_instance() {
    return reinterpret_cast<const AlertPolicy*>(
               &_AlertPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AlertPolicy* other);
  friend void swap(AlertPolicy& a, AlertPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlertPolicy* New() const final {
    return CreateMaybeMessage<AlertPolicy>(NULL);
  }

  AlertPolicy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlertPolicy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlertPolicy& from);
  void MergeFrom(const AlertPolicy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlertPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlertPolicy_Documentation Documentation;
  typedef AlertPolicy_Condition Condition;

  typedef AlertPolicy_ConditionCombinerType ConditionCombinerType;
  static const ConditionCombinerType COMBINE_UNSPECIFIED =
    AlertPolicy_ConditionCombinerType_COMBINE_UNSPECIFIED;
  static const ConditionCombinerType AND =
    AlertPolicy_ConditionCombinerType_AND;
  static const ConditionCombinerType OR =
    AlertPolicy_ConditionCombinerType_OR;
  static const ConditionCombinerType AND_WITH_MATCHING_RESOURCE =
    AlertPolicy_ConditionCombinerType_AND_WITH_MATCHING_RESOURCE;
  static inline bool ConditionCombinerType_IsValid(int value) {
    return AlertPolicy_ConditionCombinerType_IsValid(value);
  }
  static const ConditionCombinerType ConditionCombinerType_MIN =
    AlertPolicy_ConditionCombinerType_ConditionCombinerType_MIN;
  static const ConditionCombinerType ConditionCombinerType_MAX =
    AlertPolicy_ConditionCombinerType_ConditionCombinerType_MAX;
  static const int ConditionCombinerType_ARRAYSIZE =
    AlertPolicy_ConditionCombinerType_ConditionCombinerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConditionCombinerType_descriptor() {
    return AlertPolicy_ConditionCombinerType_descriptor();
  }
  static inline const ::std::string& ConditionCombinerType_Name(ConditionCombinerType value) {
    return AlertPolicy_ConditionCombinerType_Name(value);
  }
  static inline bool ConditionCombinerType_Parse(const ::std::string& name,
      ConditionCombinerType* value) {
    return AlertPolicy_ConditionCombinerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.monitoring.v3.AlertPolicy.Condition conditions = 12;
  int conditions_size() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 12;
  ::google::monitoring::v3::AlertPolicy_Condition* mutable_conditions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >*
      mutable_conditions();
  const ::google::monitoring::v3::AlertPolicy_Condition& conditions(int index) const;
  ::google::monitoring::v3::AlertPolicy_Condition* add_conditions();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >&
      conditions() const;

  // repeated string notification_channels = 14;
  int notification_channels_size() const;
  void clear_notification_channels();
  static const int kNotificationChannelsFieldNumber = 14;
  const ::std::string& notification_channels(int index) const;
  ::std::string* mutable_notification_channels(int index);
  void set_notification_channels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_notification_channels(int index, ::std::string&& value);
  #endif
  void set_notification_channels(int index, const char* value);
  void set_notification_channels(int index, const char* value, size_t size);
  ::std::string* add_notification_channels();
  void add_notification_channels(const ::std::string& value);
  #if LANG_CXX11
  void add_notification_channels(::std::string&& value);
  #endif
  void add_notification_channels(const char* value);
  void add_notification_channels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& notification_channels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_notification_channels();

  // map<string, string> user_labels = 16;
  int user_labels_size() const;
  void clear_user_labels();
  static const int kUserLabelsFieldNumber = 16;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      user_labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_user_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // .google.monitoring.v3.MutationRecord creation_record = 10;
  bool has_creation_record() const;
  void clear_creation_record();
  static const int kCreationRecordFieldNumber = 10;
  private:
  const ::google::monitoring::v3::MutationRecord& _internal_creation_record() const;
  public:
  const ::google::monitoring::v3::MutationRecord& creation_record() const;
  ::google::monitoring::v3::MutationRecord* release_creation_record();
  ::google::monitoring::v3::MutationRecord* mutable_creation_record();
  void set_allocated_creation_record(::google::monitoring::v3::MutationRecord* creation_record);

  // .google.monitoring.v3.MutationRecord mutation_record = 11;
  bool has_mutation_record() const;
  void clear_mutation_record();
  static const int kMutationRecordFieldNumber = 11;
  private:
  const ::google::monitoring::v3::MutationRecord& _internal_mutation_record() const;
  public:
  const ::google::monitoring::v3::MutationRecord& mutation_record() const;
  ::google::monitoring::v3::MutationRecord* release_mutation_record();
  ::google::monitoring::v3::MutationRecord* mutable_mutation_record();
  void set_allocated_mutation_record(::google::monitoring::v3::MutationRecord* mutation_record);

  // .google.monitoring.v3.AlertPolicy.Documentation documentation = 13;
  bool has_documentation() const;
  void clear_documentation();
  static const int kDocumentationFieldNumber = 13;
  private:
  const ::google::monitoring::v3::AlertPolicy_Documentation& _internal_documentation() const;
  public:
  const ::google::monitoring::v3::AlertPolicy_Documentation& documentation() const;
  ::google::monitoring::v3::AlertPolicy_Documentation* release_documentation();
  ::google::monitoring::v3::AlertPolicy_Documentation* mutable_documentation();
  void set_allocated_documentation(::google::monitoring::v3::AlertPolicy_Documentation* documentation);

  // .google.protobuf.BoolValue enabled = 17;
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 17;
  private:
  const ::google::protobuf::BoolValue& _internal_enabled() const;
  public:
  const ::google::protobuf::BoolValue& enabled() const;
  ::google::protobuf::BoolValue* release_enabled();
  ::google::protobuf::BoolValue* mutable_enabled();
  void set_allocated_enabled(::google::protobuf::BoolValue* enabled);

  // .google.monitoring.v3.AlertPolicy.ConditionCombinerType combiner = 6;
  void clear_combiner();
  static const int kCombinerFieldNumber = 6;
  ::google::monitoring::v3::AlertPolicy_ConditionCombinerType combiner() const;
  void set_combiner(::google::monitoring::v3::AlertPolicy_ConditionCombinerType value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.AlertPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition > conditions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> notification_channels_;
  ::google::protobuf::internal::MapField<
      AlertPolicy_UserLabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > user_labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::monitoring::v3::MutationRecord* creation_record_;
  ::google::monitoring::v3::MutationRecord* mutation_record_;
  ::google::monitoring::v3::AlertPolicy_Documentation* documentation_;
  ::google::protobuf::BoolValue* enabled_;
  int combiner_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlertPolicy_Documentation

// string content = 1;
inline void AlertPolicy_Documentation::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlertPolicy_Documentation::content() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Documentation.content)
  return content_.GetNoArena();
}
inline void AlertPolicy_Documentation::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Documentation.content)
}
#if LANG_CXX11
inline void AlertPolicy_Documentation::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Documentation.content)
}
#endif
inline void AlertPolicy_Documentation::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Documentation.content)
}
inline void AlertPolicy_Documentation::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Documentation.content)
}
inline ::std::string* AlertPolicy_Documentation::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Documentation.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlertPolicy_Documentation::release_content() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Documentation.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertPolicy_Documentation::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Documentation.content)
}

// string mime_type = 2;
inline void AlertPolicy_Documentation::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlertPolicy_Documentation::mime_type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
  return mime_type_.GetNoArena();
}
inline void AlertPolicy_Documentation::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}
#if LANG_CXX11
inline void AlertPolicy_Documentation::set_mime_type(::std::string&& value) {
  
  mime_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}
#endif
inline void AlertPolicy_Documentation::set_mime_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}
inline void AlertPolicy_Documentation::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}
inline ::std::string* AlertPolicy_Documentation::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlertPolicy_Documentation::release_mime_type() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertPolicy_Documentation::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Documentation.mime_type)
}

// -------------------------------------------------------------------

// AlertPolicy_Condition_Trigger

// int32 count = 1;
inline bool AlertPolicy_Condition_Trigger::has_count() const {
  return type_case() == kCount;
}
inline void AlertPolicy_Condition_Trigger::set_has_count() {
  _oneof_case_[0] = kCount;
}
inline void AlertPolicy_Condition_Trigger::clear_count() {
  if (has_count()) {
    type_.count_ = 0;
    clear_has_type();
  }
}
inline ::google::protobuf::int32 AlertPolicy_Condition_Trigger::count() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.Trigger.count)
  if (has_count()) {
    return type_.count_;
  }
  return 0;
}
inline void AlertPolicy_Condition_Trigger::set_count(::google::protobuf::int32 value) {
  if (!has_count()) {
    clear_type();
    set_has_count();
  }
  type_.count_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.Trigger.count)
}

// double percent = 2;
inline bool AlertPolicy_Condition_Trigger::has_percent() const {
  return type_case() == kPercent;
}
inline void AlertPolicy_Condition_Trigger::set_has_percent() {
  _oneof_case_[0] = kPercent;
}
inline void AlertPolicy_Condition_Trigger::clear_percent() {
  if (has_percent()) {
    type_.percent_ = 0;
    clear_has_type();
  }
}
inline double AlertPolicy_Condition_Trigger::percent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.Trigger.percent)
  if (has_percent()) {
    return type_.percent_;
  }
  return 0;
}
inline void AlertPolicy_Condition_Trigger::set_percent(double value) {
  if (!has_percent()) {
    clear_type();
    set_has_percent();
  }
  type_.percent_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.Trigger.percent)
}

inline bool AlertPolicy_Condition_Trigger::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void AlertPolicy_Condition_Trigger::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline AlertPolicy_Condition_Trigger::TypeCase AlertPolicy_Condition_Trigger::type_case() const {
  return AlertPolicy_Condition_Trigger::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AlertPolicy_Condition_MetricThreshold

// string filter = 2;
inline void AlertPolicy_Condition_MetricThreshold::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlertPolicy_Condition_MetricThreshold::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
  return filter_.GetNoArena();
}
inline void AlertPolicy_Condition_MetricThreshold::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}
#if LANG_CXX11
inline void AlertPolicy_Condition_MetricThreshold::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}
#endif
inline void AlertPolicy_Condition_MetricThreshold::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}
inline void AlertPolicy_Condition_MetricThreshold::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}
inline ::std::string* AlertPolicy_Condition_MetricThreshold::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlertPolicy_Condition_MetricThreshold::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.filter)
}

// repeated .google.monitoring.v3.Aggregation aggregations = 8;
inline int AlertPolicy_Condition_MetricThreshold::aggregations_size() const {
  return aggregations_.size();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::mutable_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return aggregations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
AlertPolicy_Condition_MetricThreshold::mutable_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return &aggregations_;
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricThreshold::aggregations(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return aggregations_.Get(index);
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::add_aggregations() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return aggregations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
AlertPolicy_Condition_MetricThreshold::aggregations() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.aggregations)
  return aggregations_;
}

// string denominator_filter = 9;
inline void AlertPolicy_Condition_MetricThreshold::clear_denominator_filter() {
  denominator_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlertPolicy_Condition_MetricThreshold::denominator_filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
  return denominator_filter_.GetNoArena();
}
inline void AlertPolicy_Condition_MetricThreshold::set_denominator_filter(const ::std::string& value) {
  
  denominator_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}
#if LANG_CXX11
inline void AlertPolicy_Condition_MetricThreshold::set_denominator_filter(::std::string&& value) {
  
  denominator_filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}
#endif
inline void AlertPolicy_Condition_MetricThreshold::set_denominator_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  denominator_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}
inline void AlertPolicy_Condition_MetricThreshold::set_denominator_filter(const char* value, size_t size) {
  
  denominator_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}
inline ::std::string* AlertPolicy_Condition_MetricThreshold::mutable_denominator_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
  return denominator_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlertPolicy_Condition_MetricThreshold::release_denominator_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
  
  return denominator_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_denominator_filter(::std::string* denominator_filter) {
  if (denominator_filter != NULL) {
    
  } else {
    
  }
  denominator_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), denominator_filter);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_filter)
}

// repeated .google.monitoring.v3.Aggregation denominator_aggregations = 10;
inline int AlertPolicy_Condition_MetricThreshold::denominator_aggregations_size() const {
  return denominator_aggregations_.size();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::mutable_denominator_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return denominator_aggregations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
AlertPolicy_Condition_MetricThreshold::mutable_denominator_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return &denominator_aggregations_;
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricThreshold::denominator_aggregations(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return denominator_aggregations_.Get(index);
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricThreshold::add_denominator_aggregations() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return denominator_aggregations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
AlertPolicy_Condition_MetricThreshold::denominator_aggregations() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.denominator_aggregations)
  return denominator_aggregations_;
}

// .google.monitoring.v3.ComparisonType comparison = 4;
inline void AlertPolicy_Condition_MetricThreshold::clear_comparison() {
  comparison_ = 0;
}
inline ::google::monitoring::v3::ComparisonType AlertPolicy_Condition_MetricThreshold::comparison() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.comparison)
  return static_cast< ::google::monitoring::v3::ComparisonType >(comparison_);
}
inline void AlertPolicy_Condition_MetricThreshold::set_comparison(::google::monitoring::v3::ComparisonType value) {
  
  comparison_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.comparison)
}

// double threshold_value = 5;
inline void AlertPolicy_Condition_MetricThreshold::clear_threshold_value() {
  threshold_value_ = 0;
}
inline double AlertPolicy_Condition_MetricThreshold::threshold_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.threshold_value)
  return threshold_value_;
}
inline void AlertPolicy_Condition_MetricThreshold::set_threshold_value(double value) {
  
  threshold_value_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.threshold_value)
}

// .google.protobuf.Duration duration = 6;
inline bool AlertPolicy_Condition_MetricThreshold::has_duration() const {
  return this != internal_default_instance() && duration_ != NULL;
}
inline const ::google::protobuf::Duration& AlertPolicy_Condition_MetricThreshold::_internal_duration() const {
  return *duration_;
}
inline const ::google::protobuf::Duration& AlertPolicy_Condition_MetricThreshold::duration() const {
  const ::google::protobuf::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* AlertPolicy_Condition_MetricThreshold::release_duration() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
  
  ::google::protobuf::Duration* temp = duration_;
  duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* AlertPolicy_Condition_MetricThreshold::mutable_duration() {
  
  if (duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
  return duration_;
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_duration(::google::protobuf::Duration* duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(duration_);
  }
  if (duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.duration)
}

// .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 7;
inline bool AlertPolicy_Condition_MetricThreshold::has_trigger() const {
  return this != internal_default_instance() && trigger_ != NULL;
}
inline void AlertPolicy_Condition_MetricThreshold::clear_trigger() {
  if (GetArenaNoVirtual() == NULL && trigger_ != NULL) {
    delete trigger_;
  }
  trigger_ = NULL;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricThreshold::_internal_trigger() const {
  return *trigger_;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricThreshold::trigger() const {
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger* p = trigger_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_Condition_Trigger*>(
      &::google::monitoring::v3::_AlertPolicy_Condition_Trigger_default_instance_);
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricThreshold::release_trigger() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = trigger_;
  trigger_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricThreshold::mutable_trigger() {
  
  if (trigger_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_Trigger>(GetArenaNoVirtual());
    trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
  return trigger_;
}
inline void AlertPolicy_Condition_MetricThreshold::set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trigger_;
  }
  if (trigger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    
  } else {
    
  }
  trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricThreshold.trigger)
}

// -------------------------------------------------------------------

// AlertPolicy_Condition_MetricAbsence

// string filter = 1;
inline void AlertPolicy_Condition_MetricAbsence::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlertPolicy_Condition_MetricAbsence::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
  return filter_.GetNoArena();
}
inline void AlertPolicy_Condition_MetricAbsence::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}
#if LANG_CXX11
inline void AlertPolicy_Condition_MetricAbsence::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}
#endif
inline void AlertPolicy_Condition_MetricAbsence::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}
inline void AlertPolicy_Condition_MetricAbsence::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}
inline ::std::string* AlertPolicy_Condition_MetricAbsence::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlertPolicy_Condition_MetricAbsence::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertPolicy_Condition_MetricAbsence::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.filter)
}

// repeated .google.monitoring.v3.Aggregation aggregations = 5;
inline int AlertPolicy_Condition_MetricAbsence::aggregations_size() const {
  return aggregations_.size();
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricAbsence::mutable_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return aggregations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >*
AlertPolicy_Condition_MetricAbsence::mutable_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return &aggregations_;
}
inline const ::google::monitoring::v3::Aggregation& AlertPolicy_Condition_MetricAbsence::aggregations(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return aggregations_.Get(index);
}
inline ::google::monitoring::v3::Aggregation* AlertPolicy_Condition_MetricAbsence::add_aggregations() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return aggregations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Aggregation >&
AlertPolicy_Condition_MetricAbsence::aggregations() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.aggregations)
  return aggregations_;
}

// .google.protobuf.Duration duration = 2;
inline bool AlertPolicy_Condition_MetricAbsence::has_duration() const {
  return this != internal_default_instance() && duration_ != NULL;
}
inline const ::google::protobuf::Duration& AlertPolicy_Condition_MetricAbsence::_internal_duration() const {
  return *duration_;
}
inline const ::google::protobuf::Duration& AlertPolicy_Condition_MetricAbsence::duration() const {
  const ::google::protobuf::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* AlertPolicy_Condition_MetricAbsence::release_duration() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
  
  ::google::protobuf::Duration* temp = duration_;
  duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* AlertPolicy_Condition_MetricAbsence::mutable_duration() {
  
  if (duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
  return duration_;
}
inline void AlertPolicy_Condition_MetricAbsence::set_allocated_duration(::google::protobuf::Duration* duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(duration_);
  }
  if (duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.duration)
}

// .google.monitoring.v3.AlertPolicy.Condition.Trigger trigger = 3;
inline bool AlertPolicy_Condition_MetricAbsence::has_trigger() const {
  return this != internal_default_instance() && trigger_ != NULL;
}
inline void AlertPolicy_Condition_MetricAbsence::clear_trigger() {
  if (GetArenaNoVirtual() == NULL && trigger_ != NULL) {
    delete trigger_;
  }
  trigger_ = NULL;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricAbsence::_internal_trigger() const {
  return *trigger_;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_Trigger& AlertPolicy_Condition_MetricAbsence::trigger() const {
  const ::google::monitoring::v3::AlertPolicy_Condition_Trigger* p = trigger_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_Condition_Trigger*>(
      &::google::monitoring::v3::_AlertPolicy_Condition_Trigger_default_instance_);
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricAbsence::release_trigger() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
  
  ::google::monitoring::v3::AlertPolicy_Condition_Trigger* temp = trigger_;
  trigger_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_Trigger* AlertPolicy_Condition_MetricAbsence::mutable_trigger() {
  
  if (trigger_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Condition_Trigger>(GetArenaNoVirtual());
    trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
  return trigger_;
}
inline void AlertPolicy_Condition_MetricAbsence::set_allocated_trigger(::google::monitoring::v3::AlertPolicy_Condition_Trigger* trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trigger_;
  }
  if (trigger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    
  } else {
    
  }
  trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.MetricAbsence.trigger)
}

// -------------------------------------------------------------------

// AlertPolicy_Condition

// string name = 12;
inline void AlertPolicy_Condition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlertPolicy_Condition::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.name)
  return name_.GetNoArena();
}
inline void AlertPolicy_Condition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.name)
}
#if LANG_CXX11
inline void AlertPolicy_Condition::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Condition.name)
}
#endif
inline void AlertPolicy_Condition::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Condition.name)
}
inline void AlertPolicy_Condition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Condition.name)
}
inline ::std::string* AlertPolicy_Condition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlertPolicy_Condition::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertPolicy_Condition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.name)
}

// string display_name = 6;
inline void AlertPolicy_Condition::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlertPolicy_Condition::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.display_name)
  return display_name_.GetNoArena();
}
inline void AlertPolicy_Condition::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.Condition.display_name)
}
#if LANG_CXX11
inline void AlertPolicy_Condition::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.Condition.display_name)
}
#endif
inline void AlertPolicy_Condition::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.Condition.display_name)
}
inline void AlertPolicy_Condition::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.Condition.display_name)
}
inline ::std::string* AlertPolicy_Condition::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlertPolicy_Condition::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertPolicy_Condition::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.Condition.display_name)
}

// .google.monitoring.v3.AlertPolicy.Condition.MetricThreshold condition_threshold = 1;
inline bool AlertPolicy_Condition::has_condition_threshold() const {
  return condition_case() == kConditionThreshold;
}
inline void AlertPolicy_Condition::set_has_condition_threshold() {
  _oneof_case_[0] = kConditionThreshold;
}
inline void AlertPolicy_Condition::clear_condition_threshold() {
  if (has_condition_threshold()) {
    delete condition_.condition_threshold_;
    clear_has_condition();
  }
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& AlertPolicy_Condition::_internal_condition_threshold() const {
  return *condition_.condition_threshold_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* AlertPolicy_Condition::release_condition_threshold() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
  if (has_condition_threshold()) {
    clear_has_condition();
      ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* temp = condition_.condition_threshold_;
    condition_.condition_threshold_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold& AlertPolicy_Condition::condition_threshold() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
  return has_condition_threshold()
      ? *condition_.condition_threshold_
      : *reinterpret_cast< ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold*>(&::google::monitoring::v3::_AlertPolicy_Condition_MetricThreshold_default_instance_);
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold* AlertPolicy_Condition::mutable_condition_threshold() {
  if (!has_condition_threshold()) {
    clear_condition();
    set_has_condition_threshold();
    condition_.condition_threshold_ = CreateMaybeMessage< ::google::monitoring::v3::AlertPolicy_Condition_MetricThreshold >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.condition_threshold)
  return condition_.condition_threshold_;
}

// .google.monitoring.v3.AlertPolicy.Condition.MetricAbsence condition_absent = 2;
inline bool AlertPolicy_Condition::has_condition_absent() const {
  return condition_case() == kConditionAbsent;
}
inline void AlertPolicy_Condition::set_has_condition_absent() {
  _oneof_case_[0] = kConditionAbsent;
}
inline void AlertPolicy_Condition::clear_condition_absent() {
  if (has_condition_absent()) {
    delete condition_.condition_absent_;
    clear_has_condition();
  }
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& AlertPolicy_Condition::_internal_condition_absent() const {
  return *condition_.condition_absent_;
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* AlertPolicy_Condition::release_condition_absent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
  if (has_condition_absent()) {
    clear_has_condition();
      ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* temp = condition_.condition_absent_;
    condition_.condition_absent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence& AlertPolicy_Condition::condition_absent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
  return has_condition_absent()
      ? *condition_.condition_absent_
      : *reinterpret_cast< ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence*>(&::google::monitoring::v3::_AlertPolicy_Condition_MetricAbsence_default_instance_);
}
inline ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence* AlertPolicy_Condition::mutable_condition_absent() {
  if (!has_condition_absent()) {
    clear_condition();
    set_has_condition_absent();
    condition_.condition_absent_ = CreateMaybeMessage< ::google::monitoring::v3::AlertPolicy_Condition_MetricAbsence >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.Condition.condition_absent)
  return condition_.condition_absent_;
}

inline bool AlertPolicy_Condition::has_condition() const {
  return condition_case() != CONDITION_NOT_SET;
}
inline void AlertPolicy_Condition::clear_has_condition() {
  _oneof_case_[0] = CONDITION_NOT_SET;
}
inline AlertPolicy_Condition::ConditionCase AlertPolicy_Condition::condition_case() const {
  return AlertPolicy_Condition::ConditionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AlertPolicy

// string name = 1;
inline void AlertPolicy::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlertPolicy::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.name)
  return name_.GetNoArena();
}
inline void AlertPolicy::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.name)
}
#if LANG_CXX11
inline void AlertPolicy::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.name)
}
#endif
inline void AlertPolicy::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.name)
}
inline void AlertPolicy::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.name)
}
inline ::std::string* AlertPolicy::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlertPolicy::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertPolicy::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.name)
}

// string display_name = 2;
inline void AlertPolicy::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlertPolicy::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.display_name)
  return display_name_.GetNoArena();
}
inline void AlertPolicy::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.display_name)
}
#if LANG_CXX11
inline void AlertPolicy::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.AlertPolicy.display_name)
}
#endif
inline void AlertPolicy::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.display_name)
}
inline void AlertPolicy::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.display_name)
}
inline ::std::string* AlertPolicy::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlertPolicy::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertPolicy::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.display_name)
}

// .google.monitoring.v3.AlertPolicy.Documentation documentation = 13;
inline bool AlertPolicy::has_documentation() const {
  return this != internal_default_instance() && documentation_ != NULL;
}
inline void AlertPolicy::clear_documentation() {
  if (GetArenaNoVirtual() == NULL && documentation_ != NULL) {
    delete documentation_;
  }
  documentation_ = NULL;
}
inline const ::google::monitoring::v3::AlertPolicy_Documentation& AlertPolicy::_internal_documentation() const {
  return *documentation_;
}
inline const ::google::monitoring::v3::AlertPolicy_Documentation& AlertPolicy::documentation() const {
  const ::google::monitoring::v3::AlertPolicy_Documentation* p = documentation_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.documentation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::AlertPolicy_Documentation*>(
      &::google::monitoring::v3::_AlertPolicy_Documentation_default_instance_);
}
inline ::google::monitoring::v3::AlertPolicy_Documentation* AlertPolicy::release_documentation() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.documentation)
  
  ::google::monitoring::v3::AlertPolicy_Documentation* temp = documentation_;
  documentation_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy_Documentation* AlertPolicy::mutable_documentation() {
  
  if (documentation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy_Documentation>(GetArenaNoVirtual());
    documentation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.documentation)
  return documentation_;
}
inline void AlertPolicy::set_allocated_documentation(::google::monitoring::v3::AlertPolicy_Documentation* documentation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete documentation_;
  }
  if (documentation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      documentation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, documentation, submessage_arena);
    }
    
  } else {
    
  }
  documentation_ = documentation;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.documentation)
}

// map<string, string> user_labels = 16;
inline int AlertPolicy::user_labels_size() const {
  return user_labels_.size();
}
inline void AlertPolicy::clear_user_labels() {
  user_labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
AlertPolicy::user_labels() const {
  // @@protoc_insertion_point(field_map:google.monitoring.v3.AlertPolicy.user_labels)
  return user_labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
AlertPolicy::mutable_user_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.monitoring.v3.AlertPolicy.user_labels)
  return user_labels_.MutableMap();
}

// repeated .google.monitoring.v3.AlertPolicy.Condition conditions = 12;
inline int AlertPolicy::conditions_size() const {
  return conditions_.size();
}
inline void AlertPolicy::clear_conditions() {
  conditions_.Clear();
}
inline ::google::monitoring::v3::AlertPolicy_Condition* AlertPolicy::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.conditions)
  return conditions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >*
AlertPolicy::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.conditions)
  return &conditions_;
}
inline const ::google::monitoring::v3::AlertPolicy_Condition& AlertPolicy::conditions(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.conditions)
  return conditions_.Get(index);
}
inline ::google::monitoring::v3::AlertPolicy_Condition* AlertPolicy::add_conditions() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.conditions)
  return conditions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy_Condition >&
AlertPolicy::conditions() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.conditions)
  return conditions_;
}

// .google.monitoring.v3.AlertPolicy.ConditionCombinerType combiner = 6;
inline void AlertPolicy::clear_combiner() {
  combiner_ = 0;
}
inline ::google::monitoring::v3::AlertPolicy_ConditionCombinerType AlertPolicy::combiner() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.combiner)
  return static_cast< ::google::monitoring::v3::AlertPolicy_ConditionCombinerType >(combiner_);
}
inline void AlertPolicy::set_combiner(::google::monitoring::v3::AlertPolicy_ConditionCombinerType value) {
  
  combiner_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.combiner)
}

// .google.protobuf.BoolValue enabled = 17;
inline bool AlertPolicy::has_enabled() const {
  return this != internal_default_instance() && enabled_ != NULL;
}
inline const ::google::protobuf::BoolValue& AlertPolicy::_internal_enabled() const {
  return *enabled_;
}
inline const ::google::protobuf::BoolValue& AlertPolicy::enabled() const {
  const ::google::protobuf::BoolValue* p = enabled_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.enabled)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* AlertPolicy::release_enabled() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.enabled)
  
  ::google::protobuf::BoolValue* temp = enabled_;
  enabled_ = NULL;
  return temp;
}
inline ::google::protobuf::BoolValue* AlertPolicy::mutable_enabled() {
  
  if (enabled_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.enabled)
  return enabled_;
}
inline void AlertPolicy::set_allocated_enabled(::google::protobuf::BoolValue* enabled) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(enabled)->GetArena();
    if (message_arena != submessage_arena) {
      enabled = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    
  } else {
    
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.enabled)
}

// repeated string notification_channels = 14;
inline int AlertPolicy::notification_channels_size() const {
  return notification_channels_.size();
}
inline void AlertPolicy::clear_notification_channels() {
  notification_channels_.Clear();
}
inline const ::std::string& AlertPolicy::notification_channels(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.notification_channels)
  return notification_channels_.Get(index);
}
inline ::std::string* AlertPolicy::mutable_notification_channels(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.notification_channels)
  return notification_channels_.Mutable(index);
}
inline void AlertPolicy::set_notification_channels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.notification_channels)
  notification_channels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AlertPolicy::set_notification_channels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.monitoring.v3.AlertPolicy.notification_channels)
  notification_channels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AlertPolicy::set_notification_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  notification_channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::set_notification_channels(int index, const char* value, size_t size) {
  notification_channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline ::std::string* AlertPolicy::add_notification_channels() {
  // @@protoc_insertion_point(field_add_mutable:google.monitoring.v3.AlertPolicy.notification_channels)
  return notification_channels_.Add();
}
inline void AlertPolicy::add_notification_channels(const ::std::string& value) {
  notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.notification_channels)
}
#if LANG_CXX11
inline void AlertPolicy::add_notification_channels(::std::string&& value) {
  notification_channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.monitoring.v3.AlertPolicy.notification_channels)
}
#endif
inline void AlertPolicy::add_notification_channels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline void AlertPolicy::add_notification_channels(const char* value, size_t size) {
  notification_channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.monitoring.v3.AlertPolicy.notification_channels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AlertPolicy::notification_channels() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.AlertPolicy.notification_channels)
  return notification_channels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AlertPolicy::mutable_notification_channels() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.AlertPolicy.notification_channels)
  return &notification_channels_;
}

// .google.monitoring.v3.MutationRecord creation_record = 10;
inline bool AlertPolicy::has_creation_record() const {
  return this != internal_default_instance() && creation_record_ != NULL;
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::_internal_creation_record() const {
  return *creation_record_;
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::creation_record() const {
  const ::google::monitoring::v3::MutationRecord* p = creation_record_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.creation_record)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::MutationRecord*>(
      &::google::monitoring::v3::_MutationRecord_default_instance_);
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::release_creation_record() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.creation_record)
  
  ::google::monitoring::v3::MutationRecord* temp = creation_record_;
  creation_record_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::mutable_creation_record() {
  
  if (creation_record_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::MutationRecord>(GetArenaNoVirtual());
    creation_record_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.creation_record)
  return creation_record_;
}
inline void AlertPolicy::set_allocated_creation_record(::google::monitoring::v3::MutationRecord* creation_record) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(creation_record_);
  }
  if (creation_record) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      creation_record = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, creation_record, submessage_arena);
    }
    
  } else {
    
  }
  creation_record_ = creation_record;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.creation_record)
}

// .google.monitoring.v3.MutationRecord mutation_record = 11;
inline bool AlertPolicy::has_mutation_record() const {
  return this != internal_default_instance() && mutation_record_ != NULL;
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::_internal_mutation_record() const {
  return *mutation_record_;
}
inline const ::google::monitoring::v3::MutationRecord& AlertPolicy::mutation_record() const {
  const ::google::monitoring::v3::MutationRecord* p = mutation_record_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.AlertPolicy.mutation_record)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::MutationRecord*>(
      &::google::monitoring::v3::_MutationRecord_default_instance_);
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::release_mutation_record() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.AlertPolicy.mutation_record)
  
  ::google::monitoring::v3::MutationRecord* temp = mutation_record_;
  mutation_record_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::MutationRecord* AlertPolicy::mutable_mutation_record() {
  
  if (mutation_record_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::MutationRecord>(GetArenaNoVirtual());
    mutation_record_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.AlertPolicy.mutation_record)
  return mutation_record_;
}
inline void AlertPolicy::set_allocated_mutation_record(::google::monitoring::v3::MutationRecord* mutation_record) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mutation_record_);
  }
  if (mutation_record) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mutation_record = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mutation_record, submessage_arena);
    }
    
  } else {
    
  }
  mutation_record_ = mutation_record;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.AlertPolicy.mutation_record)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::monitoring::v3::AlertPolicy_ConditionCombinerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::v3::AlertPolicy_ConditionCombinerType>() {
  return ::google::monitoring::v3::AlertPolicy_ConditionCombinerType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_2eproto
