// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/uptime_service.proto

#ifndef PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto
#define PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/monitoring/v3/uptime.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto 

namespace protobuf_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto
namespace google {
namespace monitoring {
namespace v3 {
class CreateUptimeCheckConfigRequest;
class CreateUptimeCheckConfigRequestDefaultTypeInternal;
extern CreateUptimeCheckConfigRequestDefaultTypeInternal _CreateUptimeCheckConfigRequest_default_instance_;
class DeleteUptimeCheckConfigRequest;
class DeleteUptimeCheckConfigRequestDefaultTypeInternal;
extern DeleteUptimeCheckConfigRequestDefaultTypeInternal _DeleteUptimeCheckConfigRequest_default_instance_;
class GetUptimeCheckConfigRequest;
class GetUptimeCheckConfigRequestDefaultTypeInternal;
extern GetUptimeCheckConfigRequestDefaultTypeInternal _GetUptimeCheckConfigRequest_default_instance_;
class ListUptimeCheckConfigsRequest;
class ListUptimeCheckConfigsRequestDefaultTypeInternal;
extern ListUptimeCheckConfigsRequestDefaultTypeInternal _ListUptimeCheckConfigsRequest_default_instance_;
class ListUptimeCheckConfigsResponse;
class ListUptimeCheckConfigsResponseDefaultTypeInternal;
extern ListUptimeCheckConfigsResponseDefaultTypeInternal _ListUptimeCheckConfigsResponse_default_instance_;
class ListUptimeCheckIpsRequest;
class ListUptimeCheckIpsRequestDefaultTypeInternal;
extern ListUptimeCheckIpsRequestDefaultTypeInternal _ListUptimeCheckIpsRequest_default_instance_;
class ListUptimeCheckIpsResponse;
class ListUptimeCheckIpsResponseDefaultTypeInternal;
extern ListUptimeCheckIpsResponseDefaultTypeInternal _ListUptimeCheckIpsResponse_default_instance_;
class UpdateUptimeCheckConfigRequest;
class UpdateUptimeCheckConfigRequestDefaultTypeInternal;
extern UpdateUptimeCheckConfigRequestDefaultTypeInternal _UpdateUptimeCheckConfigRequest_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::monitoring::v3::CreateUptimeCheckConfigRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateUptimeCheckConfigRequest>(Arena*);
template<> ::google::monitoring::v3::DeleteUptimeCheckConfigRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::DeleteUptimeCheckConfigRequest>(Arena*);
template<> ::google::monitoring::v3::GetUptimeCheckConfigRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetUptimeCheckConfigRequest>(Arena*);
template<> ::google::monitoring::v3::ListUptimeCheckConfigsRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListUptimeCheckConfigsRequest>(Arena*);
template<> ::google::monitoring::v3::ListUptimeCheckConfigsResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListUptimeCheckConfigsResponse>(Arena*);
template<> ::google::monitoring::v3::ListUptimeCheckIpsRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListUptimeCheckIpsRequest>(Arena*);
template<> ::google::monitoring::v3::ListUptimeCheckIpsResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListUptimeCheckIpsResponse>(Arena*);
template<> ::google::monitoring::v3::UpdateUptimeCheckConfigRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::UpdateUptimeCheckConfigRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class ListUptimeCheckConfigsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListUptimeCheckConfigsRequest) */ {
 public:
  ListUptimeCheckConfigsRequest();
  virtual ~ListUptimeCheckConfigsRequest();

  ListUptimeCheckConfigsRequest(const ListUptimeCheckConfigsRequest& from);

  inline ListUptimeCheckConfigsRequest& operator=(const ListUptimeCheckConfigsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListUptimeCheckConfigsRequest(ListUptimeCheckConfigsRequest&& from) noexcept
    : ListUptimeCheckConfigsRequest() {
    *this = ::std::move(from);
  }

  inline ListUptimeCheckConfigsRequest& operator=(ListUptimeCheckConfigsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListUptimeCheckConfigsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUptimeCheckConfigsRequest* internal_default_instance() {
    return reinterpret_cast<const ListUptimeCheckConfigsRequest*>(
               &_ListUptimeCheckConfigsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ListUptimeCheckConfigsRequest* other);
  friend void swap(ListUptimeCheckConfigsRequest& a, ListUptimeCheckConfigsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListUptimeCheckConfigsRequest* New() const final {
    return CreateMaybeMessage<ListUptimeCheckConfigsRequest>(NULL);
  }

  ListUptimeCheckConfigsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListUptimeCheckConfigsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListUptimeCheckConfigsRequest& from);
  void MergeFrom(const ListUptimeCheckConfigsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUptimeCheckConfigsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListUptimeCheckConfigsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListUptimeCheckConfigsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListUptimeCheckConfigsResponse) */ {
 public:
  ListUptimeCheckConfigsResponse();
  virtual ~ListUptimeCheckConfigsResponse();

  ListUptimeCheckConfigsResponse(const ListUptimeCheckConfigsResponse& from);

  inline ListUptimeCheckConfigsResponse& operator=(const ListUptimeCheckConfigsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListUptimeCheckConfigsResponse(ListUptimeCheckConfigsResponse&& from) noexcept
    : ListUptimeCheckConfigsResponse() {
    *this = ::std::move(from);
  }

  inline ListUptimeCheckConfigsResponse& operator=(ListUptimeCheckConfigsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListUptimeCheckConfigsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUptimeCheckConfigsResponse* internal_default_instance() {
    return reinterpret_cast<const ListUptimeCheckConfigsResponse*>(
               &_ListUptimeCheckConfigsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ListUptimeCheckConfigsResponse* other);
  friend void swap(ListUptimeCheckConfigsResponse& a, ListUptimeCheckConfigsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListUptimeCheckConfigsResponse* New() const final {
    return CreateMaybeMessage<ListUptimeCheckConfigsResponse>(NULL);
  }

  ListUptimeCheckConfigsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListUptimeCheckConfigsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListUptimeCheckConfigsResponse& from);
  void MergeFrom(const ListUptimeCheckConfigsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUptimeCheckConfigsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.monitoring.v3.UptimeCheckConfig uptime_check_configs = 1;
  int uptime_check_configs_size() const;
  void clear_uptime_check_configs();
  static const int kUptimeCheckConfigsFieldNumber = 1;
  ::google::monitoring::v3::UptimeCheckConfig* mutable_uptime_check_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig >*
      mutable_uptime_check_configs();
  const ::google::monitoring::v3::UptimeCheckConfig& uptime_check_configs(int index) const;
  ::google::monitoring::v3::UptimeCheckConfig* add_uptime_check_configs();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig >&
      uptime_check_configs() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // int32 total_size = 3;
  void clear_total_size();
  static const int kTotalSizeFieldNumber = 3;
  ::google::protobuf::int32 total_size() const;
  void set_total_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListUptimeCheckConfigsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig > uptime_check_configs_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  ::google::protobuf::int32 total_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetUptimeCheckConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetUptimeCheckConfigRequest) */ {
 public:
  GetUptimeCheckConfigRequest();
  virtual ~GetUptimeCheckConfigRequest();

  GetUptimeCheckConfigRequest(const GetUptimeCheckConfigRequest& from);

  inline GetUptimeCheckConfigRequest& operator=(const GetUptimeCheckConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetUptimeCheckConfigRequest(GetUptimeCheckConfigRequest&& from) noexcept
    : GetUptimeCheckConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetUptimeCheckConfigRequest& operator=(GetUptimeCheckConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUptimeCheckConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUptimeCheckConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetUptimeCheckConfigRequest*>(
               &_GetUptimeCheckConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetUptimeCheckConfigRequest* other);
  friend void swap(GetUptimeCheckConfigRequest& a, GetUptimeCheckConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetUptimeCheckConfigRequest* New() const final {
    return CreateMaybeMessage<GetUptimeCheckConfigRequest>(NULL);
  }

  GetUptimeCheckConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetUptimeCheckConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetUptimeCheckConfigRequest& from);
  void MergeFrom(const GetUptimeCheckConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUptimeCheckConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetUptimeCheckConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateUptimeCheckConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateUptimeCheckConfigRequest) */ {
 public:
  CreateUptimeCheckConfigRequest();
  virtual ~CreateUptimeCheckConfigRequest();

  CreateUptimeCheckConfigRequest(const CreateUptimeCheckConfigRequest& from);

  inline CreateUptimeCheckConfigRequest& operator=(const CreateUptimeCheckConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateUptimeCheckConfigRequest(CreateUptimeCheckConfigRequest&& from) noexcept
    : CreateUptimeCheckConfigRequest() {
    *this = ::std::move(from);
  }

  inline CreateUptimeCheckConfigRequest& operator=(CreateUptimeCheckConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateUptimeCheckConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateUptimeCheckConfigRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUptimeCheckConfigRequest*>(
               &_CreateUptimeCheckConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateUptimeCheckConfigRequest* other);
  friend void swap(CreateUptimeCheckConfigRequest& a, CreateUptimeCheckConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateUptimeCheckConfigRequest* New() const final {
    return CreateMaybeMessage<CreateUptimeCheckConfigRequest>(NULL);
  }

  CreateUptimeCheckConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateUptimeCheckConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateUptimeCheckConfigRequest& from);
  void MergeFrom(const CreateUptimeCheckConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUptimeCheckConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.monitoring.v3.UptimeCheckConfig uptime_check_config = 2;
  bool has_uptime_check_config() const;
  void clear_uptime_check_config();
  static const int kUptimeCheckConfigFieldNumber = 2;
  private:
  const ::google::monitoring::v3::UptimeCheckConfig& _internal_uptime_check_config() const;
  public:
  const ::google::monitoring::v3::UptimeCheckConfig& uptime_check_config() const;
  ::google::monitoring::v3::UptimeCheckConfig* release_uptime_check_config();
  ::google::monitoring::v3::UptimeCheckConfig* mutable_uptime_check_config();
  void set_allocated_uptime_check_config(::google::monitoring::v3::UptimeCheckConfig* uptime_check_config);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateUptimeCheckConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::monitoring::v3::UptimeCheckConfig* uptime_check_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateUptimeCheckConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UpdateUptimeCheckConfigRequest) */ {
 public:
  UpdateUptimeCheckConfigRequest();
  virtual ~UpdateUptimeCheckConfigRequest();

  UpdateUptimeCheckConfigRequest(const UpdateUptimeCheckConfigRequest& from);

  inline UpdateUptimeCheckConfigRequest& operator=(const UpdateUptimeCheckConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateUptimeCheckConfigRequest(UpdateUptimeCheckConfigRequest&& from) noexcept
    : UpdateUptimeCheckConfigRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUptimeCheckConfigRequest& operator=(UpdateUptimeCheckConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateUptimeCheckConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateUptimeCheckConfigRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUptimeCheckConfigRequest*>(
               &_UpdateUptimeCheckConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UpdateUptimeCheckConfigRequest* other);
  friend void swap(UpdateUptimeCheckConfigRequest& a, UpdateUptimeCheckConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateUptimeCheckConfigRequest* New() const final {
    return CreateMaybeMessage<UpdateUptimeCheckConfigRequest>(NULL);
  }

  UpdateUptimeCheckConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUptimeCheckConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateUptimeCheckConfigRequest& from);
  void MergeFrom(const UpdateUptimeCheckConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUptimeCheckConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // .google.monitoring.v3.UptimeCheckConfig uptime_check_config = 3;
  bool has_uptime_check_config() const;
  void clear_uptime_check_config();
  static const int kUptimeCheckConfigFieldNumber = 3;
  private:
  const ::google::monitoring::v3::UptimeCheckConfig& _internal_uptime_check_config() const;
  public:
  const ::google::monitoring::v3::UptimeCheckConfig& uptime_check_config() const;
  ::google::monitoring::v3::UptimeCheckConfig* release_uptime_check_config();
  ::google::monitoring::v3::UptimeCheckConfig* mutable_uptime_check_config();
  void set_allocated_uptime_check_config(::google::monitoring::v3::UptimeCheckConfig* uptime_check_config);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UpdateUptimeCheckConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::FieldMask* update_mask_;
  ::google::monitoring::v3::UptimeCheckConfig* uptime_check_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteUptimeCheckConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.DeleteUptimeCheckConfigRequest) */ {
 public:
  DeleteUptimeCheckConfigRequest();
  virtual ~DeleteUptimeCheckConfigRequest();

  DeleteUptimeCheckConfigRequest(const DeleteUptimeCheckConfigRequest& from);

  inline DeleteUptimeCheckConfigRequest& operator=(const DeleteUptimeCheckConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteUptimeCheckConfigRequest(DeleteUptimeCheckConfigRequest&& from) noexcept
    : DeleteUptimeCheckConfigRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUptimeCheckConfigRequest& operator=(DeleteUptimeCheckConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteUptimeCheckConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteUptimeCheckConfigRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUptimeCheckConfigRequest*>(
               &_DeleteUptimeCheckConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeleteUptimeCheckConfigRequest* other);
  friend void swap(DeleteUptimeCheckConfigRequest& a, DeleteUptimeCheckConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteUptimeCheckConfigRequest* New() const final {
    return CreateMaybeMessage<DeleteUptimeCheckConfigRequest>(NULL);
  }

  DeleteUptimeCheckConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUptimeCheckConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteUptimeCheckConfigRequest& from);
  void MergeFrom(const DeleteUptimeCheckConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUptimeCheckConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.DeleteUptimeCheckConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListUptimeCheckIpsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListUptimeCheckIpsRequest) */ {
 public:
  ListUptimeCheckIpsRequest();
  virtual ~ListUptimeCheckIpsRequest();

  ListUptimeCheckIpsRequest(const ListUptimeCheckIpsRequest& from);

  inline ListUptimeCheckIpsRequest& operator=(const ListUptimeCheckIpsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListUptimeCheckIpsRequest(ListUptimeCheckIpsRequest&& from) noexcept
    : ListUptimeCheckIpsRequest() {
    *this = ::std::move(from);
  }

  inline ListUptimeCheckIpsRequest& operator=(ListUptimeCheckIpsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListUptimeCheckIpsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUptimeCheckIpsRequest* internal_default_instance() {
    return reinterpret_cast<const ListUptimeCheckIpsRequest*>(
               &_ListUptimeCheckIpsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ListUptimeCheckIpsRequest* other);
  friend void swap(ListUptimeCheckIpsRequest& a, ListUptimeCheckIpsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListUptimeCheckIpsRequest* New() const final {
    return CreateMaybeMessage<ListUptimeCheckIpsRequest>(NULL);
  }

  ListUptimeCheckIpsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListUptimeCheckIpsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListUptimeCheckIpsRequest& from);
  void MergeFrom(const ListUptimeCheckIpsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUptimeCheckIpsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListUptimeCheckIpsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListUptimeCheckIpsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListUptimeCheckIpsResponse) */ {
 public:
  ListUptimeCheckIpsResponse();
  virtual ~ListUptimeCheckIpsResponse();

  ListUptimeCheckIpsResponse(const ListUptimeCheckIpsResponse& from);

  inline ListUptimeCheckIpsResponse& operator=(const ListUptimeCheckIpsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListUptimeCheckIpsResponse(ListUptimeCheckIpsResponse&& from) noexcept
    : ListUptimeCheckIpsResponse() {
    *this = ::std::move(from);
  }

  inline ListUptimeCheckIpsResponse& operator=(ListUptimeCheckIpsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListUptimeCheckIpsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUptimeCheckIpsResponse* internal_default_instance() {
    return reinterpret_cast<const ListUptimeCheckIpsResponse*>(
               &_ListUptimeCheckIpsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ListUptimeCheckIpsResponse* other);
  friend void swap(ListUptimeCheckIpsResponse& a, ListUptimeCheckIpsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListUptimeCheckIpsResponse* New() const final {
    return CreateMaybeMessage<ListUptimeCheckIpsResponse>(NULL);
  }

  ListUptimeCheckIpsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListUptimeCheckIpsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListUptimeCheckIpsResponse& from);
  void MergeFrom(const ListUptimeCheckIpsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUptimeCheckIpsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.monitoring.v3.UptimeCheckIp uptime_check_ips = 1;
  int uptime_check_ips_size() const;
  void clear_uptime_check_ips();
  static const int kUptimeCheckIpsFieldNumber = 1;
  ::google::monitoring::v3::UptimeCheckIp* mutable_uptime_check_ips(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckIp >*
      mutable_uptime_check_ips();
  const ::google::monitoring::v3::UptimeCheckIp& uptime_check_ips(int index) const;
  ::google::monitoring::v3::UptimeCheckIp* add_uptime_check_ips();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckIp >&
      uptime_check_ips() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListUptimeCheckIpsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckIp > uptime_check_ips_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListUptimeCheckConfigsRequest

// string parent = 1;
inline void ListUptimeCheckConfigsRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListUptimeCheckConfigsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
  return parent_.GetNoArena();
}
inline void ListUptimeCheckConfigsRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
}
#if LANG_CXX11
inline void ListUptimeCheckConfigsRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
}
#endif
inline void ListUptimeCheckConfigsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
}
inline void ListUptimeCheckConfigsRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
}
inline ::std::string* ListUptimeCheckConfigsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListUptimeCheckConfigsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListUptimeCheckConfigsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListUptimeCheckConfigsRequest.parent)
}

// int32 page_size = 3;
inline void ListUptimeCheckConfigsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListUptimeCheckConfigsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_size)
  return page_size_;
}
inline void ListUptimeCheckConfigsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_size)
}

// string page_token = 4;
inline void ListUptimeCheckConfigsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListUptimeCheckConfigsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListUptimeCheckConfigsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
}
#if LANG_CXX11
inline void ListUptimeCheckConfigsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
}
#endif
inline void ListUptimeCheckConfigsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
}
inline void ListUptimeCheckConfigsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
}
inline ::std::string* ListUptimeCheckConfigsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListUptimeCheckConfigsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListUptimeCheckConfigsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListUptimeCheckConfigsRequest.page_token)
}

// -------------------------------------------------------------------

// ListUptimeCheckConfigsResponse

// repeated .google.monitoring.v3.UptimeCheckConfig uptime_check_configs = 1;
inline int ListUptimeCheckConfigsResponse::uptime_check_configs_size() const {
  return uptime_check_configs_.size();
}
inline ::google::monitoring::v3::UptimeCheckConfig* ListUptimeCheckConfigsResponse::mutable_uptime_check_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckConfigsResponse.uptime_check_configs)
  return uptime_check_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig >*
ListUptimeCheckConfigsResponse::mutable_uptime_check_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListUptimeCheckConfigsResponse.uptime_check_configs)
  return &uptime_check_configs_;
}
inline const ::google::monitoring::v3::UptimeCheckConfig& ListUptimeCheckConfigsResponse::uptime_check_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsResponse.uptime_check_configs)
  return uptime_check_configs_.Get(index);
}
inline ::google::monitoring::v3::UptimeCheckConfig* ListUptimeCheckConfigsResponse::add_uptime_check_configs() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListUptimeCheckConfigsResponse.uptime_check_configs)
  return uptime_check_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckConfig >&
ListUptimeCheckConfigsResponse::uptime_check_configs() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListUptimeCheckConfigsResponse.uptime_check_configs)
  return uptime_check_configs_;
}

// string next_page_token = 2;
inline void ListUptimeCheckConfigsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListUptimeCheckConfigsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListUptimeCheckConfigsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListUptimeCheckConfigsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
}
#endif
inline void ListUptimeCheckConfigsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
}
inline void ListUptimeCheckConfigsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
}
inline ::std::string* ListUptimeCheckConfigsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListUptimeCheckConfigsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListUptimeCheckConfigsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListUptimeCheckConfigsResponse.next_page_token)
}

// int32 total_size = 3;
inline void ListUptimeCheckConfigsResponse::clear_total_size() {
  total_size_ = 0;
}
inline ::google::protobuf::int32 ListUptimeCheckConfigsResponse::total_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckConfigsResponse.total_size)
  return total_size_;
}
inline void ListUptimeCheckConfigsResponse::set_total_size(::google::protobuf::int32 value) {
  
  total_size_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckConfigsResponse.total_size)
}

// -------------------------------------------------------------------

// GetUptimeCheckConfigRequest

// string name = 1;
inline void GetUptimeCheckConfigRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetUptimeCheckConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
  return name_.GetNoArena();
}
inline void GetUptimeCheckConfigRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
}
#if LANG_CXX11
inline void GetUptimeCheckConfigRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
}
#endif
inline void GetUptimeCheckConfigRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
}
inline void GetUptimeCheckConfigRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
}
inline ::std::string* GetUptimeCheckConfigRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetUptimeCheckConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetUptimeCheckConfigRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetUptimeCheckConfigRequest.name)
}

// -------------------------------------------------------------------

// CreateUptimeCheckConfigRequest

// string parent = 1;
inline void CreateUptimeCheckConfigRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUptimeCheckConfigRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateUptimeCheckConfigRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
}
#if LANG_CXX11
inline void CreateUptimeCheckConfigRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
}
#endif
inline void CreateUptimeCheckConfigRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
}
inline void CreateUptimeCheckConfigRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
}
inline ::std::string* CreateUptimeCheckConfigRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUptimeCheckConfigRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUptimeCheckConfigRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateUptimeCheckConfigRequest.parent)
}

// .google.monitoring.v3.UptimeCheckConfig uptime_check_config = 2;
inline bool CreateUptimeCheckConfigRequest::has_uptime_check_config() const {
  return this != internal_default_instance() && uptime_check_config_ != NULL;
}
inline const ::google::monitoring::v3::UptimeCheckConfig& CreateUptimeCheckConfigRequest::_internal_uptime_check_config() const {
  return *uptime_check_config_;
}
inline const ::google::monitoring::v3::UptimeCheckConfig& CreateUptimeCheckConfigRequest::uptime_check_config() const {
  const ::google::monitoring::v3::UptimeCheckConfig* p = uptime_check_config_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateUptimeCheckConfigRequest.uptime_check_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::UptimeCheckConfig*>(
      &::google::monitoring::v3::_UptimeCheckConfig_default_instance_);
}
inline ::google::monitoring::v3::UptimeCheckConfig* CreateUptimeCheckConfigRequest::release_uptime_check_config() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateUptimeCheckConfigRequest.uptime_check_config)
  
  ::google::monitoring::v3::UptimeCheckConfig* temp = uptime_check_config_;
  uptime_check_config_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::UptimeCheckConfig* CreateUptimeCheckConfigRequest::mutable_uptime_check_config() {
  
  if (uptime_check_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig>(GetArenaNoVirtual());
    uptime_check_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateUptimeCheckConfigRequest.uptime_check_config)
  return uptime_check_config_;
}
inline void CreateUptimeCheckConfigRequest::set_allocated_uptime_check_config(::google::monitoring::v3::UptimeCheckConfig* uptime_check_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(uptime_check_config_);
  }
  if (uptime_check_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uptime_check_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uptime_check_config, submessage_arena);
    }
    
  } else {
    
  }
  uptime_check_config_ = uptime_check_config;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateUptimeCheckConfigRequest.uptime_check_config)
}

// -------------------------------------------------------------------

// UpdateUptimeCheckConfigRequest

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateUptimeCheckConfigRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateUptimeCheckConfigRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateUptimeCheckConfigRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateUptimeCheckConfigRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateUptimeCheckConfigRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateUptimeCheckConfigRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateUptimeCheckConfigRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateUptimeCheckConfigRequest.update_mask)
  return update_mask_;
}
inline void UpdateUptimeCheckConfigRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateUptimeCheckConfigRequest.update_mask)
}

// .google.monitoring.v3.UptimeCheckConfig uptime_check_config = 3;
inline bool UpdateUptimeCheckConfigRequest::has_uptime_check_config() const {
  return this != internal_default_instance() && uptime_check_config_ != NULL;
}
inline const ::google::monitoring::v3::UptimeCheckConfig& UpdateUptimeCheckConfigRequest::_internal_uptime_check_config() const {
  return *uptime_check_config_;
}
inline const ::google::monitoring::v3::UptimeCheckConfig& UpdateUptimeCheckConfigRequest::uptime_check_config() const {
  const ::google::monitoring::v3::UptimeCheckConfig* p = uptime_check_config_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateUptimeCheckConfigRequest.uptime_check_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::UptimeCheckConfig*>(
      &::google::monitoring::v3::_UptimeCheckConfig_default_instance_);
}
inline ::google::monitoring::v3::UptimeCheckConfig* UpdateUptimeCheckConfigRequest::release_uptime_check_config() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateUptimeCheckConfigRequest.uptime_check_config)
  
  ::google::monitoring::v3::UptimeCheckConfig* temp = uptime_check_config_;
  uptime_check_config_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::UptimeCheckConfig* UpdateUptimeCheckConfigRequest::mutable_uptime_check_config() {
  
  if (uptime_check_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::UptimeCheckConfig>(GetArenaNoVirtual());
    uptime_check_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateUptimeCheckConfigRequest.uptime_check_config)
  return uptime_check_config_;
}
inline void UpdateUptimeCheckConfigRequest::set_allocated_uptime_check_config(::google::monitoring::v3::UptimeCheckConfig* uptime_check_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(uptime_check_config_);
  }
  if (uptime_check_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uptime_check_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uptime_check_config, submessage_arena);
    }
    
  } else {
    
  }
  uptime_check_config_ = uptime_check_config;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateUptimeCheckConfigRequest.uptime_check_config)
}

// -------------------------------------------------------------------

// DeleteUptimeCheckConfigRequest

// string name = 1;
inline void DeleteUptimeCheckConfigRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteUptimeCheckConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
  return name_.GetNoArena();
}
inline void DeleteUptimeCheckConfigRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
}
#if LANG_CXX11
inline void DeleteUptimeCheckConfigRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
}
#endif
inline void DeleteUptimeCheckConfigRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
}
inline void DeleteUptimeCheckConfigRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
}
inline ::std::string* DeleteUptimeCheckConfigRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteUptimeCheckConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteUptimeCheckConfigRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.DeleteUptimeCheckConfigRequest.name)
}

// -------------------------------------------------------------------

// ListUptimeCheckIpsRequest

// int32 page_size = 2;
inline void ListUptimeCheckIpsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListUptimeCheckIpsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckIpsRequest.page_size)
  return page_size_;
}
inline void ListUptimeCheckIpsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckIpsRequest.page_size)
}

// string page_token = 3;
inline void ListUptimeCheckIpsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListUptimeCheckIpsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListUptimeCheckIpsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
}
#if LANG_CXX11
inline void ListUptimeCheckIpsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
}
#endif
inline void ListUptimeCheckIpsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
}
inline void ListUptimeCheckIpsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
}
inline ::std::string* ListUptimeCheckIpsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListUptimeCheckIpsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListUptimeCheckIpsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListUptimeCheckIpsRequest.page_token)
}

// -------------------------------------------------------------------

// ListUptimeCheckIpsResponse

// repeated .google.monitoring.v3.UptimeCheckIp uptime_check_ips = 1;
inline int ListUptimeCheckIpsResponse::uptime_check_ips_size() const {
  return uptime_check_ips_.size();
}
inline ::google::monitoring::v3::UptimeCheckIp* ListUptimeCheckIpsResponse::mutable_uptime_check_ips(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckIpsResponse.uptime_check_ips)
  return uptime_check_ips_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckIp >*
ListUptimeCheckIpsResponse::mutable_uptime_check_ips() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListUptimeCheckIpsResponse.uptime_check_ips)
  return &uptime_check_ips_;
}
inline const ::google::monitoring::v3::UptimeCheckIp& ListUptimeCheckIpsResponse::uptime_check_ips(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckIpsResponse.uptime_check_ips)
  return uptime_check_ips_.Get(index);
}
inline ::google::monitoring::v3::UptimeCheckIp* ListUptimeCheckIpsResponse::add_uptime_check_ips() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListUptimeCheckIpsResponse.uptime_check_ips)
  return uptime_check_ips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::UptimeCheckIp >&
ListUptimeCheckIpsResponse::uptime_check_ips() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListUptimeCheckIpsResponse.uptime_check_ips)
  return uptime_check_ips_;
}

// string next_page_token = 2;
inline void ListUptimeCheckIpsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListUptimeCheckIpsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListUptimeCheckIpsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListUptimeCheckIpsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
}
#endif
inline void ListUptimeCheckIpsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
}
inline void ListUptimeCheckIpsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
}
inline ::std::string* ListUptimeCheckIpsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListUptimeCheckIpsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListUptimeCheckIpsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListUptimeCheckIpsResponse.next_page_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fuptime_5fservice_2eproto
