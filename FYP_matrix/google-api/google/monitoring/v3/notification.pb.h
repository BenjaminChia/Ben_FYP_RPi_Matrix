// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/notification.proto

#ifndef PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_2eproto
#define PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/label.pb.h"
#include "google/monitoring/v3/common.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fnotification_2eproto 

namespace protobuf_google_2fmonitoring_2fv3_2fnotification_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fmonitoring_2fv3_2fnotification_2eproto
namespace google {
namespace monitoring {
namespace v3 {
class NotificationChannel;
class NotificationChannelDefaultTypeInternal;
extern NotificationChannelDefaultTypeInternal _NotificationChannel_default_instance_;
class NotificationChannelDescriptor;
class NotificationChannelDescriptorDefaultTypeInternal;
extern NotificationChannelDescriptorDefaultTypeInternal _NotificationChannelDescriptor_default_instance_;
class NotificationChannel_LabelsEntry_DoNotUse;
class NotificationChannel_LabelsEntry_DoNotUseDefaultTypeInternal;
extern NotificationChannel_LabelsEntry_DoNotUseDefaultTypeInternal _NotificationChannel_LabelsEntry_DoNotUse_default_instance_;
class NotificationChannel_UserLabelsEntry_DoNotUse;
class NotificationChannel_UserLabelsEntry_DoNotUseDefaultTypeInternal;
extern NotificationChannel_UserLabelsEntry_DoNotUseDefaultTypeInternal _NotificationChannel_UserLabelsEntry_DoNotUse_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::monitoring::v3::NotificationChannel* Arena::CreateMaybeMessage<::google::monitoring::v3::NotificationChannel>(Arena*);
template<> ::google::monitoring::v3::NotificationChannelDescriptor* Arena::CreateMaybeMessage<::google::monitoring::v3::NotificationChannelDescriptor>(Arena*);
template<> ::google::monitoring::v3::NotificationChannel_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::monitoring::v3::NotificationChannel_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::monitoring::v3::NotificationChannel_UserLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::monitoring::v3::NotificationChannel_UserLabelsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace monitoring {
namespace v3 {

enum NotificationChannel_VerificationStatus {
  NotificationChannel_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED = 0,
  NotificationChannel_VerificationStatus_UNVERIFIED = 1,
  NotificationChannel_VerificationStatus_VERIFIED = 2,
  NotificationChannel_VerificationStatus_NotificationChannel_VerificationStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NotificationChannel_VerificationStatus_NotificationChannel_VerificationStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NotificationChannel_VerificationStatus_IsValid(int value);
const NotificationChannel_VerificationStatus NotificationChannel_VerificationStatus_VerificationStatus_MIN = NotificationChannel_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED;
const NotificationChannel_VerificationStatus NotificationChannel_VerificationStatus_VerificationStatus_MAX = NotificationChannel_VerificationStatus_VERIFIED;
const int NotificationChannel_VerificationStatus_VerificationStatus_ARRAYSIZE = NotificationChannel_VerificationStatus_VerificationStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotificationChannel_VerificationStatus_descriptor();
inline const ::std::string& NotificationChannel_VerificationStatus_Name(NotificationChannel_VerificationStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotificationChannel_VerificationStatus_descriptor(), value);
}
inline bool NotificationChannel_VerificationStatus_Parse(
    const ::std::string& name, NotificationChannel_VerificationStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotificationChannel_VerificationStatus>(
    NotificationChannel_VerificationStatus_descriptor(), name, value);
}
// ===================================================================

class NotificationChannelDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.NotificationChannelDescriptor) */ {
 public:
  NotificationChannelDescriptor();
  virtual ~NotificationChannelDescriptor();

  NotificationChannelDescriptor(const NotificationChannelDescriptor& from);

  inline NotificationChannelDescriptor& operator=(const NotificationChannelDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotificationChannelDescriptor(NotificationChannelDescriptor&& from) noexcept
    : NotificationChannelDescriptor() {
    *this = ::std::move(from);
  }

  inline NotificationChannelDescriptor& operator=(NotificationChannelDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotificationChannelDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationChannelDescriptor* internal_default_instance() {
    return reinterpret_cast<const NotificationChannelDescriptor*>(
               &_NotificationChannelDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NotificationChannelDescriptor* other);
  friend void swap(NotificationChannelDescriptor& a, NotificationChannelDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotificationChannelDescriptor* New() const final {
    return CreateMaybeMessage<NotificationChannelDescriptor>(NULL);
  }

  NotificationChannelDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotificationChannelDescriptor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotificationChannelDescriptor& from);
  void MergeFrom(const NotificationChannelDescriptor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationChannelDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.LabelDescriptor labels = 4;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 4;
  ::google::api::LabelDescriptor* mutable_labels(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::LabelDescriptor >*
      mutable_labels();
  const ::google::api::LabelDescriptor& labels(int index) const;
  ::google::api::LabelDescriptor* add_labels();
  const ::google::protobuf::RepeatedPtrField< ::google::api::LabelDescriptor >&
      labels() const;

  // repeated .google.monitoring.v3.ServiceTier supported_tiers = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int supported_tiers_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_supported_tiers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kSupportedTiersFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::monitoring::v3::ServiceTier supported_tiers(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_supported_tiers(int index, ::google::monitoring::v3::ServiceTier value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_supported_tiers(::google::monitoring::v3::ServiceTier value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedField<int>& supported_tiers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedField<int>* mutable_supported_tiers();

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.NotificationChannelDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::api::LabelDescriptor > labels_;
  ::google::protobuf::RepeatedField<int> supported_tiers_;
  mutable int _supported_tiers_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotificationChannel_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NotificationChannel_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<NotificationChannel_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NotificationChannel_LabelsEntry_DoNotUse();
  NotificationChannel_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NotificationChannel_LabelsEntry_DoNotUse& other);
  static const NotificationChannel_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NotificationChannel_LabelsEntry_DoNotUse*>(&_NotificationChannel_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NotificationChannel_UserLabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NotificationChannel_UserLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<NotificationChannel_UserLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NotificationChannel_UserLabelsEntry_DoNotUse();
  NotificationChannel_UserLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NotificationChannel_UserLabelsEntry_DoNotUse& other);
  static const NotificationChannel_UserLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NotificationChannel_UserLabelsEntry_DoNotUse*>(&_NotificationChannel_UserLabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NotificationChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.NotificationChannel) */ {
 public:
  NotificationChannel();
  virtual ~NotificationChannel();

  NotificationChannel(const NotificationChannel& from);

  inline NotificationChannel& operator=(const NotificationChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotificationChannel(NotificationChannel&& from) noexcept
    : NotificationChannel() {
    *this = ::std::move(from);
  }

  inline NotificationChannel& operator=(NotificationChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotificationChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationChannel* internal_default_instance() {
    return reinterpret_cast<const NotificationChannel*>(
               &_NotificationChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NotificationChannel* other);
  friend void swap(NotificationChannel& a, NotificationChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotificationChannel* New() const final {
    return CreateMaybeMessage<NotificationChannel>(NULL);
  }

  NotificationChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotificationChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotificationChannel& from);
  void MergeFrom(const NotificationChannel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef NotificationChannel_VerificationStatus VerificationStatus;
  static const VerificationStatus VERIFICATION_STATUS_UNSPECIFIED =
    NotificationChannel_VerificationStatus_VERIFICATION_STATUS_UNSPECIFIED;
  static const VerificationStatus UNVERIFIED =
    NotificationChannel_VerificationStatus_UNVERIFIED;
  static const VerificationStatus VERIFIED =
    NotificationChannel_VerificationStatus_VERIFIED;
  static inline bool VerificationStatus_IsValid(int value) {
    return NotificationChannel_VerificationStatus_IsValid(value);
  }
  static const VerificationStatus VerificationStatus_MIN =
    NotificationChannel_VerificationStatus_VerificationStatus_MIN;
  static const VerificationStatus VerificationStatus_MAX =
    NotificationChannel_VerificationStatus_VerificationStatus_MAX;
  static const int VerificationStatus_ARRAYSIZE =
    NotificationChannel_VerificationStatus_VerificationStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VerificationStatus_descriptor() {
    return NotificationChannel_VerificationStatus_descriptor();
  }
  static inline const ::std::string& VerificationStatus_Name(VerificationStatus value) {
    return NotificationChannel_VerificationStatus_Name(value);
  }
  static inline bool VerificationStatus_Parse(const ::std::string& name,
      VerificationStatus* value) {
    return NotificationChannel_VerificationStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, string> labels = 5;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // map<string, string> user_labels = 8;
  int user_labels_size() const;
  void clear_user_labels();
  static const int kUserLabelsFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      user_labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_user_labels();

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string display_name = 3;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.BoolValue enabled = 11;
  bool has_enabled() const;
  void clear_enabled();
  static const int kEnabledFieldNumber = 11;
  private:
  const ::google::protobuf::BoolValue& _internal_enabled() const;
  public:
  const ::google::protobuf::BoolValue& enabled() const;
  ::google::protobuf::BoolValue* release_enabled();
  ::google::protobuf::BoolValue* mutable_enabled();
  void set_allocated_enabled(::google::protobuf::BoolValue* enabled);

  // .google.monitoring.v3.NotificationChannel.VerificationStatus verification_status = 9;
  void clear_verification_status();
  static const int kVerificationStatusFieldNumber = 9;
  ::google::monitoring::v3::NotificationChannel_VerificationStatus verification_status() const;
  void set_verification_status(::google::monitoring::v3::NotificationChannel_VerificationStatus value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.NotificationChannel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      NotificationChannel_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::MapField<
      NotificationChannel_UserLabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > user_labels_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::BoolValue* enabled_;
  int verification_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fnotification_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotificationChannelDescriptor

// string name = 6;
inline void NotificationChannelDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotificationChannelDescriptor::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.name)
  return name_.GetNoArena();
}
inline void NotificationChannelDescriptor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannelDescriptor.name)
}
#if LANG_CXX11
inline void NotificationChannelDescriptor::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.NotificationChannelDescriptor.name)
}
#endif
inline void NotificationChannelDescriptor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.NotificationChannelDescriptor.name)
}
inline void NotificationChannelDescriptor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.NotificationChannelDescriptor.name)
}
inline ::std::string* NotificationChannelDescriptor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannelDescriptor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotificationChannelDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannelDescriptor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannelDescriptor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannelDescriptor.name)
}

// string type = 1;
inline void NotificationChannelDescriptor::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotificationChannelDescriptor::type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.type)
  return type_.GetNoArena();
}
inline void NotificationChannelDescriptor::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannelDescriptor.type)
}
#if LANG_CXX11
inline void NotificationChannelDescriptor::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.NotificationChannelDescriptor.type)
}
#endif
inline void NotificationChannelDescriptor::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.NotificationChannelDescriptor.type)
}
inline void NotificationChannelDescriptor::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.NotificationChannelDescriptor.type)
}
inline ::std::string* NotificationChannelDescriptor::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannelDescriptor.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotificationChannelDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannelDescriptor.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannelDescriptor::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannelDescriptor.type)
}

// string display_name = 2;
inline void NotificationChannelDescriptor::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotificationChannelDescriptor::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.display_name)
  return display_name_.GetNoArena();
}
inline void NotificationChannelDescriptor::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannelDescriptor.display_name)
}
#if LANG_CXX11
inline void NotificationChannelDescriptor::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.NotificationChannelDescriptor.display_name)
}
#endif
inline void NotificationChannelDescriptor::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.NotificationChannelDescriptor.display_name)
}
inline void NotificationChannelDescriptor::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.NotificationChannelDescriptor.display_name)
}
inline ::std::string* NotificationChannelDescriptor::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannelDescriptor.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotificationChannelDescriptor::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannelDescriptor.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannelDescriptor::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannelDescriptor.display_name)
}

// string description = 3;
inline void NotificationChannelDescriptor::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotificationChannelDescriptor::description() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.description)
  return description_.GetNoArena();
}
inline void NotificationChannelDescriptor::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannelDescriptor.description)
}
#if LANG_CXX11
inline void NotificationChannelDescriptor::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.NotificationChannelDescriptor.description)
}
#endif
inline void NotificationChannelDescriptor::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.NotificationChannelDescriptor.description)
}
inline void NotificationChannelDescriptor::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.NotificationChannelDescriptor.description)
}
inline ::std::string* NotificationChannelDescriptor::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannelDescriptor.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotificationChannelDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannelDescriptor.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannelDescriptor::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannelDescriptor.description)
}

// repeated .google.api.LabelDescriptor labels = 4;
inline int NotificationChannelDescriptor::labels_size() const {
  return labels_.size();
}
inline ::google::api::LabelDescriptor* NotificationChannelDescriptor::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannelDescriptor.labels)
  return labels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::LabelDescriptor >*
NotificationChannelDescriptor::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.NotificationChannelDescriptor.labels)
  return &labels_;
}
inline const ::google::api::LabelDescriptor& NotificationChannelDescriptor::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.labels)
  return labels_.Get(index);
}
inline ::google::api::LabelDescriptor* NotificationChannelDescriptor::add_labels() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.NotificationChannelDescriptor.labels)
  return labels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::LabelDescriptor >&
NotificationChannelDescriptor::labels() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.NotificationChannelDescriptor.labels)
  return labels_;
}

// repeated .google.monitoring.v3.ServiceTier supported_tiers = 5 [deprecated = true];
inline int NotificationChannelDescriptor::supported_tiers_size() const {
  return supported_tiers_.size();
}
inline void NotificationChannelDescriptor::clear_supported_tiers() {
  supported_tiers_.Clear();
}
inline ::google::monitoring::v3::ServiceTier NotificationChannelDescriptor::supported_tiers(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannelDescriptor.supported_tiers)
  return static_cast< ::google::monitoring::v3::ServiceTier >(supported_tiers_.Get(index));
}
inline void NotificationChannelDescriptor::set_supported_tiers(int index, ::google::monitoring::v3::ServiceTier value) {
  supported_tiers_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannelDescriptor.supported_tiers)
}
inline void NotificationChannelDescriptor::add_supported_tiers(::google::monitoring::v3::ServiceTier value) {
  supported_tiers_.Add(value);
  // @@protoc_insertion_point(field_add:google.monitoring.v3.NotificationChannelDescriptor.supported_tiers)
}
inline const ::google::protobuf::RepeatedField<int>&
NotificationChannelDescriptor::supported_tiers() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.NotificationChannelDescriptor.supported_tiers)
  return supported_tiers_;
}
inline ::google::protobuf::RepeatedField<int>*
NotificationChannelDescriptor::mutable_supported_tiers() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.NotificationChannelDescriptor.supported_tiers)
  return &supported_tiers_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NotificationChannel

// string type = 1;
inline void NotificationChannel::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotificationChannel::type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.type)
  return type_.GetNoArena();
}
inline void NotificationChannel::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannel.type)
}
#if LANG_CXX11
inline void NotificationChannel::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.NotificationChannel.type)
}
#endif
inline void NotificationChannel::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.NotificationChannel.type)
}
inline void NotificationChannel::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.NotificationChannel.type)
}
inline ::std::string* NotificationChannel::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotificationChannel::release_type() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannel.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannel::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannel.type)
}

// string name = 6;
inline void NotificationChannel::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotificationChannel::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.name)
  return name_.GetNoArena();
}
inline void NotificationChannel::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannel.name)
}
#if LANG_CXX11
inline void NotificationChannel::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.NotificationChannel.name)
}
#endif
inline void NotificationChannel::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.NotificationChannel.name)
}
inline void NotificationChannel::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.NotificationChannel.name)
}
inline ::std::string* NotificationChannel::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotificationChannel::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannel.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannel.name)
}

// string display_name = 3;
inline void NotificationChannel::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotificationChannel::display_name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.display_name)
  return display_name_.GetNoArena();
}
inline void NotificationChannel::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannel.display_name)
}
#if LANG_CXX11
inline void NotificationChannel::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.NotificationChannel.display_name)
}
#endif
inline void NotificationChannel::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.NotificationChannel.display_name)
}
inline void NotificationChannel::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.NotificationChannel.display_name)
}
inline ::std::string* NotificationChannel::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotificationChannel::release_display_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannel.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannel::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannel.display_name)
}

// string description = 4;
inline void NotificationChannel::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotificationChannel::description() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.description)
  return description_.GetNoArena();
}
inline void NotificationChannel::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannel.description)
}
#if LANG_CXX11
inline void NotificationChannel::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.NotificationChannel.description)
}
#endif
inline void NotificationChannel::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.NotificationChannel.description)
}
inline void NotificationChannel::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.NotificationChannel.description)
}
inline ::std::string* NotificationChannel::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotificationChannel::release_description() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannel.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationChannel::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannel.description)
}

// map<string, string> labels = 5;
inline int NotificationChannel::labels_size() const {
  return labels_.size();
}
inline void NotificationChannel::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
NotificationChannel::labels() const {
  // @@protoc_insertion_point(field_map:google.monitoring.v3.NotificationChannel.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
NotificationChannel::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.monitoring.v3.NotificationChannel.labels)
  return labels_.MutableMap();
}

// map<string, string> user_labels = 8;
inline int NotificationChannel::user_labels_size() const {
  return user_labels_.size();
}
inline void NotificationChannel::clear_user_labels() {
  user_labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
NotificationChannel::user_labels() const {
  // @@protoc_insertion_point(field_map:google.monitoring.v3.NotificationChannel.user_labels)
  return user_labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
NotificationChannel::mutable_user_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.monitoring.v3.NotificationChannel.user_labels)
  return user_labels_.MutableMap();
}

// .google.monitoring.v3.NotificationChannel.VerificationStatus verification_status = 9;
inline void NotificationChannel::clear_verification_status() {
  verification_status_ = 0;
}
inline ::google::monitoring::v3::NotificationChannel_VerificationStatus NotificationChannel::verification_status() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.verification_status)
  return static_cast< ::google::monitoring::v3::NotificationChannel_VerificationStatus >(verification_status_);
}
inline void NotificationChannel::set_verification_status(::google::monitoring::v3::NotificationChannel_VerificationStatus value) {
  
  verification_status_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.NotificationChannel.verification_status)
}

// .google.protobuf.BoolValue enabled = 11;
inline bool NotificationChannel::has_enabled() const {
  return this != internal_default_instance() && enabled_ != NULL;
}
inline const ::google::protobuf::BoolValue& NotificationChannel::_internal_enabled() const {
  return *enabled_;
}
inline const ::google::protobuf::BoolValue& NotificationChannel::enabled() const {
  const ::google::protobuf::BoolValue* p = enabled_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.NotificationChannel.enabled)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* NotificationChannel::release_enabled() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.NotificationChannel.enabled)
  
  ::google::protobuf::BoolValue* temp = enabled_;
  enabled_ = NULL;
  return temp;
}
inline ::google::protobuf::BoolValue* NotificationChannel::mutable_enabled() {
  
  if (enabled_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.NotificationChannel.enabled)
  return enabled_;
}
inline void NotificationChannel::set_allocated_enabled(::google::protobuf::BoolValue* enabled) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(enabled)->GetArena();
    if (message_arena != submessage_arena) {
      enabled = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    
  } else {
    
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.NotificationChannel.enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::monitoring::v3::NotificationChannel_VerificationStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::v3::NotificationChannel_VerificationStatus>() {
  return ::google::monitoring::v3::NotificationChannel_VerificationStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fnotification_2eproto
