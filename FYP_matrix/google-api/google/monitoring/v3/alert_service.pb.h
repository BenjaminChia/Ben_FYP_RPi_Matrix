// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/alert_service.proto

#ifndef PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_5fservice_2eproto
#define PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/monitoring/v3/alert.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2falert_5fservice_2eproto 

namespace protobuf_google_2fmonitoring_2fv3_2falert_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fmonitoring_2fv3_2falert_5fservice_2eproto
namespace google {
namespace monitoring {
namespace v3 {
class CreateAlertPolicyRequest;
class CreateAlertPolicyRequestDefaultTypeInternal;
extern CreateAlertPolicyRequestDefaultTypeInternal _CreateAlertPolicyRequest_default_instance_;
class DeleteAlertPolicyRequest;
class DeleteAlertPolicyRequestDefaultTypeInternal;
extern DeleteAlertPolicyRequestDefaultTypeInternal _DeleteAlertPolicyRequest_default_instance_;
class GetAlertPolicyRequest;
class GetAlertPolicyRequestDefaultTypeInternal;
extern GetAlertPolicyRequestDefaultTypeInternal _GetAlertPolicyRequest_default_instance_;
class ListAlertPoliciesRequest;
class ListAlertPoliciesRequestDefaultTypeInternal;
extern ListAlertPoliciesRequestDefaultTypeInternal _ListAlertPoliciesRequest_default_instance_;
class ListAlertPoliciesResponse;
class ListAlertPoliciesResponseDefaultTypeInternal;
extern ListAlertPoliciesResponseDefaultTypeInternal _ListAlertPoliciesResponse_default_instance_;
class UpdateAlertPolicyRequest;
class UpdateAlertPolicyRequestDefaultTypeInternal;
extern UpdateAlertPolicyRequestDefaultTypeInternal _UpdateAlertPolicyRequest_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::monitoring::v3::CreateAlertPolicyRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::CreateAlertPolicyRequest>(Arena*);
template<> ::google::monitoring::v3::DeleteAlertPolicyRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::DeleteAlertPolicyRequest>(Arena*);
template<> ::google::monitoring::v3::GetAlertPolicyRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::GetAlertPolicyRequest>(Arena*);
template<> ::google::monitoring::v3::ListAlertPoliciesRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::ListAlertPoliciesRequest>(Arena*);
template<> ::google::monitoring::v3::ListAlertPoliciesResponse* Arena::CreateMaybeMessage<::google::monitoring::v3::ListAlertPoliciesResponse>(Arena*);
template<> ::google::monitoring::v3::UpdateAlertPolicyRequest* Arena::CreateMaybeMessage<::google::monitoring::v3::UpdateAlertPolicyRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class CreateAlertPolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.CreateAlertPolicyRequest) */ {
 public:
  CreateAlertPolicyRequest();
  virtual ~CreateAlertPolicyRequest();

  CreateAlertPolicyRequest(const CreateAlertPolicyRequest& from);

  inline CreateAlertPolicyRequest& operator=(const CreateAlertPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateAlertPolicyRequest(CreateAlertPolicyRequest&& from) noexcept
    : CreateAlertPolicyRequest() {
    *this = ::std::move(from);
  }

  inline CreateAlertPolicyRequest& operator=(CreateAlertPolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAlertPolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAlertPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAlertPolicyRequest*>(
               &_CreateAlertPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreateAlertPolicyRequest* other);
  friend void swap(CreateAlertPolicyRequest& a, CreateAlertPolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAlertPolicyRequest* New() const final {
    return CreateMaybeMessage<CreateAlertPolicyRequest>(NULL);
  }

  CreateAlertPolicyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateAlertPolicyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateAlertPolicyRequest& from);
  void MergeFrom(const CreateAlertPolicyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAlertPolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.monitoring.v3.AlertPolicy alert_policy = 2;
  bool has_alert_policy() const;
  void clear_alert_policy();
  static const int kAlertPolicyFieldNumber = 2;
  private:
  const ::google::monitoring::v3::AlertPolicy& _internal_alert_policy() const;
  public:
  const ::google::monitoring::v3::AlertPolicy& alert_policy() const;
  ::google::monitoring::v3::AlertPolicy* release_alert_policy();
  ::google::monitoring::v3::AlertPolicy* mutable_alert_policy();
  void set_allocated_alert_policy(::google::monitoring::v3::AlertPolicy* alert_policy);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.CreateAlertPolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::monitoring::v3::AlertPolicy* alert_policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAlertPolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.GetAlertPolicyRequest) */ {
 public:
  GetAlertPolicyRequest();
  virtual ~GetAlertPolicyRequest();

  GetAlertPolicyRequest(const GetAlertPolicyRequest& from);

  inline GetAlertPolicyRequest& operator=(const GetAlertPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAlertPolicyRequest(GetAlertPolicyRequest&& from) noexcept
    : GetAlertPolicyRequest() {
    *this = ::std::move(from);
  }

  inline GetAlertPolicyRequest& operator=(GetAlertPolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAlertPolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAlertPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const GetAlertPolicyRequest*>(
               &_GetAlertPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetAlertPolicyRequest* other);
  friend void swap(GetAlertPolicyRequest& a, GetAlertPolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAlertPolicyRequest* New() const final {
    return CreateMaybeMessage<GetAlertPolicyRequest>(NULL);
  }

  GetAlertPolicyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAlertPolicyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAlertPolicyRequest& from);
  void MergeFrom(const GetAlertPolicyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAlertPolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.GetAlertPolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListAlertPoliciesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListAlertPoliciesRequest) */ {
 public:
  ListAlertPoliciesRequest();
  virtual ~ListAlertPoliciesRequest();

  ListAlertPoliciesRequest(const ListAlertPoliciesRequest& from);

  inline ListAlertPoliciesRequest& operator=(const ListAlertPoliciesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListAlertPoliciesRequest(ListAlertPoliciesRequest&& from) noexcept
    : ListAlertPoliciesRequest() {
    *this = ::std::move(from);
  }

  inline ListAlertPoliciesRequest& operator=(ListAlertPoliciesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListAlertPoliciesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAlertPoliciesRequest* internal_default_instance() {
    return reinterpret_cast<const ListAlertPoliciesRequest*>(
               &_ListAlertPoliciesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ListAlertPoliciesRequest* other);
  friend void swap(ListAlertPoliciesRequest& a, ListAlertPoliciesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListAlertPoliciesRequest* New() const final {
    return CreateMaybeMessage<ListAlertPoliciesRequest>(NULL);
  }

  ListAlertPoliciesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListAlertPoliciesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListAlertPoliciesRequest& from);
  void MergeFrom(const ListAlertPoliciesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAlertPoliciesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string filter = 5;
  void clear_filter();
  static const int kFilterFieldNumber = 5;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string order_by = 6;
  void clear_order_by();
  static const int kOrderByFieldNumber = 6;
  const ::std::string& order_by() const;
  void set_order_by(const ::std::string& value);
  #if LANG_CXX11
  void set_order_by(::std::string&& value);
  #endif
  void set_order_by(const char* value);
  void set_order_by(const char* value, size_t size);
  ::std::string* mutable_order_by();
  ::std::string* release_order_by();
  void set_allocated_order_by(::std::string* order_by);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListAlertPoliciesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr order_by_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListAlertPoliciesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.ListAlertPoliciesResponse) */ {
 public:
  ListAlertPoliciesResponse();
  virtual ~ListAlertPoliciesResponse();

  ListAlertPoliciesResponse(const ListAlertPoliciesResponse& from);

  inline ListAlertPoliciesResponse& operator=(const ListAlertPoliciesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListAlertPoliciesResponse(ListAlertPoliciesResponse&& from) noexcept
    : ListAlertPoliciesResponse() {
    *this = ::std::move(from);
  }

  inline ListAlertPoliciesResponse& operator=(ListAlertPoliciesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListAlertPoliciesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAlertPoliciesResponse* internal_default_instance() {
    return reinterpret_cast<const ListAlertPoliciesResponse*>(
               &_ListAlertPoliciesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ListAlertPoliciesResponse* other);
  friend void swap(ListAlertPoliciesResponse& a, ListAlertPoliciesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListAlertPoliciesResponse* New() const final {
    return CreateMaybeMessage<ListAlertPoliciesResponse>(NULL);
  }

  ListAlertPoliciesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListAlertPoliciesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListAlertPoliciesResponse& from);
  void MergeFrom(const ListAlertPoliciesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAlertPoliciesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.monitoring.v3.AlertPolicy alert_policies = 3;
  int alert_policies_size() const;
  void clear_alert_policies();
  static const int kAlertPoliciesFieldNumber = 3;
  ::google::monitoring::v3::AlertPolicy* mutable_alert_policies(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy >*
      mutable_alert_policies();
  const ::google::monitoring::v3::AlertPolicy& alert_policies(int index) const;
  ::google::monitoring::v3::AlertPolicy* add_alert_policies();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy >&
      alert_policies() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.ListAlertPoliciesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy > alert_policies_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateAlertPolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.UpdateAlertPolicyRequest) */ {
 public:
  UpdateAlertPolicyRequest();
  virtual ~UpdateAlertPolicyRequest();

  UpdateAlertPolicyRequest(const UpdateAlertPolicyRequest& from);

  inline UpdateAlertPolicyRequest& operator=(const UpdateAlertPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateAlertPolicyRequest(UpdateAlertPolicyRequest&& from) noexcept
    : UpdateAlertPolicyRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAlertPolicyRequest& operator=(UpdateAlertPolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAlertPolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAlertPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAlertPolicyRequest*>(
               &_UpdateAlertPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UpdateAlertPolicyRequest* other);
  friend void swap(UpdateAlertPolicyRequest& a, UpdateAlertPolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateAlertPolicyRequest* New() const final {
    return CreateMaybeMessage<UpdateAlertPolicyRequest>(NULL);
  }

  UpdateAlertPolicyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAlertPolicyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateAlertPolicyRequest& from);
  void MergeFrom(const UpdateAlertPolicyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAlertPolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // .google.monitoring.v3.AlertPolicy alert_policy = 3;
  bool has_alert_policy() const;
  void clear_alert_policy();
  static const int kAlertPolicyFieldNumber = 3;
  private:
  const ::google::monitoring::v3::AlertPolicy& _internal_alert_policy() const;
  public:
  const ::google::monitoring::v3::AlertPolicy& alert_policy() const;
  ::google::monitoring::v3::AlertPolicy* release_alert_policy();
  ::google::monitoring::v3::AlertPolicy* mutable_alert_policy();
  void set_allocated_alert_policy(::google::monitoring::v3::AlertPolicy* alert_policy);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.UpdateAlertPolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::FieldMask* update_mask_;
  ::google::monitoring::v3::AlertPolicy* alert_policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteAlertPolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.DeleteAlertPolicyRequest) */ {
 public:
  DeleteAlertPolicyRequest();
  virtual ~DeleteAlertPolicyRequest();

  DeleteAlertPolicyRequest(const DeleteAlertPolicyRequest& from);

  inline DeleteAlertPolicyRequest& operator=(const DeleteAlertPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteAlertPolicyRequest(DeleteAlertPolicyRequest&& from) noexcept
    : DeleteAlertPolicyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAlertPolicyRequest& operator=(DeleteAlertPolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteAlertPolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAlertPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAlertPolicyRequest*>(
               &_DeleteAlertPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeleteAlertPolicyRequest* other);
  friend void swap(DeleteAlertPolicyRequest& a, DeleteAlertPolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteAlertPolicyRequest* New() const final {
    return CreateMaybeMessage<DeleteAlertPolicyRequest>(NULL);
  }

  DeleteAlertPolicyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAlertPolicyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteAlertPolicyRequest& from);
  void MergeFrom(const DeleteAlertPolicyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAlertPolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.DeleteAlertPolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2falert_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAlertPolicyRequest

// string name = 3;
inline void CreateAlertPolicyRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateAlertPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateAlertPolicyRequest.name)
  return name_.GetNoArena();
}
inline void CreateAlertPolicyRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.CreateAlertPolicyRequest.name)
}
#if LANG_CXX11
inline void CreateAlertPolicyRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.CreateAlertPolicyRequest.name)
}
#endif
inline void CreateAlertPolicyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.CreateAlertPolicyRequest.name)
}
inline void CreateAlertPolicyRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.CreateAlertPolicyRequest.name)
}
inline ::std::string* CreateAlertPolicyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateAlertPolicyRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateAlertPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateAlertPolicyRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAlertPolicyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateAlertPolicyRequest.name)
}

// .google.monitoring.v3.AlertPolicy alert_policy = 2;
inline bool CreateAlertPolicyRequest::has_alert_policy() const {
  return this != internal_default_instance() && alert_policy_ != NULL;
}
inline const ::google::monitoring::v3::AlertPolicy& CreateAlertPolicyRequest::_internal_alert_policy() const {
  return *alert_policy_;
}
inline const ::google::monitoring::v3::AlertPolicy& CreateAlertPolicyRequest::alert_policy() const {
  const ::google::monitoring::v3::AlertPolicy* p = alert_policy_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.CreateAlertPolicyRequest.alert_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::AlertPolicy*>(
      &::google::monitoring::v3::_AlertPolicy_default_instance_);
}
inline ::google::monitoring::v3::AlertPolicy* CreateAlertPolicyRequest::release_alert_policy() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.CreateAlertPolicyRequest.alert_policy)
  
  ::google::monitoring::v3::AlertPolicy* temp = alert_policy_;
  alert_policy_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy* CreateAlertPolicyRequest::mutable_alert_policy() {
  
  if (alert_policy_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy>(GetArenaNoVirtual());
    alert_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.CreateAlertPolicyRequest.alert_policy)
  return alert_policy_;
}
inline void CreateAlertPolicyRequest::set_allocated_alert_policy(::google::monitoring::v3::AlertPolicy* alert_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(alert_policy_);
  }
  if (alert_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      alert_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alert_policy, submessage_arena);
    }
    
  } else {
    
  }
  alert_policy_ = alert_policy;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.CreateAlertPolicyRequest.alert_policy)
}

// -------------------------------------------------------------------

// GetAlertPolicyRequest

// string name = 3;
inline void GetAlertPolicyRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAlertPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.GetAlertPolicyRequest.name)
  return name_.GetNoArena();
}
inline void GetAlertPolicyRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.GetAlertPolicyRequest.name)
}
#if LANG_CXX11
inline void GetAlertPolicyRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.GetAlertPolicyRequest.name)
}
#endif
inline void GetAlertPolicyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.GetAlertPolicyRequest.name)
}
inline void GetAlertPolicyRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.GetAlertPolicyRequest.name)
}
inline ::std::string* GetAlertPolicyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.GetAlertPolicyRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAlertPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.GetAlertPolicyRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAlertPolicyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.GetAlertPolicyRequest.name)
}

// -------------------------------------------------------------------

// ListAlertPoliciesRequest

// string name = 4;
inline void ListAlertPoliciesRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListAlertPoliciesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesRequest.name)
  return name_.GetNoArena();
}
inline void ListAlertPoliciesRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesRequest.name)
}
#if LANG_CXX11
inline void ListAlertPoliciesRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListAlertPoliciesRequest.name)
}
#endif
inline void ListAlertPoliciesRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListAlertPoliciesRequest.name)
}
inline void ListAlertPoliciesRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListAlertPoliciesRequest.name)
}
inline ::std::string* ListAlertPoliciesRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListAlertPoliciesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListAlertPoliciesRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListAlertPoliciesRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListAlertPoliciesRequest.name)
}

// string filter = 5;
inline void ListAlertPoliciesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListAlertPoliciesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesRequest.filter)
  return filter_.GetNoArena();
}
inline void ListAlertPoliciesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesRequest.filter)
}
#if LANG_CXX11
inline void ListAlertPoliciesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListAlertPoliciesRequest.filter)
}
#endif
inline void ListAlertPoliciesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListAlertPoliciesRequest.filter)
}
inline void ListAlertPoliciesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListAlertPoliciesRequest.filter)
}
inline ::std::string* ListAlertPoliciesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListAlertPoliciesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListAlertPoliciesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListAlertPoliciesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListAlertPoliciesRequest.filter)
}

// string order_by = 6;
inline void ListAlertPoliciesRequest::clear_order_by() {
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListAlertPoliciesRequest::order_by() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
  return order_by_.GetNoArena();
}
inline void ListAlertPoliciesRequest::set_order_by(const ::std::string& value) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
}
#if LANG_CXX11
inline void ListAlertPoliciesRequest::set_order_by(::std::string&& value) {
  
  order_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
}
#endif
inline void ListAlertPoliciesRequest::set_order_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
}
inline void ListAlertPoliciesRequest::set_order_by(const char* value, size_t size) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
}
inline ::std::string* ListAlertPoliciesRequest::mutable_order_by() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
  return order_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListAlertPoliciesRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
  
  return order_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListAlertPoliciesRequest::set_allocated_order_by(::std::string* order_by) {
  if (order_by != NULL) {
    
  } else {
    
  }
  order_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_by);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListAlertPoliciesRequest.order_by)
}

// int32 page_size = 2;
inline void ListAlertPoliciesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListAlertPoliciesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesRequest.page_size)
  return page_size_;
}
inline void ListAlertPoliciesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesRequest.page_size)
}

// string page_token = 3;
inline void ListAlertPoliciesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListAlertPoliciesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListAlertPoliciesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
}
#if LANG_CXX11
inline void ListAlertPoliciesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
}
#endif
inline void ListAlertPoliciesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
}
inline void ListAlertPoliciesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
}
inline ::std::string* ListAlertPoliciesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListAlertPoliciesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListAlertPoliciesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListAlertPoliciesRequest.page_token)
}

// -------------------------------------------------------------------

// ListAlertPoliciesResponse

// repeated .google.monitoring.v3.AlertPolicy alert_policies = 3;
inline int ListAlertPoliciesResponse::alert_policies_size() const {
  return alert_policies_.size();
}
inline ::google::monitoring::v3::AlertPolicy* ListAlertPoliciesResponse::mutable_alert_policies(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesResponse.alert_policies)
  return alert_policies_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy >*
ListAlertPoliciesResponse::mutable_alert_policies() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.ListAlertPoliciesResponse.alert_policies)
  return &alert_policies_;
}
inline const ::google::monitoring::v3::AlertPolicy& ListAlertPoliciesResponse::alert_policies(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesResponse.alert_policies)
  return alert_policies_.Get(index);
}
inline ::google::monitoring::v3::AlertPolicy* ListAlertPoliciesResponse::add_alert_policies() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.ListAlertPoliciesResponse.alert_policies)
  return alert_policies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::AlertPolicy >&
ListAlertPoliciesResponse::alert_policies() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.ListAlertPoliciesResponse.alert_policies)
  return alert_policies_;
}

// string next_page_token = 2;
inline void ListAlertPoliciesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListAlertPoliciesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListAlertPoliciesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListAlertPoliciesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
}
#endif
inline void ListAlertPoliciesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
}
inline void ListAlertPoliciesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
}
inline ::std::string* ListAlertPoliciesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListAlertPoliciesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListAlertPoliciesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.ListAlertPoliciesResponse.next_page_token)
}

// -------------------------------------------------------------------

// UpdateAlertPolicyRequest

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateAlertPolicyRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateAlertPolicyRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateAlertPolicyRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateAlertPolicyRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateAlertPolicyRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateAlertPolicyRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateAlertPolicyRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateAlertPolicyRequest.update_mask)
  return update_mask_;
}
inline void UpdateAlertPolicyRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateAlertPolicyRequest.update_mask)
}

// .google.monitoring.v3.AlertPolicy alert_policy = 3;
inline bool UpdateAlertPolicyRequest::has_alert_policy() const {
  return this != internal_default_instance() && alert_policy_ != NULL;
}
inline const ::google::monitoring::v3::AlertPolicy& UpdateAlertPolicyRequest::_internal_alert_policy() const {
  return *alert_policy_;
}
inline const ::google::monitoring::v3::AlertPolicy& UpdateAlertPolicyRequest::alert_policy() const {
  const ::google::monitoring::v3::AlertPolicy* p = alert_policy_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.UpdateAlertPolicyRequest.alert_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::AlertPolicy*>(
      &::google::monitoring::v3::_AlertPolicy_default_instance_);
}
inline ::google::monitoring::v3::AlertPolicy* UpdateAlertPolicyRequest::release_alert_policy() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.UpdateAlertPolicyRequest.alert_policy)
  
  ::google::monitoring::v3::AlertPolicy* temp = alert_policy_;
  alert_policy_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::AlertPolicy* UpdateAlertPolicyRequest::mutable_alert_policy() {
  
  if (alert_policy_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::AlertPolicy>(GetArenaNoVirtual());
    alert_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.UpdateAlertPolicyRequest.alert_policy)
  return alert_policy_;
}
inline void UpdateAlertPolicyRequest::set_allocated_alert_policy(::google::monitoring::v3::AlertPolicy* alert_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(alert_policy_);
  }
  if (alert_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      alert_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alert_policy, submessage_arena);
    }
    
  } else {
    
  }
  alert_policy_ = alert_policy;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.UpdateAlertPolicyRequest.alert_policy)
}

// -------------------------------------------------------------------

// DeleteAlertPolicyRequest

// string name = 3;
inline void DeleteAlertPolicyRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteAlertPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.DeleteAlertPolicyRequest.name)
  return name_.GetNoArena();
}
inline void DeleteAlertPolicyRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.DeleteAlertPolicyRequest.name)
}
#if LANG_CXX11
inline void DeleteAlertPolicyRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.DeleteAlertPolicyRequest.name)
}
#endif
inline void DeleteAlertPolicyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.DeleteAlertPolicyRequest.name)
}
inline void DeleteAlertPolicyRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.DeleteAlertPolicyRequest.name)
}
inline ::std::string* DeleteAlertPolicyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.DeleteAlertPolicyRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteAlertPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.DeleteAlertPolicyRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteAlertPolicyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.DeleteAlertPolicyRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2falert_5fservice_2eproto
