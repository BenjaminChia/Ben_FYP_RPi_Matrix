// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/home/graph/v1/homegraph.proto

#ifndef PROTOBUF_INCLUDED_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto
#define PROTOBUF_INCLUDED_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/home/graph/v1/device.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto 

namespace protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto
namespace google {
namespace home {
namespace graph {
namespace v1 {
class AgentDeviceId;
class AgentDeviceIdDefaultTypeInternal;
extern AgentDeviceIdDefaultTypeInternal _AgentDeviceId_default_instance_;
class DeleteAgentUserRequest;
class DeleteAgentUserRequestDefaultTypeInternal;
extern DeleteAgentUserRequestDefaultTypeInternal _DeleteAgentUserRequest_default_instance_;
class QueryRequest;
class QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryRequestInput;
class QueryRequestInputDefaultTypeInternal;
extern QueryRequestInputDefaultTypeInternal _QueryRequestInput_default_instance_;
class QueryRequestPayload;
class QueryRequestPayloadDefaultTypeInternal;
extern QueryRequestPayloadDefaultTypeInternal _QueryRequestPayload_default_instance_;
class QueryResponse;
class QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
class QueryResponsePayload;
class QueryResponsePayloadDefaultTypeInternal;
extern QueryResponsePayloadDefaultTypeInternal _QueryResponsePayload_default_instance_;
class QueryResponsePayload_DevicesEntry_DoNotUse;
class QueryResponsePayload_DevicesEntry_DoNotUseDefaultTypeInternal;
extern QueryResponsePayload_DevicesEntry_DoNotUseDefaultTypeInternal _QueryResponsePayload_DevicesEntry_DoNotUse_default_instance_;
class ReportStateAndNotificationDevice;
class ReportStateAndNotificationDeviceDefaultTypeInternal;
extern ReportStateAndNotificationDeviceDefaultTypeInternal _ReportStateAndNotificationDevice_default_instance_;
class ReportStateAndNotificationRequest;
class ReportStateAndNotificationRequestDefaultTypeInternal;
extern ReportStateAndNotificationRequestDefaultTypeInternal _ReportStateAndNotificationRequest_default_instance_;
class ReportStateAndNotificationResponse;
class ReportStateAndNotificationResponseDefaultTypeInternal;
extern ReportStateAndNotificationResponseDefaultTypeInternal _ReportStateAndNotificationResponse_default_instance_;
class RequestSyncDevicesRequest;
class RequestSyncDevicesRequestDefaultTypeInternal;
extern RequestSyncDevicesRequestDefaultTypeInternal _RequestSyncDevicesRequest_default_instance_;
class RequestSyncDevicesResponse;
class RequestSyncDevicesResponseDefaultTypeInternal;
extern RequestSyncDevicesResponseDefaultTypeInternal _RequestSyncDevicesResponse_default_instance_;
class StateAndNotificationPayload;
class StateAndNotificationPayloadDefaultTypeInternal;
extern StateAndNotificationPayloadDefaultTypeInternal _StateAndNotificationPayload_default_instance_;
class SyncRequest;
class SyncRequestDefaultTypeInternal;
extern SyncRequestDefaultTypeInternal _SyncRequest_default_instance_;
class SyncResponse;
class SyncResponseDefaultTypeInternal;
extern SyncResponseDefaultTypeInternal _SyncResponse_default_instance_;
class SyncResponsePayload;
class SyncResponsePayloadDefaultTypeInternal;
extern SyncResponsePayloadDefaultTypeInternal _SyncResponsePayload_default_instance_;
}  // namespace v1
}  // namespace graph
}  // namespace home
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::home::graph::v1::AgentDeviceId* Arena::CreateMaybeMessage<::google::home::graph::v1::AgentDeviceId>(Arena*);
template<> ::google::home::graph::v1::DeleteAgentUserRequest* Arena::CreateMaybeMessage<::google::home::graph::v1::DeleteAgentUserRequest>(Arena*);
template<> ::google::home::graph::v1::QueryRequest* Arena::CreateMaybeMessage<::google::home::graph::v1::QueryRequest>(Arena*);
template<> ::google::home::graph::v1::QueryRequestInput* Arena::CreateMaybeMessage<::google::home::graph::v1::QueryRequestInput>(Arena*);
template<> ::google::home::graph::v1::QueryRequestPayload* Arena::CreateMaybeMessage<::google::home::graph::v1::QueryRequestPayload>(Arena*);
template<> ::google::home::graph::v1::QueryResponse* Arena::CreateMaybeMessage<::google::home::graph::v1::QueryResponse>(Arena*);
template<> ::google::home::graph::v1::QueryResponsePayload* Arena::CreateMaybeMessage<::google::home::graph::v1::QueryResponsePayload>(Arena*);
template<> ::google::home::graph::v1::QueryResponsePayload_DevicesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::home::graph::v1::QueryResponsePayload_DevicesEntry_DoNotUse>(Arena*);
template<> ::google::home::graph::v1::ReportStateAndNotificationDevice* Arena::CreateMaybeMessage<::google::home::graph::v1::ReportStateAndNotificationDevice>(Arena*);
template<> ::google::home::graph::v1::ReportStateAndNotificationRequest* Arena::CreateMaybeMessage<::google::home::graph::v1::ReportStateAndNotificationRequest>(Arena*);
template<> ::google::home::graph::v1::ReportStateAndNotificationResponse* Arena::CreateMaybeMessage<::google::home::graph::v1::ReportStateAndNotificationResponse>(Arena*);
template<> ::google::home::graph::v1::RequestSyncDevicesRequest* Arena::CreateMaybeMessage<::google::home::graph::v1::RequestSyncDevicesRequest>(Arena*);
template<> ::google::home::graph::v1::RequestSyncDevicesResponse* Arena::CreateMaybeMessage<::google::home::graph::v1::RequestSyncDevicesResponse>(Arena*);
template<> ::google::home::graph::v1::StateAndNotificationPayload* Arena::CreateMaybeMessage<::google::home::graph::v1::StateAndNotificationPayload>(Arena*);
template<> ::google::home::graph::v1::SyncRequest* Arena::CreateMaybeMessage<::google::home::graph::v1::SyncRequest>(Arena*);
template<> ::google::home::graph::v1::SyncResponse* Arena::CreateMaybeMessage<::google::home::graph::v1::SyncResponse>(Arena*);
template<> ::google::home::graph::v1::SyncResponsePayload* Arena::CreateMaybeMessage<::google::home::graph::v1::SyncResponsePayload>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace home {
namespace graph {
namespace v1 {

// ===================================================================

class RequestSyncDevicesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.RequestSyncDevicesRequest) */ {
 public:
  RequestSyncDevicesRequest();
  virtual ~RequestSyncDevicesRequest();

  RequestSyncDevicesRequest(const RequestSyncDevicesRequest& from);

  inline RequestSyncDevicesRequest& operator=(const RequestSyncDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestSyncDevicesRequest(RequestSyncDevicesRequest&& from) noexcept
    : RequestSyncDevicesRequest() {
    *this = ::std::move(from);
  }

  inline RequestSyncDevicesRequest& operator=(RequestSyncDevicesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSyncDevicesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestSyncDevicesRequest* internal_default_instance() {
    return reinterpret_cast<const RequestSyncDevicesRequest*>(
               &_RequestSyncDevicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RequestSyncDevicesRequest* other);
  friend void swap(RequestSyncDevicesRequest& a, RequestSyncDevicesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestSyncDevicesRequest* New() const final {
    return CreateMaybeMessage<RequestSyncDevicesRequest>(NULL);
  }

  RequestSyncDevicesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestSyncDevicesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestSyncDevicesRequest& from);
  void MergeFrom(const RequestSyncDevicesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSyncDevicesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string agent_user_id = 1;
  void clear_agent_user_id();
  static const int kAgentUserIdFieldNumber = 1;
  const ::std::string& agent_user_id() const;
  void set_agent_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_user_id(::std::string&& value);
  #endif
  void set_agent_user_id(const char* value);
  void set_agent_user_id(const char* value, size_t size);
  ::std::string* mutable_agent_user_id();
  ::std::string* release_agent_user_id();
  void set_allocated_agent_user_id(::std::string* agent_user_id);

  // bool async = 2;
  void clear_async();
  static const int kAsyncFieldNumber = 2;
  bool async() const;
  void set_async(bool value);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.RequestSyncDevicesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr agent_user_id_;
  bool async_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestSyncDevicesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.RequestSyncDevicesResponse) */ {
 public:
  RequestSyncDevicesResponse();
  virtual ~RequestSyncDevicesResponse();

  RequestSyncDevicesResponse(const RequestSyncDevicesResponse& from);

  inline RequestSyncDevicesResponse& operator=(const RequestSyncDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestSyncDevicesResponse(RequestSyncDevicesResponse&& from) noexcept
    : RequestSyncDevicesResponse() {
    *this = ::std::move(from);
  }

  inline RequestSyncDevicesResponse& operator=(RequestSyncDevicesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSyncDevicesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestSyncDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const RequestSyncDevicesResponse*>(
               &_RequestSyncDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RequestSyncDevicesResponse* other);
  friend void swap(RequestSyncDevicesResponse& a, RequestSyncDevicesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestSyncDevicesResponse* New() const final {
    return CreateMaybeMessage<RequestSyncDevicesResponse>(NULL);
  }

  RequestSyncDevicesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestSyncDevicesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestSyncDevicesResponse& from);
  void MergeFrom(const RequestSyncDevicesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSyncDevicesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.RequestSyncDevicesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportStateAndNotificationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.ReportStateAndNotificationRequest) */ {
 public:
  ReportStateAndNotificationRequest();
  virtual ~ReportStateAndNotificationRequest();

  ReportStateAndNotificationRequest(const ReportStateAndNotificationRequest& from);

  inline ReportStateAndNotificationRequest& operator=(const ReportStateAndNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportStateAndNotificationRequest(ReportStateAndNotificationRequest&& from) noexcept
    : ReportStateAndNotificationRequest() {
    *this = ::std::move(from);
  }

  inline ReportStateAndNotificationRequest& operator=(ReportStateAndNotificationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportStateAndNotificationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportStateAndNotificationRequest* internal_default_instance() {
    return reinterpret_cast<const ReportStateAndNotificationRequest*>(
               &_ReportStateAndNotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReportStateAndNotificationRequest* other);
  friend void swap(ReportStateAndNotificationRequest& a, ReportStateAndNotificationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportStateAndNotificationRequest* New() const final {
    return CreateMaybeMessage<ReportStateAndNotificationRequest>(NULL);
  }

  ReportStateAndNotificationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportStateAndNotificationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportStateAndNotificationRequest& from);
  void MergeFrom(const ReportStateAndNotificationRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportStateAndNotificationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string agent_user_id = 2;
  void clear_agent_user_id();
  static const int kAgentUserIdFieldNumber = 2;
  const ::std::string& agent_user_id() const;
  void set_agent_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_user_id(::std::string&& value);
  #endif
  void set_agent_user_id(const char* value);
  void set_agent_user_id(const char* value, size_t size);
  ::std::string* mutable_agent_user_id();
  ::std::string* release_agent_user_id();
  void set_allocated_agent_user_id(::std::string* agent_user_id);

  // string event_id = 4;
  void clear_event_id();
  static const int kEventIdFieldNumber = 4;
  const ::std::string& event_id() const;
  void set_event_id(const ::std::string& value);
  #if LANG_CXX11
  void set_event_id(::std::string&& value);
  #endif
  void set_event_id(const char* value);
  void set_event_id(const char* value, size_t size);
  ::std::string* mutable_event_id();
  ::std::string* release_event_id();
  void set_allocated_event_id(::std::string* event_id);

  // string follow_up_token = 5;
  void clear_follow_up_token();
  static const int kFollowUpTokenFieldNumber = 5;
  const ::std::string& follow_up_token() const;
  void set_follow_up_token(const ::std::string& value);
  #if LANG_CXX11
  void set_follow_up_token(::std::string&& value);
  #endif
  void set_follow_up_token(const char* value);
  void set_follow_up_token(const char* value, size_t size);
  ::std::string* mutable_follow_up_token();
  ::std::string* release_follow_up_token();
  void set_allocated_follow_up_token(::std::string* follow_up_token);

  // .google.home.graph.v1.StateAndNotificationPayload payload = 3;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 3;
  private:
  const ::google::home::graph::v1::StateAndNotificationPayload& _internal_payload() const;
  public:
  const ::google::home::graph::v1::StateAndNotificationPayload& payload() const;
  ::google::home::graph::v1::StateAndNotificationPayload* release_payload();
  ::google::home::graph::v1::StateAndNotificationPayload* mutable_payload();
  void set_allocated_payload(::google::home::graph::v1::StateAndNotificationPayload* payload);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.ReportStateAndNotificationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr agent_user_id_;
  ::google::protobuf::internal::ArenaStringPtr event_id_;
  ::google::protobuf::internal::ArenaStringPtr follow_up_token_;
  ::google::home::graph::v1::StateAndNotificationPayload* payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportStateAndNotificationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.ReportStateAndNotificationResponse) */ {
 public:
  ReportStateAndNotificationResponse();
  virtual ~ReportStateAndNotificationResponse();

  ReportStateAndNotificationResponse(const ReportStateAndNotificationResponse& from);

  inline ReportStateAndNotificationResponse& operator=(const ReportStateAndNotificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportStateAndNotificationResponse(ReportStateAndNotificationResponse&& from) noexcept
    : ReportStateAndNotificationResponse() {
    *this = ::std::move(from);
  }

  inline ReportStateAndNotificationResponse& operator=(ReportStateAndNotificationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportStateAndNotificationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportStateAndNotificationResponse* internal_default_instance() {
    return reinterpret_cast<const ReportStateAndNotificationResponse*>(
               &_ReportStateAndNotificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ReportStateAndNotificationResponse* other);
  friend void swap(ReportStateAndNotificationResponse& a, ReportStateAndNotificationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportStateAndNotificationResponse* New() const final {
    return CreateMaybeMessage<ReportStateAndNotificationResponse>(NULL);
  }

  ReportStateAndNotificationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportStateAndNotificationResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportStateAndNotificationResponse& from);
  void MergeFrom(const ReportStateAndNotificationResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportStateAndNotificationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.ReportStateAndNotificationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StateAndNotificationPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.StateAndNotificationPayload) */ {
 public:
  StateAndNotificationPayload();
  virtual ~StateAndNotificationPayload();

  StateAndNotificationPayload(const StateAndNotificationPayload& from);

  inline StateAndNotificationPayload& operator=(const StateAndNotificationPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateAndNotificationPayload(StateAndNotificationPayload&& from) noexcept
    : StateAndNotificationPayload() {
    *this = ::std::move(from);
  }

  inline StateAndNotificationPayload& operator=(StateAndNotificationPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StateAndNotificationPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateAndNotificationPayload* internal_default_instance() {
    return reinterpret_cast<const StateAndNotificationPayload*>(
               &_StateAndNotificationPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StateAndNotificationPayload* other);
  friend void swap(StateAndNotificationPayload& a, StateAndNotificationPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateAndNotificationPayload* New() const final {
    return CreateMaybeMessage<StateAndNotificationPayload>(NULL);
  }

  StateAndNotificationPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StateAndNotificationPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StateAndNotificationPayload& from);
  void MergeFrom(const StateAndNotificationPayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateAndNotificationPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.home.graph.v1.ReportStateAndNotificationDevice devices = 1;
  bool has_devices() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  private:
  const ::google::home::graph::v1::ReportStateAndNotificationDevice& _internal_devices() const;
  public:
  const ::google::home::graph::v1::ReportStateAndNotificationDevice& devices() const;
  ::google::home::graph::v1::ReportStateAndNotificationDevice* release_devices();
  ::google::home::graph::v1::ReportStateAndNotificationDevice* mutable_devices();
  void set_allocated_devices(::google::home::graph::v1::ReportStateAndNotificationDevice* devices);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.StateAndNotificationPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::home::graph::v1::ReportStateAndNotificationDevice* devices_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportStateAndNotificationDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.ReportStateAndNotificationDevice) */ {
 public:
  ReportStateAndNotificationDevice();
  virtual ~ReportStateAndNotificationDevice();

  ReportStateAndNotificationDevice(const ReportStateAndNotificationDevice& from);

  inline ReportStateAndNotificationDevice& operator=(const ReportStateAndNotificationDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportStateAndNotificationDevice(ReportStateAndNotificationDevice&& from) noexcept
    : ReportStateAndNotificationDevice() {
    *this = ::std::move(from);
  }

  inline ReportStateAndNotificationDevice& operator=(ReportStateAndNotificationDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportStateAndNotificationDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportStateAndNotificationDevice* internal_default_instance() {
    return reinterpret_cast<const ReportStateAndNotificationDevice*>(
               &_ReportStateAndNotificationDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReportStateAndNotificationDevice* other);
  friend void swap(ReportStateAndNotificationDevice& a, ReportStateAndNotificationDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportStateAndNotificationDevice* New() const final {
    return CreateMaybeMessage<ReportStateAndNotificationDevice>(NULL);
  }

  ReportStateAndNotificationDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportStateAndNotificationDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportStateAndNotificationDevice& from);
  void MergeFrom(const ReportStateAndNotificationDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportStateAndNotificationDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Struct states = 1;
  bool has_states() const;
  void clear_states();
  static const int kStatesFieldNumber = 1;
  private:
  const ::google::protobuf::Struct& _internal_states() const;
  public:
  const ::google::protobuf::Struct& states() const;
  ::google::protobuf::Struct* release_states();
  ::google::protobuf::Struct* mutable_states();
  void set_allocated_states(::google::protobuf::Struct* states);

  // .google.protobuf.Struct notifications = 2;
  bool has_notifications() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 2;
  private:
  const ::google::protobuf::Struct& _internal_notifications() const;
  public:
  const ::google::protobuf::Struct& notifications() const;
  ::google::protobuf::Struct* release_notifications();
  ::google::protobuf::Struct* mutable_notifications();
  void set_allocated_notifications(::google::protobuf::Struct* notifications);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.ReportStateAndNotificationDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Struct* states_;
  ::google::protobuf::Struct* notifications_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteAgentUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.DeleteAgentUserRequest) */ {
 public:
  DeleteAgentUserRequest();
  virtual ~DeleteAgentUserRequest();

  DeleteAgentUserRequest(const DeleteAgentUserRequest& from);

  inline DeleteAgentUserRequest& operator=(const DeleteAgentUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteAgentUserRequest(DeleteAgentUserRequest&& from) noexcept
    : DeleteAgentUserRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAgentUserRequest& operator=(DeleteAgentUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteAgentUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAgentUserRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAgentUserRequest*>(
               &_DeleteAgentUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DeleteAgentUserRequest* other);
  friend void swap(DeleteAgentUserRequest& a, DeleteAgentUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteAgentUserRequest* New() const final {
    return CreateMaybeMessage<DeleteAgentUserRequest>(NULL);
  }

  DeleteAgentUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAgentUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteAgentUserRequest& from);
  void MergeFrom(const DeleteAgentUserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAgentUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string agent_user_id = 2;
  void clear_agent_user_id();
  static const int kAgentUserIdFieldNumber = 2;
  const ::std::string& agent_user_id() const;
  void set_agent_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_user_id(::std::string&& value);
  #endif
  void set_agent_user_id(const char* value);
  void set_agent_user_id(const char* value, size_t size);
  ::std::string* mutable_agent_user_id();
  ::std::string* release_agent_user_id();
  void set_allocated_agent_user_id(::std::string* agent_user_id);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.DeleteAgentUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr agent_user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.QueryRequest) */ {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(QueryRequest* other);
  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const final {
    return CreateMaybeMessage<QueryRequest>(NULL);
  }

  QueryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.home.graph.v1.QueryRequestInput inputs = 3;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 3;
  ::google::home::graph::v1::QueryRequestInput* mutable_inputs(int index);
  ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::QueryRequestInput >*
      mutable_inputs();
  const ::google::home::graph::v1::QueryRequestInput& inputs(int index) const;
  ::google::home::graph::v1::QueryRequestInput* add_inputs();
  const ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::QueryRequestInput >&
      inputs() const;

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string agent_user_id = 2;
  void clear_agent_user_id();
  static const int kAgentUserIdFieldNumber = 2;
  const ::std::string& agent_user_id() const;
  void set_agent_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_user_id(::std::string&& value);
  #endif
  void set_agent_user_id(const char* value);
  void set_agent_user_id(const char* value, size_t size);
  ::std::string* mutable_agent_user_id();
  ::std::string* release_agent_user_id();
  void set_allocated_agent_user_id(::std::string* agent_user_id);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.QueryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::QueryRequestInput > inputs_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr agent_user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryRequestInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.QueryRequestInput) */ {
 public:
  QueryRequestInput();
  virtual ~QueryRequestInput();

  QueryRequestInput(const QueryRequestInput& from);

  inline QueryRequestInput& operator=(const QueryRequestInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRequestInput(QueryRequestInput&& from) noexcept
    : QueryRequestInput() {
    *this = ::std::move(from);
  }

  inline QueryRequestInput& operator=(QueryRequestInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequestInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequestInput* internal_default_instance() {
    return reinterpret_cast<const QueryRequestInput*>(
               &_QueryRequestInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(QueryRequestInput* other);
  friend void swap(QueryRequestInput& a, QueryRequestInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRequestInput* New() const final {
    return CreateMaybeMessage<QueryRequestInput>(NULL);
  }

  QueryRequestInput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequestInput>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRequestInput& from);
  void MergeFrom(const QueryRequestInput& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequestInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.home.graph.v1.QueryRequestPayload payload = 1;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 1;
  private:
  const ::google::home::graph::v1::QueryRequestPayload& _internal_payload() const;
  public:
  const ::google::home::graph::v1::QueryRequestPayload& payload() const;
  ::google::home::graph::v1::QueryRequestPayload* release_payload();
  ::google::home::graph::v1::QueryRequestPayload* mutable_payload();
  void set_allocated_payload(::google::home::graph::v1::QueryRequestPayload* payload);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.QueryRequestInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::home::graph::v1::QueryRequestPayload* payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryRequestPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.QueryRequestPayload) */ {
 public:
  QueryRequestPayload();
  virtual ~QueryRequestPayload();

  QueryRequestPayload(const QueryRequestPayload& from);

  inline QueryRequestPayload& operator=(const QueryRequestPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRequestPayload(QueryRequestPayload&& from) noexcept
    : QueryRequestPayload() {
    *this = ::std::move(from);
  }

  inline QueryRequestPayload& operator=(QueryRequestPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequestPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequestPayload* internal_default_instance() {
    return reinterpret_cast<const QueryRequestPayload*>(
               &_QueryRequestPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(QueryRequestPayload* other);
  friend void swap(QueryRequestPayload& a, QueryRequestPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRequestPayload* New() const final {
    return CreateMaybeMessage<QueryRequestPayload>(NULL);
  }

  QueryRequestPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequestPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRequestPayload& from);
  void MergeFrom(const QueryRequestPayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequestPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.home.graph.v1.AgentDeviceId devices = 1;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  ::google::home::graph::v1::AgentDeviceId* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::AgentDeviceId >*
      mutable_devices();
  const ::google::home::graph::v1::AgentDeviceId& devices(int index) const;
  ::google::home::graph::v1::AgentDeviceId* add_devices();
  const ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::AgentDeviceId >&
      devices() const;

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.QueryRequestPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::AgentDeviceId > devices_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AgentDeviceId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.AgentDeviceId) */ {
 public:
  AgentDeviceId();
  virtual ~AgentDeviceId();

  AgentDeviceId(const AgentDeviceId& from);

  inline AgentDeviceId& operator=(const AgentDeviceId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AgentDeviceId(AgentDeviceId&& from) noexcept
    : AgentDeviceId() {
    *this = ::std::move(from);
  }

  inline AgentDeviceId& operator=(AgentDeviceId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentDeviceId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentDeviceId* internal_default_instance() {
    return reinterpret_cast<const AgentDeviceId*>(
               &_AgentDeviceId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(AgentDeviceId* other);
  friend void swap(AgentDeviceId& a, AgentDeviceId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AgentDeviceId* New() const final {
    return CreateMaybeMessage<AgentDeviceId>(NULL);
  }

  AgentDeviceId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AgentDeviceId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AgentDeviceId& from);
  void MergeFrom(const AgentDeviceId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentDeviceId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.AgentDeviceId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.QueryResponse) */ {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(QueryResponse* other);
  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const final {
    return CreateMaybeMessage<QueryResponse>(NULL);
  }

  QueryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // .google.home.graph.v1.QueryResponsePayload payload = 2;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  private:
  const ::google::home::graph::v1::QueryResponsePayload& _internal_payload() const;
  public:
  const ::google::home::graph::v1::QueryResponsePayload& payload() const;
  ::google::home::graph::v1::QueryResponsePayload* release_payload();
  ::google::home::graph::v1::QueryResponsePayload* mutable_payload();
  void set_allocated_payload(::google::home::graph::v1::QueryResponsePayload* payload);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.QueryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::home::graph::v1::QueryResponsePayload* payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryResponsePayload_DevicesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<QueryResponsePayload_DevicesEntry_DoNotUse, 
    ::std::string, ::google::protobuf::Struct,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<QueryResponsePayload_DevicesEntry_DoNotUse, 
    ::std::string, ::google::protobuf::Struct,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  QueryResponsePayload_DevicesEntry_DoNotUse();
  QueryResponsePayload_DevicesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const QueryResponsePayload_DevicesEntry_DoNotUse& other);
  static const QueryResponsePayload_DevicesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryResponsePayload_DevicesEntry_DoNotUse*>(&_QueryResponsePayload_DevicesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class QueryResponsePayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.QueryResponsePayload) */ {
 public:
  QueryResponsePayload();
  virtual ~QueryResponsePayload();

  QueryResponsePayload(const QueryResponsePayload& from);

  inline QueryResponsePayload& operator=(const QueryResponsePayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResponsePayload(QueryResponsePayload&& from) noexcept
    : QueryResponsePayload() {
    *this = ::std::move(from);
  }

  inline QueryResponsePayload& operator=(QueryResponsePayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponsePayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponsePayload* internal_default_instance() {
    return reinterpret_cast<const QueryResponsePayload*>(
               &_QueryResponsePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(QueryResponsePayload* other);
  friend void swap(QueryResponsePayload& a, QueryResponsePayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResponsePayload* New() const final {
    return CreateMaybeMessage<QueryResponsePayload>(NULL);
  }

  QueryResponsePayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponsePayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResponsePayload& from);
  void MergeFrom(const QueryResponsePayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponsePayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .google.protobuf.Struct> devices = 1;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::Struct >&
      devices() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::Struct >*
      mutable_devices();

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.QueryResponsePayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      QueryResponsePayload_DevicesEntry_DoNotUse,
      ::std::string, ::google::protobuf::Struct,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > devices_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.SyncRequest) */ {
 public:
  SyncRequest();
  virtual ~SyncRequest();

  SyncRequest(const SyncRequest& from);

  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncRequest(SyncRequest&& from) noexcept
    : SyncRequest() {
    *this = ::std::move(from);
  }

  inline SyncRequest& operator=(SyncRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncRequest* internal_default_instance() {
    return reinterpret_cast<const SyncRequest*>(
               &_SyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SyncRequest* other);
  friend void swap(SyncRequest& a, SyncRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncRequest* New() const final {
    return CreateMaybeMessage<SyncRequest>(NULL);
  }

  SyncRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncRequest& from);
  void MergeFrom(const SyncRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string agent_user_id = 2;
  void clear_agent_user_id();
  static const int kAgentUserIdFieldNumber = 2;
  const ::std::string& agent_user_id() const;
  void set_agent_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_user_id(::std::string&& value);
  #endif
  void set_agent_user_id(const char* value);
  void set_agent_user_id(const char* value, size_t size);
  ::std::string* mutable_agent_user_id();
  ::std::string* release_agent_user_id();
  void set_allocated_agent_user_id(::std::string* agent_user_id);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.SyncRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr agent_user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.SyncResponse) */ {
 public:
  SyncResponse();
  virtual ~SyncResponse();

  SyncResponse(const SyncResponse& from);

  inline SyncResponse& operator=(const SyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncResponse(SyncResponse&& from) noexcept
    : SyncResponse() {
    *this = ::std::move(from);
  }

  inline SyncResponse& operator=(SyncResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncResponse* internal_default_instance() {
    return reinterpret_cast<const SyncResponse*>(
               &_SyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SyncResponse* other);
  friend void swap(SyncResponse& a, SyncResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncResponse* New() const final {
    return CreateMaybeMessage<SyncResponse>(NULL);
  }

  SyncResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncResponse& from);
  void MergeFrom(const SyncResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // .google.home.graph.v1.SyncResponsePayload payload = 2;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  private:
  const ::google::home::graph::v1::SyncResponsePayload& _internal_payload() const;
  public:
  const ::google::home::graph::v1::SyncResponsePayload& payload() const;
  ::google::home::graph::v1::SyncResponsePayload* release_payload();
  ::google::home::graph::v1::SyncResponsePayload* mutable_payload();
  void set_allocated_payload(::google::home::graph::v1::SyncResponsePayload* payload);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.SyncResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::home::graph::v1::SyncResponsePayload* payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncResponsePayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.SyncResponsePayload) */ {
 public:
  SyncResponsePayload();
  virtual ~SyncResponsePayload();

  SyncResponsePayload(const SyncResponsePayload& from);

  inline SyncResponsePayload& operator=(const SyncResponsePayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncResponsePayload(SyncResponsePayload&& from) noexcept
    : SyncResponsePayload() {
    *this = ::std::move(from);
  }

  inline SyncResponsePayload& operator=(SyncResponsePayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncResponsePayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncResponsePayload* internal_default_instance() {
    return reinterpret_cast<const SyncResponsePayload*>(
               &_SyncResponsePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SyncResponsePayload* other);
  friend void swap(SyncResponsePayload& a, SyncResponsePayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncResponsePayload* New() const final {
    return CreateMaybeMessage<SyncResponsePayload>(NULL);
  }

  SyncResponsePayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncResponsePayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncResponsePayload& from);
  void MergeFrom(const SyncResponsePayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncResponsePayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.home.graph.v1.Device devices = 2;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 2;
  ::google::home::graph::v1::Device* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::Device >*
      mutable_devices();
  const ::google::home::graph::v1::Device& devices(int index) const;
  ::google::home::graph::v1::Device* add_devices();
  const ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::Device >&
      devices() const;

  // string agent_user_id = 1;
  void clear_agent_user_id();
  static const int kAgentUserIdFieldNumber = 1;
  const ::std::string& agent_user_id() const;
  void set_agent_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_user_id(::std::string&& value);
  #endif
  void set_agent_user_id(const char* value);
  void set_agent_user_id(const char* value, size_t size);
  ::std::string* mutable_agent_user_id();
  ::std::string* release_agent_user_id();
  void set_allocated_agent_user_id(::std::string* agent_user_id);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.SyncResponsePayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::Device > devices_;
  ::google::protobuf::internal::ArenaStringPtr agent_user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestSyncDevicesRequest

// string agent_user_id = 1;
inline void RequestSyncDevicesRequest::clear_agent_user_id() {
  agent_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestSyncDevicesRequest::agent_user_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.RequestSyncDevicesRequest.agent_user_id)
  return agent_user_id_.GetNoArena();
}
inline void RequestSyncDevicesRequest::set_agent_user_id(const ::std::string& value) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.RequestSyncDevicesRequest.agent_user_id)
}
#if LANG_CXX11
inline void RequestSyncDevicesRequest::set_agent_user_id(::std::string&& value) {
  
  agent_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.RequestSyncDevicesRequest.agent_user_id)
}
#endif
inline void RequestSyncDevicesRequest::set_agent_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.RequestSyncDevicesRequest.agent_user_id)
}
inline void RequestSyncDevicesRequest::set_agent_user_id(const char* value, size_t size) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.RequestSyncDevicesRequest.agent_user_id)
}
inline ::std::string* RequestSyncDevicesRequest::mutable_agent_user_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.RequestSyncDevicesRequest.agent_user_id)
  return agent_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestSyncDevicesRequest::release_agent_user_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.RequestSyncDevicesRequest.agent_user_id)
  
  return agent_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestSyncDevicesRequest::set_allocated_agent_user_id(::std::string* agent_user_id) {
  if (agent_user_id != NULL) {
    
  } else {
    
  }
  agent_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_user_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.RequestSyncDevicesRequest.agent_user_id)
}

// bool async = 2;
inline void RequestSyncDevicesRequest::clear_async() {
  async_ = false;
}
inline bool RequestSyncDevicesRequest::async() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.RequestSyncDevicesRequest.async)
  return async_;
}
inline void RequestSyncDevicesRequest::set_async(bool value) {
  
  async_ = value;
  // @@protoc_insertion_point(field_set:google.home.graph.v1.RequestSyncDevicesRequest.async)
}

// -------------------------------------------------------------------

// RequestSyncDevicesResponse

// -------------------------------------------------------------------

// ReportStateAndNotificationRequest

// string request_id = 1;
inline void ReportStateAndNotificationRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportStateAndNotificationRequest::request_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.ReportStateAndNotificationRequest.request_id)
  return request_id_.GetNoArena();
}
inline void ReportStateAndNotificationRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.ReportStateAndNotificationRequest.request_id)
}
#if LANG_CXX11
inline void ReportStateAndNotificationRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.ReportStateAndNotificationRequest.request_id)
}
#endif
inline void ReportStateAndNotificationRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.ReportStateAndNotificationRequest.request_id)
}
inline void ReportStateAndNotificationRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.ReportStateAndNotificationRequest.request_id)
}
inline ::std::string* ReportStateAndNotificationRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.ReportStateAndNotificationRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportStateAndNotificationRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.ReportStateAndNotificationRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportStateAndNotificationRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.ReportStateAndNotificationRequest.request_id)
}

// string event_id = 4;
inline void ReportStateAndNotificationRequest::clear_event_id() {
  event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportStateAndNotificationRequest::event_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.ReportStateAndNotificationRequest.event_id)
  return event_id_.GetNoArena();
}
inline void ReportStateAndNotificationRequest::set_event_id(const ::std::string& value) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.ReportStateAndNotificationRequest.event_id)
}
#if LANG_CXX11
inline void ReportStateAndNotificationRequest::set_event_id(::std::string&& value) {
  
  event_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.ReportStateAndNotificationRequest.event_id)
}
#endif
inline void ReportStateAndNotificationRequest::set_event_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.ReportStateAndNotificationRequest.event_id)
}
inline void ReportStateAndNotificationRequest::set_event_id(const char* value, size_t size) {
  
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.ReportStateAndNotificationRequest.event_id)
}
inline ::std::string* ReportStateAndNotificationRequest::mutable_event_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.ReportStateAndNotificationRequest.event_id)
  return event_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportStateAndNotificationRequest::release_event_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.ReportStateAndNotificationRequest.event_id)
  
  return event_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportStateAndNotificationRequest::set_allocated_event_id(::std::string* event_id) {
  if (event_id != NULL) {
    
  } else {
    
  }
  event_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.ReportStateAndNotificationRequest.event_id)
}

// string agent_user_id = 2;
inline void ReportStateAndNotificationRequest::clear_agent_user_id() {
  agent_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportStateAndNotificationRequest::agent_user_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.ReportStateAndNotificationRequest.agent_user_id)
  return agent_user_id_.GetNoArena();
}
inline void ReportStateAndNotificationRequest::set_agent_user_id(const ::std::string& value) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.ReportStateAndNotificationRequest.agent_user_id)
}
#if LANG_CXX11
inline void ReportStateAndNotificationRequest::set_agent_user_id(::std::string&& value) {
  
  agent_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.ReportStateAndNotificationRequest.agent_user_id)
}
#endif
inline void ReportStateAndNotificationRequest::set_agent_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.ReportStateAndNotificationRequest.agent_user_id)
}
inline void ReportStateAndNotificationRequest::set_agent_user_id(const char* value, size_t size) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.ReportStateAndNotificationRequest.agent_user_id)
}
inline ::std::string* ReportStateAndNotificationRequest::mutable_agent_user_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.ReportStateAndNotificationRequest.agent_user_id)
  return agent_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportStateAndNotificationRequest::release_agent_user_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.ReportStateAndNotificationRequest.agent_user_id)
  
  return agent_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportStateAndNotificationRequest::set_allocated_agent_user_id(::std::string* agent_user_id) {
  if (agent_user_id != NULL) {
    
  } else {
    
  }
  agent_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_user_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.ReportStateAndNotificationRequest.agent_user_id)
}

// string follow_up_token = 5;
inline void ReportStateAndNotificationRequest::clear_follow_up_token() {
  follow_up_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportStateAndNotificationRequest::follow_up_token() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.ReportStateAndNotificationRequest.follow_up_token)
  return follow_up_token_.GetNoArena();
}
inline void ReportStateAndNotificationRequest::set_follow_up_token(const ::std::string& value) {
  
  follow_up_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.ReportStateAndNotificationRequest.follow_up_token)
}
#if LANG_CXX11
inline void ReportStateAndNotificationRequest::set_follow_up_token(::std::string&& value) {
  
  follow_up_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.ReportStateAndNotificationRequest.follow_up_token)
}
#endif
inline void ReportStateAndNotificationRequest::set_follow_up_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  follow_up_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.ReportStateAndNotificationRequest.follow_up_token)
}
inline void ReportStateAndNotificationRequest::set_follow_up_token(const char* value, size_t size) {
  
  follow_up_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.ReportStateAndNotificationRequest.follow_up_token)
}
inline ::std::string* ReportStateAndNotificationRequest::mutable_follow_up_token() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.ReportStateAndNotificationRequest.follow_up_token)
  return follow_up_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportStateAndNotificationRequest::release_follow_up_token() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.ReportStateAndNotificationRequest.follow_up_token)
  
  return follow_up_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportStateAndNotificationRequest::set_allocated_follow_up_token(::std::string* follow_up_token) {
  if (follow_up_token != NULL) {
    
  } else {
    
  }
  follow_up_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), follow_up_token);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.ReportStateAndNotificationRequest.follow_up_token)
}

// .google.home.graph.v1.StateAndNotificationPayload payload = 3;
inline bool ReportStateAndNotificationRequest::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
inline void ReportStateAndNotificationRequest::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) {
    delete payload_;
  }
  payload_ = NULL;
}
inline const ::google::home::graph::v1::StateAndNotificationPayload& ReportStateAndNotificationRequest::_internal_payload() const {
  return *payload_;
}
inline const ::google::home::graph::v1::StateAndNotificationPayload& ReportStateAndNotificationRequest::payload() const {
  const ::google::home::graph::v1::StateAndNotificationPayload* p = payload_;
  // @@protoc_insertion_point(field_get:google.home.graph.v1.ReportStateAndNotificationRequest.payload)
  return p != NULL ? *p : *reinterpret_cast<const ::google::home::graph::v1::StateAndNotificationPayload*>(
      &::google::home::graph::v1::_StateAndNotificationPayload_default_instance_);
}
inline ::google::home::graph::v1::StateAndNotificationPayload* ReportStateAndNotificationRequest::release_payload() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.ReportStateAndNotificationRequest.payload)
  
  ::google::home::graph::v1::StateAndNotificationPayload* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline ::google::home::graph::v1::StateAndNotificationPayload* ReportStateAndNotificationRequest::mutable_payload() {
  
  if (payload_ == NULL) {
    auto* p = CreateMaybeMessage<::google::home::graph::v1::StateAndNotificationPayload>(GetArenaNoVirtual());
    payload_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.ReportStateAndNotificationRequest.payload)
  return payload_;
}
inline void ReportStateAndNotificationRequest::set_allocated_payload(::google::home::graph::v1::StateAndNotificationPayload* payload) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete payload_;
  }
  if (payload) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      payload = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.ReportStateAndNotificationRequest.payload)
}

// -------------------------------------------------------------------

// ReportStateAndNotificationResponse

// string request_id = 1;
inline void ReportStateAndNotificationResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportStateAndNotificationResponse::request_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.ReportStateAndNotificationResponse.request_id)
  return request_id_.GetNoArena();
}
inline void ReportStateAndNotificationResponse::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.ReportStateAndNotificationResponse.request_id)
}
#if LANG_CXX11
inline void ReportStateAndNotificationResponse::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.ReportStateAndNotificationResponse.request_id)
}
#endif
inline void ReportStateAndNotificationResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.ReportStateAndNotificationResponse.request_id)
}
inline void ReportStateAndNotificationResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.ReportStateAndNotificationResponse.request_id)
}
inline ::std::string* ReportStateAndNotificationResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.ReportStateAndNotificationResponse.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportStateAndNotificationResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.ReportStateAndNotificationResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportStateAndNotificationResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.ReportStateAndNotificationResponse.request_id)
}

// -------------------------------------------------------------------

// StateAndNotificationPayload

// .google.home.graph.v1.ReportStateAndNotificationDevice devices = 1;
inline bool StateAndNotificationPayload::has_devices() const {
  return this != internal_default_instance() && devices_ != NULL;
}
inline void StateAndNotificationPayload::clear_devices() {
  if (GetArenaNoVirtual() == NULL && devices_ != NULL) {
    delete devices_;
  }
  devices_ = NULL;
}
inline const ::google::home::graph::v1::ReportStateAndNotificationDevice& StateAndNotificationPayload::_internal_devices() const {
  return *devices_;
}
inline const ::google::home::graph::v1::ReportStateAndNotificationDevice& StateAndNotificationPayload::devices() const {
  const ::google::home::graph::v1::ReportStateAndNotificationDevice* p = devices_;
  // @@protoc_insertion_point(field_get:google.home.graph.v1.StateAndNotificationPayload.devices)
  return p != NULL ? *p : *reinterpret_cast<const ::google::home::graph::v1::ReportStateAndNotificationDevice*>(
      &::google::home::graph::v1::_ReportStateAndNotificationDevice_default_instance_);
}
inline ::google::home::graph::v1::ReportStateAndNotificationDevice* StateAndNotificationPayload::release_devices() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.StateAndNotificationPayload.devices)
  
  ::google::home::graph::v1::ReportStateAndNotificationDevice* temp = devices_;
  devices_ = NULL;
  return temp;
}
inline ::google::home::graph::v1::ReportStateAndNotificationDevice* StateAndNotificationPayload::mutable_devices() {
  
  if (devices_ == NULL) {
    auto* p = CreateMaybeMessage<::google::home::graph::v1::ReportStateAndNotificationDevice>(GetArenaNoVirtual());
    devices_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.StateAndNotificationPayload.devices)
  return devices_;
}
inline void StateAndNotificationPayload::set_allocated_devices(::google::home::graph::v1::ReportStateAndNotificationDevice* devices) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete devices_;
  }
  if (devices) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      devices = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, devices, submessage_arena);
    }
    
  } else {
    
  }
  devices_ = devices;
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.StateAndNotificationPayload.devices)
}

// -------------------------------------------------------------------

// ReportStateAndNotificationDevice

// .google.protobuf.Struct states = 1;
inline bool ReportStateAndNotificationDevice::has_states() const {
  return this != internal_default_instance() && states_ != NULL;
}
inline const ::google::protobuf::Struct& ReportStateAndNotificationDevice::_internal_states() const {
  return *states_;
}
inline const ::google::protobuf::Struct& ReportStateAndNotificationDevice::states() const {
  const ::google::protobuf::Struct* p = states_;
  // @@protoc_insertion_point(field_get:google.home.graph.v1.ReportStateAndNotificationDevice.states)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* ReportStateAndNotificationDevice::release_states() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.ReportStateAndNotificationDevice.states)
  
  ::google::protobuf::Struct* temp = states_;
  states_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* ReportStateAndNotificationDevice::mutable_states() {
  
  if (states_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    states_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.ReportStateAndNotificationDevice.states)
  return states_;
}
inline void ReportStateAndNotificationDevice::set_allocated_states(::google::protobuf::Struct* states) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(states_);
  }
  if (states) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(states)->GetArena();
    if (message_arena != submessage_arena) {
      states = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, states, submessage_arena);
    }
    
  } else {
    
  }
  states_ = states;
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.ReportStateAndNotificationDevice.states)
}

// .google.protobuf.Struct notifications = 2;
inline bool ReportStateAndNotificationDevice::has_notifications() const {
  return this != internal_default_instance() && notifications_ != NULL;
}
inline const ::google::protobuf::Struct& ReportStateAndNotificationDevice::_internal_notifications() const {
  return *notifications_;
}
inline const ::google::protobuf::Struct& ReportStateAndNotificationDevice::notifications() const {
  const ::google::protobuf::Struct* p = notifications_;
  // @@protoc_insertion_point(field_get:google.home.graph.v1.ReportStateAndNotificationDevice.notifications)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* ReportStateAndNotificationDevice::release_notifications() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.ReportStateAndNotificationDevice.notifications)
  
  ::google::protobuf::Struct* temp = notifications_;
  notifications_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* ReportStateAndNotificationDevice::mutable_notifications() {
  
  if (notifications_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    notifications_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.ReportStateAndNotificationDevice.notifications)
  return notifications_;
}
inline void ReportStateAndNotificationDevice::set_allocated_notifications(::google::protobuf::Struct* notifications) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(notifications_);
  }
  if (notifications) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(notifications)->GetArena();
    if (message_arena != submessage_arena) {
      notifications = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, notifications, submessage_arena);
    }
    
  } else {
    
  }
  notifications_ = notifications;
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.ReportStateAndNotificationDevice.notifications)
}

// -------------------------------------------------------------------

// DeleteAgentUserRequest

// string request_id = 1;
inline void DeleteAgentUserRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteAgentUserRequest::request_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.DeleteAgentUserRequest.request_id)
  return request_id_.GetNoArena();
}
inline void DeleteAgentUserRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.DeleteAgentUserRequest.request_id)
}
#if LANG_CXX11
inline void DeleteAgentUserRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.DeleteAgentUserRequest.request_id)
}
#endif
inline void DeleteAgentUserRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.DeleteAgentUserRequest.request_id)
}
inline void DeleteAgentUserRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.DeleteAgentUserRequest.request_id)
}
inline ::std::string* DeleteAgentUserRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.DeleteAgentUserRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteAgentUserRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.DeleteAgentUserRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteAgentUserRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.DeleteAgentUserRequest.request_id)
}

// string agent_user_id = 2;
inline void DeleteAgentUserRequest::clear_agent_user_id() {
  agent_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteAgentUserRequest::agent_user_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.DeleteAgentUserRequest.agent_user_id)
  return agent_user_id_.GetNoArena();
}
inline void DeleteAgentUserRequest::set_agent_user_id(const ::std::string& value) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.DeleteAgentUserRequest.agent_user_id)
}
#if LANG_CXX11
inline void DeleteAgentUserRequest::set_agent_user_id(::std::string&& value) {
  
  agent_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.DeleteAgentUserRequest.agent_user_id)
}
#endif
inline void DeleteAgentUserRequest::set_agent_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.DeleteAgentUserRequest.agent_user_id)
}
inline void DeleteAgentUserRequest::set_agent_user_id(const char* value, size_t size) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.DeleteAgentUserRequest.agent_user_id)
}
inline ::std::string* DeleteAgentUserRequest::mutable_agent_user_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.DeleteAgentUserRequest.agent_user_id)
  return agent_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteAgentUserRequest::release_agent_user_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.DeleteAgentUserRequest.agent_user_id)
  
  return agent_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteAgentUserRequest::set_allocated_agent_user_id(::std::string* agent_user_id) {
  if (agent_user_id != NULL) {
    
  } else {
    
  }
  agent_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_user_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.DeleteAgentUserRequest.agent_user_id)
}

// -------------------------------------------------------------------

// QueryRequest

// string request_id = 1;
inline void QueryRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryRequest::request_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.QueryRequest.request_id)
  return request_id_.GetNoArena();
}
inline void QueryRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.QueryRequest.request_id)
}
#if LANG_CXX11
inline void QueryRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.QueryRequest.request_id)
}
#endif
inline void QueryRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.QueryRequest.request_id)
}
inline void QueryRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.QueryRequest.request_id)
}
inline ::std::string* QueryRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.QueryRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.QueryRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.QueryRequest.request_id)
}

// string agent_user_id = 2;
inline void QueryRequest::clear_agent_user_id() {
  agent_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryRequest::agent_user_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.QueryRequest.agent_user_id)
  return agent_user_id_.GetNoArena();
}
inline void QueryRequest::set_agent_user_id(const ::std::string& value) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.QueryRequest.agent_user_id)
}
#if LANG_CXX11
inline void QueryRequest::set_agent_user_id(::std::string&& value) {
  
  agent_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.QueryRequest.agent_user_id)
}
#endif
inline void QueryRequest::set_agent_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.QueryRequest.agent_user_id)
}
inline void QueryRequest::set_agent_user_id(const char* value, size_t size) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.QueryRequest.agent_user_id)
}
inline ::std::string* QueryRequest::mutable_agent_user_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.QueryRequest.agent_user_id)
  return agent_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRequest::release_agent_user_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.QueryRequest.agent_user_id)
  
  return agent_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_agent_user_id(::std::string* agent_user_id) {
  if (agent_user_id != NULL) {
    
  } else {
    
  }
  agent_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_user_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.QueryRequest.agent_user_id)
}

// repeated .google.home.graph.v1.QueryRequestInput inputs = 3;
inline int QueryRequest::inputs_size() const {
  return inputs_.size();
}
inline void QueryRequest::clear_inputs() {
  inputs_.Clear();
}
inline ::google::home::graph::v1::QueryRequestInput* QueryRequest::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.QueryRequest.inputs)
  return inputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::QueryRequestInput >*
QueryRequest::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:google.home.graph.v1.QueryRequest.inputs)
  return &inputs_;
}
inline const ::google::home::graph::v1::QueryRequestInput& QueryRequest::inputs(int index) const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.QueryRequest.inputs)
  return inputs_.Get(index);
}
inline ::google::home::graph::v1::QueryRequestInput* QueryRequest::add_inputs() {
  // @@protoc_insertion_point(field_add:google.home.graph.v1.QueryRequest.inputs)
  return inputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::QueryRequestInput >&
QueryRequest::inputs() const {
  // @@protoc_insertion_point(field_list:google.home.graph.v1.QueryRequest.inputs)
  return inputs_;
}

// -------------------------------------------------------------------

// QueryRequestInput

// .google.home.graph.v1.QueryRequestPayload payload = 1;
inline bool QueryRequestInput::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
inline void QueryRequestInput::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) {
    delete payload_;
  }
  payload_ = NULL;
}
inline const ::google::home::graph::v1::QueryRequestPayload& QueryRequestInput::_internal_payload() const {
  return *payload_;
}
inline const ::google::home::graph::v1::QueryRequestPayload& QueryRequestInput::payload() const {
  const ::google::home::graph::v1::QueryRequestPayload* p = payload_;
  // @@protoc_insertion_point(field_get:google.home.graph.v1.QueryRequestInput.payload)
  return p != NULL ? *p : *reinterpret_cast<const ::google::home::graph::v1::QueryRequestPayload*>(
      &::google::home::graph::v1::_QueryRequestPayload_default_instance_);
}
inline ::google::home::graph::v1::QueryRequestPayload* QueryRequestInput::release_payload() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.QueryRequestInput.payload)
  
  ::google::home::graph::v1::QueryRequestPayload* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline ::google::home::graph::v1::QueryRequestPayload* QueryRequestInput::mutable_payload() {
  
  if (payload_ == NULL) {
    auto* p = CreateMaybeMessage<::google::home::graph::v1::QueryRequestPayload>(GetArenaNoVirtual());
    payload_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.QueryRequestInput.payload)
  return payload_;
}
inline void QueryRequestInput::set_allocated_payload(::google::home::graph::v1::QueryRequestPayload* payload) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete payload_;
  }
  if (payload) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      payload = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.QueryRequestInput.payload)
}

// -------------------------------------------------------------------

// QueryRequestPayload

// repeated .google.home.graph.v1.AgentDeviceId devices = 1;
inline int QueryRequestPayload::devices_size() const {
  return devices_.size();
}
inline void QueryRequestPayload::clear_devices() {
  devices_.Clear();
}
inline ::google::home::graph::v1::AgentDeviceId* QueryRequestPayload::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.QueryRequestPayload.devices)
  return devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::AgentDeviceId >*
QueryRequestPayload::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:google.home.graph.v1.QueryRequestPayload.devices)
  return &devices_;
}
inline const ::google::home::graph::v1::AgentDeviceId& QueryRequestPayload::devices(int index) const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.QueryRequestPayload.devices)
  return devices_.Get(index);
}
inline ::google::home::graph::v1::AgentDeviceId* QueryRequestPayload::add_devices() {
  // @@protoc_insertion_point(field_add:google.home.graph.v1.QueryRequestPayload.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::AgentDeviceId >&
QueryRequestPayload::devices() const {
  // @@protoc_insertion_point(field_list:google.home.graph.v1.QueryRequestPayload.devices)
  return devices_;
}

// -------------------------------------------------------------------

// AgentDeviceId

// string id = 1;
inline void AgentDeviceId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgentDeviceId::id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.AgentDeviceId.id)
  return id_.GetNoArena();
}
inline void AgentDeviceId::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.AgentDeviceId.id)
}
#if LANG_CXX11
inline void AgentDeviceId::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.AgentDeviceId.id)
}
#endif
inline void AgentDeviceId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.AgentDeviceId.id)
}
inline void AgentDeviceId::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.AgentDeviceId.id)
}
inline ::std::string* AgentDeviceId::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.AgentDeviceId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgentDeviceId::release_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.AgentDeviceId.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgentDeviceId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.AgentDeviceId.id)
}

// -------------------------------------------------------------------

// QueryResponse

// string request_id = 1;
inline void QueryResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryResponse::request_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.QueryResponse.request_id)
  return request_id_.GetNoArena();
}
inline void QueryResponse::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.QueryResponse.request_id)
}
#if LANG_CXX11
inline void QueryResponse::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.QueryResponse.request_id)
}
#endif
inline void QueryResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.QueryResponse.request_id)
}
inline void QueryResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.QueryResponse.request_id)
}
inline ::std::string* QueryResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.QueryResponse.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.QueryResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.QueryResponse.request_id)
}

// .google.home.graph.v1.QueryResponsePayload payload = 2;
inline bool QueryResponse::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
inline void QueryResponse::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) {
    delete payload_;
  }
  payload_ = NULL;
}
inline const ::google::home::graph::v1::QueryResponsePayload& QueryResponse::_internal_payload() const {
  return *payload_;
}
inline const ::google::home::graph::v1::QueryResponsePayload& QueryResponse::payload() const {
  const ::google::home::graph::v1::QueryResponsePayload* p = payload_;
  // @@protoc_insertion_point(field_get:google.home.graph.v1.QueryResponse.payload)
  return p != NULL ? *p : *reinterpret_cast<const ::google::home::graph::v1::QueryResponsePayload*>(
      &::google::home::graph::v1::_QueryResponsePayload_default_instance_);
}
inline ::google::home::graph::v1::QueryResponsePayload* QueryResponse::release_payload() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.QueryResponse.payload)
  
  ::google::home::graph::v1::QueryResponsePayload* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline ::google::home::graph::v1::QueryResponsePayload* QueryResponse::mutable_payload() {
  
  if (payload_ == NULL) {
    auto* p = CreateMaybeMessage<::google::home::graph::v1::QueryResponsePayload>(GetArenaNoVirtual());
    payload_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.QueryResponse.payload)
  return payload_;
}
inline void QueryResponse::set_allocated_payload(::google::home::graph::v1::QueryResponsePayload* payload) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete payload_;
  }
  if (payload) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      payload = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.QueryResponse.payload)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryResponsePayload

// map<string, .google.protobuf.Struct> devices = 1;
inline int QueryResponsePayload::devices_size() const {
  return devices_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::Struct >&
QueryResponsePayload::devices() const {
  // @@protoc_insertion_point(field_map:google.home.graph.v1.QueryResponsePayload.devices)
  return devices_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::Struct >*
QueryResponsePayload::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_map:google.home.graph.v1.QueryResponsePayload.devices)
  return devices_.MutableMap();
}

// -------------------------------------------------------------------

// SyncRequest

// string request_id = 1;
inline void SyncRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncRequest::request_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.SyncRequest.request_id)
  return request_id_.GetNoArena();
}
inline void SyncRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.SyncRequest.request_id)
}
#if LANG_CXX11
inline void SyncRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.SyncRequest.request_id)
}
#endif
inline void SyncRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.SyncRequest.request_id)
}
inline void SyncRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.SyncRequest.request_id)
}
inline ::std::string* SyncRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.SyncRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.SyncRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.SyncRequest.request_id)
}

// string agent_user_id = 2;
inline void SyncRequest::clear_agent_user_id() {
  agent_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncRequest::agent_user_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.SyncRequest.agent_user_id)
  return agent_user_id_.GetNoArena();
}
inline void SyncRequest::set_agent_user_id(const ::std::string& value) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.SyncRequest.agent_user_id)
}
#if LANG_CXX11
inline void SyncRequest::set_agent_user_id(::std::string&& value) {
  
  agent_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.SyncRequest.agent_user_id)
}
#endif
inline void SyncRequest::set_agent_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.SyncRequest.agent_user_id)
}
inline void SyncRequest::set_agent_user_id(const char* value, size_t size) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.SyncRequest.agent_user_id)
}
inline ::std::string* SyncRequest::mutable_agent_user_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.SyncRequest.agent_user_id)
  return agent_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncRequest::release_agent_user_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.SyncRequest.agent_user_id)
  
  return agent_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncRequest::set_allocated_agent_user_id(::std::string* agent_user_id) {
  if (agent_user_id != NULL) {
    
  } else {
    
  }
  agent_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_user_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.SyncRequest.agent_user_id)
}

// -------------------------------------------------------------------

// SyncResponse

// string request_id = 1;
inline void SyncResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncResponse::request_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.SyncResponse.request_id)
  return request_id_.GetNoArena();
}
inline void SyncResponse::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.SyncResponse.request_id)
}
#if LANG_CXX11
inline void SyncResponse::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.SyncResponse.request_id)
}
#endif
inline void SyncResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.SyncResponse.request_id)
}
inline void SyncResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.SyncResponse.request_id)
}
inline ::std::string* SyncResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.SyncResponse.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.SyncResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.SyncResponse.request_id)
}

// .google.home.graph.v1.SyncResponsePayload payload = 2;
inline bool SyncResponse::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
inline void SyncResponse::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) {
    delete payload_;
  }
  payload_ = NULL;
}
inline const ::google::home::graph::v1::SyncResponsePayload& SyncResponse::_internal_payload() const {
  return *payload_;
}
inline const ::google::home::graph::v1::SyncResponsePayload& SyncResponse::payload() const {
  const ::google::home::graph::v1::SyncResponsePayload* p = payload_;
  // @@protoc_insertion_point(field_get:google.home.graph.v1.SyncResponse.payload)
  return p != NULL ? *p : *reinterpret_cast<const ::google::home::graph::v1::SyncResponsePayload*>(
      &::google::home::graph::v1::_SyncResponsePayload_default_instance_);
}
inline ::google::home::graph::v1::SyncResponsePayload* SyncResponse::release_payload() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.SyncResponse.payload)
  
  ::google::home::graph::v1::SyncResponsePayload* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline ::google::home::graph::v1::SyncResponsePayload* SyncResponse::mutable_payload() {
  
  if (payload_ == NULL) {
    auto* p = CreateMaybeMessage<::google::home::graph::v1::SyncResponsePayload>(GetArenaNoVirtual());
    payload_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.SyncResponse.payload)
  return payload_;
}
inline void SyncResponse::set_allocated_payload(::google::home::graph::v1::SyncResponsePayload* payload) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete payload_;
  }
  if (payload) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      payload = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.SyncResponse.payload)
}

// -------------------------------------------------------------------

// SyncResponsePayload

// string agent_user_id = 1;
inline void SyncResponsePayload::clear_agent_user_id() {
  agent_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncResponsePayload::agent_user_id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.SyncResponsePayload.agent_user_id)
  return agent_user_id_.GetNoArena();
}
inline void SyncResponsePayload::set_agent_user_id(const ::std::string& value) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.SyncResponsePayload.agent_user_id)
}
#if LANG_CXX11
inline void SyncResponsePayload::set_agent_user_id(::std::string&& value) {
  
  agent_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.SyncResponsePayload.agent_user_id)
}
#endif
inline void SyncResponsePayload::set_agent_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.SyncResponsePayload.agent_user_id)
}
inline void SyncResponsePayload::set_agent_user_id(const char* value, size_t size) {
  
  agent_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.SyncResponsePayload.agent_user_id)
}
inline ::std::string* SyncResponsePayload::mutable_agent_user_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.SyncResponsePayload.agent_user_id)
  return agent_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncResponsePayload::release_agent_user_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.SyncResponsePayload.agent_user_id)
  
  return agent_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncResponsePayload::set_allocated_agent_user_id(::std::string* agent_user_id) {
  if (agent_user_id != NULL) {
    
  } else {
    
  }
  agent_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_user_id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.SyncResponsePayload.agent_user_id)
}

// repeated .google.home.graph.v1.Device devices = 2;
inline int SyncResponsePayload::devices_size() const {
  return devices_.size();
}
inline ::google::home::graph::v1::Device* SyncResponsePayload::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.SyncResponsePayload.devices)
  return devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::Device >*
SyncResponsePayload::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:google.home.graph.v1.SyncResponsePayload.devices)
  return &devices_;
}
inline const ::google::home::graph::v1::Device& SyncResponsePayload::devices(int index) const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.SyncResponsePayload.devices)
  return devices_.Get(index);
}
inline ::google::home::graph::v1::Device* SyncResponsePayload::add_devices() {
  // @@protoc_insertion_point(field_add:google.home.graph.v1.SyncResponsePayload.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::home::graph::v1::Device >&
SyncResponsePayload::devices() const {
  // @@protoc_insertion_point(field_list:google.home.graph.v1.SyncResponsePayload.devices)
  return devices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace graph
}  // namespace home
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto
