// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/home/graph/v1/homegraph.proto

#include "google/home/graph/v1/homegraph.pb.h"
#include "google/home/graph/v1/homegraph.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace home {
namespace graph {
namespace v1 {

static const char* HomeGraphApiService_method_names[] = {
  "/google.home.graph.v1.HomeGraphApiService/RequestSyncDevices",
  "/google.home.graph.v1.HomeGraphApiService/ReportStateAndNotification",
  "/google.home.graph.v1.HomeGraphApiService/DeleteAgentUser",
  "/google.home.graph.v1.HomeGraphApiService/Query",
  "/google.home.graph.v1.HomeGraphApiService/Sync",
};

std::unique_ptr< HomeGraphApiService::Stub> HomeGraphApiService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HomeGraphApiService::Stub> stub(new HomeGraphApiService::Stub(channel));
  return stub;
}

HomeGraphApiService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RequestSyncDevices_(HomeGraphApiService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportStateAndNotification_(HomeGraphApiService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAgentUser_(HomeGraphApiService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Query_(HomeGraphApiService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sync_(HomeGraphApiService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HomeGraphApiService::Stub::RequestSyncDevices(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::google::home::graph::v1::RequestSyncDevicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestSyncDevices_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::RequestSyncDevicesResponse>* HomeGraphApiService::Stub::AsyncRequestSyncDevicesRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::home::graph::v1::RequestSyncDevicesResponse>::Create(channel_.get(), cq, rpcmethod_RequestSyncDevices_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::RequestSyncDevicesResponse>* HomeGraphApiService::Stub::PrepareAsyncRequestSyncDevicesRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::home::graph::v1::RequestSyncDevicesResponse>::Create(channel_.get(), cq, rpcmethod_RequestSyncDevices_, context, request, false);
}

::grpc::Status HomeGraphApiService::Stub::ReportStateAndNotification(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::google::home::graph::v1::ReportStateAndNotificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReportStateAndNotification_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::ReportStateAndNotificationResponse>* HomeGraphApiService::Stub::AsyncReportStateAndNotificationRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::home::graph::v1::ReportStateAndNotificationResponse>::Create(channel_.get(), cq, rpcmethod_ReportStateAndNotification_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::ReportStateAndNotificationResponse>* HomeGraphApiService::Stub::PrepareAsyncReportStateAndNotificationRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::home::graph::v1::ReportStateAndNotificationResponse>::Create(channel_.get(), cq, rpcmethod_ReportStateAndNotification_, context, request, false);
}

::grpc::Status HomeGraphApiService::Stub::DeleteAgentUser(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteAgentUser_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HomeGraphApiService::Stub::AsyncDeleteAgentUserRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteAgentUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HomeGraphApiService::Stub::PrepareAsyncDeleteAgentUserRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteAgentUser_, context, request, false);
}

::grpc::Status HomeGraphApiService::Stub::Query(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::google::home::graph::v1::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Query_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::QueryResponse>* HomeGraphApiService::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::home::graph::v1::QueryResponse>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::QueryResponse>* HomeGraphApiService::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::home::graph::v1::QueryResponse>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, false);
}

::grpc::Status HomeGraphApiService::Stub::Sync(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::google::home::graph::v1::SyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Sync_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::SyncResponse>* HomeGraphApiService::Stub::AsyncSyncRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::home::graph::v1::SyncResponse>::Create(channel_.get(), cq, rpcmethod_Sync_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::SyncResponse>* HomeGraphApiService::Stub::PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::home::graph::v1::SyncResponse>::Create(channel_.get(), cq, rpcmethod_Sync_, context, request, false);
}

HomeGraphApiService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HomeGraphApiService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HomeGraphApiService::Service, ::google::home::graph::v1::RequestSyncDevicesRequest, ::google::home::graph::v1::RequestSyncDevicesResponse>(
          std::mem_fn(&HomeGraphApiService::Service::RequestSyncDevices), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HomeGraphApiService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HomeGraphApiService::Service, ::google::home::graph::v1::ReportStateAndNotificationRequest, ::google::home::graph::v1::ReportStateAndNotificationResponse>(
          std::mem_fn(&HomeGraphApiService::Service::ReportStateAndNotification), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HomeGraphApiService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HomeGraphApiService::Service, ::google::home::graph::v1::DeleteAgentUserRequest, ::google::protobuf::Empty>(
          std::mem_fn(&HomeGraphApiService::Service::DeleteAgentUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HomeGraphApiService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HomeGraphApiService::Service, ::google::home::graph::v1::QueryRequest, ::google::home::graph::v1::QueryResponse>(
          std::mem_fn(&HomeGraphApiService::Service::Query), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HomeGraphApiService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HomeGraphApiService::Service, ::google::home::graph::v1::SyncRequest, ::google::home::graph::v1::SyncResponse>(
          std::mem_fn(&HomeGraphApiService::Service::Sync), this)));
}

HomeGraphApiService::Service::~Service() {
}

::grpc::Status HomeGraphApiService::Service::RequestSyncDevices(::grpc::ServerContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest* request, ::google::home::graph::v1::RequestSyncDevicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HomeGraphApiService::Service::ReportStateAndNotification(::grpc::ServerContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest* request, ::google::home::graph::v1::ReportStateAndNotificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HomeGraphApiService::Service::DeleteAgentUser(::grpc::ServerContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HomeGraphApiService::Service::Query(::grpc::ServerContext* context, const ::google::home::graph::v1::QueryRequest* request, ::google::home::graph::v1::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HomeGraphApiService::Service::Sync(::grpc::ServerContext* context, const ::google::home::graph::v1::SyncRequest* request, ::google::home::graph::v1::SyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace home
}  // namespace graph
}  // namespace v1

