// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/home/graph/v1/device.proto

#ifndef PROTOBUF_INCLUDED_google_2fhome_2fgraph_2fv1_2fdevice_2eproto
#define PROTOBUF_INCLUDED_google_2fhome_2fgraph_2fv1_2fdevice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fhome_2fgraph_2fv1_2fdevice_2eproto 

namespace protobuf_google_2fhome_2fgraph_2fv1_2fdevice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fhome_2fgraph_2fv1_2fdevice_2eproto
namespace google {
namespace home {
namespace graph {
namespace v1 {
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class DeviceNames;
class DeviceNamesDefaultTypeInternal;
extern DeviceNamesDefaultTypeInternal _DeviceNames_default_instance_;
}  // namespace v1
}  // namespace graph
}  // namespace home
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::home::graph::v1::Device* Arena::CreateMaybeMessage<::google::home::graph::v1::Device>(Arena*);
template<> ::google::home::graph::v1::DeviceInfo* Arena::CreateMaybeMessage<::google::home::graph::v1::DeviceInfo>(Arena*);
template<> ::google::home::graph::v1::DeviceNames* Arena::CreateMaybeMessage<::google::home::graph::v1::DeviceNames>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace home {
namespace graph {
namespace v1 {

// ===================================================================

class Device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Device* other);
  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(NULL);
  }

  Device* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string traits = 3;
  int traits_size() const;
  void clear_traits();
  static const int kTraitsFieldNumber = 3;
  const ::std::string& traits(int index) const;
  ::std::string* mutable_traits(int index);
  void set_traits(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_traits(int index, ::std::string&& value);
  #endif
  void set_traits(int index, const char* value);
  void set_traits(int index, const char* value, size_t size);
  ::std::string* add_traits();
  void add_traits(const ::std::string& value);
  #if LANG_CXX11
  void add_traits(::std::string&& value);
  #endif
  void add_traits(const char* value);
  void add_traits(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& traits() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_traits();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string room_hint = 6;
  void clear_room_hint();
  static const int kRoomHintFieldNumber = 6;
  const ::std::string& room_hint() const;
  void set_room_hint(const ::std::string& value);
  #if LANG_CXX11
  void set_room_hint(::std::string&& value);
  #endif
  void set_room_hint(const char* value);
  void set_room_hint(const char* value, size_t size);
  ::std::string* mutable_room_hint();
  ::std::string* release_room_hint();
  void set_allocated_room_hint(::std::string* room_hint);

  // string structure_hint = 7;
  void clear_structure_hint();
  static const int kStructureHintFieldNumber = 7;
  const ::std::string& structure_hint() const;
  void set_structure_hint(const ::std::string& value);
  #if LANG_CXX11
  void set_structure_hint(::std::string&& value);
  #endif
  void set_structure_hint(const char* value);
  void set_structure_hint(const char* value, size_t size);
  ::std::string* mutable_structure_hint();
  ::std::string* release_structure_hint();
  void set_allocated_structure_hint(::std::string* structure_hint);

  // string custom_data = 10;
  void clear_custom_data();
  static const int kCustomDataFieldNumber = 10;
  const ::std::string& custom_data() const;
  void set_custom_data(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_data(::std::string&& value);
  #endif
  void set_custom_data(const char* value);
  void set_custom_data(const char* value, size_t size);
  ::std::string* mutable_custom_data();
  ::std::string* release_custom_data();
  void set_allocated_custom_data(::std::string* custom_data);

  // .google.home.graph.v1.DeviceNames name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  private:
  const ::google::home::graph::v1::DeviceNames& _internal_name() const;
  public:
  const ::google::home::graph::v1::DeviceNames& name() const;
  ::google::home::graph::v1::DeviceNames* release_name();
  ::google::home::graph::v1::DeviceNames* mutable_name();
  void set_allocated_name(::google::home::graph::v1::DeviceNames* name);

  // .google.home.graph.v1.DeviceInfo device_info = 8;
  bool has_device_info() const;
  void clear_device_info();
  static const int kDeviceInfoFieldNumber = 8;
  private:
  const ::google::home::graph::v1::DeviceInfo& _internal_device_info() const;
  public:
  const ::google::home::graph::v1::DeviceInfo& device_info() const;
  ::google::home::graph::v1::DeviceInfo* release_device_info();
  ::google::home::graph::v1::DeviceInfo* mutable_device_info();
  void set_allocated_device_info(::google::home::graph::v1::DeviceInfo* device_info);

  // .google.protobuf.Struct attributes = 9;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 9;
  private:
  const ::google::protobuf::Struct& _internal_attributes() const;
  public:
  const ::google::protobuf::Struct& attributes() const;
  ::google::protobuf::Struct* release_attributes();
  ::google::protobuf::Struct* mutable_attributes();
  void set_allocated_attributes(::google::protobuf::Struct* attributes);

  // bool will_report_state = 5;
  void clear_will_report_state();
  static const int kWillReportStateFieldNumber = 5;
  bool will_report_state() const;
  void set_will_report_state(bool value);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> traits_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr room_hint_;
  ::google::protobuf::internal::ArenaStringPtr structure_hint_;
  ::google::protobuf::internal::ArenaStringPtr custom_data_;
  ::google::home::graph::v1::DeviceNames* name_;
  ::google::home::graph::v1::DeviceInfo* device_info_;
  ::google::protobuf::Struct* attributes_;
  bool will_report_state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fdevice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceNames : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.DeviceNames) */ {
 public:
  DeviceNames();
  virtual ~DeviceNames();

  DeviceNames(const DeviceNames& from);

  inline DeviceNames& operator=(const DeviceNames& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceNames(DeviceNames&& from) noexcept
    : DeviceNames() {
    *this = ::std::move(from);
  }

  inline DeviceNames& operator=(DeviceNames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceNames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceNames* internal_default_instance() {
    return reinterpret_cast<const DeviceNames*>(
               &_DeviceNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DeviceNames* other);
  friend void swap(DeviceNames& a, DeviceNames& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceNames* New() const final {
    return CreateMaybeMessage<DeviceNames>(NULL);
  }

  DeviceNames* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceNames>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceNames& from);
  void MergeFrom(const DeviceNames& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceNames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string nicknames = 2;
  int nicknames_size() const;
  void clear_nicknames();
  static const int kNicknamesFieldNumber = 2;
  const ::std::string& nicknames(int index) const;
  ::std::string* mutable_nicknames(int index);
  void set_nicknames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_nicknames(int index, ::std::string&& value);
  #endif
  void set_nicknames(int index, const char* value);
  void set_nicknames(int index, const char* value, size_t size);
  ::std::string* add_nicknames();
  void add_nicknames(const ::std::string& value);
  #if LANG_CXX11
  void add_nicknames(::std::string&& value);
  #endif
  void add_nicknames(const char* value);
  void add_nicknames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& nicknames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nicknames();

  // repeated string default_names = 3;
  int default_names_size() const;
  void clear_default_names();
  static const int kDefaultNamesFieldNumber = 3;
  const ::std::string& default_names(int index) const;
  ::std::string* mutable_default_names(int index);
  void set_default_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_default_names(int index, ::std::string&& value);
  #endif
  void set_default_names(int index, const char* value);
  void set_default_names(int index, const char* value, size_t size);
  ::std::string* add_default_names();
  void add_default_names(const ::std::string& value);
  #if LANG_CXX11
  void add_default_names(::std::string&& value);
  #endif
  void add_default_names(const char* value);
  void add_default_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& default_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_default_names();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.DeviceNames)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nicknames_;
  ::google::protobuf::RepeatedPtrField< ::std::string> default_names_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fdevice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.home.graph.v1.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DeviceInfo* other);
  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(NULL);
  }

  DeviceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string manufacturer = 1;
  void clear_manufacturer();
  static const int kManufacturerFieldNumber = 1;
  const ::std::string& manufacturer() const;
  void set_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacturer(::std::string&& value);
  #endif
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  ::std::string* mutable_manufacturer();
  ::std::string* release_manufacturer();
  void set_allocated_manufacturer(::std::string* manufacturer);

  // string model = 2;
  void clear_model();
  static const int kModelFieldNumber = 2;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // string hw_version = 3;
  void clear_hw_version();
  static const int kHwVersionFieldNumber = 3;
  const ::std::string& hw_version() const;
  void set_hw_version(const ::std::string& value);
  #if LANG_CXX11
  void set_hw_version(::std::string&& value);
  #endif
  void set_hw_version(const char* value);
  void set_hw_version(const char* value, size_t size);
  ::std::string* mutable_hw_version();
  ::std::string* release_hw_version();
  void set_allocated_hw_version(::std::string* hw_version);

  // string sw_version = 4;
  void clear_sw_version();
  static const int kSwVersionFieldNumber = 4;
  const ::std::string& sw_version() const;
  void set_sw_version(const ::std::string& value);
  #if LANG_CXX11
  void set_sw_version(::std::string&& value);
  #endif
  void set_sw_version(const char* value);
  void set_sw_version(const char* value, size_t size);
  ::std::string* mutable_sw_version();
  ::std::string* release_sw_version();
  void set_allocated_sw_version(::std::string* sw_version);

  // @@protoc_insertion_point(class_scope:google.home.graph.v1.DeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr hw_version_;
  ::google::protobuf::internal::ArenaStringPtr sw_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fhome_2fgraph_2fv1_2fdevice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Device

// string id = 1;
inline void Device::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::id() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.Device.id)
  return id_.GetNoArena();
}
inline void Device::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.Device.id)
}
#if LANG_CXX11
inline void Device::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.Device.id)
}
#endif
inline void Device::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.Device.id)
}
inline void Device::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.Device.id)
}
inline ::std::string* Device::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.Device.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_id() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.Device.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.Device.id)
}

// string type = 2;
inline void Device::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::type() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.Device.type)
  return type_.GetNoArena();
}
inline void Device::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.Device.type)
}
#if LANG_CXX11
inline void Device::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.Device.type)
}
#endif
inline void Device::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.Device.type)
}
inline void Device::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.Device.type)
}
inline ::std::string* Device::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.Device.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_type() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.Device.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.Device.type)
}

// repeated string traits = 3;
inline int Device::traits_size() const {
  return traits_.size();
}
inline void Device::clear_traits() {
  traits_.Clear();
}
inline const ::std::string& Device::traits(int index) const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.Device.traits)
  return traits_.Get(index);
}
inline ::std::string* Device::mutable_traits(int index) {
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.Device.traits)
  return traits_.Mutable(index);
}
inline void Device::set_traits(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.home.graph.v1.Device.traits)
  traits_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Device::set_traits(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.home.graph.v1.Device.traits)
  traits_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Device::set_traits(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  traits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.Device.traits)
}
inline void Device::set_traits(int index, const char* value, size_t size) {
  traits_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.Device.traits)
}
inline ::std::string* Device::add_traits() {
  // @@protoc_insertion_point(field_add_mutable:google.home.graph.v1.Device.traits)
  return traits_.Add();
}
inline void Device::add_traits(const ::std::string& value) {
  traits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.home.graph.v1.Device.traits)
}
#if LANG_CXX11
inline void Device::add_traits(::std::string&& value) {
  traits_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.home.graph.v1.Device.traits)
}
#endif
inline void Device::add_traits(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  traits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.home.graph.v1.Device.traits)
}
inline void Device::add_traits(const char* value, size_t size) {
  traits_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.home.graph.v1.Device.traits)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Device::traits() const {
  // @@protoc_insertion_point(field_list:google.home.graph.v1.Device.traits)
  return traits_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Device::mutable_traits() {
  // @@protoc_insertion_point(field_mutable_list:google.home.graph.v1.Device.traits)
  return &traits_;
}

// .google.home.graph.v1.DeviceNames name = 4;
inline bool Device::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline void Device::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
inline const ::google::home::graph::v1::DeviceNames& Device::_internal_name() const {
  return *name_;
}
inline const ::google::home::graph::v1::DeviceNames& Device::name() const {
  const ::google::home::graph::v1::DeviceNames* p = name_;
  // @@protoc_insertion_point(field_get:google.home.graph.v1.Device.name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::home::graph::v1::DeviceNames*>(
      &::google::home::graph::v1::_DeviceNames_default_instance_);
}
inline ::google::home::graph::v1::DeviceNames* Device::release_name() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.Device.name)
  
  ::google::home::graph::v1::DeviceNames* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::google::home::graph::v1::DeviceNames* Device::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::google::home::graph::v1::DeviceNames>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.Device.name)
  return name_;
}
inline void Device::set_allocated_name(::google::home::graph::v1::DeviceNames* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete name_;
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.Device.name)
}

// bool will_report_state = 5;
inline void Device::clear_will_report_state() {
  will_report_state_ = false;
}
inline bool Device::will_report_state() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.Device.will_report_state)
  return will_report_state_;
}
inline void Device::set_will_report_state(bool value) {
  
  will_report_state_ = value;
  // @@protoc_insertion_point(field_set:google.home.graph.v1.Device.will_report_state)
}

// string room_hint = 6;
inline void Device::clear_room_hint() {
  room_hint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::room_hint() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.Device.room_hint)
  return room_hint_.GetNoArena();
}
inline void Device::set_room_hint(const ::std::string& value) {
  
  room_hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.Device.room_hint)
}
#if LANG_CXX11
inline void Device::set_room_hint(::std::string&& value) {
  
  room_hint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.Device.room_hint)
}
#endif
inline void Device::set_room_hint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.Device.room_hint)
}
inline void Device::set_room_hint(const char* value, size_t size) {
  
  room_hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.Device.room_hint)
}
inline ::std::string* Device::mutable_room_hint() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.Device.room_hint)
  return room_hint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_room_hint() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.Device.room_hint)
  
  return room_hint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_room_hint(::std::string* room_hint) {
  if (room_hint != NULL) {
    
  } else {
    
  }
  room_hint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_hint);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.Device.room_hint)
}

// string structure_hint = 7;
inline void Device::clear_structure_hint() {
  structure_hint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::structure_hint() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.Device.structure_hint)
  return structure_hint_.GetNoArena();
}
inline void Device::set_structure_hint(const ::std::string& value) {
  
  structure_hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.Device.structure_hint)
}
#if LANG_CXX11
inline void Device::set_structure_hint(::std::string&& value) {
  
  structure_hint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.Device.structure_hint)
}
#endif
inline void Device::set_structure_hint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  structure_hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.Device.structure_hint)
}
inline void Device::set_structure_hint(const char* value, size_t size) {
  
  structure_hint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.Device.structure_hint)
}
inline ::std::string* Device::mutable_structure_hint() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.Device.structure_hint)
  return structure_hint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_structure_hint() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.Device.structure_hint)
  
  return structure_hint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_structure_hint(::std::string* structure_hint) {
  if (structure_hint != NULL) {
    
  } else {
    
  }
  structure_hint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), structure_hint);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.Device.structure_hint)
}

// .google.home.graph.v1.DeviceInfo device_info = 8;
inline bool Device::has_device_info() const {
  return this != internal_default_instance() && device_info_ != NULL;
}
inline void Device::clear_device_info() {
  if (GetArenaNoVirtual() == NULL && device_info_ != NULL) {
    delete device_info_;
  }
  device_info_ = NULL;
}
inline const ::google::home::graph::v1::DeviceInfo& Device::_internal_device_info() const {
  return *device_info_;
}
inline const ::google::home::graph::v1::DeviceInfo& Device::device_info() const {
  const ::google::home::graph::v1::DeviceInfo* p = device_info_;
  // @@protoc_insertion_point(field_get:google.home.graph.v1.Device.device_info)
  return p != NULL ? *p : *reinterpret_cast<const ::google::home::graph::v1::DeviceInfo*>(
      &::google::home::graph::v1::_DeviceInfo_default_instance_);
}
inline ::google::home::graph::v1::DeviceInfo* Device::release_device_info() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.Device.device_info)
  
  ::google::home::graph::v1::DeviceInfo* temp = device_info_;
  device_info_ = NULL;
  return temp;
}
inline ::google::home::graph::v1::DeviceInfo* Device::mutable_device_info() {
  
  if (device_info_ == NULL) {
    auto* p = CreateMaybeMessage<::google::home::graph::v1::DeviceInfo>(GetArenaNoVirtual());
    device_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.Device.device_info)
  return device_info_;
}
inline void Device::set_allocated_device_info(::google::home::graph::v1::DeviceInfo* device_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_info_;
  }
  if (device_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    
  } else {
    
  }
  device_info_ = device_info;
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.Device.device_info)
}

// .google.protobuf.Struct attributes = 9;
inline bool Device::has_attributes() const {
  return this != internal_default_instance() && attributes_ != NULL;
}
inline const ::google::protobuf::Struct& Device::_internal_attributes() const {
  return *attributes_;
}
inline const ::google::protobuf::Struct& Device::attributes() const {
  const ::google::protobuf::Struct* p = attributes_;
  // @@protoc_insertion_point(field_get:google.home.graph.v1.Device.attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* Device::release_attributes() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.Device.attributes)
  
  ::google::protobuf::Struct* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* Device::mutable_attributes() {
  
  if (attributes_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.Device.attributes)
  return attributes_;
}
inline void Device::set_allocated_attributes(::google::protobuf::Struct* attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(attributes_);
  }
  if (attributes) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(attributes)->GetArena();
    if (message_arena != submessage_arena) {
      attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.Device.attributes)
}

// string custom_data = 10;
inline void Device::clear_custom_data() {
  custom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::custom_data() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.Device.custom_data)
  return custom_data_.GetNoArena();
}
inline void Device::set_custom_data(const ::std::string& value) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.Device.custom_data)
}
#if LANG_CXX11
inline void Device::set_custom_data(::std::string&& value) {
  
  custom_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.Device.custom_data)
}
#endif
inline void Device::set_custom_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.Device.custom_data)
}
inline void Device::set_custom_data(const char* value, size_t size) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.Device.custom_data)
}
inline ::std::string* Device::mutable_custom_data() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.Device.custom_data)
  return custom_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_custom_data() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.Device.custom_data)
  
  return custom_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_custom_data(::std::string* custom_data) {
  if (custom_data != NULL) {
    
  } else {
    
  }
  custom_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_data);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.Device.custom_data)
}

// -------------------------------------------------------------------

// DeviceNames

// string name = 1;
inline void DeviceNames::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceNames::name() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.DeviceNames.name)
  return name_.GetNoArena();
}
inline void DeviceNames::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.DeviceNames.name)
}
#if LANG_CXX11
inline void DeviceNames::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.DeviceNames.name)
}
#endif
inline void DeviceNames::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.DeviceNames.name)
}
inline void DeviceNames::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.DeviceNames.name)
}
inline ::std::string* DeviceNames::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.DeviceNames.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceNames::release_name() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.DeviceNames.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceNames::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.DeviceNames.name)
}

// repeated string nicknames = 2;
inline int DeviceNames::nicknames_size() const {
  return nicknames_.size();
}
inline void DeviceNames::clear_nicknames() {
  nicknames_.Clear();
}
inline const ::std::string& DeviceNames::nicknames(int index) const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.DeviceNames.nicknames)
  return nicknames_.Get(index);
}
inline ::std::string* DeviceNames::mutable_nicknames(int index) {
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.DeviceNames.nicknames)
  return nicknames_.Mutable(index);
}
inline void DeviceNames::set_nicknames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.home.graph.v1.DeviceNames.nicknames)
  nicknames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeviceNames::set_nicknames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.home.graph.v1.DeviceNames.nicknames)
  nicknames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeviceNames::set_nicknames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nicknames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.DeviceNames.nicknames)
}
inline void DeviceNames::set_nicknames(int index, const char* value, size_t size) {
  nicknames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.DeviceNames.nicknames)
}
inline ::std::string* DeviceNames::add_nicknames() {
  // @@protoc_insertion_point(field_add_mutable:google.home.graph.v1.DeviceNames.nicknames)
  return nicknames_.Add();
}
inline void DeviceNames::add_nicknames(const ::std::string& value) {
  nicknames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.home.graph.v1.DeviceNames.nicknames)
}
#if LANG_CXX11
inline void DeviceNames::add_nicknames(::std::string&& value) {
  nicknames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.home.graph.v1.DeviceNames.nicknames)
}
#endif
inline void DeviceNames::add_nicknames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nicknames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.home.graph.v1.DeviceNames.nicknames)
}
inline void DeviceNames::add_nicknames(const char* value, size_t size) {
  nicknames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.home.graph.v1.DeviceNames.nicknames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceNames::nicknames() const {
  // @@protoc_insertion_point(field_list:google.home.graph.v1.DeviceNames.nicknames)
  return nicknames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceNames::mutable_nicknames() {
  // @@protoc_insertion_point(field_mutable_list:google.home.graph.v1.DeviceNames.nicknames)
  return &nicknames_;
}

// repeated string default_names = 3;
inline int DeviceNames::default_names_size() const {
  return default_names_.size();
}
inline void DeviceNames::clear_default_names() {
  default_names_.Clear();
}
inline const ::std::string& DeviceNames::default_names(int index) const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.DeviceNames.default_names)
  return default_names_.Get(index);
}
inline ::std::string* DeviceNames::mutable_default_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.DeviceNames.default_names)
  return default_names_.Mutable(index);
}
inline void DeviceNames::set_default_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.home.graph.v1.DeviceNames.default_names)
  default_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeviceNames::set_default_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.home.graph.v1.DeviceNames.default_names)
  default_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeviceNames::set_default_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  default_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.DeviceNames.default_names)
}
inline void DeviceNames::set_default_names(int index, const char* value, size_t size) {
  default_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.DeviceNames.default_names)
}
inline ::std::string* DeviceNames::add_default_names() {
  // @@protoc_insertion_point(field_add_mutable:google.home.graph.v1.DeviceNames.default_names)
  return default_names_.Add();
}
inline void DeviceNames::add_default_names(const ::std::string& value) {
  default_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.home.graph.v1.DeviceNames.default_names)
}
#if LANG_CXX11
inline void DeviceNames::add_default_names(::std::string&& value) {
  default_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.home.graph.v1.DeviceNames.default_names)
}
#endif
inline void DeviceNames::add_default_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  default_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.home.graph.v1.DeviceNames.default_names)
}
inline void DeviceNames::add_default_names(const char* value, size_t size) {
  default_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.home.graph.v1.DeviceNames.default_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceNames::default_names() const {
  // @@protoc_insertion_point(field_list:google.home.graph.v1.DeviceNames.default_names)
  return default_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceNames::mutable_default_names() {
  // @@protoc_insertion_point(field_mutable_list:google.home.graph.v1.DeviceNames.default_names)
  return &default_names_;
}

// -------------------------------------------------------------------

// DeviceInfo

// string manufacturer = 1;
inline void DeviceInfo::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::manufacturer() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.DeviceInfo.manufacturer)
  return manufacturer_.GetNoArena();
}
inline void DeviceInfo::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.DeviceInfo.manufacturer)
}
#if LANG_CXX11
inline void DeviceInfo::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.DeviceInfo.manufacturer)
}
#endif
inline void DeviceInfo::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.DeviceInfo.manufacturer)
}
inline void DeviceInfo::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.DeviceInfo.manufacturer)
}
inline ::std::string* DeviceInfo::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.DeviceInfo.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_manufacturer() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.DeviceInfo.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.DeviceInfo.manufacturer)
}

// string model = 2;
inline void DeviceInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::model() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.DeviceInfo.model)
  return model_.GetNoArena();
}
inline void DeviceInfo::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.DeviceInfo.model)
}
#if LANG_CXX11
inline void DeviceInfo::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.DeviceInfo.model)
}
#endif
inline void DeviceInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.DeviceInfo.model)
}
inline void DeviceInfo::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.DeviceInfo.model)
}
inline ::std::string* DeviceInfo::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.DeviceInfo.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_model() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.DeviceInfo.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.DeviceInfo.model)
}

// string hw_version = 3;
inline void DeviceInfo::clear_hw_version() {
  hw_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::hw_version() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.DeviceInfo.hw_version)
  return hw_version_.GetNoArena();
}
inline void DeviceInfo::set_hw_version(const ::std::string& value) {
  
  hw_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.DeviceInfo.hw_version)
}
#if LANG_CXX11
inline void DeviceInfo::set_hw_version(::std::string&& value) {
  
  hw_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.DeviceInfo.hw_version)
}
#endif
inline void DeviceInfo::set_hw_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hw_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.DeviceInfo.hw_version)
}
inline void DeviceInfo::set_hw_version(const char* value, size_t size) {
  
  hw_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.DeviceInfo.hw_version)
}
inline ::std::string* DeviceInfo::mutable_hw_version() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.DeviceInfo.hw_version)
  return hw_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_hw_version() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.DeviceInfo.hw_version)
  
  return hw_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_hw_version(::std::string* hw_version) {
  if (hw_version != NULL) {
    
  } else {
    
  }
  hw_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hw_version);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.DeviceInfo.hw_version)
}

// string sw_version = 4;
inline void DeviceInfo::clear_sw_version() {
  sw_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::sw_version() const {
  // @@protoc_insertion_point(field_get:google.home.graph.v1.DeviceInfo.sw_version)
  return sw_version_.GetNoArena();
}
inline void DeviceInfo::set_sw_version(const ::std::string& value) {
  
  sw_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.home.graph.v1.DeviceInfo.sw_version)
}
#if LANG_CXX11
inline void DeviceInfo::set_sw_version(::std::string&& value) {
  
  sw_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.home.graph.v1.DeviceInfo.sw_version)
}
#endif
inline void DeviceInfo::set_sw_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sw_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.home.graph.v1.DeviceInfo.sw_version)
}
inline void DeviceInfo::set_sw_version(const char* value, size_t size) {
  
  sw_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.home.graph.v1.DeviceInfo.sw_version)
}
inline ::std::string* DeviceInfo::mutable_sw_version() {
  
  // @@protoc_insertion_point(field_mutable:google.home.graph.v1.DeviceInfo.sw_version)
  return sw_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_sw_version() {
  // @@protoc_insertion_point(field_release:google.home.graph.v1.DeviceInfo.sw_version)
  
  return sw_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_sw_version(::std::string* sw_version) {
  if (sw_version != NULL) {
    
  } else {
    
  }
  sw_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sw_version);
  // @@protoc_insertion_point(field_set_allocated:google.home.graph.v1.DeviceInfo.sw_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace graph
}  // namespace home
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fhome_2fgraph_2fv1_2fdevice_2eproto
