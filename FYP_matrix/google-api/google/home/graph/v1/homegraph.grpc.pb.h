// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/home/graph/v1/homegraph.proto
// Original file comments:
// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto__INCLUDED
#define GRPC_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto__INCLUDED

#include "google/home/graph/v1/homegraph.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace home {
namespace graph {
namespace v1 {

// Google HomeGraph API. HomeGraph Service provides the support for storing
// and querying first-party and third-party devices, rooms and structures,
// the relationships among them and their state in the home. It stores
// entities and their relationships in the home.
class HomeGraphApiService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.home.graph.v1.HomeGraphApiService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Requests a Sync call from Google to a 3p partner's home control agent for
    // a user.
    //
    //
    // Third-party user's identity is passed in as agent_user_id.
    // (see [RequestSyncDevicesRequest][google.home.graph.v1.RequestSyncDevicesRequest]) and forwarded back to the agent.
    // Agent is identified by the API key or JWT signed by the partner's service
    // account.
    virtual ::grpc::Status RequestSyncDevices(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::google::home::graph::v1::RequestSyncDevicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::RequestSyncDevicesResponse>> AsyncRequestSyncDevices(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::RequestSyncDevicesResponse>>(AsyncRequestSyncDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::RequestSyncDevicesResponse>> PrepareAsyncRequestSyncDevices(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::RequestSyncDevicesResponse>>(PrepareAsyncRequestSyncDevicesRaw(context, request, cq));
    }
    // Reports device state and optionally sends device notifications. Called by
    // an agent when the device state of a third-party changes or the agent wants
    // to send a notification about the device.
    // This method updates a predefined set of States for a device, which all
    // devices have (for example a light will have OnOff, Color, Brightness).
    // A new State may not be created and an INVALID_ARGUMENT code will be thrown
    // if so. It also optionally takes in a list of Notifications that may be
    // created, which are associated to this State change.
    //
    // Third-party user's identity is passed in as agent_user_id.
    // Agent is identified by the JWT signed by the partner's service account.
    virtual ::grpc::Status ReportStateAndNotification(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::google::home::graph::v1::ReportStateAndNotificationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::ReportStateAndNotificationResponse>> AsyncReportStateAndNotification(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::ReportStateAndNotificationResponse>>(AsyncReportStateAndNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::ReportStateAndNotificationResponse>> PrepareAsyncReportStateAndNotification(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::ReportStateAndNotificationResponse>>(PrepareAsyncReportStateAndNotificationRaw(context, request, cq));
    }
    // Unlink an agent user from Google. As result, all data related to this user
    // will be deleted.
    //
    // Here is how the agent user is created in Google:
    // When users open their Google Home App, they can begin linking a 3p
    // partner. User is guided through the OAuth process. After entering the 3p
    // credentials, Google gets the 3p OAuth token, and uses it to make a
    // Sync call to the 3p partner and gets back all the user's data, including
    // agent_user_id and devices.
    // Google then creates the agent user and stores a mapping from the
    // agent_user_id -> Google ID mapping. Google also stores all user's devices
    // under that Google ID.
    // The mapping from agent_user_id -> Google ID is many to many, since one
    // Google user can have multiple 3p accounts, and multiple Google users can
    // map to one agent_user_id (e.g. husband and wife share one Nest account
    // username/password).
    //
    // Third-party user's identity is passed in as agent_user_id
    // Agent is identified by the JWT signed by the partner's service account.
    //
    // Note: Special characters (except "/") in agent_user_id must be URL encoded.
    virtual ::grpc::Status DeleteAgentUser(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteAgentUser(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteAgentUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteAgentUser(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteAgentUserRaw(context, request, cq));
    }
    // Gets the device states for the devices in QueryRequest.
    // Third-party user's identity is passed in as agent_user_id. Agent is
    // identified by the JWT signed by the third-party partner's service account.
    virtual ::grpc::Status Query(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::google::home::graph::v1::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::QueryResponse>> AsyncQuery(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::QueryResponse>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::QueryResponse>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::QueryResponse>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    // Gets all the devices associated with the given third-party user.
    // Third-party user's identity is passed in as agent_user_id. Agent is
    // identified by the JWT signed by the third-party partner's service account.
    virtual ::grpc::Status Sync(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::google::home::graph::v1::SyncResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::SyncResponse>> AsyncSync(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::SyncResponse>>(AsyncSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::SyncResponse>> PrepareAsyncSync(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::SyncResponse>>(PrepareAsyncSyncRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::RequestSyncDevicesResponse>* AsyncRequestSyncDevicesRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::RequestSyncDevicesResponse>* PrepareAsyncRequestSyncDevicesRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::ReportStateAndNotificationResponse>* AsyncReportStateAndNotificationRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::ReportStateAndNotificationResponse>* PrepareAsyncReportStateAndNotificationRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteAgentUserRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteAgentUserRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::QueryResponse>* AsyncQueryRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::QueryResponse>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::SyncResponse>* AsyncSyncRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::home::graph::v1::SyncResponse>* PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RequestSyncDevices(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::google::home::graph::v1::RequestSyncDevicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::RequestSyncDevicesResponse>> AsyncRequestSyncDevices(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::RequestSyncDevicesResponse>>(AsyncRequestSyncDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::RequestSyncDevicesResponse>> PrepareAsyncRequestSyncDevices(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::RequestSyncDevicesResponse>>(PrepareAsyncRequestSyncDevicesRaw(context, request, cq));
    }
    ::grpc::Status ReportStateAndNotification(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::google::home::graph::v1::ReportStateAndNotificationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::ReportStateAndNotificationResponse>> AsyncReportStateAndNotification(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::ReportStateAndNotificationResponse>>(AsyncReportStateAndNotificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::ReportStateAndNotificationResponse>> PrepareAsyncReportStateAndNotification(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::ReportStateAndNotificationResponse>>(PrepareAsyncReportStateAndNotificationRaw(context, request, cq));
    }
    ::grpc::Status DeleteAgentUser(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteAgentUser(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteAgentUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteAgentUser(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteAgentUserRaw(context, request, cq));
    }
    ::grpc::Status Query(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::google::home::graph::v1::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::QueryResponse>> AsyncQuery(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::QueryResponse>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::QueryResponse>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::QueryResponse>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    ::grpc::Status Sync(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::google::home::graph::v1::SyncResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::SyncResponse>> AsyncSync(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::SyncResponse>>(AsyncSyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::SyncResponse>> PrepareAsyncSync(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::SyncResponse>>(PrepareAsyncSyncRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::RequestSyncDevicesResponse>* AsyncRequestSyncDevicesRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::RequestSyncDevicesResponse>* PrepareAsyncRequestSyncDevicesRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::ReportStateAndNotificationResponse>* AsyncReportStateAndNotificationRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::ReportStateAndNotificationResponse>* PrepareAsyncReportStateAndNotificationRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteAgentUserRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteAgentUserRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::QueryResponse>* AsyncQueryRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::QueryResponse>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::QueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::SyncResponse>* AsyncSyncRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::home::graph::v1::SyncResponse>* PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::google::home::graph::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestSyncDevices_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportStateAndNotification_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAgentUser_;
    const ::grpc::internal::RpcMethod rpcmethod_Query_;
    const ::grpc::internal::RpcMethod rpcmethod_Sync_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Requests a Sync call from Google to a 3p partner's home control agent for
    // a user.
    //
    //
    // Third-party user's identity is passed in as agent_user_id.
    // (see [RequestSyncDevicesRequest][google.home.graph.v1.RequestSyncDevicesRequest]) and forwarded back to the agent.
    // Agent is identified by the API key or JWT signed by the partner's service
    // account.
    virtual ::grpc::Status RequestSyncDevices(::grpc::ServerContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest* request, ::google::home::graph::v1::RequestSyncDevicesResponse* response);
    // Reports device state and optionally sends device notifications. Called by
    // an agent when the device state of a third-party changes or the agent wants
    // to send a notification about the device.
    // This method updates a predefined set of States for a device, which all
    // devices have (for example a light will have OnOff, Color, Brightness).
    // A new State may not be created and an INVALID_ARGUMENT code will be thrown
    // if so. It also optionally takes in a list of Notifications that may be
    // created, which are associated to this State change.
    //
    // Third-party user's identity is passed in as agent_user_id.
    // Agent is identified by the JWT signed by the partner's service account.
    virtual ::grpc::Status ReportStateAndNotification(::grpc::ServerContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest* request, ::google::home::graph::v1::ReportStateAndNotificationResponse* response);
    // Unlink an agent user from Google. As result, all data related to this user
    // will be deleted.
    //
    // Here is how the agent user is created in Google:
    // When users open their Google Home App, they can begin linking a 3p
    // partner. User is guided through the OAuth process. After entering the 3p
    // credentials, Google gets the 3p OAuth token, and uses it to make a
    // Sync call to the 3p partner and gets back all the user's data, including
    // agent_user_id and devices.
    // Google then creates the agent user and stores a mapping from the
    // agent_user_id -> Google ID mapping. Google also stores all user's devices
    // under that Google ID.
    // The mapping from agent_user_id -> Google ID is many to many, since one
    // Google user can have multiple 3p accounts, and multiple Google users can
    // map to one agent_user_id (e.g. husband and wife share one Nest account
    // username/password).
    //
    // Third-party user's identity is passed in as agent_user_id
    // Agent is identified by the JWT signed by the partner's service account.
    //
    // Note: Special characters (except "/") in agent_user_id must be URL encoded.
    virtual ::grpc::Status DeleteAgentUser(::grpc::ServerContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest* request, ::google::protobuf::Empty* response);
    // Gets the device states for the devices in QueryRequest.
    // Third-party user's identity is passed in as agent_user_id. Agent is
    // identified by the JWT signed by the third-party partner's service account.
    virtual ::grpc::Status Query(::grpc::ServerContext* context, const ::google::home::graph::v1::QueryRequest* request, ::google::home::graph::v1::QueryResponse* response);
    // Gets all the devices associated with the given third-party user.
    // Third-party user's identity is passed in as agent_user_id. Agent is
    // identified by the JWT signed by the third-party partner's service account.
    virtual ::grpc::Status Sync(::grpc::ServerContext* context, const ::google::home::graph::v1::SyncRequest* request, ::google::home::graph::v1::SyncResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestSyncDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RequestSyncDevices() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestSyncDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSyncDevices(::grpc::ServerContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest* request, ::google::home::graph::v1::RequestSyncDevicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSyncDevices(::grpc::ServerContext* context, ::google::home::graph::v1::RequestSyncDevicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::home::graph::v1::RequestSyncDevicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportStateAndNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReportStateAndNotification() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReportStateAndNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportStateAndNotification(::grpc::ServerContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest* request, ::google::home::graph::v1::ReportStateAndNotificationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportStateAndNotification(::grpc::ServerContext* context, ::google::home::graph::v1::ReportStateAndNotificationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::home::graph::v1::ReportStateAndNotificationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAgentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteAgentUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteAgentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAgentUser(::grpc::ServerContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAgentUser(::grpc::ServerContext* context, ::google::home::graph::v1::DeleteAgentUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Query() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::google::home::graph::v1::QueryRequest* request, ::google::home::graph::v1::QueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::google::home::graph::v1::QueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::home::graph::v1::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Sync() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* context, const ::google::home::graph::v1::SyncRequest* request, ::google::home::graph::v1::SyncResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSync(::grpc::ServerContext* context, ::google::home::graph::v1::SyncRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::home::graph::v1::SyncResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestSyncDevices<WithAsyncMethod_ReportStateAndNotification<WithAsyncMethod_DeleteAgentUser<WithAsyncMethod_Query<WithAsyncMethod_Sync<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_RequestSyncDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RequestSyncDevices() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestSyncDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSyncDevices(::grpc::ServerContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest* request, ::google::home::graph::v1::RequestSyncDevicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportStateAndNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReportStateAndNotification() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReportStateAndNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportStateAndNotification(::grpc::ServerContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest* request, ::google::home::graph::v1::ReportStateAndNotificationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAgentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteAgentUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteAgentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAgentUser(::grpc::ServerContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Query() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::google::home::graph::v1::QueryRequest* request, ::google::home::graph::v1::QueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Sync() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* context, const ::google::home::graph::v1::SyncRequest* request, ::google::home::graph::v1::SyncResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestSyncDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RequestSyncDevices() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestSyncDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestSyncDevices(::grpc::ServerContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest* request, ::google::home::graph::v1::RequestSyncDevicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestSyncDevices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportStateAndNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReportStateAndNotification() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReportStateAndNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportStateAndNotification(::grpc::ServerContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest* request, ::google::home::graph::v1::ReportStateAndNotificationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportStateAndNotification(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAgentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteAgentUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteAgentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAgentUser(::grpc::ServerContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAgentUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Query() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::google::home::graph::v1::QueryRequest* request, ::google::home::graph::v1::QueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Sync() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sync(::grpc::ServerContext* context, const ::google::home::graph::v1::SyncRequest* request, ::google::home::graph::v1::SyncResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestSyncDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RequestSyncDevices() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::home::graph::v1::RequestSyncDevicesRequest, ::google::home::graph::v1::RequestSyncDevicesResponse>(std::bind(&WithStreamedUnaryMethod_RequestSyncDevices<BaseClass>::StreamedRequestSyncDevices, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RequestSyncDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestSyncDevices(::grpc::ServerContext* context, const ::google::home::graph::v1::RequestSyncDevicesRequest* request, ::google::home::graph::v1::RequestSyncDevicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestSyncDevices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::home::graph::v1::RequestSyncDevicesRequest,::google::home::graph::v1::RequestSyncDevicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportStateAndNotification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReportStateAndNotification() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::home::graph::v1::ReportStateAndNotificationRequest, ::google::home::graph::v1::ReportStateAndNotificationResponse>(std::bind(&WithStreamedUnaryMethod_ReportStateAndNotification<BaseClass>::StreamedReportStateAndNotification, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReportStateAndNotification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportStateAndNotification(::grpc::ServerContext* context, const ::google::home::graph::v1::ReportStateAndNotificationRequest* request, ::google::home::graph::v1::ReportStateAndNotificationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportStateAndNotification(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::home::graph::v1::ReportStateAndNotificationRequest,::google::home::graph::v1::ReportStateAndNotificationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAgentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteAgentUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::home::graph::v1::DeleteAgentUserRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteAgentUser<BaseClass>::StreamedDeleteAgentUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteAgentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAgentUser(::grpc::ServerContext* context, const ::google::home::graph::v1::DeleteAgentUserRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAgentUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::home::graph::v1::DeleteAgentUserRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Query() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::home::graph::v1::QueryRequest, ::google::home::graph::v1::QueryResponse>(std::bind(&WithStreamedUnaryMethod_Query<BaseClass>::StreamedQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Query(::grpc::ServerContext* context, const ::google::home::graph::v1::QueryRequest* request, ::google::home::graph::v1::QueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::home::graph::v1::QueryRequest,::google::home::graph::v1::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Sync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Sync() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::home::graph::v1::SyncRequest, ::google::home::graph::v1::SyncResponse>(std::bind(&WithStreamedUnaryMethod_Sync<BaseClass>::StreamedSync, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Sync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sync(::grpc::ServerContext* context, const ::google::home::graph::v1::SyncRequest* request, ::google::home::graph::v1::SyncResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSync(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::home::graph::v1::SyncRequest,::google::home::graph::v1::SyncResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestSyncDevices<WithStreamedUnaryMethod_ReportStateAndNotification<WithStreamedUnaryMethod_DeleteAgentUser<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_Sync<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestSyncDevices<WithStreamedUnaryMethod_ReportStateAndNotification<WithStreamedUnaryMethod_DeleteAgentUser<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_Sync<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace graph
}  // namespace home
}  // namespace google


#endif  // GRPC_google_2fhome_2fgraph_2fv1_2fhomegraph_2eproto__INCLUDED
