// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/dialogflow/v2beta1/knowledge_base.proto

#include "google/cloud/dialogflow/v2beta1/knowledge_base.pb.h"
#include "google/cloud/dialogflow/v2beta1/knowledge_base.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace cloud {
namespace dialogflow {
namespace v2beta1 {

static const char* KnowledgeBases_method_names[] = {
  "/google.cloud.dialogflow.v2beta1.KnowledgeBases/ListKnowledgeBases",
  "/google.cloud.dialogflow.v2beta1.KnowledgeBases/GetKnowledgeBase",
  "/google.cloud.dialogflow.v2beta1.KnowledgeBases/CreateKnowledgeBase",
  "/google.cloud.dialogflow.v2beta1.KnowledgeBases/DeleteKnowledgeBase",
};

std::unique_ptr< KnowledgeBases::Stub> KnowledgeBases::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KnowledgeBases::Stub> stub(new KnowledgeBases::Stub(channel));
  return stub;
}

KnowledgeBases::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListKnowledgeBases_(KnowledgeBases_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKnowledgeBase_(KnowledgeBases_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateKnowledgeBase_(KnowledgeBases_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteKnowledgeBase_(KnowledgeBases_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KnowledgeBases::Stub::ListKnowledgeBases(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesRequest& request, ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListKnowledgeBases_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesResponse>* KnowledgeBases::Stub::AsyncListKnowledgeBasesRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesResponse>::Create(channel_.get(), cq, rpcmethod_ListKnowledgeBases_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesResponse>* KnowledgeBases::Stub::PrepareAsyncListKnowledgeBasesRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesResponse>::Create(channel_.get(), cq, rpcmethod_ListKnowledgeBases_, context, request, false);
}

::grpc::Status KnowledgeBases::Stub::GetKnowledgeBase(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::GetKnowledgeBaseRequest& request, ::google::cloud::dialogflow::v2beta1::KnowledgeBase* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetKnowledgeBase_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::KnowledgeBase>* KnowledgeBases::Stub::AsyncGetKnowledgeBaseRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::GetKnowledgeBaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::dialogflow::v2beta1::KnowledgeBase>::Create(channel_.get(), cq, rpcmethod_GetKnowledgeBase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::KnowledgeBase>* KnowledgeBases::Stub::PrepareAsyncGetKnowledgeBaseRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::GetKnowledgeBaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::dialogflow::v2beta1::KnowledgeBase>::Create(channel_.get(), cq, rpcmethod_GetKnowledgeBase_, context, request, false);
}

::grpc::Status KnowledgeBases::Stub::CreateKnowledgeBase(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::CreateKnowledgeBaseRequest& request, ::google::cloud::dialogflow::v2beta1::KnowledgeBase* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateKnowledgeBase_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::KnowledgeBase>* KnowledgeBases::Stub::AsyncCreateKnowledgeBaseRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::CreateKnowledgeBaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::dialogflow::v2beta1::KnowledgeBase>::Create(channel_.get(), cq, rpcmethod_CreateKnowledgeBase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::dialogflow::v2beta1::KnowledgeBase>* KnowledgeBases::Stub::PrepareAsyncCreateKnowledgeBaseRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::CreateKnowledgeBaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::dialogflow::v2beta1::KnowledgeBase>::Create(channel_.get(), cq, rpcmethod_CreateKnowledgeBase_, context, request, false);
}

::grpc::Status KnowledgeBases::Stub::DeleteKnowledgeBase(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DeleteKnowledgeBaseRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteKnowledgeBase_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* KnowledgeBases::Stub::AsyncDeleteKnowledgeBaseRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DeleteKnowledgeBaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteKnowledgeBase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* KnowledgeBases::Stub::PrepareAsyncDeleteKnowledgeBaseRaw(::grpc::ClientContext* context, const ::google::cloud::dialogflow::v2beta1::DeleteKnowledgeBaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteKnowledgeBase_, context, request, false);
}

KnowledgeBases::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KnowledgeBases_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KnowledgeBases::Service, ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesRequest, ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesResponse>(
          std::mem_fn(&KnowledgeBases::Service::ListKnowledgeBases), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KnowledgeBases_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KnowledgeBases::Service, ::google::cloud::dialogflow::v2beta1::GetKnowledgeBaseRequest, ::google::cloud::dialogflow::v2beta1::KnowledgeBase>(
          std::mem_fn(&KnowledgeBases::Service::GetKnowledgeBase), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KnowledgeBases_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KnowledgeBases::Service, ::google::cloud::dialogflow::v2beta1::CreateKnowledgeBaseRequest, ::google::cloud::dialogflow::v2beta1::KnowledgeBase>(
          std::mem_fn(&KnowledgeBases::Service::CreateKnowledgeBase), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KnowledgeBases_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KnowledgeBases::Service, ::google::cloud::dialogflow::v2beta1::DeleteKnowledgeBaseRequest, ::google::protobuf::Empty>(
          std::mem_fn(&KnowledgeBases::Service::DeleteKnowledgeBase), this)));
}

KnowledgeBases::Service::~Service() {
}

::grpc::Status KnowledgeBases::Service::ListKnowledgeBases(::grpc::ServerContext* context, const ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesRequest* request, ::google::cloud::dialogflow::v2beta1::ListKnowledgeBasesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KnowledgeBases::Service::GetKnowledgeBase(::grpc::ServerContext* context, const ::google::cloud::dialogflow::v2beta1::GetKnowledgeBaseRequest* request, ::google::cloud::dialogflow::v2beta1::KnowledgeBase* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KnowledgeBases::Service::CreateKnowledgeBase(::grpc::ServerContext* context, const ::google::cloud::dialogflow::v2beta1::CreateKnowledgeBaseRequest* request, ::google::cloud::dialogflow::v2beta1::KnowledgeBase* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KnowledgeBases::Service::DeleteKnowledgeBase(::grpc::ServerContext* context, const ::google::cloud::dialogflow::v2beta1::DeleteKnowledgeBaseRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace cloud
}  // namespace dialogflow
}  // namespace v2beta1

