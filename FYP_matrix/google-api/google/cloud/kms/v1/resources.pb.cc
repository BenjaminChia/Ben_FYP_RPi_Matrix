// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/kms/v1/resources.proto

#include "google/cloud/kms/v1/resources.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CryptoKeyVersionTemplate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CryptoKey_LabelsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyOperationAttestation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CryptoKeyVersion;
}  // namespace protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto
namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace google {
namespace cloud {
namespace kms {
namespace v1 {
class KeyRingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyRing>
      _instance;
} _KeyRing_default_instance_;
class CryptoKey_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoKey_LabelsEntry_DoNotUse>
      _instance;
} _CryptoKey_LabelsEntry_DoNotUse_default_instance_;
class CryptoKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoKey>
      _instance;
  const ::google::protobuf::Duration* rotation_period_;
} _CryptoKey_default_instance_;
class CryptoKeyVersionTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoKeyVersionTemplate>
      _instance;
} _CryptoKeyVersionTemplate_default_instance_;
class KeyOperationAttestationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyOperationAttestation>
      _instance;
} _KeyOperationAttestation_default_instance_;
class CryptoKeyVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoKeyVersion>
      _instance;
} _CryptoKeyVersion_default_instance_;
class PublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublicKey>
      _instance;
} _PublicKey_default_instance_;
}  // namespace v1
}  // namespace kms
}  // namespace cloud
}  // namespace google
namespace protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto {
static void InitDefaultsKeyRing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::kms::v1::_KeyRing_default_instance_;
    new (ptr) ::google::cloud::kms::v1::KeyRing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::kms::v1::KeyRing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KeyRing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKeyRing}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsCryptoKey_LabelsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::kms::v1::_CryptoKey_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse();
  }
  ::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CryptoKey_LabelsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCryptoKey_LabelsEntry_DoNotUse}, {}};

static void InitDefaultsCryptoKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::kms::v1::_CryptoKey_default_instance_;
    new (ptr) ::google::cloud::kms::v1::CryptoKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::kms::v1::CryptoKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_CryptoKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsCryptoKey}, {
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersion.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersionTemplate.base,
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKey_LabelsEntry_DoNotUse.base,}};

static void InitDefaultsCryptoKeyVersionTemplate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::kms::v1::_CryptoKeyVersionTemplate_default_instance_;
    new (ptr) ::google::cloud::kms::v1::CryptoKeyVersionTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::kms::v1::CryptoKeyVersionTemplate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CryptoKeyVersionTemplate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCryptoKeyVersionTemplate}, {}};

static void InitDefaultsKeyOperationAttestation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::kms::v1::_KeyOperationAttestation_default_instance_;
    new (ptr) ::google::cloud::kms::v1::KeyOperationAttestation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::kms::v1::KeyOperationAttestation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeyOperationAttestation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeyOperationAttestation}, {}};

static void InitDefaultsCryptoKeyVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_;
    new (ptr) ::google::cloud::kms::v1::CryptoKeyVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::kms::v1::CryptoKeyVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CryptoKeyVersion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCryptoKeyVersion}, {
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_KeyOperationAttestation.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsPublicKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::kms::v1::_PublicKey_default_instance_;
    new (ptr) ::google::cloud::kms::v1::PublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::kms::v1::PublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublicKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublicKey}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_KeyRing.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoKey_LabelsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoKeyVersionTemplate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyOperationAttestation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoKeyVersion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublicKey.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::KeyRing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::KeyRing, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::KeyRing, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, primary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, purpose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, next_rotation_time_),
  offsetof(::google::cloud::kms::v1::CryptoKeyDefaultTypeInternal, rotation_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, version_template_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKey, rotation_schedule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersionTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersionTemplate, protection_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersionTemplate, algorithm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::KeyOperationAttestation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::KeyOperationAttestation, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::KeyOperationAttestation, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, protection_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, attestation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, generate_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, destroy_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::CryptoKeyVersion, destroy_event_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::PublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::PublicKey, pem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::kms::v1::PublicKey, algorithm_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::kms::v1::KeyRing)},
  { 7, 14, sizeof(::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse)},
  { 16, -1, sizeof(::google::cloud::kms::v1::CryptoKey)},
  { 30, -1, sizeof(::google::cloud::kms::v1::CryptoKeyVersionTemplate)},
  { 37, -1, sizeof(::google::cloud::kms::v1::KeyOperationAttestation)},
  { 44, -1, sizeof(::google::cloud::kms::v1::CryptoKeyVersion)},
  { 58, -1, sizeof(::google::cloud::kms::v1::PublicKey)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::kms::v1::_KeyRing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::kms::v1::_CryptoKey_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::kms::v1::_CryptoKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::kms::v1::_CryptoKeyVersionTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::kms::v1::_KeyOperationAttestation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::kms::v1::_PublicKey_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/cloud/kms/v1/resources.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#google/cloud/kms/v1/resources.proto\022\023g"
      "oogle.cloud.kms.v1\032\034google/api/annotatio"
      "ns.proto\032\036google/protobuf/duration.proto"
      "\032\037google/protobuf/timestamp.proto\"H\n\007Key"
      "Ring\022\014\n\004name\030\001 \001(\t\022/\n\013create_time\030\002 \001(\0132"
      "\032.google.protobuf.Timestamp\"\365\004\n\tCryptoKe"
      "y\022\014\n\004name\030\001 \001(\t\0226\n\007primary\030\002 \001(\0132%.googl"
      "e.cloud.kms.v1.CryptoKeyVersion\022@\n\007purpo"
      "se\030\003 \001(\0162/.google.cloud.kms.v1.CryptoKey"
      ".CryptoKeyPurpose\022/\n\013create_time\030\005 \001(\0132\032"
      ".google.protobuf.Timestamp\0226\n\022next_rotat"
      "ion_time\030\007 \001(\0132\032.google.protobuf.Timesta"
      "mp\0224\n\017rotation_period\030\010 \001(\0132\031.google.pro"
      "tobuf.DurationH\000\022G\n\020version_template\030\013 \001"
      "(\0132-.google.cloud.kms.v1.CryptoKeyVersio"
      "nTemplate\022:\n\006labels\030\n \003(\0132*.google.cloud"
      ".kms.v1.CryptoKey.LabelsEntry\032-\n\013LabelsE"
      "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"x\n\020"
      "CryptoKeyPurpose\022\"\n\036CRYPTO_KEY_PURPOSE_U"
      "NSPECIFIED\020\000\022\023\n\017ENCRYPT_DECRYPT\020\001\022\023\n\017ASY"
      "MMETRIC_SIGN\020\005\022\026\n\022ASYMMETRIC_DECRYPT\020\006B\023"
      "\n\021rotation_schedule\"\256\001\n\030CryptoKeyVersion"
      "Template\022>\n\020protection_level\030\001 \001(\0162$.goo"
      "gle.cloud.kms.v1.ProtectionLevel\022R\n\talgo"
      "rithm\030\003 \001(\0162\?.google.cloud.kms.v1.Crypto"
      "KeyVersion.CryptoKeyVersionAlgorithm\"\315\001\n"
      "\027KeyOperationAttestation\022N\n\006format\030\004 \001(\016"
      "2>.google.cloud.kms.v1.KeyOperationAttes"
      "tation.AttestationFormat\022\017\n\007content\030\005 \001("
      "\014\"Q\n\021AttestationFormat\022\"\n\036ATTESTATION_FO"
      "RMAT_UNSPECIFIED\020\000\022\030\n\024CAVIUM_V1_COMPRESS"
      "ED\020\003\"\270\t\n\020CryptoKeyVersion\022\014\n\004name\030\001 \001(\t\022"
      "J\n\005state\030\003 \001(\0162;.google.cloud.kms.v1.Cry"
      "ptoKeyVersion.CryptoKeyVersionState\022>\n\020p"
      "rotection_level\030\007 \001(\0162$.google.cloud.kms"
      ".v1.ProtectionLevel\022R\n\talgorithm\030\n \001(\0162\?"
      ".google.cloud.kms.v1.CryptoKeyVersion.Cr"
      "yptoKeyVersionAlgorithm\022A\n\013attestation\030\010"
      " \001(\0132,.google.cloud.kms.v1.KeyOperationA"
      "ttestation\022/\n\013create_time\030\004 \001(\0132\032.google"
      ".protobuf.Timestamp\0221\n\rgenerate_time\030\013 \001"
      "(\0132\032.google.protobuf.Timestamp\0220\n\014destro"
      "y_time\030\005 \001(\0132\032.google.protobuf.Timestamp"
      "\0226\n\022destroy_event_time\030\006 \001(\0132\032.google.pr"
      "otobuf.Timestamp\"\274\003\n\031CryptoKeyVersionAlg"
      "orithm\022,\n(CRYPTO_KEY_VERSION_ALGORITHM_U"
      "NSPECIFIED\020\000\022\037\n\033GOOGLE_SYMMETRIC_ENCRYPT"
      "ION\020\001\022\034\n\030RSA_SIGN_PSS_2048_SHA256\020\002\022\034\n\030R"
      "SA_SIGN_PSS_3072_SHA256\020\003\022\034\n\030RSA_SIGN_PS"
      "S_4096_SHA256\020\004\022\036\n\032RSA_SIGN_PKCS1_2048_S"
      "HA256\020\005\022\036\n\032RSA_SIGN_PKCS1_3072_SHA256\020\006\022"
      "\036\n\032RSA_SIGN_PKCS1_4096_SHA256\020\007\022 \n\034RSA_D"
      "ECRYPT_OAEP_2048_SHA256\020\010\022 \n\034RSA_DECRYPT"
      "_OAEP_3072_SHA256\020\t\022 \n\034RSA_DECRYPT_OAEP_"
      "4096_SHA256\020\n\022\027\n\023EC_SIGN_P256_SHA256\020\014\022\027"
      "\n\023EC_SIGN_P384_SHA384\020\r\"\232\001\n\025CryptoKeyVer"
      "sionState\022(\n$CRYPTO_KEY_VERSION_STATE_UN"
      "SPECIFIED\020\000\022\026\n\022PENDING_GENERATION\020\005\022\013\n\007E"
      "NABLED\020\001\022\014\n\010DISABLED\020\002\022\r\n\tDESTROYED\020\003\022\025\n"
      "\021DESTROY_SCHEDULED\020\004\"I\n\024CryptoKeyVersion"
      "View\022\'\n#CRYPTO_KEY_VERSION_VIEW_UNSPECIF"
      "IED\020\000\022\010\n\004FULL\020\001\"l\n\tPublicKey\022\013\n\003pem\030\001 \001("
      "\t\022R\n\talgorithm\030\002 \001(\0162\?.google.cloud.kms."
      "v1.CryptoKeyVersion.CryptoKeyVersionAlgo"
      "rithm*J\n\017ProtectionLevel\022 \n\034PROTECTION_L"
      "EVEL_UNSPECIFIED\020\000\022\014\n\010SOFTWARE\020\001\022\007\n\003HSM\020"
      "\002B\225\001\n\027com.google.cloud.kms.v1B\021KmsResour"
      "cesProtoP\001Z6google.golang.org/genproto/g"
      "oogleapis/cloud/kms/v1;kms\370\001\001\252\002\023Google.C"
      "loud.Kms.V1\312\002\023Google\\Cloud\\Kms\\V1b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2801);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/kms/v1/resources.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto
namespace google {
namespace cloud {
namespace kms {
namespace v1 {
const ::google::protobuf::EnumDescriptor* CryptoKey_CryptoKeyPurpose_descriptor() {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_enum_descriptors[0];
}
bool CryptoKey_CryptoKeyPurpose_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CryptoKey_CryptoKeyPurpose CryptoKey::CRYPTO_KEY_PURPOSE_UNSPECIFIED;
const CryptoKey_CryptoKeyPurpose CryptoKey::ENCRYPT_DECRYPT;
const CryptoKey_CryptoKeyPurpose CryptoKey::ASYMMETRIC_SIGN;
const CryptoKey_CryptoKeyPurpose CryptoKey::ASYMMETRIC_DECRYPT;
const CryptoKey_CryptoKeyPurpose CryptoKey::CryptoKeyPurpose_MIN;
const CryptoKey_CryptoKeyPurpose CryptoKey::CryptoKeyPurpose_MAX;
const int CryptoKey::CryptoKeyPurpose_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* KeyOperationAttestation_AttestationFormat_descriptor() {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_enum_descriptors[1];
}
bool KeyOperationAttestation_AttestationFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KeyOperationAttestation_AttestationFormat KeyOperationAttestation::ATTESTATION_FORMAT_UNSPECIFIED;
const KeyOperationAttestation_AttestationFormat KeyOperationAttestation::CAVIUM_V1_COMPRESSED;
const KeyOperationAttestation_AttestationFormat KeyOperationAttestation::AttestationFormat_MIN;
const KeyOperationAttestation_AttestationFormat KeyOperationAttestation::AttestationFormat_MAX;
const int KeyOperationAttestation::AttestationFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CryptoKeyVersion_CryptoKeyVersionAlgorithm_descriptor() {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_enum_descriptors[2];
}
bool CryptoKeyVersion_CryptoKeyVersionAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::GOOGLE_SYMMETRIC_ENCRYPTION;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::RSA_SIGN_PSS_2048_SHA256;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::RSA_SIGN_PSS_3072_SHA256;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::RSA_SIGN_PSS_4096_SHA256;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::RSA_SIGN_PKCS1_2048_SHA256;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::RSA_SIGN_PKCS1_3072_SHA256;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::RSA_SIGN_PKCS1_4096_SHA256;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::RSA_DECRYPT_OAEP_2048_SHA256;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::RSA_DECRYPT_OAEP_3072_SHA256;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::RSA_DECRYPT_OAEP_4096_SHA256;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::EC_SIGN_P256_SHA256;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::EC_SIGN_P384_SHA384;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::CryptoKeyVersionAlgorithm_MIN;
const CryptoKeyVersion_CryptoKeyVersionAlgorithm CryptoKeyVersion::CryptoKeyVersionAlgorithm_MAX;
const int CryptoKeyVersion::CryptoKeyVersionAlgorithm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CryptoKeyVersion_CryptoKeyVersionState_descriptor() {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_enum_descriptors[3];
}
bool CryptoKeyVersion_CryptoKeyVersionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::CRYPTO_KEY_VERSION_STATE_UNSPECIFIED;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::PENDING_GENERATION;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::ENABLED;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::DISABLED;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::DESTROYED;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::DESTROY_SCHEDULED;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::CryptoKeyVersionState_MIN;
const CryptoKeyVersion_CryptoKeyVersionState CryptoKeyVersion::CryptoKeyVersionState_MAX;
const int CryptoKeyVersion::CryptoKeyVersionState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CryptoKeyVersion_CryptoKeyVersionView_descriptor() {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_enum_descriptors[4];
}
bool CryptoKeyVersion_CryptoKeyVersionView_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CryptoKeyVersion_CryptoKeyVersionView CryptoKeyVersion::CRYPTO_KEY_VERSION_VIEW_UNSPECIFIED;
const CryptoKeyVersion_CryptoKeyVersionView CryptoKeyVersion::FULL;
const CryptoKeyVersion_CryptoKeyVersionView CryptoKeyVersion::CryptoKeyVersionView_MIN;
const CryptoKeyVersion_CryptoKeyVersionView CryptoKeyVersion::CryptoKeyVersionView_MAX;
const int CryptoKeyVersion::CryptoKeyVersionView_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ProtectionLevel_descriptor() {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_enum_descriptors[5];
}
bool ProtectionLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void KeyRing::InitAsDefaultInstance() {
  ::google::cloud::kms::v1::_KeyRing_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void KeyRing::unsafe_arena_set_allocated_create_time(
    ::google::protobuf::Timestamp* create_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete create_time_;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.KeyRing.create_time)
}
void KeyRing::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyRing::kNameFieldNumber;
const int KeyRing::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyRing::KeyRing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_KeyRing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.kms.v1.KeyRing)
}
KeyRing::KeyRing(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_KeyRing.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.kms.v1.KeyRing)
}
KeyRing::KeyRing(const KeyRing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.kms.v1.KeyRing)
}

void KeyRing::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = NULL;
}

KeyRing::~KeyRing() {
  // @@protoc_insertion_point(destructor:google.cloud.kms.v1.KeyRing)
  SharedDtor();
}

void KeyRing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
}

void KeyRing::ArenaDtor(void* object) {
  KeyRing* _this = reinterpret_cast< KeyRing* >(object);
  (void)_this;
}
void KeyRing::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void KeyRing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeyRing::descriptor() {
  ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyRing& KeyRing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_KeyRing.base);
  return *internal_default_instance();
}


void KeyRing::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.kms.v1.KeyRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  _internal_metadata_.Clear();
}

bool KeyRing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.kms.v1.KeyRing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.kms.v1.KeyRing.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.kms.v1.KeyRing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.kms.v1.KeyRing)
  return false;
#undef DO_
}

void KeyRing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.kms.v1.KeyRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.KeyRing.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_create_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.kms.v1.KeyRing)
}

::google::protobuf::uint8* KeyRing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.kms.v1.KeyRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.KeyRing.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_create_time(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.kms.v1.KeyRing)
  return target;
}

size_t KeyRing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.kms.v1.KeyRing)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyRing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.kms.v1.KeyRing)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyRing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyRing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.kms.v1.KeyRing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.kms.v1.KeyRing)
    MergeFrom(*source);
  }
}

void KeyRing::MergeFrom(const KeyRing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.kms.v1.KeyRing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
}

void KeyRing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.kms.v1.KeyRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyRing::CopyFrom(const KeyRing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.kms.v1.KeyRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyRing::IsInitialized() const {
  return true;
}

void KeyRing::Swap(KeyRing* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    KeyRing* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void KeyRing::UnsafeArenaSwap(KeyRing* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void KeyRing::InternalSwap(KeyRing* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeyRing::GetMetadata() const {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

CryptoKey_LabelsEntry_DoNotUse::CryptoKey_LabelsEntry_DoNotUse() {}
CryptoKey_LabelsEntry_DoNotUse::CryptoKey_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void CryptoKey_LabelsEntry_DoNotUse::MergeFrom(const CryptoKey_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CryptoKey_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[1];
}
void CryptoKey_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void CryptoKey::InitAsDefaultInstance() {
  ::google::cloud::kms::v1::_CryptoKey_default_instance_._instance.get_mutable()->primary_ = const_cast< ::google::cloud::kms::v1::CryptoKeyVersion*>(
      ::google::cloud::kms::v1::CryptoKeyVersion::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKey_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKey_default_instance_._instance.get_mutable()->next_rotation_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKey_default_instance_.rotation_period_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKey_default_instance_._instance.get_mutable()->version_template_ = const_cast< ::google::cloud::kms::v1::CryptoKeyVersionTemplate*>(
      ::google::cloud::kms::v1::CryptoKeyVersionTemplate::internal_default_instance());
}
void CryptoKey::unsafe_arena_set_allocated_primary(
    ::google::cloud::kms::v1::CryptoKeyVersion* primary) {
  if (GetArenaNoVirtual() == NULL) {
    delete primary_;
  }
  primary_ = primary;
  if (primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKey.primary)
}
void CryptoKey::unsafe_arena_set_allocated_create_time(
    ::google::protobuf::Timestamp* create_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete create_time_;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKey.create_time)
}
void CryptoKey::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void CryptoKey::unsafe_arena_set_allocated_next_rotation_time(
    ::google::protobuf::Timestamp* next_rotation_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete next_rotation_time_;
  }
  next_rotation_time_ = next_rotation_time;
  if (next_rotation_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKey.next_rotation_time)
}
void CryptoKey::clear_next_rotation_time() {
  if (GetArenaNoVirtual() == NULL && next_rotation_time_ != NULL) {
    delete next_rotation_time_;
  }
  next_rotation_time_ = NULL;
}
void CryptoKey::set_allocated_rotation_period(::google::protobuf::Duration* rotation_period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rotation_schedule();
  if (rotation_period) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(rotation_period)->GetArena();
    if (message_arena != submessage_arena) {
      rotation_period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation_period, submessage_arena);
    }
    set_has_rotation_period();
    rotation_schedule_.rotation_period_ = rotation_period;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.kms.v1.CryptoKey.rotation_period)
}
void CryptoKey::clear_rotation_period() {
  if (has_rotation_period()) {
    if (GetArenaNoVirtual() == NULL) {
      delete rotation_schedule_.rotation_period_;
    }
    clear_has_rotation_schedule();
  }
}
void CryptoKey::unsafe_arena_set_allocated_version_template(
    ::google::cloud::kms::v1::CryptoKeyVersionTemplate* version_template) {
  if (GetArenaNoVirtual() == NULL) {
    delete version_template_;
  }
  version_template_ = version_template;
  if (version_template) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKey.version_template)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoKey::kNameFieldNumber;
const int CryptoKey::kPrimaryFieldNumber;
const int CryptoKey::kPurposeFieldNumber;
const int CryptoKey::kCreateTimeFieldNumber;
const int CryptoKey::kNextRotationTimeFieldNumber;
const int CryptoKey::kRotationPeriodFieldNumber;
const int CryptoKey::kVersionTemplateFieldNumber;
const int CryptoKey::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoKey::CryptoKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.kms.v1.CryptoKey)
}
CryptoKey::CryptoKey(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKey.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.kms.v1.CryptoKey)
}
CryptoKey::CryptoKey(const CryptoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_primary()) {
    primary_ = new ::google::cloud::kms::v1::CryptoKeyVersion(*from.primary_);
  } else {
    primary_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_next_rotation_time()) {
    next_rotation_time_ = new ::google::protobuf::Timestamp(*from.next_rotation_time_);
  } else {
    next_rotation_time_ = NULL;
  }
  if (from.has_version_template()) {
    version_template_ = new ::google::cloud::kms::v1::CryptoKeyVersionTemplate(*from.version_template_);
  } else {
    version_template_ = NULL;
  }
  purpose_ = from.purpose_;
  clear_has_rotation_schedule();
  switch (from.rotation_schedule_case()) {
    case kRotationPeriod: {
      mutable_rotation_period()->::google::protobuf::Duration::MergeFrom(from.rotation_period());
      break;
    }
    case ROTATION_SCHEDULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.kms.v1.CryptoKey)
}

void CryptoKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&purpose_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(purpose_));
  clear_has_rotation_schedule();
}

CryptoKey::~CryptoKey() {
  // @@protoc_insertion_point(destructor:google.cloud.kms.v1.CryptoKey)
  SharedDtor();
}

void CryptoKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete primary_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete next_rotation_time_;
  if (this != internal_default_instance()) delete version_template_;
  if (has_rotation_schedule()) {
    clear_rotation_schedule();
  }
}

void CryptoKey::ArenaDtor(void* object) {
  CryptoKey* _this = reinterpret_cast< CryptoKey* >(object);
  (void)_this;
}
void CryptoKey::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CryptoKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CryptoKey::descriptor() {
  ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CryptoKey& CryptoKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKey.base);
  return *internal_default_instance();
}


void CryptoKey::clear_rotation_schedule() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.kms.v1.CryptoKey)
  switch (rotation_schedule_case()) {
    case kRotationPeriod: {
      if (GetArenaNoVirtual() == NULL) {
        delete rotation_schedule_.rotation_period_;
      }
      break;
    }
    case ROTATION_SCHEDULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ROTATION_SCHEDULE_NOT_SET;
}


void CryptoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.kms.v1.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && primary_ != NULL) {
    delete primary_;
  }
  primary_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && next_rotation_time_ != NULL) {
    delete next_rotation_time_;
  }
  next_rotation_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && version_template_ != NULL) {
    delete version_template_;
  }
  version_template_ = NULL;
  purpose_ = 0;
  clear_rotation_schedule();
  _internal_metadata_.Clear();
}

bool CryptoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.kms.v1.CryptoKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.kms.v1.CryptoKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.CryptoKeyVersion primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose purpose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_purpose(static_cast< ::google::cloud::kms::v1::CryptoKey_CryptoKeyPurpose >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp next_rotation_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_next_rotation_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration rotation_period = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          CryptoKey_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CryptoKey_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.kms.v1.CryptoKey.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.kms.v1.CryptoKey.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.CryptoKeyVersionTemplate version_template = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.kms.v1.CryptoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.kms.v1.CryptoKey)
  return false;
#undef DO_
}

void CryptoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.kms.v1.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.CryptoKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion primary = 2;
  if (this->has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_primary(), output);
  }

  // .google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose purpose = 3;
  if (this->purpose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->purpose(), output);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_create_time(), output);
  }

  // .google.protobuf.Timestamp next_rotation_time = 7;
  if (this->has_next_rotation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_next_rotation_time(), output);
  }

  // .google.protobuf.Duration rotation_period = 8;
  if (has_rotation_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_rotation_period(), output);
  }

  // map<string, string> labels = 10;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.kms.v1.CryptoKey.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.kms.v1.CryptoKey.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CryptoKey_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<CryptoKey_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.cloud.kms.v1.CryptoKeyVersionTemplate version_template = 11;
  if (this->has_version_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_version_template(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.kms.v1.CryptoKey)
}

::google::protobuf::uint8* CryptoKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.kms.v1.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.CryptoKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion primary = 2;
  if (this->has_primary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_primary(), deterministic, target);
  }

  // .google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose purpose = 3;
  if (this->purpose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->purpose(), target);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_create_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp next_rotation_time = 7;
  if (this->has_next_rotation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_next_rotation_time(), deterministic, target);
  }

  // .google.protobuf.Duration rotation_period = 8;
  if (has_rotation_period()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_rotation_period(), deterministic, target);
  }

  // map<string, string> labels = 10;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.kms.v1.CryptoKey.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.kms.v1.CryptoKey.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CryptoKey_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<CryptoKey_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.cloud.kms.v1.CryptoKeyVersionTemplate version_template = 11;
  if (this->has_version_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_version_template(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.kms.v1.CryptoKey)
  return target;
}

size_t CryptoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.kms.v1.CryptoKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> labels = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<CryptoKey_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.cloud.kms.v1.CryptoKeyVersion primary = 2;
  if (this->has_primary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *primary_);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp next_rotation_time = 7;
  if (this->has_next_rotation_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *next_rotation_time_);
  }

  // .google.cloud.kms.v1.CryptoKeyVersionTemplate version_template = 11;
  if (this->has_version_template()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_template_);
  }

  // .google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose purpose = 3;
  if (this->purpose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->purpose());
  }

  switch (rotation_schedule_case()) {
    // .google.protobuf.Duration rotation_period = 8;
    case kRotationPeriod: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rotation_schedule_.rotation_period_);
      break;
    }
    case ROTATION_SCHEDULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.kms.v1.CryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptoKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.kms.v1.CryptoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.kms.v1.CryptoKey)
    MergeFrom(*source);
  }
}

void CryptoKey::MergeFrom(const CryptoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.kms.v1.CryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_primary()) {
    mutable_primary()->::google::cloud::kms::v1::CryptoKeyVersion::MergeFrom(from.primary());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_next_rotation_time()) {
    mutable_next_rotation_time()->::google::protobuf::Timestamp::MergeFrom(from.next_rotation_time());
  }
  if (from.has_version_template()) {
    mutable_version_template()->::google::cloud::kms::v1::CryptoKeyVersionTemplate::MergeFrom(from.version_template());
  }
  if (from.purpose() != 0) {
    set_purpose(from.purpose());
  }
  switch (from.rotation_schedule_case()) {
    case kRotationPeriod: {
      mutable_rotation_period()->::google::protobuf::Duration::MergeFrom(from.rotation_period());
      break;
    }
    case ROTATION_SCHEDULE_NOT_SET: {
      break;
    }
  }
}

void CryptoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.kms.v1.CryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoKey::CopyFrom(const CryptoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.kms.v1.CryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoKey::IsInitialized() const {
  return true;
}

void CryptoKey::Swap(CryptoKey* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CryptoKey* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CryptoKey::UnsafeArenaSwap(CryptoKey* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CryptoKey::InternalSwap(CryptoKey* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(primary_, other->primary_);
  swap(create_time_, other->create_time_);
  swap(next_rotation_time_, other->next_rotation_time_);
  swap(version_template_, other->version_template_);
  swap(purpose_, other->purpose_);
  swap(rotation_schedule_, other->rotation_schedule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CryptoKey::GetMetadata() const {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CryptoKeyVersionTemplate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoKeyVersionTemplate::kProtectionLevelFieldNumber;
const int CryptoKeyVersionTemplate::kAlgorithmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoKeyVersionTemplate::CryptoKeyVersionTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersionTemplate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.kms.v1.CryptoKeyVersionTemplate)
}
CryptoKeyVersionTemplate::CryptoKeyVersionTemplate(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersionTemplate.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.kms.v1.CryptoKeyVersionTemplate)
}
CryptoKeyVersionTemplate::CryptoKeyVersionTemplate(const CryptoKeyVersionTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&protection_level_, &from.protection_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&protection_level_)) + sizeof(algorithm_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.kms.v1.CryptoKeyVersionTemplate)
}

void CryptoKeyVersionTemplate::SharedCtor() {
  ::memset(&protection_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algorithm_) -
      reinterpret_cast<char*>(&protection_level_)) + sizeof(algorithm_));
}

CryptoKeyVersionTemplate::~CryptoKeyVersionTemplate() {
  // @@protoc_insertion_point(destructor:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  SharedDtor();
}

void CryptoKeyVersionTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void CryptoKeyVersionTemplate::ArenaDtor(void* object) {
  CryptoKeyVersionTemplate* _this = reinterpret_cast< CryptoKeyVersionTemplate* >(object);
  (void)_this;
}
void CryptoKeyVersionTemplate::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CryptoKeyVersionTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CryptoKeyVersionTemplate::descriptor() {
  ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CryptoKeyVersionTemplate& CryptoKeyVersionTemplate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersionTemplate.base);
  return *internal_default_instance();
}


void CryptoKeyVersionTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&protection_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algorithm_) -
      reinterpret_cast<char*>(&protection_level_)) + sizeof(algorithm_));
  _internal_metadata_.Clear();
}

bool CryptoKeyVersionTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.kms.v1.ProtectionLevel protection_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protection_level(static_cast< ::google::cloud::kms::v1::ProtectionLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_algorithm(static_cast< ::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  return false;
#undef DO_
}

void CryptoKeyVersionTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.kms.v1.ProtectionLevel protection_level = 1;
  if (this->protection_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protection_level(), output);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 3;
  if (this->algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->algorithm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.kms.v1.CryptoKeyVersionTemplate)
}

::google::protobuf::uint8* CryptoKeyVersionTemplate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.kms.v1.ProtectionLevel protection_level = 1;
  if (this->protection_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protection_level(), target);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 3;
  if (this->algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->algorithm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  return target;
}

size_t CryptoKeyVersionTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.kms.v1.ProtectionLevel protection_level = 1;
  if (this->protection_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protection_level());
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 3;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptoKeyVersionTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoKeyVersionTemplate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptoKeyVersionTemplate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.kms.v1.CryptoKeyVersionTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.kms.v1.CryptoKeyVersionTemplate)
    MergeFrom(*source);
  }
}

void CryptoKeyVersionTemplate::MergeFrom(const CryptoKeyVersionTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protection_level() != 0) {
    set_protection_level(from.protection_level());
  }
  if (from.algorithm() != 0) {
    set_algorithm(from.algorithm());
  }
}

void CryptoKeyVersionTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoKeyVersionTemplate::CopyFrom(const CryptoKeyVersionTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.kms.v1.CryptoKeyVersionTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoKeyVersionTemplate::IsInitialized() const {
  return true;
}

void CryptoKeyVersionTemplate::Swap(CryptoKeyVersionTemplate* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CryptoKeyVersionTemplate* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CryptoKeyVersionTemplate::UnsafeArenaSwap(CryptoKeyVersionTemplate* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CryptoKeyVersionTemplate::InternalSwap(CryptoKeyVersionTemplate* other) {
  using std::swap;
  swap(protection_level_, other->protection_level_);
  swap(algorithm_, other->algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CryptoKeyVersionTemplate::GetMetadata() const {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyOperationAttestation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyOperationAttestation::kFormatFieldNumber;
const int KeyOperationAttestation::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyOperationAttestation::KeyOperationAttestation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_KeyOperationAttestation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.kms.v1.KeyOperationAttestation)
}
KeyOperationAttestation::KeyOperationAttestation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_KeyOperationAttestation.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.kms.v1.KeyOperationAttestation)
}
KeyOperationAttestation::KeyOperationAttestation(const KeyOperationAttestation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content(),
      GetArenaNoVirtual());
  }
  format_ = from.format_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.kms.v1.KeyOperationAttestation)
}

void KeyOperationAttestation::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_ = 0;
}

KeyOperationAttestation::~KeyOperationAttestation() {
  // @@protoc_insertion_point(destructor:google.cloud.kms.v1.KeyOperationAttestation)
  SharedDtor();
}

void KeyOperationAttestation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyOperationAttestation::ArenaDtor(void* object) {
  KeyOperationAttestation* _this = reinterpret_cast< KeyOperationAttestation* >(object);
  (void)_this;
}
void KeyOperationAttestation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void KeyOperationAttestation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeyOperationAttestation::descriptor() {
  ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyOperationAttestation& KeyOperationAttestation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_KeyOperationAttestation.base);
  return *internal_default_instance();
}


void KeyOperationAttestation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.kms.v1.KeyOperationAttestation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  format_ = 0;
  _internal_metadata_.Clear();
}

bool KeyOperationAttestation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.kms.v1.KeyOperationAttestation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.kms.v1.KeyOperationAttestation.AttestationFormat format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::google::cloud::kms::v1::KeyOperationAttestation_AttestationFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.kms.v1.KeyOperationAttestation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.kms.v1.KeyOperationAttestation)
  return false;
#undef DO_
}

void KeyOperationAttestation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.kms.v1.KeyOperationAttestation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.kms.v1.KeyOperationAttestation.AttestationFormat format = 4;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->format(), output);
  }

  // bytes content = 5;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.kms.v1.KeyOperationAttestation)
}

::google::protobuf::uint8* KeyOperationAttestation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.kms.v1.KeyOperationAttestation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.kms.v1.KeyOperationAttestation.AttestationFormat format = 4;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->format(), target);
  }

  // bytes content = 5;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.kms.v1.KeyOperationAttestation)
  return target;
}

size_t KeyOperationAttestation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.kms.v1.KeyOperationAttestation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // .google.cloud.kms.v1.KeyOperationAttestation.AttestationFormat format = 4;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyOperationAttestation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.kms.v1.KeyOperationAttestation)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyOperationAttestation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyOperationAttestation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.kms.v1.KeyOperationAttestation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.kms.v1.KeyOperationAttestation)
    MergeFrom(*source);
  }
}

void KeyOperationAttestation::MergeFrom(const KeyOperationAttestation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.kms.v1.KeyOperationAttestation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    set_content(from.content());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
}

void KeyOperationAttestation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.kms.v1.KeyOperationAttestation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyOperationAttestation::CopyFrom(const KeyOperationAttestation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.kms.v1.KeyOperationAttestation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyOperationAttestation::IsInitialized() const {
  return true;
}

void KeyOperationAttestation::Swap(KeyOperationAttestation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    KeyOperationAttestation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void KeyOperationAttestation::UnsafeArenaSwap(KeyOperationAttestation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void KeyOperationAttestation::InternalSwap(KeyOperationAttestation* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(format_, other->format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeyOperationAttestation::GetMetadata() const {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CryptoKeyVersion::InitAsDefaultInstance() {
  ::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_._instance.get_mutable()->attestation_ = const_cast< ::google::cloud::kms::v1::KeyOperationAttestation*>(
      ::google::cloud::kms::v1::KeyOperationAttestation::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_._instance.get_mutable()->generate_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_._instance.get_mutable()->destroy_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::kms::v1::_CryptoKeyVersion_default_instance_._instance.get_mutable()->destroy_event_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void CryptoKeyVersion::unsafe_arena_set_allocated_attestation(
    ::google::cloud::kms::v1::KeyOperationAttestation* attestation) {
  if (GetArenaNoVirtual() == NULL) {
    delete attestation_;
  }
  attestation_ = attestation;
  if (attestation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.attestation)
}
void CryptoKeyVersion::unsafe_arena_set_allocated_create_time(
    ::google::protobuf::Timestamp* create_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete create_time_;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.create_time)
}
void CryptoKeyVersion::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void CryptoKeyVersion::unsafe_arena_set_allocated_generate_time(
    ::google::protobuf::Timestamp* generate_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete generate_time_;
  }
  generate_time_ = generate_time;
  if (generate_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.generate_time)
}
void CryptoKeyVersion::clear_generate_time() {
  if (GetArenaNoVirtual() == NULL && generate_time_ != NULL) {
    delete generate_time_;
  }
  generate_time_ = NULL;
}
void CryptoKeyVersion::unsafe_arena_set_allocated_destroy_time(
    ::google::protobuf::Timestamp* destroy_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete destroy_time_;
  }
  destroy_time_ = destroy_time;
  if (destroy_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.destroy_time)
}
void CryptoKeyVersion::clear_destroy_time() {
  if (GetArenaNoVirtual() == NULL && destroy_time_ != NULL) {
    delete destroy_time_;
  }
  destroy_time_ = NULL;
}
void CryptoKeyVersion::unsafe_arena_set_allocated_destroy_event_time(
    ::google::protobuf::Timestamp* destroy_event_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete destroy_event_time_;
  }
  destroy_event_time_ = destroy_event_time;
  if (destroy_event_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.kms.v1.CryptoKeyVersion.destroy_event_time)
}
void CryptoKeyVersion::clear_destroy_event_time() {
  if (GetArenaNoVirtual() == NULL && destroy_event_time_ != NULL) {
    delete destroy_event_time_;
  }
  destroy_event_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoKeyVersion::kNameFieldNumber;
const int CryptoKeyVersion::kStateFieldNumber;
const int CryptoKeyVersion::kProtectionLevelFieldNumber;
const int CryptoKeyVersion::kAlgorithmFieldNumber;
const int CryptoKeyVersion::kAttestationFieldNumber;
const int CryptoKeyVersion::kCreateTimeFieldNumber;
const int CryptoKeyVersion::kGenerateTimeFieldNumber;
const int CryptoKeyVersion::kDestroyTimeFieldNumber;
const int CryptoKeyVersion::kDestroyEventTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoKeyVersion::CryptoKeyVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.kms.v1.CryptoKeyVersion)
}
CryptoKeyVersion::CryptoKeyVersion(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersion.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.kms.v1.CryptoKeyVersion)
}
CryptoKeyVersion::CryptoKeyVersion(const CryptoKeyVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_destroy_time()) {
    destroy_time_ = new ::google::protobuf::Timestamp(*from.destroy_time_);
  } else {
    destroy_time_ = NULL;
  }
  if (from.has_destroy_event_time()) {
    destroy_event_time_ = new ::google::protobuf::Timestamp(*from.destroy_event_time_);
  } else {
    destroy_event_time_ = NULL;
  }
  if (from.has_attestation()) {
    attestation_ = new ::google::cloud::kms::v1::KeyOperationAttestation(*from.attestation_);
  } else {
    attestation_ = NULL;
  }
  if (from.has_generate_time()) {
    generate_time_ = new ::google::protobuf::Timestamp(*from.generate_time_);
  } else {
    generate_time_ = NULL;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&state_)) + sizeof(algorithm_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.kms.v1.CryptoKeyVersion)
}

void CryptoKeyVersion::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algorithm_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(algorithm_));
}

CryptoKeyVersion::~CryptoKeyVersion() {
  // @@protoc_insertion_point(destructor:google.cloud.kms.v1.CryptoKeyVersion)
  SharedDtor();
}

void CryptoKeyVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete destroy_time_;
  if (this != internal_default_instance()) delete destroy_event_time_;
  if (this != internal_default_instance()) delete attestation_;
  if (this != internal_default_instance()) delete generate_time_;
}

void CryptoKeyVersion::ArenaDtor(void* object) {
  CryptoKeyVersion* _this = reinterpret_cast< CryptoKeyVersion* >(object);
  (void)_this;
}
void CryptoKeyVersion::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CryptoKeyVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CryptoKeyVersion::descriptor() {
  ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CryptoKeyVersion& CryptoKeyVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_CryptoKeyVersion.base);
  return *internal_default_instance();
}


void CryptoKeyVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.kms.v1.CryptoKeyVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && destroy_time_ != NULL) {
    delete destroy_time_;
  }
  destroy_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && destroy_event_time_ != NULL) {
    delete destroy_event_time_;
  }
  destroy_event_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && attestation_ != NULL) {
    delete attestation_;
  }
  attestation_ = NULL;
  if (GetArenaNoVirtual() == NULL && generate_time_ != NULL) {
    delete generate_time_;
  }
  generate_time_ = NULL;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algorithm_) -
      reinterpret_cast<char*>(&state_)) + sizeof(algorithm_));
  _internal_metadata_.Clear();
}

bool CryptoKeyVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.kms.v1.CryptoKeyVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.kms.v1.CryptoKeyVersion.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp destroy_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destroy_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp destroy_event_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destroy_event_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.ProtectionLevel protection_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protection_level(static_cast< ::google::cloud::kms::v1::ProtectionLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.KeyOperationAttestation attestation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attestation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_algorithm(static_cast< ::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp generate_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_generate_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.kms.v1.CryptoKeyVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.kms.v1.CryptoKeyVersion)
  return false;
#undef DO_
}

void CryptoKeyVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.kms.v1.CryptoKeyVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.CryptoKeyVersion.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_create_time(), output);
  }

  // .google.protobuf.Timestamp destroy_time = 5;
  if (this->has_destroy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_destroy_time(), output);
  }

  // .google.protobuf.Timestamp destroy_event_time = 6;
  if (this->has_destroy_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_destroy_event_time(), output);
  }

  // .google.cloud.kms.v1.ProtectionLevel protection_level = 7;
  if (this->protection_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->protection_level(), output);
  }

  // .google.cloud.kms.v1.KeyOperationAttestation attestation = 8;
  if (this->has_attestation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_attestation(), output);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 10;
  if (this->algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->algorithm(), output);
  }

  // .google.protobuf.Timestamp generate_time = 11;
  if (this->has_generate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_generate_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.kms.v1.CryptoKeyVersion)
}

::google::protobuf::uint8* CryptoKeyVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.kms.v1.CryptoKeyVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.CryptoKeyVersion.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_create_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp destroy_time = 5;
  if (this->has_destroy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_destroy_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp destroy_event_time = 6;
  if (this->has_destroy_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_destroy_event_time(), deterministic, target);
  }

  // .google.cloud.kms.v1.ProtectionLevel protection_level = 7;
  if (this->protection_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->protection_level(), target);
  }

  // .google.cloud.kms.v1.KeyOperationAttestation attestation = 8;
  if (this->has_attestation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_attestation(), deterministic, target);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 10;
  if (this->algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->algorithm(), target);
  }

  // .google.protobuf.Timestamp generate_time = 11;
  if (this->has_generate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_generate_time(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.kms.v1.CryptoKeyVersion)
  return target;
}

size_t CryptoKeyVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.kms.v1.CryptoKeyVersion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp destroy_time = 5;
  if (this->has_destroy_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *destroy_time_);
  }

  // .google.protobuf.Timestamp destroy_event_time = 6;
  if (this->has_destroy_event_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *destroy_event_time_);
  }

  // .google.cloud.kms.v1.KeyOperationAttestation attestation = 8;
  if (this->has_attestation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attestation_);
  }

  // .google.protobuf.Timestamp generate_time = 11;
  if (this->has_generate_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *generate_time_);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // .google.cloud.kms.v1.ProtectionLevel protection_level = 7;
  if (this->protection_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protection_level());
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 10;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptoKeyVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.kms.v1.CryptoKeyVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoKeyVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptoKeyVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.kms.v1.CryptoKeyVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.kms.v1.CryptoKeyVersion)
    MergeFrom(*source);
  }
}

void CryptoKeyVersion::MergeFrom(const CryptoKeyVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.kms.v1.CryptoKeyVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_destroy_time()) {
    mutable_destroy_time()->::google::protobuf::Timestamp::MergeFrom(from.destroy_time());
  }
  if (from.has_destroy_event_time()) {
    mutable_destroy_event_time()->::google::protobuf::Timestamp::MergeFrom(from.destroy_event_time());
  }
  if (from.has_attestation()) {
    mutable_attestation()->::google::cloud::kms::v1::KeyOperationAttestation::MergeFrom(from.attestation());
  }
  if (from.has_generate_time()) {
    mutable_generate_time()->::google::protobuf::Timestamp::MergeFrom(from.generate_time());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.protection_level() != 0) {
    set_protection_level(from.protection_level());
  }
  if (from.algorithm() != 0) {
    set_algorithm(from.algorithm());
  }
}

void CryptoKeyVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.kms.v1.CryptoKeyVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoKeyVersion::CopyFrom(const CryptoKeyVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.kms.v1.CryptoKeyVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoKeyVersion::IsInitialized() const {
  return true;
}

void CryptoKeyVersion::Swap(CryptoKeyVersion* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CryptoKeyVersion* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CryptoKeyVersion::UnsafeArenaSwap(CryptoKeyVersion* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CryptoKeyVersion::InternalSwap(CryptoKeyVersion* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(destroy_time_, other->destroy_time_);
  swap(destroy_event_time_, other->destroy_event_time_);
  swap(attestation_, other->attestation_);
  swap(generate_time_, other->generate_time_);
  swap(state_, other->state_);
  swap(protection_level_, other->protection_level_);
  swap(algorithm_, other->algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CryptoKeyVersion::GetMetadata() const {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublicKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicKey::kPemFieldNumber;
const int PublicKey::kAlgorithmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicKey::PublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_PublicKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.kms.v1.PublicKey)
}
PublicKey::PublicKey(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_PublicKey.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.kms.v1.PublicKey)
}
PublicKey::PublicKey(const PublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pem().size() > 0) {
    pem_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pem(),
      GetArenaNoVirtual());
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.kms.v1.PublicKey)
}

void PublicKey::SharedCtor() {
  pem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

PublicKey::~PublicKey() {
  // @@protoc_insertion_point(destructor:google.cloud.kms.v1.PublicKey)
  SharedDtor();
}

void PublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  pem_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublicKey::ArenaDtor(void* object) {
  PublicKey* _this = reinterpret_cast< PublicKey* >(object);
  (void)_this;
}
void PublicKey::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublicKey::descriptor() {
  ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublicKey& PublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::scc_info_PublicKey.base);
  return *internal_default_instance();
}


void PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.kms.v1.PublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pem_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

bool PublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.kms.v1.PublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pem = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pem()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pem().data(), static_cast<int>(this->pem().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.kms.v1.PublicKey.pem"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_algorithm(static_cast< ::google::cloud::kms::v1::CryptoKeyVersion_CryptoKeyVersionAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.kms.v1.PublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.kms.v1.PublicKey)
  return false;
#undef DO_
}

void PublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.kms.v1.PublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pem = 1;
  if (this->pem().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pem().data(), static_cast<int>(this->pem().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.PublicKey.pem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pem(), output);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->algorithm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.kms.v1.PublicKey)
}

::google::protobuf::uint8* PublicKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.kms.v1.PublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pem = 1;
  if (this->pem().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pem().data(), static_cast<int>(this->pem().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.kms.v1.PublicKey.pem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pem(), target);
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->algorithm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.kms.v1.PublicKey)
  return target;
}

size_t PublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.kms.v1.PublicKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pem = 1;
  if (this->pem().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pem());
  }

  // .google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.kms.v1.PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.kms.v1.PublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.kms.v1.PublicKey)
    MergeFrom(*source);
  }
}

void PublicKey::MergeFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.kms.v1.PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pem().size() > 0) {
    set_pem(from.pem());
  }
  if (from.algorithm() != 0) {
    set_algorithm(from.algorithm());
  }
}

void PublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.kms.v1.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicKey::CopyFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.kms.v1.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKey::IsInitialized() const {
  return true;
}

void PublicKey::Swap(PublicKey* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PublicKey* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PublicKey::UnsafeArenaSwap(PublicKey* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PublicKey::InternalSwap(PublicKey* other) {
  using std::swap;
  pem_.Swap(&other->pem_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_, other->algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublicKey::GetMetadata() const {
  protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fkms_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace kms
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::kms::v1::KeyRing* Arena::CreateMaybeMessage< ::google::cloud::kms::v1::KeyRing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::kms::v1::KeyRing >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::kms::v1::CryptoKey_LabelsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::kms::v1::CryptoKey* Arena::CreateMaybeMessage< ::google::cloud::kms::v1::CryptoKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::kms::v1::CryptoKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::kms::v1::CryptoKeyVersionTemplate* Arena::CreateMaybeMessage< ::google::cloud::kms::v1::CryptoKeyVersionTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::kms::v1::CryptoKeyVersionTemplate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::kms::v1::KeyOperationAttestation* Arena::CreateMaybeMessage< ::google::cloud::kms::v1::KeyOperationAttestation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::kms::v1::KeyOperationAttestation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::kms::v1::CryptoKeyVersion* Arena::CreateMaybeMessage< ::google::cloud::kms::v1::CryptoKeyVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::kms::v1::CryptoKeyVersion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::kms::v1::PublicKey* Arena::CreateMaybeMessage< ::google::cloud::kms::v1::PublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::kms::v1::PublicKey >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
