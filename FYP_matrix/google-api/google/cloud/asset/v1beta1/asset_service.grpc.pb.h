// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/asset/v1beta1/asset_service.proto
// Original file comments:
// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#ifndef GRPC_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto__INCLUDED

#include "google/cloud/asset/v1beta1/asset_service.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace cloud {
namespace asset {
namespace v1beta1 {

// Asset service definition.
class AssetService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.asset.v1beta1.AssetService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Exports assets with time and resource types to a given Google Cloud Storage
    // location. The output format is newline-delimited JSON.
    // This API implements the [google.longrunning.Operation][google.longrunning.Operation] API allowing users
    // to keep track of the export.
    virtual ::grpc::Status ExportAssets(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncExportAssets(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncExportAssetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncExportAssets(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncExportAssetsRaw(context, request, cq));
    }
    // Batch gets assets update history that overlaps a time window.
    // For RESOURCE content, this API outputs history with asset in both
    // non-delete or deleted status.
    // For IAM_POLICY content, this API only outputs history when asset and its
    // attached IAM POLICY both exist. So there may be gaps in the output history.
    virtual ::grpc::Status BatchGetAssetsHistory(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>> AsyncBatchGetAssetsHistory(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>>(AsyncBatchGetAssetsHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>> PrepareAsyncBatchGetAssetsHistory(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>>(PrepareAsyncBatchGetAssetsHistoryRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncExportAssetsRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncExportAssetsRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>* AsyncBatchGetAssetsHistoryRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>* PrepareAsyncBatchGetAssetsHistoryRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ExportAssets(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncExportAssets(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncExportAssetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncExportAssets(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncExportAssetsRaw(context, request, cq));
    }
    ::grpc::Status BatchGetAssetsHistory(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>> AsyncBatchGetAssetsHistory(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>>(AsyncBatchGetAssetsHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>> PrepareAsyncBatchGetAssetsHistory(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>>(PrepareAsyncBatchGetAssetsHistoryRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncExportAssetsRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncExportAssetsRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>* AsyncBatchGetAssetsHistoryRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>* PrepareAsyncBatchGetAssetsHistoryRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ExportAssets_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchGetAssetsHistory_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Exports assets with time and resource types to a given Google Cloud Storage
    // location. The output format is newline-delimited JSON.
    // This API implements the [google.longrunning.Operation][google.longrunning.Operation] API allowing users
    // to keep track of the export.
    virtual ::grpc::Status ExportAssets(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest* request, ::google::longrunning::Operation* response);
    // Batch gets assets update history that overlaps a time window.
    // For RESOURCE content, this API outputs history with asset in both
    // non-delete or deleted status.
    // For IAM_POLICY content, this API only outputs history when asset and its
    // attached IAM POLICY both exist. So there may be gaps in the output history.
    virtual ::grpc::Status BatchGetAssetsHistory(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest* request, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ExportAssets() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ExportAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportAssets(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportAssets(::grpc::ServerContext* context, ::google::cloud::asset::v1beta1::ExportAssetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchGetAssetsHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BatchGetAssetsHistory() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_BatchGetAssetsHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGetAssetsHistory(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest* request, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchGetAssetsHistory(::grpc::ServerContext* context, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ExportAssets<WithAsyncMethod_BatchGetAssetsHistory<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ExportAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ExportAssets() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ExportAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportAssets(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchGetAssetsHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BatchGetAssetsHistory() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_BatchGetAssetsHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGetAssetsHistory(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest* request, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ExportAssets() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ExportAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportAssets(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportAssets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchGetAssetsHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BatchGetAssetsHistory() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_BatchGetAssetsHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGetAssetsHistory(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest* request, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchGetAssetsHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ExportAssets() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::asset::v1beta1::ExportAssetsRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_ExportAssets<BaseClass>::StreamedExportAssets, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ExportAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportAssets(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportAssets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::asset::v1beta1::ExportAssetsRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchGetAssetsHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BatchGetAssetsHistory() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>(std::bind(&WithStreamedUnaryMethod_BatchGetAssetsHistory<BaseClass>::StreamedBatchGetAssetsHistory, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BatchGetAssetsHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchGetAssetsHistory(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest* request, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchGetAssetsHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest,::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExportAssets<WithStreamedUnaryMethod_BatchGetAssetsHistory<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ExportAssets<WithStreamedUnaryMethod_BatchGetAssetsHistory<Service > > StreamedService;
};

}  // namespace v1beta1
}  // namespace asset
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto__INCLUDED
