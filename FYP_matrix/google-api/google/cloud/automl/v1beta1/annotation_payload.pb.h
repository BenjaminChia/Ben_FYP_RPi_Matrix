// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/automl/v1beta1/annotation_payload.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2fautoml_2fv1beta1_2fannotation_5fpayload_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2fautoml_2fv1beta1_2fannotation_5fpayload_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/cloud/automl/v1beta1/classification.pb.h"
#include "google/cloud/automl/v1beta1/translation.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fautoml_2fv1beta1_2fannotation_5fpayload_2eproto 

namespace protobuf_google_2fcloud_2fautoml_2fv1beta1_2fannotation_5fpayload_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2fautoml_2fv1beta1_2fannotation_5fpayload_2eproto
namespace google {
namespace cloud {
namespace automl {
namespace v1beta1 {
class AnnotationPayload;
class AnnotationPayloadDefaultTypeInternal;
extern AnnotationPayloadDefaultTypeInternal _AnnotationPayload_default_instance_;
}  // namespace v1beta1
}  // namespace automl
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::automl::v1beta1::AnnotationPayload* Arena::CreateMaybeMessage<::google::cloud::automl::v1beta1::AnnotationPayload>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace automl {
namespace v1beta1 {

// ===================================================================

class AnnotationPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.automl.v1beta1.AnnotationPayload) */ {
 public:
  AnnotationPayload();
  virtual ~AnnotationPayload();

  AnnotationPayload(const AnnotationPayload& from);

  inline AnnotationPayload& operator=(const AnnotationPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnnotationPayload(AnnotationPayload&& from) noexcept
    : AnnotationPayload() {
    *this = ::std::move(from);
  }

  inline AnnotationPayload& operator=(AnnotationPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotationPayload& default_instance();

  enum DetailCase {
    kTranslation = 2,
    kClassification = 3,
    DETAIL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotationPayload* internal_default_instance() {
    return reinterpret_cast<const AnnotationPayload*>(
               &_AnnotationPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AnnotationPayload* other);
  friend void swap(AnnotationPayload& a, AnnotationPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnnotationPayload* New() const final {
    return CreateMaybeMessage<AnnotationPayload>(NULL);
  }

  AnnotationPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnnotationPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnnotationPayload& from);
  void MergeFrom(const AnnotationPayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotationPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string annotation_spec_id = 1;
  void clear_annotation_spec_id();
  static const int kAnnotationSpecIdFieldNumber = 1;
  const ::std::string& annotation_spec_id() const;
  void set_annotation_spec_id(const ::std::string& value);
  #if LANG_CXX11
  void set_annotation_spec_id(::std::string&& value);
  #endif
  void set_annotation_spec_id(const char* value);
  void set_annotation_spec_id(const char* value, size_t size);
  ::std::string* mutable_annotation_spec_id();
  ::std::string* release_annotation_spec_id();
  void set_allocated_annotation_spec_id(::std::string* annotation_spec_id);

  // string display_name = 5;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 5;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // .google.cloud.automl.v1beta1.TranslationAnnotation translation = 2;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 2;
  private:
  const ::google::cloud::automl::v1beta1::TranslationAnnotation& _internal_translation() const;
  public:
  const ::google::cloud::automl::v1beta1::TranslationAnnotation& translation() const;
  ::google::cloud::automl::v1beta1::TranslationAnnotation* release_translation();
  ::google::cloud::automl::v1beta1::TranslationAnnotation* mutable_translation();
  void set_allocated_translation(::google::cloud::automl::v1beta1::TranslationAnnotation* translation);

  // .google.cloud.automl.v1beta1.ClassificationAnnotation classification = 3;
  bool has_classification() const;
  void clear_classification();
  static const int kClassificationFieldNumber = 3;
  private:
  const ::google::cloud::automl::v1beta1::ClassificationAnnotation& _internal_classification() const;
  public:
  const ::google::cloud::automl::v1beta1::ClassificationAnnotation& classification() const;
  ::google::cloud::automl::v1beta1::ClassificationAnnotation* release_classification();
  ::google::cloud::automl::v1beta1::ClassificationAnnotation* mutable_classification();
  void set_allocated_classification(::google::cloud::automl::v1beta1::ClassificationAnnotation* classification);

  void clear_detail();
  DetailCase detail_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.automl.v1beta1.AnnotationPayload)
 private:
  void set_has_translation();
  void set_has_classification();

  inline bool has_detail() const;
  inline void clear_has_detail();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr annotation_spec_id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  union DetailUnion {
    DetailUnion() {}
    ::google::cloud::automl::v1beta1::TranslationAnnotation* translation_;
    ::google::cloud::automl::v1beta1::ClassificationAnnotation* classification_;
  } detail_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fautoml_2fv1beta1_2fannotation_5fpayload_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnnotationPayload

// .google.cloud.automl.v1beta1.TranslationAnnotation translation = 2;
inline bool AnnotationPayload::has_translation() const {
  return detail_case() == kTranslation;
}
inline void AnnotationPayload::set_has_translation() {
  _oneof_case_[0] = kTranslation;
}
inline const ::google::cloud::automl::v1beta1::TranslationAnnotation& AnnotationPayload::_internal_translation() const {
  return *detail_.translation_;
}
inline ::google::cloud::automl::v1beta1::TranslationAnnotation* AnnotationPayload::release_translation() {
  // @@protoc_insertion_point(field_release:google.cloud.automl.v1beta1.AnnotationPayload.translation)
  if (has_translation()) {
    clear_has_detail();
      ::google::cloud::automl::v1beta1::TranslationAnnotation* temp = detail_.translation_;
    detail_.translation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::automl::v1beta1::TranslationAnnotation& AnnotationPayload::translation() const {
  // @@protoc_insertion_point(field_get:google.cloud.automl.v1beta1.AnnotationPayload.translation)
  return has_translation()
      ? *detail_.translation_
      : *reinterpret_cast< ::google::cloud::automl::v1beta1::TranslationAnnotation*>(&::google::cloud::automl::v1beta1::_TranslationAnnotation_default_instance_);
}
inline ::google::cloud::automl::v1beta1::TranslationAnnotation* AnnotationPayload::mutable_translation() {
  if (!has_translation()) {
    clear_detail();
    set_has_translation();
    detail_.translation_ = CreateMaybeMessage< ::google::cloud::automl::v1beta1::TranslationAnnotation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.automl.v1beta1.AnnotationPayload.translation)
  return detail_.translation_;
}

// .google.cloud.automl.v1beta1.ClassificationAnnotation classification = 3;
inline bool AnnotationPayload::has_classification() const {
  return detail_case() == kClassification;
}
inline void AnnotationPayload::set_has_classification() {
  _oneof_case_[0] = kClassification;
}
inline const ::google::cloud::automl::v1beta1::ClassificationAnnotation& AnnotationPayload::_internal_classification() const {
  return *detail_.classification_;
}
inline ::google::cloud::automl::v1beta1::ClassificationAnnotation* AnnotationPayload::release_classification() {
  // @@protoc_insertion_point(field_release:google.cloud.automl.v1beta1.AnnotationPayload.classification)
  if (has_classification()) {
    clear_has_detail();
      ::google::cloud::automl::v1beta1::ClassificationAnnotation* temp = detail_.classification_;
    detail_.classification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::automl::v1beta1::ClassificationAnnotation& AnnotationPayload::classification() const {
  // @@protoc_insertion_point(field_get:google.cloud.automl.v1beta1.AnnotationPayload.classification)
  return has_classification()
      ? *detail_.classification_
      : *reinterpret_cast< ::google::cloud::automl::v1beta1::ClassificationAnnotation*>(&::google::cloud::automl::v1beta1::_ClassificationAnnotation_default_instance_);
}
inline ::google::cloud::automl::v1beta1::ClassificationAnnotation* AnnotationPayload::mutable_classification() {
  if (!has_classification()) {
    clear_detail();
    set_has_classification();
    detail_.classification_ = CreateMaybeMessage< ::google::cloud::automl::v1beta1::ClassificationAnnotation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.automl.v1beta1.AnnotationPayload.classification)
  return detail_.classification_;
}

// string annotation_spec_id = 1;
inline void AnnotationPayload::clear_annotation_spec_id() {
  annotation_spec_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnnotationPayload::annotation_spec_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.automl.v1beta1.AnnotationPayload.annotation_spec_id)
  return annotation_spec_id_.GetNoArena();
}
inline void AnnotationPayload::set_annotation_spec_id(const ::std::string& value) {
  
  annotation_spec_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.automl.v1beta1.AnnotationPayload.annotation_spec_id)
}
#if LANG_CXX11
inline void AnnotationPayload::set_annotation_spec_id(::std::string&& value) {
  
  annotation_spec_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.automl.v1beta1.AnnotationPayload.annotation_spec_id)
}
#endif
inline void AnnotationPayload::set_annotation_spec_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  annotation_spec_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.automl.v1beta1.AnnotationPayload.annotation_spec_id)
}
inline void AnnotationPayload::set_annotation_spec_id(const char* value, size_t size) {
  
  annotation_spec_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.automl.v1beta1.AnnotationPayload.annotation_spec_id)
}
inline ::std::string* AnnotationPayload::mutable_annotation_spec_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.automl.v1beta1.AnnotationPayload.annotation_spec_id)
  return annotation_spec_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnotationPayload::release_annotation_spec_id() {
  // @@protoc_insertion_point(field_release:google.cloud.automl.v1beta1.AnnotationPayload.annotation_spec_id)
  
  return annotation_spec_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotationPayload::set_allocated_annotation_spec_id(::std::string* annotation_spec_id) {
  if (annotation_spec_id != NULL) {
    
  } else {
    
  }
  annotation_spec_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation_spec_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.automl.v1beta1.AnnotationPayload.annotation_spec_id)
}

// string display_name = 5;
inline void AnnotationPayload::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnnotationPayload::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.automl.v1beta1.AnnotationPayload.display_name)
  return display_name_.GetNoArena();
}
inline void AnnotationPayload::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.automl.v1beta1.AnnotationPayload.display_name)
}
#if LANG_CXX11
inline void AnnotationPayload::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.automl.v1beta1.AnnotationPayload.display_name)
}
#endif
inline void AnnotationPayload::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.automl.v1beta1.AnnotationPayload.display_name)
}
inline void AnnotationPayload::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.automl.v1beta1.AnnotationPayload.display_name)
}
inline ::std::string* AnnotationPayload::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.automl.v1beta1.AnnotationPayload.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnotationPayload::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.automl.v1beta1.AnnotationPayload.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotationPayload::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.automl.v1beta1.AnnotationPayload.display_name)
}

inline bool AnnotationPayload::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
inline void AnnotationPayload::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
inline AnnotationPayload::DetailCase AnnotationPayload::detail_case() const {
  return AnnotationPayload::DetailCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace automl
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2fautoml_2fv1beta1_2fannotation_5fpayload_2eproto
