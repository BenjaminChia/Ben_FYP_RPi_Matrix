// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/automl/v1beta1/io.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2fautoml_2fv1beta1_2fio_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2fautoml_2fv1beta1_2fio_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fautoml_2fv1beta1_2fio_2eproto 

namespace protobuf_google_2fcloud_2fautoml_2fv1beta1_2fio_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2fautoml_2fv1beta1_2fio_2eproto
namespace google {
namespace cloud {
namespace automl {
namespace v1beta1 {
class GcsDestination;
class GcsDestinationDefaultTypeInternal;
extern GcsDestinationDefaultTypeInternal _GcsDestination_default_instance_;
class GcsSource;
class GcsSourceDefaultTypeInternal;
extern GcsSourceDefaultTypeInternal _GcsSource_default_instance_;
class InputConfig;
class InputConfigDefaultTypeInternal;
extern InputConfigDefaultTypeInternal _InputConfig_default_instance_;
class OutputConfig;
class OutputConfigDefaultTypeInternal;
extern OutputConfigDefaultTypeInternal _OutputConfig_default_instance_;
}  // namespace v1beta1
}  // namespace automl
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::automl::v1beta1::GcsDestination* Arena::CreateMaybeMessage<::google::cloud::automl::v1beta1::GcsDestination>(Arena*);
template<> ::google::cloud::automl::v1beta1::GcsSource* Arena::CreateMaybeMessage<::google::cloud::automl::v1beta1::GcsSource>(Arena*);
template<> ::google::cloud::automl::v1beta1::InputConfig* Arena::CreateMaybeMessage<::google::cloud::automl::v1beta1::InputConfig>(Arena*);
template<> ::google::cloud::automl::v1beta1::OutputConfig* Arena::CreateMaybeMessage<::google::cloud::automl::v1beta1::OutputConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace automl {
namespace v1beta1 {

// ===================================================================

class InputConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.automl.v1beta1.InputConfig) */ {
 public:
  InputConfig();
  virtual ~InputConfig();

  InputConfig(const InputConfig& from);

  inline InputConfig& operator=(const InputConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InputConfig(InputConfig&& from) noexcept
    : InputConfig() {
    *this = ::std::move(from);
  }

  inline InputConfig& operator=(InputConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InputConfig& default_instance();

  enum SourceCase {
    kGcsSource = 1,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputConfig* internal_default_instance() {
    return reinterpret_cast<const InputConfig*>(
               &_InputConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InputConfig* other);
  friend void swap(InputConfig& a, InputConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InputConfig* New() const final {
    return CreateMaybeMessage<InputConfig>(NULL);
  }

  InputConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InputConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InputConfig& from);
  void MergeFrom(const InputConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.automl.v1beta1.GcsSource gcs_source = 1;
  bool has_gcs_source() const;
  void clear_gcs_source();
  static const int kGcsSourceFieldNumber = 1;
  private:
  const ::google::cloud::automl::v1beta1::GcsSource& _internal_gcs_source() const;
  public:
  const ::google::cloud::automl::v1beta1::GcsSource& gcs_source() const;
  ::google::cloud::automl::v1beta1::GcsSource* release_gcs_source();
  ::google::cloud::automl::v1beta1::GcsSource* mutable_gcs_source();
  void set_allocated_gcs_source(::google::cloud::automl::v1beta1::GcsSource* gcs_source);

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.automl.v1beta1.InputConfig)
 private:
  void set_has_gcs_source();

  inline bool has_source() const;
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union SourceUnion {
    SourceUnion() {}
    ::google::cloud::automl::v1beta1::GcsSource* gcs_source_;
  } source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fautoml_2fv1beta1_2fio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OutputConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.automl.v1beta1.OutputConfig) */ {
 public:
  OutputConfig();
  virtual ~OutputConfig();

  OutputConfig(const OutputConfig& from);

  inline OutputConfig& operator=(const OutputConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutputConfig(OutputConfig&& from) noexcept
    : OutputConfig() {
    *this = ::std::move(from);
  }

  inline OutputConfig& operator=(OutputConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OutputConfig& default_instance();

  enum DestinationCase {
    kGcsDestination = 1,
    DESTINATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputConfig* internal_default_instance() {
    return reinterpret_cast<const OutputConfig*>(
               &_OutputConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OutputConfig* other);
  friend void swap(OutputConfig& a, OutputConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutputConfig* New() const final {
    return CreateMaybeMessage<OutputConfig>(NULL);
  }

  OutputConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OutputConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OutputConfig& from);
  void MergeFrom(const OutputConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.automl.v1beta1.GcsDestination gcs_destination = 1;
  bool has_gcs_destination() const;
  void clear_gcs_destination();
  static const int kGcsDestinationFieldNumber = 1;
  private:
  const ::google::cloud::automl::v1beta1::GcsDestination& _internal_gcs_destination() const;
  public:
  const ::google::cloud::automl::v1beta1::GcsDestination& gcs_destination() const;
  ::google::cloud::automl::v1beta1::GcsDestination* release_gcs_destination();
  ::google::cloud::automl::v1beta1::GcsDestination* mutable_gcs_destination();
  void set_allocated_gcs_destination(::google::cloud::automl::v1beta1::GcsDestination* gcs_destination);

  void clear_destination();
  DestinationCase destination_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.automl.v1beta1.OutputConfig)
 private:
  void set_has_gcs_destination();

  inline bool has_destination() const;
  inline void clear_has_destination();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DestinationUnion {
    DestinationUnion() {}
    ::google::cloud::automl::v1beta1::GcsDestination* gcs_destination_;
  } destination_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fautoml_2fv1beta1_2fio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GcsSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.automl.v1beta1.GcsSource) */ {
 public:
  GcsSource();
  virtual ~GcsSource();

  GcsSource(const GcsSource& from);

  inline GcsSource& operator=(const GcsSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GcsSource(GcsSource&& from) noexcept
    : GcsSource() {
    *this = ::std::move(from);
  }

  inline GcsSource& operator=(GcsSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GcsSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcsSource* internal_default_instance() {
    return reinterpret_cast<const GcsSource*>(
               &_GcsSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GcsSource* other);
  friend void swap(GcsSource& a, GcsSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GcsSource* New() const final {
    return CreateMaybeMessage<GcsSource>(NULL);
  }

  GcsSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GcsSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GcsSource& from);
  void MergeFrom(const GcsSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcsSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input_uris = 1;
  int input_uris_size() const;
  void clear_input_uris();
  static const int kInputUrisFieldNumber = 1;
  const ::std::string& input_uris(int index) const;
  ::std::string* mutable_input_uris(int index);
  void set_input_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input_uris(int index, ::std::string&& value);
  #endif
  void set_input_uris(int index, const char* value);
  void set_input_uris(int index, const char* value, size_t size);
  ::std::string* add_input_uris();
  void add_input_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_input_uris(::std::string&& value);
  #endif
  void add_input_uris(const char* value);
  void add_input_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input_uris();

  // @@protoc_insertion_point(class_scope:google.cloud.automl.v1beta1.GcsSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_uris_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fautoml_2fv1beta1_2fio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GcsDestination : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.automl.v1beta1.GcsDestination) */ {
 public:
  GcsDestination();
  virtual ~GcsDestination();

  GcsDestination(const GcsDestination& from);

  inline GcsDestination& operator=(const GcsDestination& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GcsDestination(GcsDestination&& from) noexcept
    : GcsDestination() {
    *this = ::std::move(from);
  }

  inline GcsDestination& operator=(GcsDestination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GcsDestination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcsDestination* internal_default_instance() {
    return reinterpret_cast<const GcsDestination*>(
               &_GcsDestination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GcsDestination* other);
  friend void swap(GcsDestination& a, GcsDestination& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GcsDestination* New() const final {
    return CreateMaybeMessage<GcsDestination>(NULL);
  }

  GcsDestination* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GcsDestination>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GcsDestination& from);
  void MergeFrom(const GcsDestination& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcsDestination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string output_uri_prefix = 1;
  void clear_output_uri_prefix();
  static const int kOutputUriPrefixFieldNumber = 1;
  const ::std::string& output_uri_prefix() const;
  void set_output_uri_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_output_uri_prefix(::std::string&& value);
  #endif
  void set_output_uri_prefix(const char* value);
  void set_output_uri_prefix(const char* value, size_t size);
  ::std::string* mutable_output_uri_prefix();
  ::std::string* release_output_uri_prefix();
  void set_allocated_output_uri_prefix(::std::string* output_uri_prefix);

  // @@protoc_insertion_point(class_scope:google.cloud.automl.v1beta1.GcsDestination)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr output_uri_prefix_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fautoml_2fv1beta1_2fio_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputConfig

// .google.cloud.automl.v1beta1.GcsSource gcs_source = 1;
inline bool InputConfig::has_gcs_source() const {
  return source_case() == kGcsSource;
}
inline void InputConfig::set_has_gcs_source() {
  _oneof_case_[0] = kGcsSource;
}
inline void InputConfig::clear_gcs_source() {
  if (has_gcs_source()) {
    delete source_.gcs_source_;
    clear_has_source();
  }
}
inline const ::google::cloud::automl::v1beta1::GcsSource& InputConfig::_internal_gcs_source() const {
  return *source_.gcs_source_;
}
inline ::google::cloud::automl::v1beta1::GcsSource* InputConfig::release_gcs_source() {
  // @@protoc_insertion_point(field_release:google.cloud.automl.v1beta1.InputConfig.gcs_source)
  if (has_gcs_source()) {
    clear_has_source();
      ::google::cloud::automl::v1beta1::GcsSource* temp = source_.gcs_source_;
    source_.gcs_source_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::automl::v1beta1::GcsSource& InputConfig::gcs_source() const {
  // @@protoc_insertion_point(field_get:google.cloud.automl.v1beta1.InputConfig.gcs_source)
  return has_gcs_source()
      ? *source_.gcs_source_
      : *reinterpret_cast< ::google::cloud::automl::v1beta1::GcsSource*>(&::google::cloud::automl::v1beta1::_GcsSource_default_instance_);
}
inline ::google::cloud::automl::v1beta1::GcsSource* InputConfig::mutable_gcs_source() {
  if (!has_gcs_source()) {
    clear_source();
    set_has_gcs_source();
    source_.gcs_source_ = CreateMaybeMessage< ::google::cloud::automl::v1beta1::GcsSource >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.automl.v1beta1.InputConfig.gcs_source)
  return source_.gcs_source_;
}

inline bool InputConfig::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void InputConfig::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline InputConfig::SourceCase InputConfig::source_case() const {
  return InputConfig::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OutputConfig

// .google.cloud.automl.v1beta1.GcsDestination gcs_destination = 1;
inline bool OutputConfig::has_gcs_destination() const {
  return destination_case() == kGcsDestination;
}
inline void OutputConfig::set_has_gcs_destination() {
  _oneof_case_[0] = kGcsDestination;
}
inline void OutputConfig::clear_gcs_destination() {
  if (has_gcs_destination()) {
    delete destination_.gcs_destination_;
    clear_has_destination();
  }
}
inline const ::google::cloud::automl::v1beta1::GcsDestination& OutputConfig::_internal_gcs_destination() const {
  return *destination_.gcs_destination_;
}
inline ::google::cloud::automl::v1beta1::GcsDestination* OutputConfig::release_gcs_destination() {
  // @@protoc_insertion_point(field_release:google.cloud.automl.v1beta1.OutputConfig.gcs_destination)
  if (has_gcs_destination()) {
    clear_has_destination();
      ::google::cloud::automl::v1beta1::GcsDestination* temp = destination_.gcs_destination_;
    destination_.gcs_destination_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::automl::v1beta1::GcsDestination& OutputConfig::gcs_destination() const {
  // @@protoc_insertion_point(field_get:google.cloud.automl.v1beta1.OutputConfig.gcs_destination)
  return has_gcs_destination()
      ? *destination_.gcs_destination_
      : *reinterpret_cast< ::google::cloud::automl::v1beta1::GcsDestination*>(&::google::cloud::automl::v1beta1::_GcsDestination_default_instance_);
}
inline ::google::cloud::automl::v1beta1::GcsDestination* OutputConfig::mutable_gcs_destination() {
  if (!has_gcs_destination()) {
    clear_destination();
    set_has_gcs_destination();
    destination_.gcs_destination_ = CreateMaybeMessage< ::google::cloud::automl::v1beta1::GcsDestination >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.automl.v1beta1.OutputConfig.gcs_destination)
  return destination_.gcs_destination_;
}

inline bool OutputConfig::has_destination() const {
  return destination_case() != DESTINATION_NOT_SET;
}
inline void OutputConfig::clear_has_destination() {
  _oneof_case_[0] = DESTINATION_NOT_SET;
}
inline OutputConfig::DestinationCase OutputConfig::destination_case() const {
  return OutputConfig::DestinationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GcsSource

// repeated string input_uris = 1;
inline int GcsSource::input_uris_size() const {
  return input_uris_.size();
}
inline void GcsSource::clear_input_uris() {
  input_uris_.Clear();
}
inline const ::std::string& GcsSource::input_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.automl.v1beta1.GcsSource.input_uris)
  return input_uris_.Get(index);
}
inline ::std::string* GcsSource::mutable_input_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.automl.v1beta1.GcsSource.input_uris)
  return input_uris_.Mutable(index);
}
inline void GcsSource::set_input_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.automl.v1beta1.GcsSource.input_uris)
  input_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GcsSource::set_input_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.automl.v1beta1.GcsSource.input_uris)
  input_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GcsSource::set_input_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.automl.v1beta1.GcsSource.input_uris)
}
inline void GcsSource::set_input_uris(int index, const char* value, size_t size) {
  input_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.automl.v1beta1.GcsSource.input_uris)
}
inline ::std::string* GcsSource::add_input_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.automl.v1beta1.GcsSource.input_uris)
  return input_uris_.Add();
}
inline void GcsSource::add_input_uris(const ::std::string& value) {
  input_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.automl.v1beta1.GcsSource.input_uris)
}
#if LANG_CXX11
inline void GcsSource::add_input_uris(::std::string&& value) {
  input_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.automl.v1beta1.GcsSource.input_uris)
}
#endif
inline void GcsSource::add_input_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.automl.v1beta1.GcsSource.input_uris)
}
inline void GcsSource::add_input_uris(const char* value, size_t size) {
  input_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.automl.v1beta1.GcsSource.input_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GcsSource::input_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.automl.v1beta1.GcsSource.input_uris)
  return input_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GcsSource::mutable_input_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.automl.v1beta1.GcsSource.input_uris)
  return &input_uris_;
}

// -------------------------------------------------------------------

// GcsDestination

// string output_uri_prefix = 1;
inline void GcsDestination::clear_output_uri_prefix() {
  output_uri_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GcsDestination::output_uri_prefix() const {
  // @@protoc_insertion_point(field_get:google.cloud.automl.v1beta1.GcsDestination.output_uri_prefix)
  return output_uri_prefix_.GetNoArena();
}
inline void GcsDestination::set_output_uri_prefix(const ::std::string& value) {
  
  output_uri_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.automl.v1beta1.GcsDestination.output_uri_prefix)
}
#if LANG_CXX11
inline void GcsDestination::set_output_uri_prefix(::std::string&& value) {
  
  output_uri_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.automl.v1beta1.GcsDestination.output_uri_prefix)
}
#endif
inline void GcsDestination::set_output_uri_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_uri_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.automl.v1beta1.GcsDestination.output_uri_prefix)
}
inline void GcsDestination::set_output_uri_prefix(const char* value, size_t size) {
  
  output_uri_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.automl.v1beta1.GcsDestination.output_uri_prefix)
}
inline ::std::string* GcsDestination::mutable_output_uri_prefix() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.automl.v1beta1.GcsDestination.output_uri_prefix)
  return output_uri_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GcsDestination::release_output_uri_prefix() {
  // @@protoc_insertion_point(field_release:google.cloud.automl.v1beta1.GcsDestination.output_uri_prefix)
  
  return output_uri_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GcsDestination::set_allocated_output_uri_prefix(::std::string* output_uri_prefix) {
  if (output_uri_prefix != NULL) {
    
  } else {
    
  }
  output_uri_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_uri_prefix);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.automl.v1beta1.GcsDestination.output_uri_prefix)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace automl
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2fautoml_2fv1beta1_2fio_2eproto
