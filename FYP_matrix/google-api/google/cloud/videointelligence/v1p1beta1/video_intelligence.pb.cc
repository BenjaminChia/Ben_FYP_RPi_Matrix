// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/videointelligence/v1p1beta1/video_intelligence.proto

#include "google/cloud/videointelligence/v1p1beta1/video_intelligence.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Entity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExplicitContentDetectionConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LabelDetectionConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ShotChangeDetectionConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpeechContext;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ExplicitContentAnnotation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ExplicitContentFrame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LabelFrame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LabelSegment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpeechRecognitionAlternative;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpeechTranscription;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpeechTranscriptionConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VideoAnnotationProgress;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VideoSegment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WordInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LabelAnnotation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_VideoAnnotationResults;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_VideoContext;
}  // namespace protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto
namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_google_2frpc_2fstatus_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2frpc_2fstatus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Status;
}  // namespace protobuf_google_2frpc_2fstatus_2eproto
namespace google {
namespace cloud {
namespace videointelligence {
namespace v1p1beta1 {
class AnnotateVideoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnnotateVideoRequest>
      _instance;
} _AnnotateVideoRequest_default_instance_;
class VideoContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoContext>
      _instance;
} _VideoContext_default_instance_;
class LabelDetectionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LabelDetectionConfig>
      _instance;
} _LabelDetectionConfig_default_instance_;
class ShotChangeDetectionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShotChangeDetectionConfig>
      _instance;
} _ShotChangeDetectionConfig_default_instance_;
class ExplicitContentDetectionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExplicitContentDetectionConfig>
      _instance;
} _ExplicitContentDetectionConfig_default_instance_;
class VideoSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoSegment>
      _instance;
} _VideoSegment_default_instance_;
class LabelSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LabelSegment>
      _instance;
} _LabelSegment_default_instance_;
class LabelFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LabelFrame>
      _instance;
} _LabelFrame_default_instance_;
class EntityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Entity>
      _instance;
} _Entity_default_instance_;
class LabelAnnotationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LabelAnnotation>
      _instance;
} _LabelAnnotation_default_instance_;
class ExplicitContentFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExplicitContentFrame>
      _instance;
} _ExplicitContentFrame_default_instance_;
class ExplicitContentAnnotationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExplicitContentAnnotation>
      _instance;
} _ExplicitContentAnnotation_default_instance_;
class VideoAnnotationResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoAnnotationResults>
      _instance;
} _VideoAnnotationResults_default_instance_;
class AnnotateVideoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnnotateVideoResponse>
      _instance;
} _AnnotateVideoResponse_default_instance_;
class VideoAnnotationProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoAnnotationProgress>
      _instance;
} _VideoAnnotationProgress_default_instance_;
class AnnotateVideoProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnnotateVideoProgress>
      _instance;
} _AnnotateVideoProgress_default_instance_;
class SpeechTranscriptionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechTranscriptionConfig>
      _instance;
} _SpeechTranscriptionConfig_default_instance_;
class SpeechContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechContext>
      _instance;
} _SpeechContext_default_instance_;
class SpeechTranscriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechTranscription>
      _instance;
} _SpeechTranscription_default_instance_;
class SpeechRecognitionAlternativeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechRecognitionAlternative>
      _instance;
} _SpeechRecognitionAlternative_default_instance_;
class WordInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WordInfo>
      _instance;
} _WordInfo_default_instance_;
}  // namespace v1p1beta1
}  // namespace videointelligence
}  // namespace cloud
}  // namespace google
namespace protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto {
static void InitDefaultsAnnotateVideoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_AnnotateVideoRequest_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnnotateVideoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnnotateVideoRequest}, {
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoContext.base,}};

static void InitDefaultsVideoContext() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_VideoContext_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::VideoContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::VideoContext::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_VideoContext =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsVideoContext}, {
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoSegment.base,
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelDetectionConfig.base,
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ShotChangeDetectionConfig.base,
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ExplicitContentDetectionConfig.base,
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechTranscriptionConfig.base,}};

static void InitDefaultsLabelDetectionConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_LabelDetectionConfig_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LabelDetectionConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLabelDetectionConfig}, {}};

static void InitDefaultsShotChangeDetectionConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_ShotChangeDetectionConfig_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShotChangeDetectionConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShotChangeDetectionConfig}, {}};

static void InitDefaultsExplicitContentDetectionConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_ExplicitContentDetectionConfig_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExplicitContentDetectionConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExplicitContentDetectionConfig}, {}};

static void InitDefaultsVideoSegment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_VideoSegment_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::VideoSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::VideoSegment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VideoSegment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVideoSegment}, {
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

static void InitDefaultsLabelSegment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_LabelSegment_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::LabelSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::LabelSegment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LabelSegment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLabelSegment}, {
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoSegment.base,}};

static void InitDefaultsLabelFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_LabelFrame_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::LabelFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::LabelFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LabelFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLabelFrame}, {
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

static void InitDefaultsEntity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_Entity_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::Entity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::Entity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Entity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEntity}, {}};

static void InitDefaultsLabelAnnotation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_LabelAnnotation_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LabelAnnotation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLabelAnnotation}, {
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_Entity.base,
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelSegment.base,
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelFrame.base,}};

static void InitDefaultsExplicitContentFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_ExplicitContentFrame_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExplicitContentFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExplicitContentFrame}, {
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

static void InitDefaultsExplicitContentAnnotation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_ExplicitContentAnnotation_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExplicitContentAnnotation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExplicitContentAnnotation}, {
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ExplicitContentFrame.base,}};

static void InitDefaultsVideoAnnotationResults() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_VideoAnnotationResults_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_VideoAnnotationResults =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsVideoAnnotationResults}, {
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelAnnotation.base,
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoSegment.base,
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ExplicitContentAnnotation.base,
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechTranscription.base,
      &protobuf_google_2frpc_2fstatus_2eproto::scc_info_Status.base,}};

static void InitDefaultsAnnotateVideoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_AnnotateVideoResponse_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnnotateVideoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnnotateVideoResponse}, {
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoAnnotationResults.base,}};

static void InitDefaultsVideoAnnotationProgress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_VideoAnnotationProgress_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VideoAnnotationProgress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVideoAnnotationProgress}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsAnnotateVideoProgress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_AnnotateVideoProgress_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoProgress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnnotateVideoProgress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnnotateVideoProgress}, {
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoAnnotationProgress.base,}};

static void InitDefaultsSpeechTranscriptionConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_SpeechTranscriptionConfig_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeechTranscriptionConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeechTranscriptionConfig}, {
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechContext.base,}};

static void InitDefaultsSpeechContext() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_SpeechContext_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::SpeechContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::SpeechContext::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeechContext =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeechContext}, {}};

static void InitDefaultsSpeechTranscription() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_SpeechTranscription_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeechTranscription =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeechTranscription}, {
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechRecognitionAlternative.base,}};

static void InitDefaultsSpeechRecognitionAlternative() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_SpeechRecognitionAlternative_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeechRecognitionAlternative =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeechRecognitionAlternative}, {
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_WordInfo.base,}};

static void InitDefaultsWordInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::cloud::videointelligence::v1p1beta1::_WordInfo_default_instance_;
    new (ptr) ::google::cloud::videointelligence::v1p1beta1::WordInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::videointelligence::v1p1beta1::WordInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WordInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWordInfo}, {
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AnnotateVideoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoContext.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LabelDetectionConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShotChangeDetectionConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExplicitContentDetectionConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoSegment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LabelSegment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LabelFrame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Entity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LabelAnnotation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExplicitContentFrame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExplicitContentAnnotation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoAnnotationResults.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnnotateVideoResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoAnnotationProgress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnnotateVideoProgress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechTranscriptionConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechContext.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechTranscription.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechRecognitionAlternative.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WordInfo.base);
}

::google::protobuf::Metadata file_level_metadata[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest, input_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest, input_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest, video_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest, output_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest, location_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoContext, segments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoContext, label_detection_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoContext, shot_change_detection_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoContext, explicit_content_detection_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoContext, speech_transcription_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig, label_detection_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig, stationary_camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig, model_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig, model_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig, model_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoSegment, start_time_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoSegment, end_time_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelSegment, segment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelSegment, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelFrame, time_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelFrame, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::Entity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::Entity, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::Entity, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::Entity, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelAnnotation, entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelAnnotation, category_entities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelAnnotation, segments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::LabelAnnotation, frames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame, time_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame, pornography_likelihood_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation, frames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults, input_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults, segment_label_annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults, shot_label_annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults, frame_label_annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults, shot_annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults, explicit_annotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults, speech_transcriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoResponse, annotation_results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress, input_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress, progress_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress, update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoProgress, annotation_progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig, language_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig, max_alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig, filter_profanity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig, speech_contexts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig, enable_automatic_punctuation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig, audio_tracks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechContext, phrases_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechTranscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechTranscription, alternatives_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative, transcript_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative, words_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::WordInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::WordInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::WordInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::videointelligence::v1p1beta1::WordInfo, word_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest)},
  { 11, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::VideoContext)},
  { 21, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig)},
  { 29, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig)},
  { 35, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig)},
  { 41, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::VideoSegment)},
  { 48, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::LabelSegment)},
  { 55, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::LabelFrame)},
  { 62, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::Entity)},
  { 70, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::LabelAnnotation)},
  { 79, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame)},
  { 86, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation)},
  { 92, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults)},
  { 105, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoResponse)},
  { 111, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress)},
  { 120, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::AnnotateVideoProgress)},
  { 126, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig)},
  { 137, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::SpeechContext)},
  { 143, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::SpeechTranscription)},
  { 149, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative)},
  { 157, -1, sizeof(::google::cloud::videointelligence::v1p1beta1::WordInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_AnnotateVideoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_VideoContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_LabelDetectionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_ShotChangeDetectionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_ExplicitContentDetectionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_VideoSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_LabelSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_LabelFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_Entity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_LabelAnnotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_ExplicitContentFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_ExplicitContentAnnotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_VideoAnnotationResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_AnnotateVideoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_VideoAnnotationProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_AnnotateVideoProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_SpeechTranscriptionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_SpeechContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_SpeechTranscription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_SpeechRecognitionAlternative_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::videointelligence::v1p1beta1::_WordInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/cloud/videointelligence/v1p1beta1/video_intelligence.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nAgoogle/cloud/videointelligence/v1p1bet"
      "a1/video_intelligence.proto\022(google.clou"
      "d.videointelligence.v1p1beta1\032\034google/ap"
      "i/annotations.proto\032#google/longrunning/"
      "operations.proto\032\036google/protobuf/durati"
      "on.proto\032\037google/protobuf/timestamp.prot"
      "o\032\027google/rpc/status.proto\"\375\001\n\024AnnotateV"
      "ideoRequest\022\021\n\tinput_uri\030\001 \001(\t\022\025\n\rinput_"
      "content\030\006 \001(\014\022C\n\010features\030\002 \003(\01621.google"
      ".cloud.videointelligence.v1p1beta1.Featu"
      "re\022M\n\rvideo_context\030\003 \001(\01326.google.cloud"
      ".videointelligence.v1p1beta1.VideoContex"
      "t\022\022\n\noutput_uri\030\004 \001(\t\022\023\n\013location_id\030\005 \001"
      "(\t\"\202\004\n\014VideoContext\022H\n\010segments\030\001 \003(\01326."
      "google.cloud.videointelligence.v1p1beta1"
      ".VideoSegment\022^\n\026label_detection_config\030"
      "\002 \001(\0132>.google.cloud.videointelligence.v"
      "1p1beta1.LabelDetectionConfig\022i\n\034shot_ch"
      "ange_detection_config\030\003 \001(\0132C.google.clo"
      "ud.videointelligence.v1p1beta1.ShotChang"
      "eDetectionConfig\022s\n!explicit_content_det"
      "ection_config\030\004 \001(\0132H.google.cloud.video"
      "intelligence.v1p1beta1.ExplicitContentDe"
      "tectionConfig\022h\n\033speech_transcription_co"
      "nfig\030\006 \001(\0132C.google.cloud.videointellige"
      "nce.v1p1beta1.SpeechTranscriptionConfig\""
      "\234\001\n\024LabelDetectionConfig\022Z\n\024label_detect"
      "ion_mode\030\001 \001(\0162<.google.cloud.videointel"
      "ligence.v1p1beta1.LabelDetectionMode\022\031\n\021"
      "stationary_camera\030\002 \001(\010\022\r\n\005model\030\003 \001(\t\"*"
      "\n\031ShotChangeDetectionConfig\022\r\n\005model\030\001 \001"
      "(\t\"/\n\036ExplicitContentDetectionConfig\022\r\n\005"
      "model\030\001 \001(\t\"x\n\014VideoSegment\0224\n\021start_tim"
      "e_offset\030\001 \001(\0132\031.google.protobuf.Duratio"
      "n\0222\n\017end_time_offset\030\002 \001(\0132\031.google.prot"
      "obuf.Duration\"k\n\014LabelSegment\022G\n\007segment"
      "\030\001 \001(\01326.google.cloud.videointelligence."
      "v1p1beta1.VideoSegment\022\022\n\nconfidence\030\002 \001"
      "(\002\"P\n\nLabelFrame\022.\n\013time_offset\030\001 \001(\0132\031."
      "google.protobuf.Duration\022\022\n\nconfidence\030\002"
      " \001(\002\"G\n\006Entity\022\021\n\tentity_id\030\001 \001(\t\022\023\n\013des"
      "cription\030\002 \001(\t\022\025\n\rlanguage_code\030\003 \001(\t\"\260\002"
      "\n\017LabelAnnotation\022@\n\006entity\030\001 \001(\01320.goog"
      "le.cloud.videointelligence.v1p1beta1.Ent"
      "ity\022K\n\021category_entities\030\002 \003(\01320.google."
      "cloud.videointelligence.v1p1beta1.Entity"
      "\022H\n\010segments\030\003 \003(\01326.google.cloud.videoi"
      "ntelligence.v1p1beta1.LabelSegment\022D\n\006fr"
      "ames\030\004 \003(\01324.google.cloud.videointellige"
      "nce.v1p1beta1.LabelFrame\"\234\001\n\024ExplicitCon"
      "tentFrame\022.\n\013time_offset\030\001 \001(\0132\031.google."
      "protobuf.Duration\022T\n\026pornography_likelih"
      "ood\030\002 \001(\01624.google.cloud.videointelligen"
      "ce.v1p1beta1.Likelihood\"k\n\031ExplicitConte"
      "ntAnnotation\022N\n\006frames\030\001 \003(\0132>.google.cl"
      "oud.videointelligence.v1p1beta1.Explicit"
      "ContentFrame\"\365\004\n\026VideoAnnotationResults\022"
      "\021\n\tinput_uri\030\001 \001(\t\022\\\n\031segment_label_anno"
      "tations\030\002 \003(\01329.google.cloud.videointell"
      "igence.v1p1beta1.LabelAnnotation\022Y\n\026shot"
      "_label_annotations\030\003 \003(\01329.google.cloud."
      "videointelligence.v1p1beta1.LabelAnnotat"
      "ion\022Z\n\027frame_label_annotations\030\004 \003(\01329.g"
      "oogle.cloud.videointelligence.v1p1beta1."
      "LabelAnnotation\022P\n\020shot_annotations\030\006 \003("
      "\01326.google.cloud.videointelligence.v1p1b"
      "eta1.VideoSegment\022`\n\023explicit_annotation"
      "\030\007 \001(\0132C.google.cloud.videointelligence."
      "v1p1beta1.ExplicitContentAnnotation\022\\\n\025s"
      "peech_transcriptions\030\013 \003(\0132=.google.clou"
      "d.videointelligence.v1p1beta1.SpeechTran"
      "scription\022!\n\005error\030\t \001(\0132\022.google.rpc.St"
      "atus\"u\n\025AnnotateVideoResponse\022\\\n\022annotat"
      "ion_results\030\001 \003(\0132@.google.cloud.videoin"
      "telligence.v1p1beta1.VideoAnnotationResu"
      "lts\"\247\001\n\027VideoAnnotationProgress\022\021\n\tinput"
      "_uri\030\001 \001(\t\022\030\n\020progress_percent\030\002 \001(\005\022.\n\n"
      "start_time\030\003 \001(\0132\032.google.protobuf.Times"
      "tamp\022/\n\013update_time\030\004 \001(\0132\032.google.proto"
      "buf.Timestamp\"w\n\025AnnotateVideoProgress\022^"
      "\n\023annotation_progress\030\001 \003(\0132A.google.clo"
      "ud.videointelligence.v1p1beta1.VideoAnno"
      "tationProgress\"\364\001\n\031SpeechTranscriptionCo"
      "nfig\022\025\n\rlanguage_code\030\001 \001(\t\022\030\n\020max_alter"
      "natives\030\002 \001(\005\022\030\n\020filter_profanity\030\003 \001(\010\022"
      "P\n\017speech_contexts\030\004 \003(\01327.google.cloud."
      "videointelligence.v1p1beta1.SpeechContex"
      "t\022$\n\034enable_automatic_punctuation\030\005 \001(\010\022"
      "\024\n\014audio_tracks\030\006 \003(\005\" \n\rSpeechContext\022\017"
      "\n\007phrases\030\001 \003(\t\"s\n\023SpeechTranscription\022\\"
      "\n\014alternatives\030\001 \003(\0132F.google.cloud.vide"
      "ointelligence.v1p1beta1.SpeechRecognitio"
      "nAlternative\"\211\001\n\034SpeechRecognitionAltern"
      "ative\022\022\n\ntranscript\030\001 \001(\t\022\022\n\nconfidence\030"
      "\002 \001(\002\022A\n\005words\030\003 \003(\01322.google.cloud.vide"
      "ointelligence.v1p1beta1.WordInfo\"t\n\010Word"
      "Info\022-\n\nstart_time\030\001 \001(\0132\031.google.protob"
      "uf.Duration\022+\n\010end_time\030\002 \001(\0132\031.google.p"
      "rotobuf.Duration\022\014\n\004word\030\003 \001(\t*\214\001\n\007Featu"
      "re\022\027\n\023FEATURE_UNSPECIFIED\020\000\022\023\n\017LABEL_DET"
      "ECTION\020\001\022\031\n\025SHOT_CHANGE_DETECTION\020\002\022\036\n\032E"
      "XPLICIT_CONTENT_DETECTION\020\003\022\030\n\024SPEECH_TR"
      "ANSCRIPTION\020\006*r\n\022LabelDetectionMode\022$\n L"
      "ABEL_DETECTION_MODE_UNSPECIFIED\020\000\022\r\n\tSHO"
      "T_MODE\020\001\022\016\n\nFRAME_MODE\020\002\022\027\n\023SHOT_AND_FRA"
      "ME_MODE\020\003*t\n\nLikelihood\022\032\n\026LIKELIHOOD_UN"
      "SPECIFIED\020\000\022\021\n\rVERY_UNLIKELY\020\001\022\014\n\010UNLIKE"
      "LY\020\002\022\014\n\010POSSIBLE\020\003\022\n\n\006LIKELY\020\004\022\017\n\013VERY_L"
      "IKELY\020\0052\262\001\n\030VideoIntelligenceService\022\225\001\n"
      "\rAnnotateVideo\022>.google.cloud.videointel"
      "ligence.v1p1beta1.AnnotateVideoRequest\032\035"
      ".google.longrunning.Operation\"%\202\323\344\223\002\037\"\032/"
      "v1p1beta1/videos:annotate:\001*B\200\002\n,com.goo"
      "gle.cloud.videointelligence.v1p1beta1B\035V"
      "ideoIntelligenceServiceProtoP\001ZYgoogle.g"
      "olang.org/genproto/googleapis/cloud/vide"
      "ointelligence/v1p1beta1;videointelligenc"
      "e\252\002(Google.Cloud.VideoIntelligence.V1P1B"
      "eta1\312\002(Google\\Cloud\\VideoIntelligence\\V1"
      "p1beta1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/videointelligence/v1p1beta1/video_intelligence.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto
namespace google {
namespace cloud {
namespace videointelligence {
namespace v1p1beta1 {
const ::google::protobuf::EnumDescriptor* Feature_descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_enum_descriptors[0];
}
bool Feature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LabelDetectionMode_descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_enum_descriptors[1];
}
bool LabelDetectionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Likelihood_descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_enum_descriptors[2];
}
bool Likelihood_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AnnotateVideoRequest::InitAsDefaultInstance() {
  ::google::cloud::videointelligence::v1p1beta1::_AnnotateVideoRequest_default_instance_._instance.get_mutable()->video_context_ = const_cast< ::google::cloud::videointelligence::v1p1beta1::VideoContext*>(
      ::google::cloud::videointelligence::v1p1beta1::VideoContext::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateVideoRequest::kInputUriFieldNumber;
const int AnnotateVideoRequest::kInputContentFieldNumber;
const int AnnotateVideoRequest::kFeaturesFieldNumber;
const int AnnotateVideoRequest::kVideoContextFieldNumber;
const int AnnotateVideoRequest::kOutputUriFieldNumber;
const int AnnotateVideoRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateVideoRequest::AnnotateVideoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_AnnotateVideoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
}
AnnotateVideoRequest::AnnotateVideoRequest(const AnnotateVideoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_uri().size() > 0) {
    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_uri().size() > 0) {
    output_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_uri_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  input_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_content().size() > 0) {
    input_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_content_);
  }
  if (from.has_video_context()) {
    video_context_ = new ::google::cloud::videointelligence::v1p1beta1::VideoContext(*from.video_context_);
  } else {
    video_context_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
}

void AnnotateVideoRequest::SharedCtor() {
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_context_ = NULL;
}

AnnotateVideoRequest::~AnnotateVideoRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  SharedDtor();
}

void AnnotateVideoRequest::SharedDtor() {
  input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete video_context_;
}

void AnnotateVideoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnnotateVideoRequest::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotateVideoRequest& AnnotateVideoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_AnnotateVideoRequest.base);
  return *internal_default_instance();
}


void AnnotateVideoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && video_context_ != NULL) {
    delete video_context_;
  }
  video_context_ = NULL;
  _internal_metadata_.Clear();
}

bool AnnotateVideoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string input_uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_uri().data(), static_cast<int>(this->input_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1p1beta1.Feature features = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_features(static_cast< ::google::cloud::videointelligence::v1p1beta1::Feature >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_features(static_cast< ::google::cloud::videointelligence::v1p1beta1::Feature >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1p1beta1.VideoContext video_context = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_video_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_uri = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_uri().data(), static_cast<int>(this->output_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.output_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes input_content = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_input_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  return false;
#undef DO_
}

void AnnotateVideoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_uri(), output);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.Feature features = 2;
  if (this->features_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_features_cached_byte_size_));
  }
  for (int i = 0, n = this->features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->features(i), output);
  }

  // .google.cloud.videointelligence.v1p1beta1.VideoContext video_context = 3;
  if (this->has_video_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_video_context(), output);
  }

  // string output_uri = 4;
  if (this->output_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.output_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->output_uri(), output);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->location_id(), output);
  }

  // bytes input_content = 6;
  if (this->input_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->input_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
}

::google::protobuf::uint8* AnnotateVideoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_uri(), target);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.Feature features = 2;
  if (this->features_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _features_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->features_, target);
  }

  // .google.cloud.videointelligence.v1p1beta1.VideoContext video_context = 3;
  if (this->has_video_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_video_context(), deterministic, target);
  }

  // string output_uri = 4;
  if (this->output_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.output_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->output_uri(), target);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->location_id(), target);
  }

  // bytes input_content = 6;
  if (this->input_content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->input_content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  return target;
}

size_t AnnotateVideoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.videointelligence.v1p1beta1.Feature features = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _features_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_uri());
  }

  // string output_uri = 4;
  if (this->output_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_uri());
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // bytes input_content = 6;
  if (this->input_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->input_content());
  }

  // .google.cloud.videointelligence.v1p1beta1.VideoContext video_context = 3;
  if (this->has_video_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *video_context_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotateVideoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotateVideoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateVideoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
    MergeFrom(*source);
  }
}

void AnnotateVideoRequest::MergeFrom(const AnnotateVideoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from.input_uri().size() > 0) {

    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.output_uri().size() > 0) {

    output_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_uri_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.input_content().size() > 0) {

    input_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_content_);
  }
  if (from.has_video_context()) {
    mutable_video_context()->::google::cloud::videointelligence::v1p1beta1::VideoContext::MergeFrom(from.video_context());
  }
}

void AnnotateVideoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateVideoRequest::CopyFrom(const AnnotateVideoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotateVideoRequest::IsInitialized() const {
  return true;
}

void AnnotateVideoRequest::Swap(AnnotateVideoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateVideoRequest::InternalSwap(AnnotateVideoRequest* other) {
  using std::swap;
  features_.InternalSwap(&other->features_);
  input_uri_.Swap(&other->input_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_uri_.Swap(&other->output_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_content_.Swap(&other->input_content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(video_context_, other->video_context_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnnotateVideoRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VideoContext::InitAsDefaultInstance() {
  ::google::cloud::videointelligence::v1p1beta1::_VideoContext_default_instance_._instance.get_mutable()->label_detection_config_ = const_cast< ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig*>(
      ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig::internal_default_instance());
  ::google::cloud::videointelligence::v1p1beta1::_VideoContext_default_instance_._instance.get_mutable()->shot_change_detection_config_ = const_cast< ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig*>(
      ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig::internal_default_instance());
  ::google::cloud::videointelligence::v1p1beta1::_VideoContext_default_instance_._instance.get_mutable()->explicit_content_detection_config_ = const_cast< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig*>(
      ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig::internal_default_instance());
  ::google::cloud::videointelligence::v1p1beta1::_VideoContext_default_instance_._instance.get_mutable()->speech_transcription_config_ = const_cast< ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig*>(
      ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoContext::kSegmentsFieldNumber;
const int VideoContext::kLabelDetectionConfigFieldNumber;
const int VideoContext::kShotChangeDetectionConfigFieldNumber;
const int VideoContext::kExplicitContentDetectionConfigFieldNumber;
const int VideoContext::kSpeechTranscriptionConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoContext::VideoContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoContext.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.VideoContext)
}
VideoContext::VideoContext(const VideoContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_label_detection_config()) {
    label_detection_config_ = new ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig(*from.label_detection_config_);
  } else {
    label_detection_config_ = NULL;
  }
  if (from.has_shot_change_detection_config()) {
    shot_change_detection_config_ = new ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig(*from.shot_change_detection_config_);
  } else {
    shot_change_detection_config_ = NULL;
  }
  if (from.has_explicit_content_detection_config()) {
    explicit_content_detection_config_ = new ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig(*from.explicit_content_detection_config_);
  } else {
    explicit_content_detection_config_ = NULL;
  }
  if (from.has_speech_transcription_config()) {
    speech_transcription_config_ = new ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig(*from.speech_transcription_config_);
  } else {
    speech_transcription_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.VideoContext)
}

void VideoContext::SharedCtor() {
  ::memset(&label_detection_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speech_transcription_config_) -
      reinterpret_cast<char*>(&label_detection_config_)) + sizeof(speech_transcription_config_));
}

VideoContext::~VideoContext() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.VideoContext)
  SharedDtor();
}

void VideoContext::SharedDtor() {
  if (this != internal_default_instance()) delete label_detection_config_;
  if (this != internal_default_instance()) delete shot_change_detection_config_;
  if (this != internal_default_instance()) delete explicit_content_detection_config_;
  if (this != internal_default_instance()) delete speech_transcription_config_;
}

void VideoContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VideoContext::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoContext& VideoContext::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoContext.base);
  return *internal_default_instance();
}


void VideoContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.VideoContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  if (GetArenaNoVirtual() == NULL && label_detection_config_ != NULL) {
    delete label_detection_config_;
  }
  label_detection_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && shot_change_detection_config_ != NULL) {
    delete shot_change_detection_config_;
  }
  shot_change_detection_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && explicit_content_detection_config_ != NULL) {
    delete explicit_content_detection_config_;
  }
  explicit_content_detection_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && speech_transcription_config_ != NULL) {
    delete speech_transcription_config_;
  }
  speech_transcription_config_ = NULL;
  _internal_metadata_.Clear();
}

bool VideoContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.VideoContext)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment segments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig label_detection_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_label_detection_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig shot_change_detection_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shot_change_detection_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig explicit_content_detection_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_explicit_content_detection_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig speech_transcription_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speech_transcription_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.VideoContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.VideoContext)
  return false;
#undef DO_
}

void VideoContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.VideoContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->segments(static_cast<int>(i)),
      output);
  }

  // .google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig label_detection_config = 2;
  if (this->has_label_detection_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_label_detection_config(), output);
  }

  // .google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig shot_change_detection_config = 3;
  if (this->has_shot_change_detection_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_shot_change_detection_config(), output);
  }

  // .google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig explicit_content_detection_config = 4;
  if (this->has_explicit_content_detection_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_explicit_content_detection_config(), output);
  }

  // .google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig speech_transcription_config = 6;
  if (this->has_speech_transcription_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_speech_transcription_config(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.VideoContext)
}

::google::protobuf::uint8* VideoContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.VideoContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->segments(static_cast<int>(i)), deterministic, target);
  }

  // .google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig label_detection_config = 2;
  if (this->has_label_detection_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_label_detection_config(), deterministic, target);
  }

  // .google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig shot_change_detection_config = 3;
  if (this->has_shot_change_detection_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_shot_change_detection_config(), deterministic, target);
  }

  // .google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig explicit_content_detection_config = 4;
  if (this->has_explicit_content_detection_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_explicit_content_detection_config(), deterministic, target);
  }

  // .google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig speech_transcription_config = 6;
  if (this->has_speech_transcription_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_speech_transcription_config(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.VideoContext)
  return target;
}

size_t VideoContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.VideoContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment segments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->segments(static_cast<int>(i)));
    }
  }

  // .google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig label_detection_config = 2;
  if (this->has_label_detection_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *label_detection_config_);
  }

  // .google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig shot_change_detection_config = 3;
  if (this->has_shot_change_detection_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shot_change_detection_config_);
  }

  // .google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig explicit_content_detection_config = 4;
  if (this->has_explicit_content_detection_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *explicit_content_detection_config_);
  }

  // .google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig speech_transcription_config = 6;
  if (this->has_speech_transcription_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *speech_transcription_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.VideoContext)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.VideoContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.VideoContext)
    MergeFrom(*source);
  }
}

void VideoContext::MergeFrom(const VideoContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.VideoContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  if (from.has_label_detection_config()) {
    mutable_label_detection_config()->::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig::MergeFrom(from.label_detection_config());
  }
  if (from.has_shot_change_detection_config()) {
    mutable_shot_change_detection_config()->::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig::MergeFrom(from.shot_change_detection_config());
  }
  if (from.has_explicit_content_detection_config()) {
    mutable_explicit_content_detection_config()->::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig::MergeFrom(from.explicit_content_detection_config());
  }
  if (from.has_speech_transcription_config()) {
    mutable_speech_transcription_config()->::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig::MergeFrom(from.speech_transcription_config());
  }
}

void VideoContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.VideoContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoContext::CopyFrom(const VideoContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.VideoContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoContext::IsInitialized() const {
  return true;
}

void VideoContext::Swap(VideoContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoContext::InternalSwap(VideoContext* other) {
  using std::swap;
  CastToBase(&segments_)->InternalSwap(CastToBase(&other->segments_));
  swap(label_detection_config_, other->label_detection_config_);
  swap(shot_change_detection_config_, other->shot_change_detection_config_);
  swap(explicit_content_detection_config_, other->explicit_content_detection_config_);
  swap(speech_transcription_config_, other->speech_transcription_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VideoContext::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LabelDetectionConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelDetectionConfig::kLabelDetectionModeFieldNumber;
const int LabelDetectionConfig::kStationaryCameraFieldNumber;
const int LabelDetectionConfig::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelDetectionConfig::LabelDetectionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelDetectionConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
}
LabelDetectionConfig::LabelDetectionConfig(const LabelDetectionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  ::memcpy(&label_detection_mode_, &from.label_detection_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&stationary_camera_) -
    reinterpret_cast<char*>(&label_detection_mode_)) + sizeof(stationary_camera_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
}

void LabelDetectionConfig::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_detection_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stationary_camera_) -
      reinterpret_cast<char*>(&label_detection_mode_)) + sizeof(stationary_camera_));
}

LabelDetectionConfig::~LabelDetectionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  SharedDtor();
}

void LabelDetectionConfig::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LabelDetectionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LabelDetectionConfig::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelDetectionConfig& LabelDetectionConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelDetectionConfig.base);
  return *internal_default_instance();
}


void LabelDetectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_detection_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stationary_camera_) -
      reinterpret_cast<char*>(&label_detection_mode_)) + sizeof(stationary_camera_));
  _internal_metadata_.Clear();
}

bool LabelDetectionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.videointelligence.v1p1beta1.LabelDetectionMode label_detection_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_label_detection_mode(static_cast< ::google::cloud::videointelligence::v1p1beta1::LabelDetectionMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool stationary_camera = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stationary_camera_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  return false;
#undef DO_
}

void LabelDetectionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1p1beta1.LabelDetectionMode label_detection_mode = 1;
  if (this->label_detection_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->label_detection_mode(), output);
  }

  // bool stationary_camera = 2;
  if (this->stationary_camera() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stationary_camera(), output);
  }

  // string model = 3;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
}

::google::protobuf::uint8* LabelDetectionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1p1beta1.LabelDetectionMode label_detection_mode = 1;
  if (this->label_detection_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->label_detection_mode(), target);
  }

  // bool stationary_camera = 2;
  if (this->stationary_camera() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stationary_camera(), target);
  }

  // string model = 3;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  return target;
}

size_t LabelDetectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string model = 3;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // .google.cloud.videointelligence.v1p1beta1.LabelDetectionMode label_detection_mode = 1;
  if (this->label_detection_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->label_detection_mode());
  }

  // bool stationary_camera = 2;
  if (this->stationary_camera() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelDetectionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelDetectionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelDetectionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
    MergeFrom(*source);
  }
}

void LabelDetectionConfig::MergeFrom(const LabelDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.label_detection_mode() != 0) {
    set_label_detection_mode(from.label_detection_mode());
  }
  if (from.stationary_camera() != 0) {
    set_stationary_camera(from.stationary_camera());
  }
}

void LabelDetectionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelDetectionConfig::CopyFrom(const LabelDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelDetectionConfig::IsInitialized() const {
  return true;
}

void LabelDetectionConfig::Swap(LabelDetectionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelDetectionConfig::InternalSwap(LabelDetectionConfig* other) {
  using std::swap;
  model_.Swap(&other->model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(label_detection_mode_, other->label_detection_mode_);
  swap(stationary_camera_, other->stationary_camera_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LabelDetectionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShotChangeDetectionConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShotChangeDetectionConfig::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShotChangeDetectionConfig::ShotChangeDetectionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ShotChangeDetectionConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
}
ShotChangeDetectionConfig::ShotChangeDetectionConfig(const ShotChangeDetectionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
}

void ShotChangeDetectionConfig::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ShotChangeDetectionConfig::~ShotChangeDetectionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  SharedDtor();
}

void ShotChangeDetectionConfig::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShotChangeDetectionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShotChangeDetectionConfig::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShotChangeDetectionConfig& ShotChangeDetectionConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ShotChangeDetectionConfig.base);
  return *internal_default_instance();
}


void ShotChangeDetectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ShotChangeDetectionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  return false;
#undef DO_
}

void ShotChangeDetectionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
}

::google::protobuf::uint8* ShotChangeDetectionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  return target;
}

size_t ShotChangeDetectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShotChangeDetectionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ShotChangeDetectionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShotChangeDetectionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
    MergeFrom(*source);
  }
}

void ShotChangeDetectionConfig::MergeFrom(const ShotChangeDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
}

void ShotChangeDetectionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShotChangeDetectionConfig::CopyFrom(const ShotChangeDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShotChangeDetectionConfig::IsInitialized() const {
  return true;
}

void ShotChangeDetectionConfig::Swap(ShotChangeDetectionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShotChangeDetectionConfig::InternalSwap(ShotChangeDetectionConfig* other) {
  using std::swap;
  model_.Swap(&other->model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShotChangeDetectionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExplicitContentDetectionConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExplicitContentDetectionConfig::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExplicitContentDetectionConfig::ExplicitContentDetectionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ExplicitContentDetectionConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
}
ExplicitContentDetectionConfig::ExplicitContentDetectionConfig(const ExplicitContentDetectionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
}

void ExplicitContentDetectionConfig::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExplicitContentDetectionConfig::~ExplicitContentDetectionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  SharedDtor();
}

void ExplicitContentDetectionConfig::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExplicitContentDetectionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExplicitContentDetectionConfig::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExplicitContentDetectionConfig& ExplicitContentDetectionConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ExplicitContentDetectionConfig.base);
  return *internal_default_instance();
}


void ExplicitContentDetectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ExplicitContentDetectionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  return false;
#undef DO_
}

void ExplicitContentDetectionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
}

::google::protobuf::uint8* ExplicitContentDetectionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  return target;
}

size_t ExplicitContentDetectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExplicitContentDetectionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ExplicitContentDetectionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExplicitContentDetectionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
    MergeFrom(*source);
  }
}

void ExplicitContentDetectionConfig::MergeFrom(const ExplicitContentDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
}

void ExplicitContentDetectionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplicitContentDetectionConfig::CopyFrom(const ExplicitContentDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplicitContentDetectionConfig::IsInitialized() const {
  return true;
}

void ExplicitContentDetectionConfig::Swap(ExplicitContentDetectionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExplicitContentDetectionConfig::InternalSwap(ExplicitContentDetectionConfig* other) {
  using std::swap;
  model_.Swap(&other->model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExplicitContentDetectionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VideoSegment::InitAsDefaultInstance() {
  ::google::cloud::videointelligence::v1p1beta1::_VideoSegment_default_instance_._instance.get_mutable()->start_time_offset_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::cloud::videointelligence::v1p1beta1::_VideoSegment_default_instance_._instance.get_mutable()->end_time_offset_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void VideoSegment::clear_start_time_offset() {
  if (GetArenaNoVirtual() == NULL && start_time_offset_ != NULL) {
    delete start_time_offset_;
  }
  start_time_offset_ = NULL;
}
void VideoSegment::clear_end_time_offset() {
  if (GetArenaNoVirtual() == NULL && end_time_offset_ != NULL) {
    delete end_time_offset_;
  }
  end_time_offset_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoSegment::kStartTimeOffsetFieldNumber;
const int VideoSegment::kEndTimeOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoSegment::VideoSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoSegment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.VideoSegment)
}
VideoSegment::VideoSegment(const VideoSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_time_offset()) {
    start_time_offset_ = new ::google::protobuf::Duration(*from.start_time_offset_);
  } else {
    start_time_offset_ = NULL;
  }
  if (from.has_end_time_offset()) {
    end_time_offset_ = new ::google::protobuf::Duration(*from.end_time_offset_);
  } else {
    end_time_offset_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.VideoSegment)
}

void VideoSegment::SharedCtor() {
  ::memset(&start_time_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_offset_) -
      reinterpret_cast<char*>(&start_time_offset_)) + sizeof(end_time_offset_));
}

VideoSegment::~VideoSegment() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  SharedDtor();
}

void VideoSegment::SharedDtor() {
  if (this != internal_default_instance()) delete start_time_offset_;
  if (this != internal_default_instance()) delete end_time_offset_;
}

void VideoSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VideoSegment::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoSegment& VideoSegment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoSegment.base);
  return *internal_default_instance();
}


void VideoSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && start_time_offset_ != NULL) {
    delete start_time_offset_;
  }
  start_time_offset_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_offset_ != NULL) {
    delete end_time_offset_;
  }
  end_time_offset_ = NULL;
  _internal_metadata_.Clear();
}

bool VideoSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration start_time_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration end_time_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  return false;
#undef DO_
}

void VideoSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time_offset = 1;
  if (this->has_start_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_start_time_offset(), output);
  }

  // .google.protobuf.Duration end_time_offset = 2;
  if (this->has_end_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_end_time_offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.VideoSegment)
}

::google::protobuf::uint8* VideoSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time_offset = 1;
  if (this->has_start_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_start_time_offset(), deterministic, target);
  }

  // .google.protobuf.Duration end_time_offset = 2;
  if (this->has_end_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_end_time_offset(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  return target;
}

size_t VideoSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration start_time_offset = 1;
  if (this->has_start_time_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_offset_);
  }

  // .google.protobuf.Duration end_time_offset = 2;
  if (this->has_end_time_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_time_offset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.VideoSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.VideoSegment)
    MergeFrom(*source);
  }
}

void VideoSegment::MergeFrom(const VideoSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time_offset()) {
    mutable_start_time_offset()->::google::protobuf::Duration::MergeFrom(from.start_time_offset());
  }
  if (from.has_end_time_offset()) {
    mutable_end_time_offset()->::google::protobuf::Duration::MergeFrom(from.end_time_offset());
  }
}

void VideoSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoSegment::CopyFrom(const VideoSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.VideoSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSegment::IsInitialized() const {
  return true;
}

void VideoSegment::Swap(VideoSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoSegment::InternalSwap(VideoSegment* other) {
  using std::swap;
  swap(start_time_offset_, other->start_time_offset_);
  swap(end_time_offset_, other->end_time_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VideoSegment::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LabelSegment::InitAsDefaultInstance() {
  ::google::cloud::videointelligence::v1p1beta1::_LabelSegment_default_instance_._instance.get_mutable()->segment_ = const_cast< ::google::cloud::videointelligence::v1p1beta1::VideoSegment*>(
      ::google::cloud::videointelligence::v1p1beta1::VideoSegment::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelSegment::kSegmentFieldNumber;
const int LabelSegment::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelSegment::LabelSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelSegment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.LabelSegment)
}
LabelSegment::LabelSegment(const LabelSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_segment()) {
    segment_ = new ::google::cloud::videointelligence::v1p1beta1::VideoSegment(*from.segment_);
  } else {
    segment_ = NULL;
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.LabelSegment)
}

void LabelSegment::SharedCtor() {
  ::memset(&segment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&segment_)) + sizeof(confidence_));
}

LabelSegment::~LabelSegment() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  SharedDtor();
}

void LabelSegment::SharedDtor() {
  if (this != internal_default_instance()) delete segment_;
}

void LabelSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LabelSegment::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelSegment& LabelSegment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelSegment.base);
  return *internal_default_instance();
}


void LabelSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && segment_ != NULL) {
    delete segment_;
  }
  segment_ = NULL;
  confidence_ = 0;
  _internal_metadata_.Clear();
}

bool LabelSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.videointelligence.v1p1beta1.VideoSegment segment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  return false;
#undef DO_
}

void LabelSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1p1beta1.VideoSegment segment = 1;
  if (this->has_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_segment(), output);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.LabelSegment)
}

::google::protobuf::uint8* LabelSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1p1beta1.VideoSegment segment = 1;
  if (this->has_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_segment(), deterministic, target);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  return target;
}

size_t LabelSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.videointelligence.v1p1beta1.VideoSegment segment = 1;
  if (this->has_segment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *segment_);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.LabelSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.LabelSegment)
    MergeFrom(*source);
  }
}

void LabelSegment::MergeFrom(const LabelSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_segment()) {
    mutable_segment()->::google::cloud::videointelligence::v1p1beta1::VideoSegment::MergeFrom(from.segment());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void LabelSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSegment::CopyFrom(const LabelSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.LabelSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSegment::IsInitialized() const {
  return true;
}

void LabelSegment::Swap(LabelSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelSegment::InternalSwap(LabelSegment* other) {
  using std::swap;
  swap(segment_, other->segment_);
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LabelSegment::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LabelFrame::InitAsDefaultInstance() {
  ::google::cloud::videointelligence::v1p1beta1::_LabelFrame_default_instance_._instance.get_mutable()->time_offset_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void LabelFrame::clear_time_offset() {
  if (GetArenaNoVirtual() == NULL && time_offset_ != NULL) {
    delete time_offset_;
  }
  time_offset_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelFrame::kTimeOffsetFieldNumber;
const int LabelFrame::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelFrame::LabelFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.LabelFrame)
}
LabelFrame::LabelFrame(const LabelFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_offset()) {
    time_offset_ = new ::google::protobuf::Duration(*from.time_offset_);
  } else {
    time_offset_ = NULL;
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.LabelFrame)
}

void LabelFrame::SharedCtor() {
  ::memset(&time_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&time_offset_)) + sizeof(confidence_));
}

LabelFrame::~LabelFrame() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  SharedDtor();
}

void LabelFrame::SharedDtor() {
  if (this != internal_default_instance()) delete time_offset_;
}

void LabelFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LabelFrame::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelFrame& LabelFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelFrame.base);
  return *internal_default_instance();
}


void LabelFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && time_offset_ != NULL) {
    delete time_offset_;
  }
  time_offset_ = NULL;
  confidence_ = 0;
  _internal_metadata_.Clear();
}

bool LabelFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration time_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  return false;
#undef DO_
}

void LabelFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_time_offset(), output);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.LabelFrame)
}

::google::protobuf::uint8* LabelFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_time_offset(), deterministic, target);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  return target;
}

size_t LabelFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_offset_);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.LabelFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.LabelFrame)
    MergeFrom(*source);
  }
}

void LabelFrame::MergeFrom(const LabelFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_offset()) {
    mutable_time_offset()->::google::protobuf::Duration::MergeFrom(from.time_offset());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void LabelFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelFrame::CopyFrom(const LabelFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.LabelFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelFrame::IsInitialized() const {
  return true;
}

void LabelFrame::Swap(LabelFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelFrame::InternalSwap(LabelFrame* other) {
  using std::swap;
  swap(time_offset_, other->time_offset_);
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LabelFrame::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Entity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entity::kEntityIdFieldNumber;
const int Entity::kDescriptionFieldNumber;
const int Entity::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entity::Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_Entity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.Entity)
}
Entity::Entity(const Entity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.entity_id().size() > 0) {
    entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.Entity)
}

void Entity::SharedCtor() {
  entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  entity_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Entity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Entity& Entity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_Entity.base);
  return *internal_default_instance();
}


void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.Entity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.Entity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entity_id().data(), static_cast<int>(this->entity_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.Entity.entity_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.Entity.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.Entity.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.Entity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (this->entity_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_id().data(), static_cast<int>(this->entity_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.Entity.entity_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_id(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.Entity.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.Entity.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.Entity)
}

::google::protobuf::uint8* Entity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.Entity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (this->entity_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_id().data(), static_cast<int>(this->entity_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.Entity.entity_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_id(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.Entity.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.Entity.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.Entity)
  return target;
}

size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.Entity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string entity_id = 1;
  if (this->entity_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_id());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  const Entity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.Entity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.Entity)
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_id().size() > 0) {

    entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  return true;
}

void Entity::Swap(Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity::InternalSwap(Entity* other) {
  using std::swap;
  entity_id_.Swap(&other->entity_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LabelAnnotation::InitAsDefaultInstance() {
  ::google::cloud::videointelligence::v1p1beta1::_LabelAnnotation_default_instance_._instance.get_mutable()->entity_ = const_cast< ::google::cloud::videointelligence::v1p1beta1::Entity*>(
      ::google::cloud::videointelligence::v1p1beta1::Entity::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelAnnotation::kEntityFieldNumber;
const int LabelAnnotation::kCategoryEntitiesFieldNumber;
const int LabelAnnotation::kSegmentsFieldNumber;
const int LabelAnnotation::kFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelAnnotation::LabelAnnotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelAnnotation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
}
LabelAnnotation::LabelAnnotation(const LabelAnnotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      category_entities_(from.category_entities_),
      segments_(from.segments_),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity()) {
    entity_ = new ::google::cloud::videointelligence::v1p1beta1::Entity(*from.entity_);
  } else {
    entity_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
}

void LabelAnnotation::SharedCtor() {
  entity_ = NULL;
}

LabelAnnotation::~LabelAnnotation() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  SharedDtor();
}

void LabelAnnotation::SharedDtor() {
  if (this != internal_default_instance()) delete entity_;
}

void LabelAnnotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LabelAnnotation::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelAnnotation& LabelAnnotation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_LabelAnnotation.base);
  return *internal_default_instance();
}


void LabelAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_entities_.Clear();
  segments_.Clear();
  frames_.Clear();
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) {
    delete entity_;
  }
  entity_ = NULL;
  _internal_metadata_.Clear();
}

bool LabelAnnotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.videointelligence.v1p1beta1.Entity entity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1p1beta1.Entity category_entities = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_category_entities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1p1beta1.LabelSegment segments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1p1beta1.LabelFrame frames = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  return false;
#undef DO_
}

void LabelAnnotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1p1beta1.Entity entity = 1;
  if (this->has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_entity(), output);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.Entity category_entities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_entities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->category_entities(static_cast<int>(i)),
      output);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelSegment segments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->segments(static_cast<int>(i)),
      output);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelFrame frames = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frames_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->frames(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
}

::google::protobuf::uint8* LabelAnnotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1p1beta1.Entity entity = 1;
  if (this->has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_entity(), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.Entity category_entities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_entities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->category_entities(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelSegment segments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->segments(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelFrame frames = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frames_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->frames(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  return target;
}

size_t LabelAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.videointelligence.v1p1beta1.Entity category_entities = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->category_entities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->category_entities(static_cast<int>(i)));
    }
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelSegment segments = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->segments(static_cast<int>(i)));
    }
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelFrame frames = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->frames_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->frames(static_cast<int>(i)));
    }
  }

  // .google.cloud.videointelligence.v1p1beta1.Entity entity = 1;
  if (this->has_entity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *entity_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelAnnotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelAnnotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelAnnotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
    MergeFrom(*source);
  }
}

void LabelAnnotation::MergeFrom(const LabelAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_entities_.MergeFrom(from.category_entities_);
  segments_.MergeFrom(from.segments_);
  frames_.MergeFrom(from.frames_);
  if (from.has_entity()) {
    mutable_entity()->::google::cloud::videointelligence::v1p1beta1::Entity::MergeFrom(from.entity());
  }
}

void LabelAnnotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelAnnotation::CopyFrom(const LabelAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelAnnotation::IsInitialized() const {
  return true;
}

void LabelAnnotation::Swap(LabelAnnotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelAnnotation::InternalSwap(LabelAnnotation* other) {
  using std::swap;
  CastToBase(&category_entities_)->InternalSwap(CastToBase(&other->category_entities_));
  CastToBase(&segments_)->InternalSwap(CastToBase(&other->segments_));
  CastToBase(&frames_)->InternalSwap(CastToBase(&other->frames_));
  swap(entity_, other->entity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LabelAnnotation::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExplicitContentFrame::InitAsDefaultInstance() {
  ::google::cloud::videointelligence::v1p1beta1::_ExplicitContentFrame_default_instance_._instance.get_mutable()->time_offset_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void ExplicitContentFrame::clear_time_offset() {
  if (GetArenaNoVirtual() == NULL && time_offset_ != NULL) {
    delete time_offset_;
  }
  time_offset_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExplicitContentFrame::kTimeOffsetFieldNumber;
const int ExplicitContentFrame::kPornographyLikelihoodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExplicitContentFrame::ExplicitContentFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ExplicitContentFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
}
ExplicitContentFrame::ExplicitContentFrame(const ExplicitContentFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_offset()) {
    time_offset_ = new ::google::protobuf::Duration(*from.time_offset_);
  } else {
    time_offset_ = NULL;
  }
  pornography_likelihood_ = from.pornography_likelihood_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
}

void ExplicitContentFrame::SharedCtor() {
  ::memset(&time_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pornography_likelihood_) -
      reinterpret_cast<char*>(&time_offset_)) + sizeof(pornography_likelihood_));
}

ExplicitContentFrame::~ExplicitContentFrame() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  SharedDtor();
}

void ExplicitContentFrame::SharedDtor() {
  if (this != internal_default_instance()) delete time_offset_;
}

void ExplicitContentFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExplicitContentFrame::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExplicitContentFrame& ExplicitContentFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ExplicitContentFrame.base);
  return *internal_default_instance();
}


void ExplicitContentFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && time_offset_ != NULL) {
    delete time_offset_;
  }
  time_offset_ = NULL;
  pornography_likelihood_ = 0;
  _internal_metadata_.Clear();
}

bool ExplicitContentFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration time_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1p1beta1.Likelihood pornography_likelihood = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pornography_likelihood(static_cast< ::google::cloud::videointelligence::v1p1beta1::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  return false;
#undef DO_
}

void ExplicitContentFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_time_offset(), output);
  }

  // .google.cloud.videointelligence.v1p1beta1.Likelihood pornography_likelihood = 2;
  if (this->pornography_likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pornography_likelihood(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
}

::google::protobuf::uint8* ExplicitContentFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_time_offset(), deterministic, target);
  }

  // .google.cloud.videointelligence.v1p1beta1.Likelihood pornography_likelihood = 2;
  if (this->pornography_likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pornography_likelihood(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  return target;
}

size_t ExplicitContentFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_offset_);
  }

  // .google.cloud.videointelligence.v1p1beta1.Likelihood pornography_likelihood = 2;
  if (this->pornography_likelihood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pornography_likelihood());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExplicitContentFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const ExplicitContentFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExplicitContentFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
    MergeFrom(*source);
  }
}

void ExplicitContentFrame::MergeFrom(const ExplicitContentFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_offset()) {
    mutable_time_offset()->::google::protobuf::Duration::MergeFrom(from.time_offset());
  }
  if (from.pornography_likelihood() != 0) {
    set_pornography_likelihood(from.pornography_likelihood());
  }
}

void ExplicitContentFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplicitContentFrame::CopyFrom(const ExplicitContentFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplicitContentFrame::IsInitialized() const {
  return true;
}

void ExplicitContentFrame::Swap(ExplicitContentFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExplicitContentFrame::InternalSwap(ExplicitContentFrame* other) {
  using std::swap;
  swap(time_offset_, other->time_offset_);
  swap(pornography_likelihood_, other->pornography_likelihood_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExplicitContentFrame::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExplicitContentAnnotation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExplicitContentAnnotation::kFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExplicitContentAnnotation::ExplicitContentAnnotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ExplicitContentAnnotation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
}
ExplicitContentAnnotation::ExplicitContentAnnotation(const ExplicitContentAnnotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
}

void ExplicitContentAnnotation::SharedCtor() {
}

ExplicitContentAnnotation::~ExplicitContentAnnotation() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  SharedDtor();
}

void ExplicitContentAnnotation::SharedDtor() {
}

void ExplicitContentAnnotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExplicitContentAnnotation::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExplicitContentAnnotation& ExplicitContentAnnotation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_ExplicitContentAnnotation.base);
  return *internal_default_instance();
}


void ExplicitContentAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  _internal_metadata_.Clear();
}

bool ExplicitContentAnnotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame frames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  return false;
#undef DO_
}

void ExplicitContentAnnotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame frames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frames_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->frames(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
}

::google::protobuf::uint8* ExplicitContentAnnotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame frames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frames_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->frames(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  return target;
}

size_t ExplicitContentAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame frames = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->frames_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->frames(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExplicitContentAnnotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  const ExplicitContentAnnotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExplicitContentAnnotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
    MergeFrom(*source);
  }
}

void ExplicitContentAnnotation::MergeFrom(const ExplicitContentAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
}

void ExplicitContentAnnotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplicitContentAnnotation::CopyFrom(const ExplicitContentAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplicitContentAnnotation::IsInitialized() const {
  return true;
}

void ExplicitContentAnnotation::Swap(ExplicitContentAnnotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExplicitContentAnnotation::InternalSwap(ExplicitContentAnnotation* other) {
  using std::swap;
  CastToBase(&frames_)->InternalSwap(CastToBase(&other->frames_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExplicitContentAnnotation::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VideoAnnotationResults::InitAsDefaultInstance() {
  ::google::cloud::videointelligence::v1p1beta1::_VideoAnnotationResults_default_instance_._instance.get_mutable()->explicit_annotation_ = const_cast< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation*>(
      ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation::internal_default_instance());
  ::google::cloud::videointelligence::v1p1beta1::_VideoAnnotationResults_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
void VideoAnnotationResults::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoAnnotationResults::kInputUriFieldNumber;
const int VideoAnnotationResults::kSegmentLabelAnnotationsFieldNumber;
const int VideoAnnotationResults::kShotLabelAnnotationsFieldNumber;
const int VideoAnnotationResults::kFrameLabelAnnotationsFieldNumber;
const int VideoAnnotationResults::kShotAnnotationsFieldNumber;
const int VideoAnnotationResults::kExplicitAnnotationFieldNumber;
const int VideoAnnotationResults::kSpeechTranscriptionsFieldNumber;
const int VideoAnnotationResults::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoAnnotationResults::VideoAnnotationResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoAnnotationResults.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
}
VideoAnnotationResults::VideoAnnotationResults(const VideoAnnotationResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      segment_label_annotations_(from.segment_label_annotations_),
      shot_label_annotations_(from.shot_label_annotations_),
      frame_label_annotations_(from.frame_label_annotations_),
      shot_annotations_(from.shot_annotations_),
      speech_transcriptions_(from.speech_transcriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_uri().size() > 0) {
    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_explicit_annotation()) {
    explicit_annotation_ = new ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation(*from.explicit_annotation_);
  } else {
    explicit_annotation_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
}

void VideoAnnotationResults::SharedCtor() {
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&explicit_annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&explicit_annotation_)) + sizeof(error_));
}

VideoAnnotationResults::~VideoAnnotationResults() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  SharedDtor();
}

void VideoAnnotationResults::SharedDtor() {
  input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete explicit_annotation_;
  if (this != internal_default_instance()) delete error_;
}

void VideoAnnotationResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VideoAnnotationResults::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoAnnotationResults& VideoAnnotationResults::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoAnnotationResults.base);
  return *internal_default_instance();
}


void VideoAnnotationResults::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_label_annotations_.Clear();
  shot_label_annotations_.Clear();
  frame_label_annotations_.Clear();
  shot_annotations_.Clear();
  speech_transcriptions_.Clear();
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && explicit_annotation_ != NULL) {
    delete explicit_annotation_;
  }
  explicit_annotation_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  _internal_metadata_.Clear();
}

bool VideoAnnotationResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string input_uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_uri().data(), static_cast<int>(this->input_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.input_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation segment_label_annotations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_segment_label_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation shot_label_annotations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_shot_label_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation frame_label_annotations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_frame_label_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment shot_annotations = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_shot_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation explicit_annotation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_explicit_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.rpc.Status error = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1p1beta1.SpeechTranscription speech_transcriptions = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_speech_transcriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  return false;
#undef DO_
}

void VideoAnnotationResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.input_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_uri(), output);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation segment_label_annotations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_label_annotations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->segment_label_annotations(static_cast<int>(i)),
      output);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation shot_label_annotations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shot_label_annotations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->shot_label_annotations(static_cast<int>(i)),
      output);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation frame_label_annotations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_label_annotations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->frame_label_annotations(static_cast<int>(i)),
      output);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment shot_annotations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shot_annotations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->shot_annotations(static_cast<int>(i)),
      output);
  }

  // .google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation explicit_annotation = 7;
  if (this->has_explicit_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_explicit_annotation(), output);
  }

  // .google.rpc.Status error = 9;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_error(), output);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechTranscription speech_transcriptions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speech_transcriptions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->speech_transcriptions(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
}

::google::protobuf::uint8* VideoAnnotationResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.input_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_uri(), target);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation segment_label_annotations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_label_annotations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->segment_label_annotations(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation shot_label_annotations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shot_label_annotations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->shot_label_annotations(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation frame_label_annotations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_label_annotations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->frame_label_annotations(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment shot_annotations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shot_annotations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->shot_annotations(static_cast<int>(i)), deterministic, target);
  }

  // .google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation explicit_annotation = 7;
  if (this->has_explicit_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_explicit_annotation(), deterministic, target);
  }

  // .google.rpc.Status error = 9;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_error(), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechTranscription speech_transcriptions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speech_transcriptions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->speech_transcriptions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  return target;
}

size_t VideoAnnotationResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation segment_label_annotations = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->segment_label_annotations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->segment_label_annotations(static_cast<int>(i)));
    }
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation shot_label_annotations = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->shot_label_annotations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->shot_label_annotations(static_cast<int>(i)));
    }
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation frame_label_annotations = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->frame_label_annotations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->frame_label_annotations(static_cast<int>(i)));
    }
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment shot_annotations = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->shot_annotations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->shot_annotations(static_cast<int>(i)));
    }
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechTranscription speech_transcriptions = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->speech_transcriptions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->speech_transcriptions(static_cast<int>(i)));
    }
  }

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_uri());
  }

  // .google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation explicit_annotation = 7;
  if (this->has_explicit_annotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *explicit_annotation_);
  }

  // .google.rpc.Status error = 9;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoAnnotationResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoAnnotationResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoAnnotationResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
    MergeFrom(*source);
  }
}

void VideoAnnotationResults::MergeFrom(const VideoAnnotationResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_label_annotations_.MergeFrom(from.segment_label_annotations_);
  shot_label_annotations_.MergeFrom(from.shot_label_annotations_);
  frame_label_annotations_.MergeFrom(from.frame_label_annotations_);
  shot_annotations_.MergeFrom(from.shot_annotations_);
  speech_transcriptions_.MergeFrom(from.speech_transcriptions_);
  if (from.input_uri().size() > 0) {

    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_explicit_annotation()) {
    mutable_explicit_annotation()->::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation::MergeFrom(from.explicit_annotation());
  }
  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
}

void VideoAnnotationResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoAnnotationResults::CopyFrom(const VideoAnnotationResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoAnnotationResults::IsInitialized() const {
  return true;
}

void VideoAnnotationResults::Swap(VideoAnnotationResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoAnnotationResults::InternalSwap(VideoAnnotationResults* other) {
  using std::swap;
  CastToBase(&segment_label_annotations_)->InternalSwap(CastToBase(&other->segment_label_annotations_));
  CastToBase(&shot_label_annotations_)->InternalSwap(CastToBase(&other->shot_label_annotations_));
  CastToBase(&frame_label_annotations_)->InternalSwap(CastToBase(&other->frame_label_annotations_));
  CastToBase(&shot_annotations_)->InternalSwap(CastToBase(&other->shot_annotations_));
  CastToBase(&speech_transcriptions_)->InternalSwap(CastToBase(&other->speech_transcriptions_));
  input_uri_.Swap(&other->input_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(explicit_annotation_, other->explicit_annotation_);
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VideoAnnotationResults::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnnotateVideoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateVideoResponse::kAnnotationResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateVideoResponse::AnnotateVideoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_AnnotateVideoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
}
AnnotateVideoResponse::AnnotateVideoResponse(const AnnotateVideoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      annotation_results_(from.annotation_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
}

void AnnotateVideoResponse::SharedCtor() {
}

AnnotateVideoResponse::~AnnotateVideoResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  SharedDtor();
}

void AnnotateVideoResponse::SharedDtor() {
}

void AnnotateVideoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnnotateVideoResponse::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotateVideoResponse& AnnotateVideoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_AnnotateVideoResponse.base);
  return *internal_default_instance();
}


void AnnotateVideoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_results_.Clear();
  _internal_metadata_.Clear();
}

bool AnnotateVideoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults annotation_results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_annotation_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  return false;
#undef DO_
}

void AnnotateVideoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults annotation_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->annotation_results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->annotation_results(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
}

::google::protobuf::uint8* AnnotateVideoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults annotation_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->annotation_results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->annotation_results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  return target;
}

size_t AnnotateVideoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults annotation_results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->annotation_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->annotation_results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotateVideoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotateVideoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateVideoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
    MergeFrom(*source);
  }
}

void AnnotateVideoResponse::MergeFrom(const AnnotateVideoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_results_.MergeFrom(from.annotation_results_);
}

void AnnotateVideoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateVideoResponse::CopyFrom(const AnnotateVideoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotateVideoResponse::IsInitialized() const {
  return true;
}

void AnnotateVideoResponse::Swap(AnnotateVideoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateVideoResponse::InternalSwap(AnnotateVideoResponse* other) {
  using std::swap;
  CastToBase(&annotation_results_)->InternalSwap(CastToBase(&other->annotation_results_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnnotateVideoResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VideoAnnotationProgress::InitAsDefaultInstance() {
  ::google::cloud::videointelligence::v1p1beta1::_VideoAnnotationProgress_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::videointelligence::v1p1beta1::_VideoAnnotationProgress_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void VideoAnnotationProgress::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void VideoAnnotationProgress::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoAnnotationProgress::kInputUriFieldNumber;
const int VideoAnnotationProgress::kProgressPercentFieldNumber;
const int VideoAnnotationProgress::kStartTimeFieldNumber;
const int VideoAnnotationProgress::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoAnnotationProgress::VideoAnnotationProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoAnnotationProgress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
}
VideoAnnotationProgress::VideoAnnotationProgress(const VideoAnnotationProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_uri().size() > 0) {
    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  progress_percent_ = from.progress_percent_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
}

void VideoAnnotationProgress::SharedCtor() {
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_percent_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(progress_percent_));
}

VideoAnnotationProgress::~VideoAnnotationProgress() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  SharedDtor();
}

void VideoAnnotationProgress::SharedDtor() {
  input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete update_time_;
}

void VideoAnnotationProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VideoAnnotationProgress::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoAnnotationProgress& VideoAnnotationProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_VideoAnnotationProgress.base);
  return *internal_default_instance();
}


void VideoAnnotationProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  progress_percent_ = 0;
  _internal_metadata_.Clear();
}

bool VideoAnnotationProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string input_uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_uri().data(), static_cast<int>(this->input_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.input_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 progress_percent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  return false;
#undef DO_
}

void VideoAnnotationProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.input_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_uri(), output);
  }

  // int32 progress_percent = 2;
  if (this->progress_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->progress_percent(), output);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_start_time(), output);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
}

::google::protobuf::uint8* VideoAnnotationProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.input_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_uri(), target);
  }

  // int32 progress_percent = 2;
  if (this->progress_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->progress_percent(), target);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_start_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_update_time(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  return target;
}

size_t VideoAnnotationProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_uri());
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // int32 progress_percent = 2;
  if (this->progress_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress_percent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoAnnotationProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoAnnotationProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoAnnotationProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
    MergeFrom(*source);
  }
}

void VideoAnnotationProgress::MergeFrom(const VideoAnnotationProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_uri().size() > 0) {

    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.progress_percent() != 0) {
    set_progress_percent(from.progress_percent());
  }
}

void VideoAnnotationProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoAnnotationProgress::CopyFrom(const VideoAnnotationProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoAnnotationProgress::IsInitialized() const {
  return true;
}

void VideoAnnotationProgress::Swap(VideoAnnotationProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoAnnotationProgress::InternalSwap(VideoAnnotationProgress* other) {
  using std::swap;
  input_uri_.Swap(&other->input_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
  swap(update_time_, other->update_time_);
  swap(progress_percent_, other->progress_percent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VideoAnnotationProgress::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnnotateVideoProgress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateVideoProgress::kAnnotationProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateVideoProgress::AnnotateVideoProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_AnnotateVideoProgress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
}
AnnotateVideoProgress::AnnotateVideoProgress(const AnnotateVideoProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      annotation_progress_(from.annotation_progress_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
}

void AnnotateVideoProgress::SharedCtor() {
}

AnnotateVideoProgress::~AnnotateVideoProgress() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  SharedDtor();
}

void AnnotateVideoProgress::SharedDtor() {
}

void AnnotateVideoProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnnotateVideoProgress::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotateVideoProgress& AnnotateVideoProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_AnnotateVideoProgress.base);
  return *internal_default_instance();
}


void AnnotateVideoProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_progress_.Clear();
  _internal_metadata_.Clear();
}

bool AnnotateVideoProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress annotation_progress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_annotation_progress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  return false;
#undef DO_
}

void AnnotateVideoProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress annotation_progress = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->annotation_progress_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->annotation_progress(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
}

::google::protobuf::uint8* AnnotateVideoProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress annotation_progress = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->annotation_progress_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->annotation_progress(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  return target;
}

size_t AnnotateVideoProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress annotation_progress = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->annotation_progress_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->annotation_progress(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotateVideoProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotateVideoProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateVideoProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
    MergeFrom(*source);
  }
}

void AnnotateVideoProgress::MergeFrom(const AnnotateVideoProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_progress_.MergeFrom(from.annotation_progress_);
}

void AnnotateVideoProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateVideoProgress::CopyFrom(const AnnotateVideoProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotateVideoProgress::IsInitialized() const {
  return true;
}

void AnnotateVideoProgress::Swap(AnnotateVideoProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateVideoProgress::InternalSwap(AnnotateVideoProgress* other) {
  using std::swap;
  CastToBase(&annotation_progress_)->InternalSwap(CastToBase(&other->annotation_progress_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnnotateVideoProgress::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechTranscriptionConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechTranscriptionConfig::kLanguageCodeFieldNumber;
const int SpeechTranscriptionConfig::kMaxAlternativesFieldNumber;
const int SpeechTranscriptionConfig::kFilterProfanityFieldNumber;
const int SpeechTranscriptionConfig::kSpeechContextsFieldNumber;
const int SpeechTranscriptionConfig::kEnableAutomaticPunctuationFieldNumber;
const int SpeechTranscriptionConfig::kAudioTracksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechTranscriptionConfig::SpeechTranscriptionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechTranscriptionConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
}
SpeechTranscriptionConfig::SpeechTranscriptionConfig(const SpeechTranscriptionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      speech_contexts_(from.speech_contexts_),
      audio_tracks_(from.audio_tracks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  ::memcpy(&max_alternatives_, &from.max_alternatives_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_automatic_punctuation_) -
    reinterpret_cast<char*>(&max_alternatives_)) + sizeof(enable_automatic_punctuation_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
}

void SpeechTranscriptionConfig::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_alternatives_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_automatic_punctuation_) -
      reinterpret_cast<char*>(&max_alternatives_)) + sizeof(enable_automatic_punctuation_));
}

SpeechTranscriptionConfig::~SpeechTranscriptionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  SharedDtor();
}

void SpeechTranscriptionConfig::SharedDtor() {
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpeechTranscriptionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeechTranscriptionConfig::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechTranscriptionConfig& SpeechTranscriptionConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechTranscriptionConfig.base);
  return *internal_default_instance();
}


void SpeechTranscriptionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speech_contexts_.Clear();
  audio_tracks_.Clear();
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_alternatives_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_automatic_punctuation_) -
      reinterpret_cast<char*>(&max_alternatives_)) + sizeof(enable_automatic_punctuation_));
  _internal_metadata_.Clear();
}

bool SpeechTranscriptionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string language_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_alternatives = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_alternatives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool filter_profanity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_profanity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1p1beta1.SpeechContext speech_contexts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_speech_contexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_automatic_punctuation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_automatic_punctuation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 audio_tracks = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_audio_tracks())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_audio_tracks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  return false;
#undef DO_
}

void SpeechTranscriptionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  // int32 max_alternatives = 2;
  if (this->max_alternatives() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_alternatives(), output);
  }

  // bool filter_profanity = 3;
  if (this->filter_profanity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->filter_profanity(), output);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechContext speech_contexts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speech_contexts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->speech_contexts(static_cast<int>(i)),
      output);
  }

  // bool enable_automatic_punctuation = 5;
  if (this->enable_automatic_punctuation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_automatic_punctuation(), output);
  }

  // repeated int32 audio_tracks = 6;
  if (this->audio_tracks_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _audio_tracks_cached_byte_size_));
  }
  for (int i = 0, n = this->audio_tracks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->audio_tracks(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
}

::google::protobuf::uint8* SpeechTranscriptionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language_code(), target);
  }

  // int32 max_alternatives = 2;
  if (this->max_alternatives() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_alternatives(), target);
  }

  // bool filter_profanity = 3;
  if (this->filter_profanity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->filter_profanity(), target);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechContext speech_contexts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speech_contexts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->speech_contexts(static_cast<int>(i)), deterministic, target);
  }

  // bool enable_automatic_punctuation = 5;
  if (this->enable_automatic_punctuation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enable_automatic_punctuation(), target);
  }

  // repeated int32 audio_tracks = 6;
  if (this->audio_tracks_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _audio_tracks_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->audio_tracks_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  return target;
}

size_t SpeechTranscriptionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechContext speech_contexts = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->speech_contexts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->speech_contexts(static_cast<int>(i)));
    }
  }

  // repeated int32 audio_tracks = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->audio_tracks_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _audio_tracks_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // int32 max_alternatives = 2;
  if (this->max_alternatives() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_alternatives());
  }

  // bool filter_profanity = 3;
  if (this->filter_profanity() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_automatic_punctuation = 5;
  if (this->enable_automatic_punctuation() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechTranscriptionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechTranscriptionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechTranscriptionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
    MergeFrom(*source);
  }
}

void SpeechTranscriptionConfig::MergeFrom(const SpeechTranscriptionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speech_contexts_.MergeFrom(from.speech_contexts_);
  audio_tracks_.MergeFrom(from.audio_tracks_);
  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  if (from.max_alternatives() != 0) {
    set_max_alternatives(from.max_alternatives());
  }
  if (from.filter_profanity() != 0) {
    set_filter_profanity(from.filter_profanity());
  }
  if (from.enable_automatic_punctuation() != 0) {
    set_enable_automatic_punctuation(from.enable_automatic_punctuation());
  }
}

void SpeechTranscriptionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechTranscriptionConfig::CopyFrom(const SpeechTranscriptionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechTranscriptionConfig::IsInitialized() const {
  return true;
}

void SpeechTranscriptionConfig::Swap(SpeechTranscriptionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechTranscriptionConfig::InternalSwap(SpeechTranscriptionConfig* other) {
  using std::swap;
  CastToBase(&speech_contexts_)->InternalSwap(CastToBase(&other->speech_contexts_));
  audio_tracks_.InternalSwap(&other->audio_tracks_);
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(max_alternatives_, other->max_alternatives_);
  swap(filter_profanity_, other->filter_profanity_);
  swap(enable_automatic_punctuation_, other->enable_automatic_punctuation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechTranscriptionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechContext::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechContext::kPhrasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechContext::SpeechContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechContext.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.SpeechContext)
}
SpeechContext::SpeechContext(const SpeechContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      phrases_(from.phrases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.SpeechContext)
}

void SpeechContext::SharedCtor() {
}

SpeechContext::~SpeechContext() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  SharedDtor();
}

void SpeechContext::SharedDtor() {
}

void SpeechContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeechContext::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechContext& SpeechContext::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechContext.base);
  return *internal_default_instance();
}


void SpeechContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phrases_.Clear();
  _internal_metadata_.Clear();
}

bool SpeechContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string phrases = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phrases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phrases(this->phrases_size() - 1).data(),
            static_cast<int>(this->phrases(this->phrases_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  return false;
#undef DO_
}

void SpeechContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phrases = 1;
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phrases(i).data(), static_cast<int>(this->phrases(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phrases(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.SpeechContext)
}

::google::protobuf::uint8* SpeechContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phrases = 1;
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phrases(i).data(), static_cast<int>(this->phrases(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->phrases(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  return target;
}

size_t SpeechContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string phrases = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->phrases_size());
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phrases(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.SpeechContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.SpeechContext)
    MergeFrom(*source);
  }
}

void SpeechContext::MergeFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phrases_.MergeFrom(from.phrases_);
}

void SpeechContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechContext::CopyFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.SpeechContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechContext::IsInitialized() const {
  return true;
}

void SpeechContext::Swap(SpeechContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechContext::InternalSwap(SpeechContext* other) {
  using std::swap;
  phrases_.InternalSwap(CastToBase(&other->phrases_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechContext::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechTranscription::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechTranscription::kAlternativesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechTranscription::SpeechTranscription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechTranscription.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
}
SpeechTranscription::SpeechTranscription(const SpeechTranscription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alternatives_(from.alternatives_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
}

void SpeechTranscription::SharedCtor() {
}

SpeechTranscription::~SpeechTranscription() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  SharedDtor();
}

void SpeechTranscription::SharedDtor() {
}

void SpeechTranscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeechTranscription::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechTranscription& SpeechTranscription::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechTranscription.base);
  return *internal_default_instance();
}


void SpeechTranscription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  _internal_metadata_.Clear();
}

bool SpeechTranscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_alternatives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  return false;
#undef DO_
}

void SpeechTranscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->alternatives(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
}

::google::protobuf::uint8* SpeechTranscription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->alternatives(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  return target;
}

size_t SpeechTranscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->alternatives_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->alternatives(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechTranscription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechTranscription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechTranscription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
    MergeFrom(*source);
  }
}

void SpeechTranscription::MergeFrom(const SpeechTranscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
}

void SpeechTranscription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechTranscription::CopyFrom(const SpeechTranscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechTranscription::IsInitialized() const {
  return true;
}

void SpeechTranscription::Swap(SpeechTranscription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechTranscription::InternalSwap(SpeechTranscription* other) {
  using std::swap;
  CastToBase(&alternatives_)->InternalSwap(CastToBase(&other->alternatives_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechTranscription::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechRecognitionAlternative::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechRecognitionAlternative::kTranscriptFieldNumber;
const int SpeechRecognitionAlternative::kConfidenceFieldNumber;
const int SpeechRecognitionAlternative::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechRecognitionAlternative::SpeechRecognitionAlternative()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechRecognitionAlternative.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
}
SpeechRecognitionAlternative::SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transcript().size() > 0) {
    transcript_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transcript_);
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
}

void SpeechRecognitionAlternative::SharedCtor() {
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

SpeechRecognitionAlternative::~SpeechRecognitionAlternative() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  SharedDtor();
}

void SpeechRecognitionAlternative::SharedDtor() {
  transcript_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpeechRecognitionAlternative::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeechRecognitionAlternative::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechRecognitionAlternative& SpeechRecognitionAlternative::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_SpeechRecognitionAlternative.base);
  return *internal_default_instance();
}


void SpeechRecognitionAlternative::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  transcript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  _internal_metadata_.Clear();
}

bool SpeechRecognitionAlternative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transcript = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transcript().data(), static_cast<int>(this->transcript().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.transcript"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1p1beta1.WordInfo words = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  return false;
#undef DO_
}

void SpeechRecognitionAlternative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.transcript");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transcript(), output);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.WordInfo words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->words(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
}

::google::protobuf::uint8* SpeechRecognitionAlternative::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.transcript");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->transcript(), target);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // repeated .google.cloud.videointelligence.v1p1beta1.WordInfo words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->words(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  return target;
}

size_t SpeechRecognitionAlternative::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.videointelligence.v1p1beta1.WordInfo words = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->words_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->words(static_cast<int>(i)));
    }
  }

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transcript());
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechRecognitionAlternative::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionAlternative* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechRecognitionAlternative>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
    MergeFrom(*source);
  }
}

void SpeechRecognitionAlternative::MergeFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  if (from.transcript().size() > 0) {

    transcript_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transcript_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void SpeechRecognitionAlternative::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionAlternative::CopyFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionAlternative::IsInitialized() const {
  return true;
}

void SpeechRecognitionAlternative::Swap(SpeechRecognitionAlternative* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechRecognitionAlternative::InternalSwap(SpeechRecognitionAlternative* other) {
  using std::swap;
  CastToBase(&words_)->InternalSwap(CastToBase(&other->words_));
  transcript_.Swap(&other->transcript_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechRecognitionAlternative::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WordInfo::InitAsDefaultInstance() {
  ::google::cloud::videointelligence::v1p1beta1::_WordInfo_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::cloud::videointelligence::v1p1beta1::_WordInfo_default_instance_._instance.get_mutable()->end_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void WordInfo::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void WordInfo::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WordInfo::kStartTimeFieldNumber;
const int WordInfo::kEndTimeFieldNumber;
const int WordInfo::kWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WordInfo::WordInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_WordInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1p1beta1.WordInfo)
}
WordInfo::WordInfo(const WordInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.word().size() > 0) {
    word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Duration(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Duration(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1p1beta1.WordInfo)
}

void WordInfo::SharedCtor() {
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

WordInfo::~WordInfo() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1p1beta1.WordInfo)
  SharedDtor();
}

void WordInfo::SharedDtor() {
  word_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void WordInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WordInfo::descriptor() {
  ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WordInfo& WordInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::scc_info_WordInfo.base);
  return *internal_default_instance();
}


void WordInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1p1beta1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  _internal_metadata_.Clear();
}

bool WordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1p1beta1.WordInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration start_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string word = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->word().data(), static_cast<int>(this->word().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1p1beta1.WordInfo.word"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1p1beta1.WordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1p1beta1.WordInfo)
  return false;
#undef DO_
}

void WordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1p1beta1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_start_time(), output);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_end_time(), output);
  }

  // string word = 3;
  if (this->word().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.WordInfo.word");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->word(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1p1beta1.WordInfo)
}

::google::protobuf::uint8* WordInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1p1beta1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_start_time(), deterministic, target);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_end_time(), deterministic, target);
  }

  // string word = 3;
  if (this->word().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1p1beta1.WordInfo.word");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->word(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1p1beta1.WordInfo)
  return target;
}

size_t WordInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1p1beta1.WordInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string word = 3;
  if (this->word().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->word());
  }

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WordInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1p1beta1.WordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WordInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WordInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1p1beta1.WordInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1p1beta1.WordInfo)
    MergeFrom(*source);
  }
}

void WordInfo::MergeFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1p1beta1.WordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.word().size() > 0) {

    word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Duration::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Duration::MergeFrom(from.end_time());
  }
}

void WordInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1p1beta1.WordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordInfo::CopyFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1p1beta1.WordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordInfo::IsInitialized() const {
  return true;
}

void WordInfo::Swap(WordInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WordInfo::InternalSwap(WordInfo* other) {
  using std::swap;
  word_.Swap(&other->word_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WordInfo::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1p1beta1
}  // namespace videointelligence
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::VideoContext* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::VideoContext >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::VideoContext >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::VideoSegment* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::VideoSegment >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::VideoSegment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::LabelSegment* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::LabelSegment >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::LabelSegment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::LabelFrame* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::LabelFrame >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::LabelFrame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::Entity* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::Entity >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::Entity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoResponse* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoProgress* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoProgress >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoProgress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::SpeechContext* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::SpeechContext >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::SpeechContext >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::cloud::videointelligence::v1p1beta1::WordInfo* Arena::CreateMaybeMessage< ::google::cloud::videointelligence::v1p1beta1::WordInfo >(Arena* arena) {
  return Arena::CreateInternal< ::google::cloud::videointelligence::v1p1beta1::WordInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
