// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/table.proto

#include "google/bigtable/admin/v2/table.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Table_ClusterState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ColumnFamily;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GcRule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Table_ClusterStatesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Table_ColumnFamiliesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Table;
}  // namespace protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto
namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace google {
namespace bigtable {
namespace admin {
namespace v2 {
class Table_ClusterStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table_ClusterState>
      _instance;
} _Table_ClusterState_default_instance_;
class Table_ClusterStatesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table_ClusterStatesEntry_DoNotUse>
      _instance;
} _Table_ClusterStatesEntry_DoNotUse_default_instance_;
class Table_ColumnFamiliesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table_ColumnFamiliesEntry_DoNotUse>
      _instance;
} _Table_ColumnFamiliesEntry_DoNotUse_default_instance_;
class TableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table>
      _instance;
} _Table_default_instance_;
class ColumnFamilyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnFamily>
      _instance;
} _ColumnFamily_default_instance_;
class GcRule_IntersectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcRule_Intersection>
      _instance;
} _GcRule_Intersection_default_instance_;
class GcRule_UnionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcRule_Union>
      _instance;
} _GcRule_Union_default_instance_;
class GcRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcRule>
      _instance;
  ::google::protobuf::int32 max_num_versions_;
  const ::google::protobuf::Duration* max_age_;
  const ::google::bigtable::admin::v2::GcRule_Intersection* intersection_;
  const ::google::bigtable::admin::v2::GcRule_Union* union__;
} _GcRule_default_instance_;
class SnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Snapshot>
      _instance;
} _Snapshot_default_instance_;
}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google
namespace protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto {
static void InitDefaultsTable_ClusterState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::bigtable::admin::v2::_Table_ClusterState_default_instance_;
    new (ptr) ::google::bigtable::admin::v2::Table_ClusterState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::bigtable::admin::v2::Table_ClusterState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Table_ClusterState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTable_ClusterState}, {}};

static void InitDefaultsTable_ClusterStatesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::bigtable::admin::v2::_Table_ClusterStatesEntry_DoNotUse_default_instance_;
    new (ptr) ::google::bigtable::admin::v2::Table_ClusterStatesEntry_DoNotUse();
  }
  ::google::bigtable::admin::v2::Table_ClusterStatesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Table_ClusterStatesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTable_ClusterStatesEntry_DoNotUse}, {
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_Table_ClusterState.base,}};

static void InitDefaultsTable_ColumnFamiliesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::bigtable::admin::v2::_Table_ColumnFamiliesEntry_DoNotUse_default_instance_;
    new (ptr) ::google::bigtable::admin::v2::Table_ColumnFamiliesEntry_DoNotUse();
  }
  ::google::bigtable::admin::v2::Table_ColumnFamiliesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Table_ColumnFamiliesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTable_ColumnFamiliesEntry_DoNotUse}, {
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_ColumnFamily.base,}};

static void InitDefaultsTable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::bigtable::admin::v2::_Table_default_instance_;
    new (ptr) ::google::bigtable::admin::v2::Table();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::bigtable::admin::v2::Table::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Table =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTable}, {
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_Table_ClusterStatesEntry_DoNotUse.base,
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_Table_ColumnFamiliesEntry_DoNotUse.base,}};

static void InitDefaultsColumnFamily() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::bigtable::admin::v2::_ColumnFamily_default_instance_;
    new (ptr) ::google::bigtable::admin::v2::ColumnFamily();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::bigtable::admin::v2::ColumnFamily::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ColumnFamily =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsColumnFamily}, {
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_GcRule.base,}};

static void InitDefaultsGcRule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::bigtable::admin::v2::_GcRule_Intersection_default_instance_;
    new (ptr) ::google::bigtable::admin::v2::GcRule_Intersection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::google::bigtable::admin::v2::_GcRule_Union_default_instance_;
    new (ptr) ::google::bigtable::admin::v2::GcRule_Union();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::google::bigtable::admin::v2::_GcRule_default_instance_;
    new (ptr) ::google::bigtable::admin::v2::GcRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::bigtable::admin::v2::GcRule_Intersection::InitAsDefaultInstance();
  ::google::bigtable::admin::v2::GcRule_Union::InitAsDefaultInstance();
  ::google::bigtable::admin::v2::GcRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GcRule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGcRule}, {
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

static void InitDefaultsSnapshot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::bigtable::admin::v2::_Snapshot_default_instance_;
    new (ptr) ::google::bigtable::admin::v2::Snapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::bigtable::admin::v2::Snapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Snapshot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSnapshot}, {
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_Table.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Table_ClusterState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Table_ClusterStatesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Table_ColumnFamiliesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Table.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ColumnFamily.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcRule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Snapshot.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table_ClusterState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table_ClusterState, replication_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table_ClusterStatesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table_ClusterStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table_ClusterStatesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table_ClusterStatesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table_ColumnFamiliesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table_ColumnFamiliesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table_ColumnFamiliesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table_ColumnFamiliesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table, cluster_states_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table, column_families_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Table, granularity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::ColumnFamily, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::ColumnFamily, gc_rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::GcRule_Intersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::GcRule_Intersection, rules_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::GcRule_Union, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::GcRule_Union, rules_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::GcRule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::GcRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::bigtable::admin::v2::GcRuleDefaultTypeInternal, max_num_versions_),
  offsetof(::google::bigtable::admin::v2::GcRuleDefaultTypeInternal, max_age_),
  offsetof(::google::bigtable::admin::v2::GcRuleDefaultTypeInternal, intersection_),
  offsetof(::google::bigtable::admin::v2::GcRuleDefaultTypeInternal, union__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::GcRule, rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Snapshot, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Snapshot, source_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Snapshot, data_size_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Snapshot, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Snapshot, delete_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Snapshot, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::v2::Snapshot, description_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::bigtable::admin::v2::Table_ClusterState)},
  { 6, 13, sizeof(::google::bigtable::admin::v2::Table_ClusterStatesEntry_DoNotUse)},
  { 15, 22, sizeof(::google::bigtable::admin::v2::Table_ColumnFamiliesEntry_DoNotUse)},
  { 24, -1, sizeof(::google::bigtable::admin::v2::Table)},
  { 33, -1, sizeof(::google::bigtable::admin::v2::ColumnFamily)},
  { 39, -1, sizeof(::google::bigtable::admin::v2::GcRule_Intersection)},
  { 45, -1, sizeof(::google::bigtable::admin::v2::GcRule_Union)},
  { 51, -1, sizeof(::google::bigtable::admin::v2::GcRule)},
  { 61, -1, sizeof(::google::bigtable::admin::v2::Snapshot)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::v2::_Table_ClusterState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::v2::_Table_ClusterStatesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::v2::_Table_ColumnFamiliesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::v2::_Table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::v2::_ColumnFamily_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::v2::_GcRule_Intersection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::v2::_GcRule_Union_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::v2::_GcRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::v2::_Snapshot_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/bigtable/admin/v2/table.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$google/bigtable/admin/v2/table.proto\022\030"
      "google.bigtable.admin.v2\032\034google/api/ann"
      "otations.proto\032\036google/protobuf/duration"
      ".proto\032\037google/protobuf/timestamp.proto\""
      "\313\006\n\005Table\022\014\n\004name\030\001 \001(\t\022J\n\016cluster_state"
      "s\030\002 \003(\01322.google.bigtable.admin.v2.Table"
      ".ClusterStatesEntry\022L\n\017column_families\030\003"
      " \003(\01323.google.bigtable.admin.v2.Table.Co"
      "lumnFamiliesEntry\022I\n\013granularity\030\004 \001(\01624"
      ".google.bigtable.admin.v2.Table.Timestam"
      "pGranularity\032\342\001\n\014ClusterState\022X\n\021replica"
      "tion_state\030\001 \001(\0162=.google.bigtable.admin"
      ".v2.Table.ClusterState.ReplicationState\""
      "x\n\020ReplicationState\022\023\n\017STATE_NOT_KNOWN\020\000"
      "\022\020\n\014INITIALIZING\020\001\022\027\n\023PLANNED_MAINTENANC"
      "E\020\002\022\031\n\025UNPLANNED_MAINTENANCE\020\003\022\t\n\005READY\020"
      "\004\032b\n\022ClusterStatesEntry\022\013\n\003key\030\001 \001(\t\022;\n\005"
      "value\030\002 \001(\0132,.google.bigtable.admin.v2.T"
      "able.ClusterState:\0028\001\032]\n\023ColumnFamiliesE"
      "ntry\022\013\n\003key\030\001 \001(\t\0225\n\005value\030\002 \001(\0132&.googl"
      "e.bigtable.admin.v2.ColumnFamily:\0028\001\"I\n\024"
      "TimestampGranularity\022%\n!TIMESTAMP_GRANUL"
      "ARITY_UNSPECIFIED\020\000\022\n\n\006MILLIS\020\001\"\\\n\004View\022"
      "\024\n\020VIEW_UNSPECIFIED\020\000\022\r\n\tNAME_ONLY\020\001\022\017\n\013"
      "SCHEMA_VIEW\020\002\022\024\n\020REPLICATION_VIEW\020\003\022\010\n\004F"
      "ULL\020\004\"A\n\014ColumnFamily\0221\n\007gc_rule\030\001 \001(\0132 "
      ".google.bigtable.admin.v2.GcRule\"\325\002\n\006GcR"
      "ule\022\032\n\020max_num_versions\030\001 \001(\005H\000\022,\n\007max_a"
      "ge\030\002 \001(\0132\031.google.protobuf.DurationH\000\022E\n"
      "\014intersection\030\003 \001(\0132-.google.bigtable.ad"
      "min.v2.GcRule.IntersectionH\000\0227\n\005union\030\004 "
      "\001(\0132&.google.bigtable.admin.v2.GcRule.Un"
      "ionH\000\032\?\n\014Intersection\022/\n\005rules\030\001 \003(\0132 .g"
      "oogle.bigtable.admin.v2.GcRule\0328\n\005Union\022"
      "/\n\005rules\030\001 \003(\0132 .google.bigtable.admin.v"
      "2.GcRuleB\006\n\004rule\"\317\002\n\010Snapshot\022\014\n\004name\030\001 "
      "\001(\t\0225\n\014source_table\030\002 \001(\0132\037.google.bigta"
      "ble.admin.v2.Table\022\027\n\017data_size_bytes\030\003 "
      "\001(\003\022/\n\013create_time\030\004 \001(\0132\032.google.protob"
      "uf.Timestamp\022/\n\013delete_time\030\005 \001(\0132\032.goog"
      "le.protobuf.Timestamp\0227\n\005state\030\006 \001(\0162(.g"
      "oogle.bigtable.admin.v2.Snapshot.State\022\023"
      "\n\013description\030\007 \001(\t\"5\n\005State\022\023\n\017STATE_NO"
      "T_KNOWN\020\000\022\t\n\005READY\020\001\022\014\n\010CREATING\020\002B\255\001\n\034c"
      "om.google.bigtable.admin.v2B\nTableProtoP"
      "\001Z=google.golang.org/genproto/googleapis"
      "/bigtable/admin/v2;admin\252\002\036Google.Cloud."
      "Bigtable.Admin.V2\312\002\036Google\\Cloud\\Bigtabl"
      "e\\Admin\\V2b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1938);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/bigtable/admin/v2/table.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto
namespace google {
namespace bigtable {
namespace admin {
namespace v2 {
const ::google::protobuf::EnumDescriptor* Table_ClusterState_ReplicationState_descriptor() {
  protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_enum_descriptors[0];
}
bool Table_ClusterState_ReplicationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Table_ClusterState_ReplicationState Table_ClusterState::STATE_NOT_KNOWN;
const Table_ClusterState_ReplicationState Table_ClusterState::INITIALIZING;
const Table_ClusterState_ReplicationState Table_ClusterState::PLANNED_MAINTENANCE;
const Table_ClusterState_ReplicationState Table_ClusterState::UNPLANNED_MAINTENANCE;
const Table_ClusterState_ReplicationState Table_ClusterState::READY;
const Table_ClusterState_ReplicationState Table_ClusterState::ReplicationState_MIN;
const Table_ClusterState_ReplicationState Table_ClusterState::ReplicationState_MAX;
const int Table_ClusterState::ReplicationState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Table_TimestampGranularity_descriptor() {
  protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_enum_descriptors[1];
}
bool Table_TimestampGranularity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Table_TimestampGranularity Table::TIMESTAMP_GRANULARITY_UNSPECIFIED;
const Table_TimestampGranularity Table::MILLIS;
const Table_TimestampGranularity Table::TimestampGranularity_MIN;
const Table_TimestampGranularity Table::TimestampGranularity_MAX;
const int Table::TimestampGranularity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Table_View_descriptor() {
  protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_enum_descriptors[2];
}
bool Table_View_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Table_View Table::VIEW_UNSPECIFIED;
const Table_View Table::NAME_ONLY;
const Table_View Table::SCHEMA_VIEW;
const Table_View Table::REPLICATION_VIEW;
const Table_View Table::FULL;
const Table_View Table::View_MIN;
const Table_View Table::View_MAX;
const int Table::View_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Snapshot_State_descriptor() {
  protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_enum_descriptors[3];
}
bool Snapshot_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Snapshot_State Snapshot::STATE_NOT_KNOWN;
const Snapshot_State Snapshot::READY;
const Snapshot_State Snapshot::CREATING;
const Snapshot_State Snapshot::State_MIN;
const Snapshot_State Snapshot::State_MAX;
const int Snapshot::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Table_ClusterState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table_ClusterState::kReplicationStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table_ClusterState::Table_ClusterState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_Table_ClusterState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.Table.ClusterState)
}
Table_ClusterState::Table_ClusterState(const Table_ClusterState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replication_state_ = from.replication_state_;
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.Table.ClusterState)
}

void Table_ClusterState::SharedCtor() {
  replication_state_ = 0;
}

Table_ClusterState::~Table_ClusterState() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.Table.ClusterState)
  SharedDtor();
}

void Table_ClusterState::SharedDtor() {
}

void Table_ClusterState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Table_ClusterState::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table_ClusterState& Table_ClusterState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_Table_ClusterState.base);
  return *internal_default_instance();
}


void Table_ClusterState::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.Table.ClusterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replication_state_ = 0;
  _internal_metadata_.Clear();
}

bool Table_ClusterState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.Table.ClusterState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_replication_state(static_cast< ::google::bigtable::admin::v2::Table_ClusterState_ReplicationState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.Table.ClusterState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.Table.ClusterState)
  return false;
#undef DO_
}

void Table_ClusterState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.Table.ClusterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;
  if (this->replication_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->replication_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.Table.ClusterState)
}

::google::protobuf::uint8* Table_ClusterState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.Table.ClusterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;
  if (this->replication_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->replication_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.Table.ClusterState)
  return target;
}

size_t Table_ClusterState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.Table.ClusterState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;
  if (this->replication_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->replication_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Table_ClusterState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.Table.ClusterState)
  GOOGLE_DCHECK_NE(&from, this);
  const Table_ClusterState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table_ClusterState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.Table.ClusterState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.Table.ClusterState)
    MergeFrom(*source);
  }
}

void Table_ClusterState::MergeFrom(const Table_ClusterState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.Table.ClusterState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.replication_state() != 0) {
    set_replication_state(from.replication_state());
  }
}

void Table_ClusterState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.Table.ClusterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_ClusterState::CopyFrom(const Table_ClusterState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.Table.ClusterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_ClusterState::IsInitialized() const {
  return true;
}

void Table_ClusterState::Swap(Table_ClusterState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table_ClusterState::InternalSwap(Table_ClusterState* other) {
  using std::swap;
  swap(replication_state_, other->replication_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Table_ClusterState::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Table_ClusterStatesEntry_DoNotUse::Table_ClusterStatesEntry_DoNotUse() {}
Table_ClusterStatesEntry_DoNotUse::Table_ClusterStatesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Table_ClusterStatesEntry_DoNotUse::MergeFrom(const Table_ClusterStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Table_ClusterStatesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[1];
}
void Table_ClusterStatesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

Table_ColumnFamiliesEntry_DoNotUse::Table_ColumnFamiliesEntry_DoNotUse() {}
Table_ColumnFamiliesEntry_DoNotUse::Table_ColumnFamiliesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Table_ColumnFamiliesEntry_DoNotUse::MergeFrom(const Table_ColumnFamiliesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Table_ColumnFamiliesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[2];
}
void Table_ColumnFamiliesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Table::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kNameFieldNumber;
const int Table::kClusterStatesFieldNumber;
const int Table::kColumnFamiliesFieldNumber;
const int Table::kGranularityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_Table.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.Table)
}
Table::Table(const Table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_states_.MergeFrom(from.cluster_states_);
  column_families_.MergeFrom(from.column_families_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  granularity_ = from.granularity_;
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.Table)
}

void Table::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  granularity_ = 0;
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table& Table::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_Table.base);
  return *internal_default_instance();
}


void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_states_.Clear();
  column_families_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  granularity_ = 0;
  _internal_metadata_.Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.Table)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.Table.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.bigtable.admin.v2.Table.ClusterState> cluster_states = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          Table_ClusterStatesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Table_ClusterStatesEntry_DoNotUse,
              ::std::string, ::google::bigtable::admin::v2::Table_ClusterState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Table_ClusterState > > parser(&cluster_states_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.Table.ClusterStatesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.bigtable.admin.v2.ColumnFamily> column_families = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          Table_ColumnFamiliesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Table_ColumnFamiliesEntry_DoNotUse,
              ::std::string, ::google::bigtable::admin::v2::ColumnFamily,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily > > parser(&column_families_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.Table.ColumnFamiliesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_granularity(static_cast< ::google::bigtable::admin::v2::Table_TimestampGranularity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.Table.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, .google.bigtable.admin.v2.Table.ClusterState> cluster_states = 2;
  if (!this->cluster_states().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Table_ClusterState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.bigtable.admin.v2.Table.ClusterStatesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->cluster_states().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->cluster_states().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Table_ClusterState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Table_ClusterState >::const_iterator
          it = this->cluster_states().begin();
          it != this->cluster_states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Table_ClusterStatesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cluster_states_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Table_ClusterStatesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Table_ClusterState >::const_iterator
          it = this->cluster_states().begin();
          it != this->cluster_states().end(); ++it) {
        entry.reset(cluster_states_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .google.bigtable.admin.v2.ColumnFamily> column_families = 3;
  if (!this->column_families().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.bigtable.admin.v2.Table.ColumnFamiliesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->column_families().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->column_families().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Table_ColumnFamiliesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(column_families_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Table_ColumnFamiliesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it) {
        entry.reset(column_families_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;
  if (this->granularity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->granularity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.Table.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, .google.bigtable.admin.v2.Table.ClusterState> cluster_states = 2;
  if (!this->cluster_states().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Table_ClusterState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.bigtable.admin.v2.Table.ClusterStatesEntry.key");
      }
    };

    if (deterministic &&
        this->cluster_states().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->cluster_states().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Table_ClusterState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Table_ClusterState >::const_iterator
          it = this->cluster_states().begin();
          it != this->cluster_states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Table_ClusterStatesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cluster_states_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Table_ClusterStatesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Table_ClusterState >::const_iterator
          it = this->cluster_states().begin();
          it != this->cluster_states().end(); ++it) {
        entry.reset(cluster_states_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .google.bigtable.admin.v2.ColumnFamily> column_families = 3;
  if (!this->column_families().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.bigtable.admin.v2.Table.ColumnFamiliesEntry.key");
      }
    };

    if (deterministic &&
        this->column_families().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->column_families().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Table_ColumnFamiliesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(column_families_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Table_ColumnFamiliesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it) {
        entry.reset(column_families_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;
  if (this->granularity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->granularity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.Table)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .google.bigtable.admin.v2.Table.ClusterState> cluster_states = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cluster_states_size());
  {
    ::std::unique_ptr<Table_ClusterStatesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::Table_ClusterState >::const_iterator
        it = this->cluster_states().begin();
        it != this->cluster_states().end(); ++it) {
      entry.reset(cluster_states_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .google.bigtable.admin.v2.ColumnFamily> column_families = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->column_families_size());
  {
    ::std::unique_ptr<Table_ColumnFamiliesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::v2::ColumnFamily >::const_iterator
        it = this->column_families().begin();
        it != this->column_families().end(); ++it) {
      entry.reset(column_families_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;
  if (this->granularity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->granularity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cluster_states_.MergeFrom(from.cluster_states_);
  column_families_.MergeFrom(from.column_families_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.granularity() != 0) {
    set_granularity(from.granularity());
  }
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  using std::swap;
  cluster_states_.Swap(&other->cluster_states_);
  column_families_.Swap(&other->column_families_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(granularity_, other->granularity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ColumnFamily::InitAsDefaultInstance() {
  ::google::bigtable::admin::v2::_ColumnFamily_default_instance_._instance.get_mutable()->gc_rule_ = const_cast< ::google::bigtable::admin::v2::GcRule*>(
      ::google::bigtable::admin::v2::GcRule::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnFamily::kGcRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnFamily::ColumnFamily()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_ColumnFamily.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.ColumnFamily)
}
ColumnFamily::ColumnFamily(const ColumnFamily& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gc_rule()) {
    gc_rule_ = new ::google::bigtable::admin::v2::GcRule(*from.gc_rule_);
  } else {
    gc_rule_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.ColumnFamily)
}

void ColumnFamily::SharedCtor() {
  gc_rule_ = NULL;
}

ColumnFamily::~ColumnFamily() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.ColumnFamily)
  SharedDtor();
}

void ColumnFamily::SharedDtor() {
  if (this != internal_default_instance()) delete gc_rule_;
}

void ColumnFamily::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ColumnFamily::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColumnFamily& ColumnFamily::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_ColumnFamily.base);
  return *internal_default_instance();
}


void ColumnFamily::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.ColumnFamily)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && gc_rule_ != NULL) {
    delete gc_rule_;
  }
  gc_rule_ = NULL;
  _internal_metadata_.Clear();
}

bool ColumnFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.ColumnFamily)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.bigtable.admin.v2.GcRule gc_rule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gc_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.ColumnFamily)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.ColumnFamily)
  return false;
#undef DO_
}

void ColumnFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.ColumnFamily)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.bigtable.admin.v2.GcRule gc_rule = 1;
  if (this->has_gc_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_gc_rule(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.ColumnFamily)
}

::google::protobuf::uint8* ColumnFamily::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.ColumnFamily)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.bigtable.admin.v2.GcRule gc_rule = 1;
  if (this->has_gc_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_gc_rule(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.ColumnFamily)
  return target;
}

size_t ColumnFamily::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.ColumnFamily)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.bigtable.admin.v2.GcRule gc_rule = 1;
  if (this->has_gc_rule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gc_rule_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnFamily::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.ColumnFamily)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnFamily* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnFamily>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.ColumnFamily)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.ColumnFamily)
    MergeFrom(*source);
  }
}

void ColumnFamily::MergeFrom(const ColumnFamily& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.ColumnFamily)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gc_rule()) {
    mutable_gc_rule()->::google::bigtable::admin::v2::GcRule::MergeFrom(from.gc_rule());
  }
}

void ColumnFamily::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.ColumnFamily)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnFamily::CopyFrom(const ColumnFamily& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.ColumnFamily)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnFamily::IsInitialized() const {
  return true;
}

void ColumnFamily::Swap(ColumnFamily* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnFamily::InternalSwap(ColumnFamily* other) {
  using std::swap;
  swap(gc_rule_, other->gc_rule_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ColumnFamily::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcRule_Intersection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcRule_Intersection::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcRule_Intersection::GcRule_Intersection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_GcRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.GcRule.Intersection)
}
GcRule_Intersection::GcRule_Intersection(const GcRule_Intersection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.GcRule.Intersection)
}

void GcRule_Intersection::SharedCtor() {
}

GcRule_Intersection::~GcRule_Intersection() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.GcRule.Intersection)
  SharedDtor();
}

void GcRule_Intersection::SharedDtor() {
}

void GcRule_Intersection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GcRule_Intersection::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcRule_Intersection& GcRule_Intersection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_GcRule.base);
  return *internal_default_instance();
}


void GcRule_Intersection::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.GcRule.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear();
}

bool GcRule_Intersection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.GcRule.Intersection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.admin.v2.GcRule rules = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.GcRule.Intersection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.GcRule.Intersection)
  return false;
#undef DO_
}

void GcRule_Intersection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.GcRule.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->rules(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.GcRule.Intersection)
}

::google::protobuf::uint8* GcRule_Intersection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.GcRule.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rules(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.GcRule.Intersection)
  return target;
}

size_t GcRule_Intersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.GcRule.Intersection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rules(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcRule_Intersection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.GcRule.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  const GcRule_Intersection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcRule_Intersection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.GcRule.Intersection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.GcRule.Intersection)
    MergeFrom(*source);
  }
}

void GcRule_Intersection::MergeFrom(const GcRule_Intersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.GcRule.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
}

void GcRule_Intersection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.GcRule.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcRule_Intersection::CopyFrom(const GcRule_Intersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.GcRule.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcRule_Intersection::IsInitialized() const {
  return true;
}

void GcRule_Intersection::Swap(GcRule_Intersection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcRule_Intersection::InternalSwap(GcRule_Intersection* other) {
  using std::swap;
  CastToBase(&rules_)->InternalSwap(CastToBase(&other->rules_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GcRule_Intersection::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcRule_Union::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcRule_Union::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcRule_Union::GcRule_Union()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_GcRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.GcRule.Union)
}
GcRule_Union::GcRule_Union(const GcRule_Union& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.GcRule.Union)
}

void GcRule_Union::SharedCtor() {
}

GcRule_Union::~GcRule_Union() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.GcRule.Union)
  SharedDtor();
}

void GcRule_Union::SharedDtor() {
}

void GcRule_Union::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GcRule_Union::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcRule_Union& GcRule_Union::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_GcRule.base);
  return *internal_default_instance();
}


void GcRule_Union::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.GcRule.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear();
}

bool GcRule_Union::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.GcRule.Union)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.admin.v2.GcRule rules = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.GcRule.Union)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.GcRule.Union)
  return false;
#undef DO_
}

void GcRule_Union::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.GcRule.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->rules(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.GcRule.Union)
}

::google::protobuf::uint8* GcRule_Union::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.GcRule.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rules(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.GcRule.Union)
  return target;
}

size_t GcRule_Union::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.GcRule.Union)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.bigtable.admin.v2.GcRule rules = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rules(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcRule_Union::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.GcRule.Union)
  GOOGLE_DCHECK_NE(&from, this);
  const GcRule_Union* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcRule_Union>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.GcRule.Union)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.GcRule.Union)
    MergeFrom(*source);
  }
}

void GcRule_Union::MergeFrom(const GcRule_Union& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.GcRule.Union)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
}

void GcRule_Union::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.GcRule.Union)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcRule_Union::CopyFrom(const GcRule_Union& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.GcRule.Union)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcRule_Union::IsInitialized() const {
  return true;
}

void GcRule_Union::Swap(GcRule_Union* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcRule_Union::InternalSwap(GcRule_Union* other) {
  using std::swap;
  CastToBase(&rules_)->InternalSwap(CastToBase(&other->rules_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GcRule_Union::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcRule::InitAsDefaultInstance() {
  ::google::bigtable::admin::v2::_GcRule_default_instance_.max_num_versions_ = 0;
  ::google::bigtable::admin::v2::_GcRule_default_instance_.max_age_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::bigtable::admin::v2::_GcRule_default_instance_.intersection_ = const_cast< ::google::bigtable::admin::v2::GcRule_Intersection*>(
      ::google::bigtable::admin::v2::GcRule_Intersection::internal_default_instance());
  ::google::bigtable::admin::v2::_GcRule_default_instance_.union__ = const_cast< ::google::bigtable::admin::v2::GcRule_Union*>(
      ::google::bigtable::admin::v2::GcRule_Union::internal_default_instance());
}
void GcRule::set_allocated_max_age(::google::protobuf::Duration* max_age) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (max_age) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(max_age)->GetArena();
    if (message_arena != submessage_arena) {
      max_age = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_age, submessage_arena);
    }
    set_has_max_age();
    rule_.max_age_ = max_age;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GcRule.max_age)
}
void GcRule::clear_max_age() {
  if (has_max_age()) {
    delete rule_.max_age_;
    clear_has_rule();
  }
}
void GcRule::set_allocated_intersection(::google::bigtable::admin::v2::GcRule_Intersection* intersection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (intersection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intersection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intersection, submessage_arena);
    }
    set_has_intersection();
    rule_.intersection_ = intersection;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GcRule.intersection)
}
void GcRule::set_allocated_union_(::google::bigtable::admin::v2::GcRule_Union* union_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (union_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      union_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, union_, submessage_arena);
    }
    set_has_union_();
    rule_.union__ = union_;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.v2.GcRule.union)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcRule::kMaxNumVersionsFieldNumber;
const int GcRule::kMaxAgeFieldNumber;
const int GcRule::kIntersectionFieldNumber;
const int GcRule::kUnionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcRule::GcRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_GcRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.GcRule)
}
GcRule::GcRule(const GcRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rule();
  switch (from.rule_case()) {
    case kMaxNumVersions: {
      set_max_num_versions(from.max_num_versions());
      break;
    }
    case kMaxAge: {
      mutable_max_age()->::google::protobuf::Duration::MergeFrom(from.max_age());
      break;
    }
    case kIntersection: {
      mutable_intersection()->::google::bigtable::admin::v2::GcRule_Intersection::MergeFrom(from.intersection());
      break;
    }
    case kUnion: {
      mutable_union_()->::google::bigtable::admin::v2::GcRule_Union::MergeFrom(from.union_());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.GcRule)
}

void GcRule::SharedCtor() {
  clear_has_rule();
}

GcRule::~GcRule() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.GcRule)
  SharedDtor();
}

void GcRule::SharedDtor() {
  if (has_rule()) {
    clear_rule();
  }
}

void GcRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GcRule::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcRule& GcRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_GcRule.base);
  return *internal_default_instance();
}


void GcRule::clear_rule() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.admin.v2.GcRule)
  switch (rule_case()) {
    case kMaxNumVersions: {
      // No need to clear
      break;
    }
    case kMaxAge: {
      delete rule_.max_age_;
      break;
    }
    case kIntersection: {
      delete rule_.intersection_;
      break;
    }
    case kUnion: {
      delete rule_.union__;
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RULE_NOT_SET;
}


void GcRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.GcRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rule();
  _internal_metadata_.Clear();
}

bool GcRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.GcRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_num_versions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rule_.max_num_versions_)));
          set_has_max_num_versions();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration max_age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.admin.v2.GcRule.Intersection intersection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intersection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.admin.v2.GcRule.Union union = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_union_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.GcRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.GcRule)
  return false;
#undef DO_
}

void GcRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.GcRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_num_versions = 1;
  if (has_max_num_versions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_num_versions(), output);
  }

  // .google.protobuf.Duration max_age = 2;
  if (has_max_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_max_age(), output);
  }

  // .google.bigtable.admin.v2.GcRule.Intersection intersection = 3;
  if (has_intersection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_intersection(), output);
  }

  // .google.bigtable.admin.v2.GcRule.Union union = 4;
  if (has_union_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_union_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.GcRule)
}

::google::protobuf::uint8* GcRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.GcRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_num_versions = 1;
  if (has_max_num_versions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_num_versions(), target);
  }

  // .google.protobuf.Duration max_age = 2;
  if (has_max_age()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_max_age(), deterministic, target);
  }

  // .google.bigtable.admin.v2.GcRule.Intersection intersection = 3;
  if (has_intersection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_intersection(), deterministic, target);
  }

  // .google.bigtable.admin.v2.GcRule.Union union = 4;
  if (has_union_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_union_(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.GcRule)
  return target;
}

size_t GcRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.GcRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (rule_case()) {
    // int32 max_num_versions = 1;
    case kMaxNumVersions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_versions());
      break;
    }
    // .google.protobuf.Duration max_age = 2;
    case kMaxAge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.max_age_);
      break;
    }
    // .google.bigtable.admin.v2.GcRule.Intersection intersection = 3;
    case kIntersection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.intersection_);
      break;
    }
    // .google.bigtable.admin.v2.GcRule.Union union = 4;
    case kUnion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.union__);
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.GcRule)
  GOOGLE_DCHECK_NE(&from, this);
  const GcRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.GcRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.GcRule)
    MergeFrom(*source);
  }
}

void GcRule::MergeFrom(const GcRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.GcRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rule_case()) {
    case kMaxNumVersions: {
      set_max_num_versions(from.max_num_versions());
      break;
    }
    case kMaxAge: {
      mutable_max_age()->::google::protobuf::Duration::MergeFrom(from.max_age());
      break;
    }
    case kIntersection: {
      mutable_intersection()->::google::bigtable::admin::v2::GcRule_Intersection::MergeFrom(from.intersection());
      break;
    }
    case kUnion: {
      mutable_union_()->::google::bigtable::admin::v2::GcRule_Union::MergeFrom(from.union_());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
}

void GcRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.GcRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcRule::CopyFrom(const GcRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.GcRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcRule::IsInitialized() const {
  return true;
}

void GcRule::Swap(GcRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcRule::InternalSwap(GcRule* other) {
  using std::swap;
  swap(rule_, other->rule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GcRule::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Snapshot::InitAsDefaultInstance() {
  ::google::bigtable::admin::v2::_Snapshot_default_instance_._instance.get_mutable()->source_table_ = const_cast< ::google::bigtable::admin::v2::Table*>(
      ::google::bigtable::admin::v2::Table::internal_default_instance());
  ::google::bigtable::admin::v2::_Snapshot_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::bigtable::admin::v2::_Snapshot_default_instance_._instance.get_mutable()->delete_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Snapshot::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void Snapshot::clear_delete_time() {
  if (GetArenaNoVirtual() == NULL && delete_time_ != NULL) {
    delete delete_time_;
  }
  delete_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snapshot::kNameFieldNumber;
const int Snapshot::kSourceTableFieldNumber;
const int Snapshot::kDataSizeBytesFieldNumber;
const int Snapshot::kCreateTimeFieldNumber;
const int Snapshot::kDeleteTimeFieldNumber;
const int Snapshot::kStateFieldNumber;
const int Snapshot::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snapshot::Snapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_Snapshot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.v2.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_source_table()) {
    source_table_ = new ::google::bigtable::admin::v2::Table(*from.source_table_);
  } else {
    source_table_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_delete_time()) {
    delete_time_ = new ::google::protobuf::Timestamp(*from.delete_time_);
  } else {
    delete_time_ = NULL;
  }
  ::memcpy(&data_size_bytes_, &from.data_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&data_size_bytes_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.v2.Snapshot)
}

void Snapshot::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_table_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&source_table_)) + sizeof(state_));
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.v2.Snapshot)
  SharedDtor();
}

void Snapshot::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_table_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete delete_time_;
}

void Snapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Snapshot::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Snapshot& Snapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::scc_info_Snapshot.base);
  return *internal_default_instance();
}


void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.v2.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && source_table_ != NULL) {
    delete source_table_;
  }
  source_table_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && delete_time_ != NULL) {
    delete delete_time_;
  }
  delete_time_ = NULL;
  ::memset(&data_size_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&data_size_bytes_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool Snapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.v2.Snapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.Snapshot.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.admin.v2.Table source_table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 data_size_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp delete_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.admin.v2.Snapshot.State state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::bigtable::admin::v2::Snapshot_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.v2.Snapshot.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.v2.Snapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.v2.Snapshot)
  return false;
#undef DO_
}

void Snapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.v2.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.Snapshot.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.bigtable.admin.v2.Table source_table = 2;
  if (this->has_source_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_source_table(), output);
  }

  // int64 data_size_bytes = 3;
  if (this->data_size_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->data_size_bytes(), output);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_create_time(), output);
  }

  // .google.protobuf.Timestamp delete_time = 5;
  if (this->has_delete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_delete_time(), output);
  }

  // .google.bigtable.admin.v2.Snapshot.State state = 6;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.Snapshot.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.v2.Snapshot)
}

::google::protobuf::uint8* Snapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.v2.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.Snapshot.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.bigtable.admin.v2.Table source_table = 2;
  if (this->has_source_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_source_table(), deterministic, target);
  }

  // int64 data_size_bytes = 3;
  if (this->data_size_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->data_size_bytes(), target);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_create_time(), deterministic, target);
  }

  // .google.protobuf.Timestamp delete_time = 5;
  if (this->has_delete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_delete_time(), deterministic, target);
  }

  // .google.bigtable.admin.v2.Snapshot.State state = 6;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.v2.Snapshot.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.v2.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.v2.Snapshot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 7;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .google.bigtable.admin.v2.Table source_table = 2;
  if (this->has_source_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_table_);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp delete_time = 5;
  if (this->has_delete_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *delete_time_);
  }

  // int64 data_size_bytes = 3;
  if (this->data_size_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->data_size_bytes());
  }

  // .google.bigtable.admin.v2.Snapshot.State state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.v2.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Snapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Snapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.v2.Snapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.v2.Snapshot)
    MergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.v2.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_source_table()) {
    mutable_source_table()->::google::bigtable::admin::v2::Table::MergeFrom(from.source_table());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_delete_time()) {
    mutable_delete_time()->::google::protobuf::Timestamp::MergeFrom(from.delete_time());
  }
  if (from.data_size_bytes() != 0) {
    set_data_size_bytes(from.data_size_bytes());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Snapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.v2.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.v2.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::Swap(Snapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_table_, other->source_table_);
  swap(create_time_, other->create_time_);
  swap(delete_time_, other->delete_time_);
  swap(data_size_bytes_, other->data_size_bytes_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Snapshot::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2fv2_2ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace admin
}  // namespace bigtable
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::bigtable::admin::v2::Table_ClusterState* Arena::CreateMaybeMessage< ::google::bigtable::admin::v2::Table_ClusterState >(Arena* arena) {
  return Arena::CreateInternal< ::google::bigtable::admin::v2::Table_ClusterState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::bigtable::admin::v2::Table_ClusterStatesEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::bigtable::admin::v2::Table_ClusterStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::google::bigtable::admin::v2::Table_ClusterStatesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::bigtable::admin::v2::Table_ColumnFamiliesEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::bigtable::admin::v2::Table_ColumnFamiliesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::google::bigtable::admin::v2::Table_ColumnFamiliesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::bigtable::admin::v2::Table* Arena::CreateMaybeMessage< ::google::bigtable::admin::v2::Table >(Arena* arena) {
  return Arena::CreateInternal< ::google::bigtable::admin::v2::Table >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::bigtable::admin::v2::ColumnFamily* Arena::CreateMaybeMessage< ::google::bigtable::admin::v2::ColumnFamily >(Arena* arena) {
  return Arena::CreateInternal< ::google::bigtable::admin::v2::ColumnFamily >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::bigtable::admin::v2::GcRule_Intersection* Arena::CreateMaybeMessage< ::google::bigtable::admin::v2::GcRule_Intersection >(Arena* arena) {
  return Arena::CreateInternal< ::google::bigtable::admin::v2::GcRule_Intersection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::bigtable::admin::v2::GcRule_Union* Arena::CreateMaybeMessage< ::google::bigtable::admin::v2::GcRule_Union >(Arena* arena) {
  return Arena::CreateInternal< ::google::bigtable::admin::v2::GcRule_Union >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::bigtable::admin::v2::GcRule* Arena::CreateMaybeMessage< ::google::bigtable::admin::v2::GcRule >(Arena* arena) {
  return Arena::CreateInternal< ::google::bigtable::admin::v2::GcRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::bigtable::admin::v2::Snapshot* Arena::CreateMaybeMessage< ::google::bigtable::admin::v2::Snapshot >(Arena* arena) {
  return Arena::CreateInternal< ::google::bigtable::admin::v2::Snapshot >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
