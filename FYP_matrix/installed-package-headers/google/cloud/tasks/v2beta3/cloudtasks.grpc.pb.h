// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/tasks/v2beta3/cloudtasks.proto
// Original file comments:
// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#ifndef GRPC_google_2fcloud_2ftasks_2fv2beta3_2fcloudtasks_2eproto__INCLUDED
#define GRPC_google_2fcloud_2ftasks_2fv2beta3_2fcloudtasks_2eproto__INCLUDED

#include "google/cloud/tasks/v2beta3/cloudtasks.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace cloud {
namespace tasks {
namespace v2beta3 {

// Cloud Tasks allows developers to manage the execution of background
// work in their applications.
class CloudTasks final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.tasks.v2beta3.CloudTasks";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists queues.
    //
    // Queues are returned in lexicographical order.
    virtual ::grpc::Status ListQueues(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest& request, ::google::cloud::tasks::v2beta3::ListQueuesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListQueuesResponse>> AsyncListQueues(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListQueuesResponse>>(AsyncListQueuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListQueuesResponse>> PrepareAsyncListQueues(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListQueuesResponse>>(PrepareAsyncListQueuesRaw(context, request, cq));
    }
    // Gets a queue.
    virtual ::grpc::Status GetQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> AsyncGetQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(AsyncGetQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncGetQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncGetQueueRaw(context, request, cq));
    }
    // Creates a queue.
    //
    // Queues created with this method allow tasks to live for a maximum of 31
    // days. After a task is 31 days old, the task will be deleted regardless of whether
    // it was dispatched or not.
    //
    // WARNING: Using this method may have unintended side effects if you are
    // using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
    // Read
    // [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml)
    // before using this method.
    virtual ::grpc::Status CreateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> AsyncCreateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(AsyncCreateQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncCreateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncCreateQueueRaw(context, request, cq));
    }
    // Updates a queue.
    //
    // This method creates the queue if it does not exist and updates
    // the queue if it does exist.
    //
    // Queues created with this method allow tasks to live for a maximum of 31
    // days. After a task is 31 days old, the task will be deleted regardless of whether
    // it was dispatched or not.
    //
    // WARNING: Using this method may have unintended side effects if you are
    // using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
    // Read
    // [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml)
    // before using this method.
    virtual ::grpc::Status UpdateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> AsyncUpdateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(AsyncUpdateQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncUpdateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncUpdateQueueRaw(context, request, cq));
    }
    // Deletes a queue.
    //
    // This command will delete the queue even if it has tasks in it.
    //
    // Note: If you delete a queue, a queue with the same name can't be created
    // for 7 days.
    //
    // WARNING: Using this method may have unintended side effects if you are
    // using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
    // Read
    // [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml)
    // before using this method.
    virtual ::grpc::Status DeleteQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteQueueRaw(context, request, cq));
    }
    // Purges a queue by deleting all of its tasks.
    //
    // All tasks created before this method is called are permanently deleted.
    //
    // Purge operations can take up to one minute to take effect. Tasks
    // might be dispatched before the purge takes effect. A purge is irreversible.
    virtual ::grpc::Status PurgeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> AsyncPurgeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(AsyncPurgeQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncPurgeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncPurgeQueueRaw(context, request, cq));
    }
    // Pauses the queue.
    //
    // If a queue is paused then the system will stop dispatching tasks
    // until the queue is resumed via
    // [ResumeQueue][google.cloud.tasks.v2beta3.CloudTasks.ResumeQueue]. Tasks can still be added
    // when the queue is paused. A queue is paused if its
    // [state][google.cloud.tasks.v2beta3.Queue.state] is [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
    virtual ::grpc::Status PauseQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> AsyncPauseQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(AsyncPauseQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncPauseQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncPauseQueueRaw(context, request, cq));
    }
    // Resume a queue.
    //
    // This method resumes a queue after it has been
    // [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED] or
    // [DISABLED][google.cloud.tasks.v2beta3.Queue.State.DISABLED]. The state of a queue is stored
    // in the queue's [state][google.cloud.tasks.v2beta3.Queue.state]; after calling this method it
    // will be set to [RUNNING][google.cloud.tasks.v2beta3.Queue.State.RUNNING].
    //
    // WARNING: Resuming many high-QPS queues at the same time can
    // lead to target overloading. If you are resuming high-QPS
    // queues, follow the 500/50/5 pattern described in
    // [Managing Cloud Tasks Scaling Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
    virtual ::grpc::Status ResumeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> AsyncResumeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(AsyncResumeQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncResumeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncResumeQueueRaw(context, request, cq));
    }
    // Gets the access control policy for a [Queue][google.cloud.tasks.v2beta3.Queue].
    // Returns an empty policy if the resource exists and does not have a policy
    // set.
    //
    // Authorization requires the following
    // [Google IAM](https://cloud.google.com/iam) permission on the specified
    // resource parent:
    //
    // * `cloudtasks.queues.getIamPolicy`
    virtual ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    // Sets the access control policy for a [Queue][google.cloud.tasks.v2beta3.Queue]. Replaces any existing
    // policy.
    //
    // Note: The Cloud Console does not check queue-level IAM permissions yet.
    // Project-level permissions are required to use the Cloud Console.
    //
    // Authorization requires the following
    // [Google IAM](https://cloud.google.com/iam) permission on the specified
    // resource parent:
    //
    // * `cloudtasks.queues.setIamPolicy`
    virtual ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    // Returns permissions that a caller has on a [Queue][google.cloud.tasks.v2beta3.Queue].
    // If the resource does not exist, this will return an empty set of
    // permissions, not a [NOT_FOUND][google.rpc.Code.NOT_FOUND] error.
    //
    // Note: This operation is designed to be used for building permission-aware
    // UIs and command-line tools, not for authorization checking. This operation
    // may "fail open" without warning.
    virtual ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    // Lists the tasks in a queue.
    //
    // By default, only the [BASIC][google.cloud.tasks.v2beta3.Task.View.BASIC] view is retrieved
    // due to performance considerations;
    // [response_view][google.cloud.tasks.v2beta3.ListTasksRequest.response_view] controls the
    // subset of information which is returned.
    //
    // The tasks may be returned in any order. The ordering may change at any
    // time.
    virtual ::grpc::Status ListTasks(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest& request, ::google::cloud::tasks::v2beta3::ListTasksResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListTasksResponse>> AsyncListTasks(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListTasksResponse>>(AsyncListTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListTasksResponse>> PrepareAsyncListTasks(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListTasksResponse>>(PrepareAsyncListTasksRaw(context, request, cq));
    }
    // Gets a task.
    virtual ::grpc::Status GetTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest& request, ::google::cloud::tasks::v2beta3::Task* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>> AsyncGetTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    // Creates a task and adds it to a queue.
    //
    // Tasks cannot be updated after creation; there is no UpdateTask command.
    //
    // * For [App Engine queues][google.cloud.tasks.v2beta3.AppEngineHttpQueue], the maximum task size is
    //   100KB.
    virtual ::grpc::Status CreateTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest& request, ::google::cloud::tasks::v2beta3::Task* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>> AsyncCreateTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>>(AsyncCreateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>> PrepareAsyncCreateTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>>(PrepareAsyncCreateTaskRaw(context, request, cq));
    }
    // Deletes a task.
    //
    // A task can be deleted if it is scheduled or dispatched. A task
    // cannot be deleted if it has executed successfully or permanently
    // failed.
    virtual ::grpc::Status DeleteTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteTaskRaw(context, request, cq));
    }
    // Forces a task to run now.
    //
    // When this method is called, Cloud Tasks will dispatch the task, even if
    // the task is already running, the queue has reached its [RateLimits][google.cloud.tasks.v2beta3.RateLimits] or
    // is [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
    //
    // This command is meant to be used for manual debugging. For
    // example, [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] can be used to retry a failed
    // task after a fix has been made or to manually force a task to be
    // dispatched now.
    //
    // The dispatched task is returned. That is, the task that is returned
    // contains the [status][Task.status] after the task is dispatched but
    // before the task is received by its target.
    //
    // If Cloud Tasks receives a successful response from the task's
    // target, then the task will be deleted; otherwise the task's
    // [schedule_time][google.cloud.tasks.v2beta3.Task.schedule_time] will be reset to the time that
    // [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] was called plus the retry delay specified
    // in the queue's [RetryConfig][google.cloud.tasks.v2beta3.RetryConfig].
    //
    // [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] returns
    // [NOT_FOUND][google.rpc.Code.NOT_FOUND] when it is called on a
    // task that has already succeeded or permanently failed.
    virtual ::grpc::Status RunTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest& request, ::google::cloud::tasks::v2beta3::Task* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>> AsyncRunTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>>(AsyncRunTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>> PrepareAsyncRunTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>>(PrepareAsyncRunTaskRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListQueuesResponse>* AsyncListQueuesRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListQueuesResponse>* PrepareAsyncListQueuesRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* AsyncGetQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncGetQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* AsyncCreateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncCreateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* AsyncUpdateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncUpdateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* AsyncPurgeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncPurgeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* AsyncPauseQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncPauseQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* AsyncResumeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncResumeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListTasksResponse>* AsyncListTasksRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::ListTasksResponse>* PrepareAsyncListTasksRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>* AsyncCreateTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>* PrepareAsyncCreateTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>* AsyncRunTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::tasks::v2beta3::Task>* PrepareAsyncRunTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListQueues(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest& request, ::google::cloud::tasks::v2beta3::ListQueuesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListQueuesResponse>> AsyncListQueues(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListQueuesResponse>>(AsyncListQueuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListQueuesResponse>> PrepareAsyncListQueues(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListQueuesResponse>>(PrepareAsyncListQueuesRaw(context, request, cq));
    }
    ::grpc::Status GetQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> AsyncGetQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(AsyncGetQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncGetQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncGetQueueRaw(context, request, cq));
    }
    ::grpc::Status CreateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> AsyncCreateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(AsyncCreateQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncCreateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncCreateQueueRaw(context, request, cq));
    }
    ::grpc::Status UpdateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> AsyncUpdateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(AsyncUpdateQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncUpdateQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncUpdateQueueRaw(context, request, cq));
    }
    ::grpc::Status DeleteQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteQueueRaw(context, request, cq));
    }
    ::grpc::Status PurgeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> AsyncPurgeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(AsyncPurgeQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncPurgeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncPurgeQueueRaw(context, request, cq));
    }
    ::grpc::Status PauseQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> AsyncPauseQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(AsyncPauseQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncPauseQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncPauseQueueRaw(context, request, cq));
    }
    ::grpc::Status ResumeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest& request, ::google::cloud::tasks::v2beta3::Queue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> AsyncResumeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(AsyncResumeQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>> PrepareAsyncResumeQueue(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>>(PrepareAsyncResumeQueueRaw(context, request, cq));
    }
    ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    ::grpc::Status ListTasks(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest& request, ::google::cloud::tasks::v2beta3::ListTasksResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListTasksResponse>> AsyncListTasks(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListTasksResponse>>(AsyncListTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListTasksResponse>> PrepareAsyncListTasks(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListTasksResponse>>(PrepareAsyncListTasksRaw(context, request, cq));
    }
    ::grpc::Status GetTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest& request, ::google::cloud::tasks::v2beta3::Task* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>> AsyncGetTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    ::grpc::Status CreateTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest& request, ::google::cloud::tasks::v2beta3::Task* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>> AsyncCreateTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>>(AsyncCreateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>> PrepareAsyncCreateTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>>(PrepareAsyncCreateTaskRaw(context, request, cq));
    }
    ::grpc::Status DeleteTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteTaskRaw(context, request, cq));
    }
    ::grpc::Status RunTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest& request, ::google::cloud::tasks::v2beta3::Task* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>> AsyncRunTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>>(AsyncRunTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>> PrepareAsyncRunTask(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>>(PrepareAsyncRunTaskRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListQueuesResponse>* AsyncListQueuesRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListQueuesResponse>* PrepareAsyncListQueuesRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* AsyncGetQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncGetQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* AsyncCreateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncCreateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* AsyncUpdateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncUpdateQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* AsyncPurgeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncPurgeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* AsyncPauseQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncPauseQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* AsyncResumeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Queue>* PrepareAsyncResumeQueueRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListTasksResponse>* AsyncListTasksRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::ListTasksResponse>* PrepareAsyncListTasksRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>* AsyncCreateTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>* PrepareAsyncCreateTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>* AsyncRunTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::tasks::v2beta3::Task>* PrepareAsyncRunTaskRaw(::grpc::ClientContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListQueues_;
    const ::grpc::internal::RpcMethod rpcmethod_GetQueue_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateQueue_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateQueue_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteQueue_;
    const ::grpc::internal::RpcMethod rpcmethod_PurgeQueue_;
    const ::grpc::internal::RpcMethod rpcmethod_PauseQueue_;
    const ::grpc::internal::RpcMethod rpcmethod_ResumeQueue_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_SetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_TestIamPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTasks_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTask_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTask_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTask_;
    const ::grpc::internal::RpcMethod rpcmethod_RunTask_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists queues.
    //
    // Queues are returned in lexicographical order.
    virtual ::grpc::Status ListQueues(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest* request, ::google::cloud::tasks::v2beta3::ListQueuesResponse* response);
    // Gets a queue.
    virtual ::grpc::Status GetQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response);
    // Creates a queue.
    //
    // Queues created with this method allow tasks to live for a maximum of 31
    // days. After a task is 31 days old, the task will be deleted regardless of whether
    // it was dispatched or not.
    //
    // WARNING: Using this method may have unintended side effects if you are
    // using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
    // Read
    // [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml)
    // before using this method.
    virtual ::grpc::Status CreateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response);
    // Updates a queue.
    //
    // This method creates the queue if it does not exist and updates
    // the queue if it does exist.
    //
    // Queues created with this method allow tasks to live for a maximum of 31
    // days. After a task is 31 days old, the task will be deleted regardless of whether
    // it was dispatched or not.
    //
    // WARNING: Using this method may have unintended side effects if you are
    // using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
    // Read
    // [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml)
    // before using this method.
    virtual ::grpc::Status UpdateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response);
    // Deletes a queue.
    //
    // This command will delete the queue even if it has tasks in it.
    //
    // Note: If you delete a queue, a queue with the same name can't be created
    // for 7 days.
    //
    // WARNING: Using this method may have unintended side effects if you are
    // using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
    // Read
    // [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml)
    // before using this method.
    virtual ::grpc::Status DeleteQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest* request, ::google::protobuf::Empty* response);
    // Purges a queue by deleting all of its tasks.
    //
    // All tasks created before this method is called are permanently deleted.
    //
    // Purge operations can take up to one minute to take effect. Tasks
    // might be dispatched before the purge takes effect. A purge is irreversible.
    virtual ::grpc::Status PurgeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response);
    // Pauses the queue.
    //
    // If a queue is paused then the system will stop dispatching tasks
    // until the queue is resumed via
    // [ResumeQueue][google.cloud.tasks.v2beta3.CloudTasks.ResumeQueue]. Tasks can still be added
    // when the queue is paused. A queue is paused if its
    // [state][google.cloud.tasks.v2beta3.Queue.state] is [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
    virtual ::grpc::Status PauseQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response);
    // Resume a queue.
    //
    // This method resumes a queue after it has been
    // [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED] or
    // [DISABLED][google.cloud.tasks.v2beta3.Queue.State.DISABLED]. The state of a queue is stored
    // in the queue's [state][google.cloud.tasks.v2beta3.Queue.state]; after calling this method it
    // will be set to [RUNNING][google.cloud.tasks.v2beta3.Queue.State.RUNNING].
    //
    // WARNING: Resuming many high-QPS queues at the same time can
    // lead to target overloading. If you are resuming high-QPS
    // queues, follow the 500/50/5 pattern described in
    // [Managing Cloud Tasks Scaling Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
    virtual ::grpc::Status ResumeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response);
    // Gets the access control policy for a [Queue][google.cloud.tasks.v2beta3.Queue].
    // Returns an empty policy if the resource exists and does not have a policy
    // set.
    //
    // Authorization requires the following
    // [Google IAM](https://cloud.google.com/iam) permission on the specified
    // resource parent:
    //
    // * `cloudtasks.queues.getIamPolicy`
    virtual ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Sets the access control policy for a [Queue][google.cloud.tasks.v2beta3.Queue]. Replaces any existing
    // policy.
    //
    // Note: The Cloud Console does not check queue-level IAM permissions yet.
    // Project-level permissions are required to use the Cloud Console.
    //
    // Authorization requires the following
    // [Google IAM](https://cloud.google.com/iam) permission on the specified
    // resource parent:
    //
    // * `cloudtasks.queues.setIamPolicy`
    virtual ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Returns permissions that a caller has on a [Queue][google.cloud.tasks.v2beta3.Queue].
    // If the resource does not exist, this will return an empty set of
    // permissions, not a [NOT_FOUND][google.rpc.Code.NOT_FOUND] error.
    //
    // Note: This operation is designed to be used for building permission-aware
    // UIs and command-line tools, not for authorization checking. This operation
    // may "fail open" without warning.
    virtual ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response);
    // Lists the tasks in a queue.
    //
    // By default, only the [BASIC][google.cloud.tasks.v2beta3.Task.View.BASIC] view is retrieved
    // due to performance considerations;
    // [response_view][google.cloud.tasks.v2beta3.ListTasksRequest.response_view] controls the
    // subset of information which is returned.
    //
    // The tasks may be returned in any order. The ordering may change at any
    // time.
    virtual ::grpc::Status ListTasks(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest* request, ::google::cloud::tasks::v2beta3::ListTasksResponse* response);
    // Gets a task.
    virtual ::grpc::Status GetTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response);
    // Creates a task and adds it to a queue.
    //
    // Tasks cannot be updated after creation; there is no UpdateTask command.
    //
    // * For [App Engine queues][google.cloud.tasks.v2beta3.AppEngineHttpQueue], the maximum task size is
    //   100KB.
    virtual ::grpc::Status CreateTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response);
    // Deletes a task.
    //
    // A task can be deleted if it is scheduled or dispatched. A task
    // cannot be deleted if it has executed successfully or permanently
    // failed.
    virtual ::grpc::Status DeleteTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest* request, ::google::protobuf::Empty* response);
    // Forces a task to run now.
    //
    // When this method is called, Cloud Tasks will dispatch the task, even if
    // the task is already running, the queue has reached its [RateLimits][google.cloud.tasks.v2beta3.RateLimits] or
    // is [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
    //
    // This command is meant to be used for manual debugging. For
    // example, [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] can be used to retry a failed
    // task after a fix has been made or to manually force a task to be
    // dispatched now.
    //
    // The dispatched task is returned. That is, the task that is returned
    // contains the [status][Task.status] after the task is dispatched but
    // before the task is received by its target.
    //
    // If Cloud Tasks receives a successful response from the task's
    // target, then the task will be deleted; otherwise the task's
    // [schedule_time][google.cloud.tasks.v2beta3.Task.schedule_time] will be reset to the time that
    // [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] was called plus the retry delay specified
    // in the queue's [RetryConfig][google.cloud.tasks.v2beta3.RetryConfig].
    //
    // [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] returns
    // [NOT_FOUND][google.rpc.Code.NOT_FOUND] when it is called on a
    // task that has already succeeded or permanently failed.
    virtual ::grpc::Status RunTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListQueues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListQueues() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListQueues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListQueues(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest* request, ::google::cloud::tasks::v2beta3::ListQueuesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListQueues(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::ListQueuesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::tasks::v2beta3::ListQueuesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetQueue() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQueue(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::GetQueueRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::tasks::v2beta3::Queue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateQueue() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateQueue(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::CreateQueueRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::tasks::v2beta3::Queue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateQueue() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateQueue(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::UpdateQueueRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::tasks::v2beta3::Queue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteQueue() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteQueue(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::DeleteQueueRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PurgeQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PurgeQueue() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PurgeQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PurgeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPurgeQueue(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::PurgeQueueRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::tasks::v2beta3::Queue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PauseQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PauseQueue() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PauseQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseQueue(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::PauseQueueRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::tasks::v2beta3::Queue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResumeQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ResumeQueue() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ResumeQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResumeQueue(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::ResumeQueueRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::tasks::v2beta3::Queue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::GetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::SetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::google::iam::v1::TestIamPermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::TestIamPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListTasks() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest* request, ::google::cloud::tasks::v2beta3::ListTasksResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTasks(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::ListTasksRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::tasks::v2beta3::ListTasksResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTask() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::GetTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::tasks::v2beta3::Task>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateTask() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTask(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::CreateTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::tasks::v2beta3::Task>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteTask() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTask(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::DeleteTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RunTask() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_RunTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunTask(::grpc::ServerContext* context, ::google::cloud::tasks::v2beta3::RunTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::tasks::v2beta3::Task>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListQueues<WithAsyncMethod_GetQueue<WithAsyncMethod_CreateQueue<WithAsyncMethod_UpdateQueue<WithAsyncMethod_DeleteQueue<WithAsyncMethod_PurgeQueue<WithAsyncMethod_PauseQueue<WithAsyncMethod_ResumeQueue<WithAsyncMethod_GetIamPolicy<WithAsyncMethod_SetIamPolicy<WithAsyncMethod_TestIamPermissions<WithAsyncMethod_ListTasks<WithAsyncMethod_GetTask<WithAsyncMethod_CreateTask<WithAsyncMethod_DeleteTask<WithAsyncMethod_RunTask<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListQueues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListQueues() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListQueues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListQueues(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest* request, ::google::cloud::tasks::v2beta3::ListQueuesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetQueue() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateQueue() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateQueue() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteQueue() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PurgeQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PurgeQueue() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PurgeQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PurgeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PauseQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PauseQueue() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PauseQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResumeQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ResumeQueue() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ResumeQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListTasks() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest* request, ::google::cloud::tasks::v2beta3::ListTasksResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTask() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateTask() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteTask() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RunTask() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_RunTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListQueues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListQueues() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListQueues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListQueues(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest* request, ::google::cloud::tasks::v2beta3::ListQueuesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListQueues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetQueue() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQueue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateQueue() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateQueue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateQueue() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateQueue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteQueue() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteQueue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PurgeQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PurgeQueue() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_PurgeQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PurgeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPurgeQueue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PauseQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PauseQueue() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_PauseQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseQueue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResumeQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ResumeQueue() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ResumeQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResumeQueue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListTasks() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest* request, ::google::cloud::tasks::v2beta3::ListTasksResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTasks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTask() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateTask() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteTask() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RunTask() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_RunTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListQueues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListQueues() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::ListQueuesRequest, ::google::cloud::tasks::v2beta3::ListQueuesResponse>(std::bind(&WithStreamedUnaryMethod_ListQueues<BaseClass>::StreamedListQueues, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListQueues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListQueues(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ListQueuesRequest* request, ::google::cloud::tasks::v2beta3::ListQueuesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListQueues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::ListQueuesRequest,::google::cloud::tasks::v2beta3::ListQueuesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetQueue() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::GetQueueRequest, ::google::cloud::tasks::v2beta3::Queue>(std::bind(&WithStreamedUnaryMethod_GetQueue<BaseClass>::StreamedGetQueue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::GetQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetQueue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::GetQueueRequest,::google::cloud::tasks::v2beta3::Queue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateQueue() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::CreateQueueRequest, ::google::cloud::tasks::v2beta3::Queue>(std::bind(&WithStreamedUnaryMethod_CreateQueue<BaseClass>::StreamedCreateQueue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::CreateQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateQueue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::CreateQueueRequest,::google::cloud::tasks::v2beta3::Queue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateQueue() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::UpdateQueueRequest, ::google::cloud::tasks::v2beta3::Queue>(std::bind(&WithStreamedUnaryMethod_UpdateQueue<BaseClass>::StreamedUpdateQueue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::UpdateQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateQueue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::UpdateQueueRequest,::google::cloud::tasks::v2beta3::Queue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteQueue() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::DeleteQueueRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteQueue<BaseClass>::StreamedDeleteQueue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::DeleteQueueRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteQueue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::DeleteQueueRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PurgeQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PurgeQueue() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::PurgeQueueRequest, ::google::cloud::tasks::v2beta3::Queue>(std::bind(&WithStreamedUnaryMethod_PurgeQueue<BaseClass>::StreamedPurgeQueue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PurgeQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PurgeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::PurgeQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPurgeQueue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::PurgeQueueRequest,::google::cloud::tasks::v2beta3::Queue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PauseQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PauseQueue() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::PauseQueueRequest, ::google::cloud::tasks::v2beta3::Queue>(std::bind(&WithStreamedUnaryMethod_PauseQueue<BaseClass>::StreamedPauseQueue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PauseQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PauseQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::PauseQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPauseQueue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::PauseQueueRequest,::google::cloud::tasks::v2beta3::Queue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResumeQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ResumeQueue() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::ResumeQueueRequest, ::google::cloud::tasks::v2beta3::Queue>(std::bind(&WithStreamedUnaryMethod_ResumeQueue<BaseClass>::StreamedResumeQueue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResumeQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResumeQueue(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ResumeQueueRequest* request, ::google::cloud::tasks::v2beta3::Queue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResumeQueue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::ResumeQueueRequest,::google::cloud::tasks::v2beta3::Queue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(std::bind(&WithStreamedUnaryMethod_GetIamPolicy<BaseClass>::StreamedGetIamPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::GetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(std::bind(&WithStreamedUnaryMethod_SetIamPolicy<BaseClass>::StreamedSetIamPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::SetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(std::bind(&WithStreamedUnaryMethod_TestIamPermissions<BaseClass>::StreamedTestIamPermissions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestIamPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::TestIamPermissionsRequest,::google::iam::v1::TestIamPermissionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListTasks() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::ListTasksRequest, ::google::cloud::tasks::v2beta3::ListTasksResponse>(std::bind(&WithStreamedUnaryMethod_ListTasks<BaseClass>::StreamedListTasks, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTasks(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::ListTasksRequest* request, ::google::cloud::tasks::v2beta3::ListTasksResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTasks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::ListTasksRequest,::google::cloud::tasks::v2beta3::ListTasksResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTask() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::GetTaskRequest, ::google::cloud::tasks::v2beta3::Task>(std::bind(&WithStreamedUnaryMethod_GetTask<BaseClass>::StreamedGetTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::GetTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::GetTaskRequest,::google::cloud::tasks::v2beta3::Task>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateTask() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::CreateTaskRequest, ::google::cloud::tasks::v2beta3::Task>(std::bind(&WithStreamedUnaryMethod_CreateTask<BaseClass>::StreamedCreateTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::CreateTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::CreateTaskRequest,::google::cloud::tasks::v2beta3::Task>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteTask() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::DeleteTaskRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteTask<BaseClass>::StreamedDeleteTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::DeleteTaskRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::DeleteTaskRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RunTask() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::tasks::v2beta3::RunTaskRequest, ::google::cloud::tasks::v2beta3::Task>(std::bind(&WithStreamedUnaryMethod_RunTask<BaseClass>::StreamedRunTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RunTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunTask(::grpc::ServerContext* context, const ::google::cloud::tasks::v2beta3::RunTaskRequest* request, ::google::cloud::tasks::v2beta3::Task* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::tasks::v2beta3::RunTaskRequest,::google::cloud::tasks::v2beta3::Task>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListQueues<WithStreamedUnaryMethod_GetQueue<WithStreamedUnaryMethod_CreateQueue<WithStreamedUnaryMethod_UpdateQueue<WithStreamedUnaryMethod_DeleteQueue<WithStreamedUnaryMethod_PurgeQueue<WithStreamedUnaryMethod_PauseQueue<WithStreamedUnaryMethod_ResumeQueue<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<WithStreamedUnaryMethod_ListTasks<WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_CreateTask<WithStreamedUnaryMethod_DeleteTask<WithStreamedUnaryMethod_RunTask<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListQueues<WithStreamedUnaryMethod_GetQueue<WithStreamedUnaryMethod_CreateQueue<WithStreamedUnaryMethod_UpdateQueue<WithStreamedUnaryMethod_DeleteQueue<WithStreamedUnaryMethod_PurgeQueue<WithStreamedUnaryMethod_PauseQueue<WithStreamedUnaryMethod_ResumeQueue<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<WithStreamedUnaryMethod_ListTasks<WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_CreateTask<WithStreamedUnaryMethod_DeleteTask<WithStreamedUnaryMethod_RunTask<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v2beta3
}  // namespace tasks
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2ftasks_2fv2beta3_2fcloudtasks_2eproto__INCLUDED
