// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/videointelligence/v1p1beta1/video_intelligence.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto 

namespace protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[21];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto
namespace google {
namespace cloud {
namespace videointelligence {
namespace v1p1beta1 {
class AnnotateVideoProgress;
class AnnotateVideoProgressDefaultTypeInternal;
extern AnnotateVideoProgressDefaultTypeInternal _AnnotateVideoProgress_default_instance_;
class AnnotateVideoRequest;
class AnnotateVideoRequestDefaultTypeInternal;
extern AnnotateVideoRequestDefaultTypeInternal _AnnotateVideoRequest_default_instance_;
class AnnotateVideoResponse;
class AnnotateVideoResponseDefaultTypeInternal;
extern AnnotateVideoResponseDefaultTypeInternal _AnnotateVideoResponse_default_instance_;
class Entity;
class EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class ExplicitContentAnnotation;
class ExplicitContentAnnotationDefaultTypeInternal;
extern ExplicitContentAnnotationDefaultTypeInternal _ExplicitContentAnnotation_default_instance_;
class ExplicitContentDetectionConfig;
class ExplicitContentDetectionConfigDefaultTypeInternal;
extern ExplicitContentDetectionConfigDefaultTypeInternal _ExplicitContentDetectionConfig_default_instance_;
class ExplicitContentFrame;
class ExplicitContentFrameDefaultTypeInternal;
extern ExplicitContentFrameDefaultTypeInternal _ExplicitContentFrame_default_instance_;
class LabelAnnotation;
class LabelAnnotationDefaultTypeInternal;
extern LabelAnnotationDefaultTypeInternal _LabelAnnotation_default_instance_;
class LabelDetectionConfig;
class LabelDetectionConfigDefaultTypeInternal;
extern LabelDetectionConfigDefaultTypeInternal _LabelDetectionConfig_default_instance_;
class LabelFrame;
class LabelFrameDefaultTypeInternal;
extern LabelFrameDefaultTypeInternal _LabelFrame_default_instance_;
class LabelSegment;
class LabelSegmentDefaultTypeInternal;
extern LabelSegmentDefaultTypeInternal _LabelSegment_default_instance_;
class ShotChangeDetectionConfig;
class ShotChangeDetectionConfigDefaultTypeInternal;
extern ShotChangeDetectionConfigDefaultTypeInternal _ShotChangeDetectionConfig_default_instance_;
class SpeechContext;
class SpeechContextDefaultTypeInternal;
extern SpeechContextDefaultTypeInternal _SpeechContext_default_instance_;
class SpeechRecognitionAlternative;
class SpeechRecognitionAlternativeDefaultTypeInternal;
extern SpeechRecognitionAlternativeDefaultTypeInternal _SpeechRecognitionAlternative_default_instance_;
class SpeechTranscription;
class SpeechTranscriptionDefaultTypeInternal;
extern SpeechTranscriptionDefaultTypeInternal _SpeechTranscription_default_instance_;
class SpeechTranscriptionConfig;
class SpeechTranscriptionConfigDefaultTypeInternal;
extern SpeechTranscriptionConfigDefaultTypeInternal _SpeechTranscriptionConfig_default_instance_;
class VideoAnnotationProgress;
class VideoAnnotationProgressDefaultTypeInternal;
extern VideoAnnotationProgressDefaultTypeInternal _VideoAnnotationProgress_default_instance_;
class VideoAnnotationResults;
class VideoAnnotationResultsDefaultTypeInternal;
extern VideoAnnotationResultsDefaultTypeInternal _VideoAnnotationResults_default_instance_;
class VideoContext;
class VideoContextDefaultTypeInternal;
extern VideoContextDefaultTypeInternal _VideoContext_default_instance_;
class VideoSegment;
class VideoSegmentDefaultTypeInternal;
extern VideoSegmentDefaultTypeInternal _VideoSegment_default_instance_;
class WordInfo;
class WordInfoDefaultTypeInternal;
extern WordInfoDefaultTypeInternal _WordInfo_default_instance_;
}  // namespace v1p1beta1
}  // namespace videointelligence
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoProgress* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::AnnotateVideoProgress>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::AnnotateVideoRequest>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::AnnotateVideoResponse* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::AnnotateVideoResponse>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::Entity* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::Entity>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::LabelAnnotation>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::LabelFrame* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::LabelFrame>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::LabelSegment* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::LabelSegment>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::SpeechContext* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::SpeechContext>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::SpeechTranscription>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::VideoContext* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::VideoContext>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::VideoSegment* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::VideoSegment>(Arena*);
template<> ::google::cloud::videointelligence::v1p1beta1::WordInfo* Arena::CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::WordInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace videointelligence {
namespace v1p1beta1 {

enum Feature {
  FEATURE_UNSPECIFIED = 0,
  LABEL_DETECTION = 1,
  SHOT_CHANGE_DETECTION = 2,
  EXPLICIT_CONTENT_DETECTION = 3,
  SPEECH_TRANSCRIPTION = 6,
  Feature_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Feature_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Feature_IsValid(int value);
const Feature Feature_MIN = FEATURE_UNSPECIFIED;
const Feature Feature_MAX = SPEECH_TRANSCRIPTION;
const int Feature_ARRAYSIZE = Feature_MAX + 1;

const ::google::protobuf::EnumDescriptor* Feature_descriptor();
inline const ::std::string& Feature_Name(Feature value) {
  return ::google::protobuf::internal::NameOfEnum(
    Feature_descriptor(), value);
}
inline bool Feature_Parse(
    const ::std::string& name, Feature* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Feature>(
    Feature_descriptor(), name, value);
}
enum LabelDetectionMode {
  LABEL_DETECTION_MODE_UNSPECIFIED = 0,
  SHOT_MODE = 1,
  FRAME_MODE = 2,
  SHOT_AND_FRAME_MODE = 3,
  LabelDetectionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LabelDetectionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LabelDetectionMode_IsValid(int value);
const LabelDetectionMode LabelDetectionMode_MIN = LABEL_DETECTION_MODE_UNSPECIFIED;
const LabelDetectionMode LabelDetectionMode_MAX = SHOT_AND_FRAME_MODE;
const int LabelDetectionMode_ARRAYSIZE = LabelDetectionMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LabelDetectionMode_descriptor();
inline const ::std::string& LabelDetectionMode_Name(LabelDetectionMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LabelDetectionMode_descriptor(), value);
}
inline bool LabelDetectionMode_Parse(
    const ::std::string& name, LabelDetectionMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LabelDetectionMode>(
    LabelDetectionMode_descriptor(), name, value);
}
enum Likelihood {
  LIKELIHOOD_UNSPECIFIED = 0,
  VERY_UNLIKELY = 1,
  UNLIKELY = 2,
  POSSIBLE = 3,
  LIKELY = 4,
  VERY_LIKELY = 5,
  Likelihood_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Likelihood_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Likelihood_IsValid(int value);
const Likelihood Likelihood_MIN = LIKELIHOOD_UNSPECIFIED;
const Likelihood Likelihood_MAX = VERY_LIKELY;
const int Likelihood_ARRAYSIZE = Likelihood_MAX + 1;

const ::google::protobuf::EnumDescriptor* Likelihood_descriptor();
inline const ::std::string& Likelihood_Name(Likelihood value) {
  return ::google::protobuf::internal::NameOfEnum(
    Likelihood_descriptor(), value);
}
inline bool Likelihood_Parse(
    const ::std::string& name, Likelihood* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Likelihood>(
    Likelihood_descriptor(), name, value);
}
// ===================================================================

class AnnotateVideoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest) */ {
 public:
  AnnotateVideoRequest();
  virtual ~AnnotateVideoRequest();

  AnnotateVideoRequest(const AnnotateVideoRequest& from);

  inline AnnotateVideoRequest& operator=(const AnnotateVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnnotateVideoRequest(AnnotateVideoRequest&& from) noexcept
    : AnnotateVideoRequest() {
    *this = ::std::move(from);
  }

  inline AnnotateVideoRequest& operator=(AnnotateVideoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotateVideoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotateVideoRequest* internal_default_instance() {
    return reinterpret_cast<const AnnotateVideoRequest*>(
               &_AnnotateVideoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AnnotateVideoRequest* other);
  friend void swap(AnnotateVideoRequest& a, AnnotateVideoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnnotateVideoRequest* New() const final {
    return CreateMaybeMessage<AnnotateVideoRequest>(NULL);
  }

  AnnotateVideoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnnotateVideoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnnotateVideoRequest& from);
  void MergeFrom(const AnnotateVideoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotateVideoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.videointelligence.v1p1beta1.Feature features = 2;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 2;
  ::google::cloud::videointelligence::v1p1beta1::Feature features(int index) const;
  void set_features(int index, ::google::cloud::videointelligence::v1p1beta1::Feature value);
  void add_features(::google::cloud::videointelligence::v1p1beta1::Feature value);
  const ::google::protobuf::RepeatedField<int>& features() const;
  ::google::protobuf::RepeatedField<int>* mutable_features();

  // string input_uri = 1;
  void clear_input_uri();
  static const int kInputUriFieldNumber = 1;
  const ::std::string& input_uri() const;
  void set_input_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_input_uri(::std::string&& value);
  #endif
  void set_input_uri(const char* value);
  void set_input_uri(const char* value, size_t size);
  ::std::string* mutable_input_uri();
  ::std::string* release_input_uri();
  void set_allocated_input_uri(::std::string* input_uri);

  // string output_uri = 4;
  void clear_output_uri();
  static const int kOutputUriFieldNumber = 4;
  const ::std::string& output_uri() const;
  void set_output_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_output_uri(::std::string&& value);
  #endif
  void set_output_uri(const char* value);
  void set_output_uri(const char* value, size_t size);
  ::std::string* mutable_output_uri();
  ::std::string* release_output_uri();
  void set_allocated_output_uri(::std::string* output_uri);

  // string location_id = 5;
  void clear_location_id();
  static const int kLocationIdFieldNumber = 5;
  const ::std::string& location_id() const;
  void set_location_id(const ::std::string& value);
  #if LANG_CXX11
  void set_location_id(::std::string&& value);
  #endif
  void set_location_id(const char* value);
  void set_location_id(const char* value, size_t size);
  ::std::string* mutable_location_id();
  ::std::string* release_location_id();
  void set_allocated_location_id(::std::string* location_id);

  // bytes input_content = 6;
  void clear_input_content();
  static const int kInputContentFieldNumber = 6;
  const ::std::string& input_content() const;
  void set_input_content(const ::std::string& value);
  #if LANG_CXX11
  void set_input_content(::std::string&& value);
  #endif
  void set_input_content(const char* value);
  void set_input_content(const void* value, size_t size);
  ::std::string* mutable_input_content();
  ::std::string* release_input_content();
  void set_allocated_input_content(::std::string* input_content);

  // .google.cloud.videointelligence.v1p1beta1.VideoContext video_context = 3;
  bool has_video_context() const;
  void clear_video_context();
  static const int kVideoContextFieldNumber = 3;
  private:
  const ::google::cloud::videointelligence::v1p1beta1::VideoContext& _internal_video_context() const;
  public:
  const ::google::cloud::videointelligence::v1p1beta1::VideoContext& video_context() const;
  ::google::cloud::videointelligence::v1p1beta1::VideoContext* release_video_context();
  ::google::cloud::videointelligence::v1p1beta1::VideoContext* mutable_video_context();
  void set_allocated_video_context(::google::cloud::videointelligence::v1p1beta1::VideoContext* video_context);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> features_;
  mutable int _features_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr input_uri_;
  ::google::protobuf::internal::ArenaStringPtr output_uri_;
  ::google::protobuf::internal::ArenaStringPtr location_id_;
  ::google::protobuf::internal::ArenaStringPtr input_content_;
  ::google::cloud::videointelligence::v1p1beta1::VideoContext* video_context_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.VideoContext) */ {
 public:
  VideoContext();
  virtual ~VideoContext();

  VideoContext(const VideoContext& from);

  inline VideoContext& operator=(const VideoContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoContext(VideoContext&& from) noexcept
    : VideoContext() {
    *this = ::std::move(from);
  }

  inline VideoContext& operator=(VideoContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoContext* internal_default_instance() {
    return reinterpret_cast<const VideoContext*>(
               &_VideoContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VideoContext* other);
  friend void swap(VideoContext& a, VideoContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoContext* New() const final {
    return CreateMaybeMessage<VideoContext>(NULL);
  }

  VideoContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VideoContext& from);
  void MergeFrom(const VideoContext& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment segments = 1;
  int segments_size() const;
  void clear_segments();
  static const int kSegmentsFieldNumber = 1;
  ::google::cloud::videointelligence::v1p1beta1::VideoSegment* mutable_segments(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoSegment >*
      mutable_segments();
  const ::google::cloud::videointelligence::v1p1beta1::VideoSegment& segments(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::VideoSegment* add_segments();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoSegment >&
      segments() const;

  // .google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig label_detection_config = 2;
  bool has_label_detection_config() const;
  void clear_label_detection_config();
  static const int kLabelDetectionConfigFieldNumber = 2;
  private:
  const ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig& _internal_label_detection_config() const;
  public:
  const ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig& label_detection_config() const;
  ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig* release_label_detection_config();
  ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig* mutable_label_detection_config();
  void set_allocated_label_detection_config(::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig* label_detection_config);

  // .google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig shot_change_detection_config = 3;
  bool has_shot_change_detection_config() const;
  void clear_shot_change_detection_config();
  static const int kShotChangeDetectionConfigFieldNumber = 3;
  private:
  const ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig& _internal_shot_change_detection_config() const;
  public:
  const ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig& shot_change_detection_config() const;
  ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig* release_shot_change_detection_config();
  ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig* mutable_shot_change_detection_config();
  void set_allocated_shot_change_detection_config(::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig* shot_change_detection_config);

  // .google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig explicit_content_detection_config = 4;
  bool has_explicit_content_detection_config() const;
  void clear_explicit_content_detection_config();
  static const int kExplicitContentDetectionConfigFieldNumber = 4;
  private:
  const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig& _internal_explicit_content_detection_config() const;
  public:
  const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig& explicit_content_detection_config() const;
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig* release_explicit_content_detection_config();
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig* mutable_explicit_content_detection_config();
  void set_allocated_explicit_content_detection_config(::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig* explicit_content_detection_config);

  // .google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig speech_transcription_config = 6;
  bool has_speech_transcription_config() const;
  void clear_speech_transcription_config();
  static const int kSpeechTranscriptionConfigFieldNumber = 6;
  private:
  const ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig& _internal_speech_transcription_config() const;
  public:
  const ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig& speech_transcription_config() const;
  ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig* release_speech_transcription_config();
  ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig* mutable_speech_transcription_config();
  void set_allocated_speech_transcription_config(::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig* speech_transcription_config);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.VideoContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoSegment > segments_;
  ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig* label_detection_config_;
  ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig* shot_change_detection_config_;
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig* explicit_content_detection_config_;
  ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig* speech_transcription_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabelDetectionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig) */ {
 public:
  LabelDetectionConfig();
  virtual ~LabelDetectionConfig();

  LabelDetectionConfig(const LabelDetectionConfig& from);

  inline LabelDetectionConfig& operator=(const LabelDetectionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelDetectionConfig(LabelDetectionConfig&& from) noexcept
    : LabelDetectionConfig() {
    *this = ::std::move(from);
  }

  inline LabelDetectionConfig& operator=(LabelDetectionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelDetectionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelDetectionConfig* internal_default_instance() {
    return reinterpret_cast<const LabelDetectionConfig*>(
               &_LabelDetectionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LabelDetectionConfig* other);
  friend void swap(LabelDetectionConfig& a, LabelDetectionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelDetectionConfig* New() const final {
    return CreateMaybeMessage<LabelDetectionConfig>(NULL);
  }

  LabelDetectionConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabelDetectionConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabelDetectionConfig& from);
  void MergeFrom(const LabelDetectionConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelDetectionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string model = 3;
  void clear_model();
  static const int kModelFieldNumber = 3;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // .google.cloud.videointelligence.v1p1beta1.LabelDetectionMode label_detection_mode = 1;
  void clear_label_detection_mode();
  static const int kLabelDetectionModeFieldNumber = 1;
  ::google::cloud::videointelligence::v1p1beta1::LabelDetectionMode label_detection_mode() const;
  void set_label_detection_mode(::google::cloud::videointelligence::v1p1beta1::LabelDetectionMode value);

  // bool stationary_camera = 2;
  void clear_stationary_camera();
  static const int kStationaryCameraFieldNumber = 2;
  bool stationary_camera() const;
  void set_stationary_camera(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  int label_detection_mode_;
  bool stationary_camera_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShotChangeDetectionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig) */ {
 public:
  ShotChangeDetectionConfig();
  virtual ~ShotChangeDetectionConfig();

  ShotChangeDetectionConfig(const ShotChangeDetectionConfig& from);

  inline ShotChangeDetectionConfig& operator=(const ShotChangeDetectionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShotChangeDetectionConfig(ShotChangeDetectionConfig&& from) noexcept
    : ShotChangeDetectionConfig() {
    *this = ::std::move(from);
  }

  inline ShotChangeDetectionConfig& operator=(ShotChangeDetectionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShotChangeDetectionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShotChangeDetectionConfig* internal_default_instance() {
    return reinterpret_cast<const ShotChangeDetectionConfig*>(
               &_ShotChangeDetectionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ShotChangeDetectionConfig* other);
  friend void swap(ShotChangeDetectionConfig& a, ShotChangeDetectionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShotChangeDetectionConfig* New() const final {
    return CreateMaybeMessage<ShotChangeDetectionConfig>(NULL);
  }

  ShotChangeDetectionConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShotChangeDetectionConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShotChangeDetectionConfig& from);
  void MergeFrom(const ShotChangeDetectionConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShotChangeDetectionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string model = 1;
  void clear_model();
  static const int kModelFieldNumber = 1;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExplicitContentDetectionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig) */ {
 public:
  ExplicitContentDetectionConfig();
  virtual ~ExplicitContentDetectionConfig();

  ExplicitContentDetectionConfig(const ExplicitContentDetectionConfig& from);

  inline ExplicitContentDetectionConfig& operator=(const ExplicitContentDetectionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExplicitContentDetectionConfig(ExplicitContentDetectionConfig&& from) noexcept
    : ExplicitContentDetectionConfig() {
    *this = ::std::move(from);
  }

  inline ExplicitContentDetectionConfig& operator=(ExplicitContentDetectionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplicitContentDetectionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplicitContentDetectionConfig* internal_default_instance() {
    return reinterpret_cast<const ExplicitContentDetectionConfig*>(
               &_ExplicitContentDetectionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ExplicitContentDetectionConfig* other);
  friend void swap(ExplicitContentDetectionConfig& a, ExplicitContentDetectionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExplicitContentDetectionConfig* New() const final {
    return CreateMaybeMessage<ExplicitContentDetectionConfig>(NULL);
  }

  ExplicitContentDetectionConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExplicitContentDetectionConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExplicitContentDetectionConfig& from);
  void MergeFrom(const ExplicitContentDetectionConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplicitContentDetectionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string model = 1;
  void clear_model();
  static const int kModelFieldNumber = 1;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.VideoSegment) */ {
 public:
  VideoSegment();
  virtual ~VideoSegment();

  VideoSegment(const VideoSegment& from);

  inline VideoSegment& operator=(const VideoSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoSegment(VideoSegment&& from) noexcept
    : VideoSegment() {
    *this = ::std::move(from);
  }

  inline VideoSegment& operator=(VideoSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoSegment* internal_default_instance() {
    return reinterpret_cast<const VideoSegment*>(
               &_VideoSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(VideoSegment* other);
  friend void swap(VideoSegment& a, VideoSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoSegment* New() const final {
    return CreateMaybeMessage<VideoSegment>(NULL);
  }

  VideoSegment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoSegment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VideoSegment& from);
  void MergeFrom(const VideoSegment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration start_time_offset = 1;
  bool has_start_time_offset() const;
  void clear_start_time_offset();
  static const int kStartTimeOffsetFieldNumber = 1;
  private:
  const ::google::protobuf::Duration& _internal_start_time_offset() const;
  public:
  const ::google::protobuf::Duration& start_time_offset() const;
  ::google::protobuf::Duration* release_start_time_offset();
  ::google::protobuf::Duration* mutable_start_time_offset();
  void set_allocated_start_time_offset(::google::protobuf::Duration* start_time_offset);

  // .google.protobuf.Duration end_time_offset = 2;
  bool has_end_time_offset() const;
  void clear_end_time_offset();
  static const int kEndTimeOffsetFieldNumber = 2;
  private:
  const ::google::protobuf::Duration& _internal_end_time_offset() const;
  public:
  const ::google::protobuf::Duration& end_time_offset() const;
  ::google::protobuf::Duration* release_end_time_offset();
  ::google::protobuf::Duration* mutable_end_time_offset();
  void set_allocated_end_time_offset(::google::protobuf::Duration* end_time_offset);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.VideoSegment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* start_time_offset_;
  ::google::protobuf::Duration* end_time_offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabelSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.LabelSegment) */ {
 public:
  LabelSegment();
  virtual ~LabelSegment();

  LabelSegment(const LabelSegment& from);

  inline LabelSegment& operator=(const LabelSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelSegment(LabelSegment&& from) noexcept
    : LabelSegment() {
    *this = ::std::move(from);
  }

  inline LabelSegment& operator=(LabelSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelSegment* internal_default_instance() {
    return reinterpret_cast<const LabelSegment*>(
               &_LabelSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LabelSegment* other);
  friend void swap(LabelSegment& a, LabelSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelSegment* New() const final {
    return CreateMaybeMessage<LabelSegment>(NULL);
  }

  LabelSegment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabelSegment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabelSegment& from);
  void MergeFrom(const LabelSegment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.videointelligence.v1p1beta1.VideoSegment segment = 1;
  bool has_segment() const;
  void clear_segment();
  static const int kSegmentFieldNumber = 1;
  private:
  const ::google::cloud::videointelligence::v1p1beta1::VideoSegment& _internal_segment() const;
  public:
  const ::google::cloud::videointelligence::v1p1beta1::VideoSegment& segment() const;
  ::google::cloud::videointelligence::v1p1beta1::VideoSegment* release_segment();
  ::google::cloud::videointelligence::v1p1beta1::VideoSegment* mutable_segment();
  void set_allocated_segment(::google::cloud::videointelligence::v1p1beta1::VideoSegment* segment);

  // float confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.LabelSegment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::videointelligence::v1p1beta1::VideoSegment* segment_;
  float confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabelFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.LabelFrame) */ {
 public:
  LabelFrame();
  virtual ~LabelFrame();

  LabelFrame(const LabelFrame& from);

  inline LabelFrame& operator=(const LabelFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelFrame(LabelFrame&& from) noexcept
    : LabelFrame() {
    *this = ::std::move(from);
  }

  inline LabelFrame& operator=(LabelFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelFrame* internal_default_instance() {
    return reinterpret_cast<const LabelFrame*>(
               &_LabelFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LabelFrame* other);
  friend void swap(LabelFrame& a, LabelFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelFrame* New() const final {
    return CreateMaybeMessage<LabelFrame>(NULL);
  }

  LabelFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabelFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabelFrame& from);
  void MergeFrom(const LabelFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration time_offset = 1;
  bool has_time_offset() const;
  void clear_time_offset();
  static const int kTimeOffsetFieldNumber = 1;
  private:
  const ::google::protobuf::Duration& _internal_time_offset() const;
  public:
  const ::google::protobuf::Duration& time_offset() const;
  ::google::protobuf::Duration* release_time_offset();
  ::google::protobuf::Duration* mutable_time_offset();
  void set_allocated_time_offset(::google::protobuf::Duration* time_offset);

  // float confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.LabelFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* time_offset_;
  float confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(Entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Entity* other);
  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const final {
    return CreateMaybeMessage<Entity>(NULL);
  }

  Entity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string entity_id = 1;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  const ::std::string& entity_id() const;
  void set_entity_id(const ::std::string& value);
  #if LANG_CXX11
  void set_entity_id(::std::string&& value);
  #endif
  void set_entity_id(const char* value);
  void set_entity_id(const char* value, size_t size);
  ::std::string* mutable_entity_id();
  ::std::string* release_entity_id();
  void set_allocated_entity_id(::std::string* entity_id);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string language_code = 3;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 3;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.Entity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr entity_id_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabelAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.LabelAnnotation) */ {
 public:
  LabelAnnotation();
  virtual ~LabelAnnotation();

  LabelAnnotation(const LabelAnnotation& from);

  inline LabelAnnotation& operator=(const LabelAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelAnnotation(LabelAnnotation&& from) noexcept
    : LabelAnnotation() {
    *this = ::std::move(from);
  }

  inline LabelAnnotation& operator=(LabelAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelAnnotation* internal_default_instance() {
    return reinterpret_cast<const LabelAnnotation*>(
               &_LabelAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(LabelAnnotation* other);
  friend void swap(LabelAnnotation& a, LabelAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelAnnotation* New() const final {
    return CreateMaybeMessage<LabelAnnotation>(NULL);
  }

  LabelAnnotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabelAnnotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabelAnnotation& from);
  void MergeFrom(const LabelAnnotation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelAnnotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.videointelligence.v1p1beta1.Entity category_entities = 2;
  int category_entities_size() const;
  void clear_category_entities();
  static const int kCategoryEntitiesFieldNumber = 2;
  ::google::cloud::videointelligence::v1p1beta1::Entity* mutable_category_entities(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::Entity >*
      mutable_category_entities();
  const ::google::cloud::videointelligence::v1p1beta1::Entity& category_entities(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::Entity* add_category_entities();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::Entity >&
      category_entities() const;

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelSegment segments = 3;
  int segments_size() const;
  void clear_segments();
  static const int kSegmentsFieldNumber = 3;
  ::google::cloud::videointelligence::v1p1beta1::LabelSegment* mutable_segments(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelSegment >*
      mutable_segments();
  const ::google::cloud::videointelligence::v1p1beta1::LabelSegment& segments(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::LabelSegment* add_segments();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelSegment >&
      segments() const;

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelFrame frames = 4;
  int frames_size() const;
  void clear_frames();
  static const int kFramesFieldNumber = 4;
  ::google::cloud::videointelligence::v1p1beta1::LabelFrame* mutable_frames(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelFrame >*
      mutable_frames();
  const ::google::cloud::videointelligence::v1p1beta1::LabelFrame& frames(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::LabelFrame* add_frames();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelFrame >&
      frames() const;

  // .google.cloud.videointelligence.v1p1beta1.Entity entity = 1;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 1;
  private:
  const ::google::cloud::videointelligence::v1p1beta1::Entity& _internal_entity() const;
  public:
  const ::google::cloud::videointelligence::v1p1beta1::Entity& entity() const;
  ::google::cloud::videointelligence::v1p1beta1::Entity* release_entity();
  ::google::cloud::videointelligence::v1p1beta1::Entity* mutable_entity();
  void set_allocated_entity(::google::cloud::videointelligence::v1p1beta1::Entity* entity);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::Entity > category_entities_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelSegment > segments_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelFrame > frames_;
  ::google::cloud::videointelligence::v1p1beta1::Entity* entity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExplicitContentFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame) */ {
 public:
  ExplicitContentFrame();
  virtual ~ExplicitContentFrame();

  ExplicitContentFrame(const ExplicitContentFrame& from);

  inline ExplicitContentFrame& operator=(const ExplicitContentFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExplicitContentFrame(ExplicitContentFrame&& from) noexcept
    : ExplicitContentFrame() {
    *this = ::std::move(from);
  }

  inline ExplicitContentFrame& operator=(ExplicitContentFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplicitContentFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplicitContentFrame* internal_default_instance() {
    return reinterpret_cast<const ExplicitContentFrame*>(
               &_ExplicitContentFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ExplicitContentFrame* other);
  friend void swap(ExplicitContentFrame& a, ExplicitContentFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExplicitContentFrame* New() const final {
    return CreateMaybeMessage<ExplicitContentFrame>(NULL);
  }

  ExplicitContentFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExplicitContentFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExplicitContentFrame& from);
  void MergeFrom(const ExplicitContentFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplicitContentFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration time_offset = 1;
  bool has_time_offset() const;
  void clear_time_offset();
  static const int kTimeOffsetFieldNumber = 1;
  private:
  const ::google::protobuf::Duration& _internal_time_offset() const;
  public:
  const ::google::protobuf::Duration& time_offset() const;
  ::google::protobuf::Duration* release_time_offset();
  ::google::protobuf::Duration* mutable_time_offset();
  void set_allocated_time_offset(::google::protobuf::Duration* time_offset);

  // .google.cloud.videointelligence.v1p1beta1.Likelihood pornography_likelihood = 2;
  void clear_pornography_likelihood();
  static const int kPornographyLikelihoodFieldNumber = 2;
  ::google::cloud::videointelligence::v1p1beta1::Likelihood pornography_likelihood() const;
  void set_pornography_likelihood(::google::cloud::videointelligence::v1p1beta1::Likelihood value);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* time_offset_;
  int pornography_likelihood_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExplicitContentAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation) */ {
 public:
  ExplicitContentAnnotation();
  virtual ~ExplicitContentAnnotation();

  ExplicitContentAnnotation(const ExplicitContentAnnotation& from);

  inline ExplicitContentAnnotation& operator=(const ExplicitContentAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExplicitContentAnnotation(ExplicitContentAnnotation&& from) noexcept
    : ExplicitContentAnnotation() {
    *this = ::std::move(from);
  }

  inline ExplicitContentAnnotation& operator=(ExplicitContentAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplicitContentAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplicitContentAnnotation* internal_default_instance() {
    return reinterpret_cast<const ExplicitContentAnnotation*>(
               &_ExplicitContentAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ExplicitContentAnnotation* other);
  friend void swap(ExplicitContentAnnotation& a, ExplicitContentAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExplicitContentAnnotation* New() const final {
    return CreateMaybeMessage<ExplicitContentAnnotation>(NULL);
  }

  ExplicitContentAnnotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExplicitContentAnnotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExplicitContentAnnotation& from);
  void MergeFrom(const ExplicitContentAnnotation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplicitContentAnnotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame frames = 1;
  int frames_size() const;
  void clear_frames();
  static const int kFramesFieldNumber = 1;
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame* mutable_frames(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame >*
      mutable_frames();
  const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame& frames(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame* add_frames();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame > frames_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoAnnotationResults : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults) */ {
 public:
  VideoAnnotationResults();
  virtual ~VideoAnnotationResults();

  VideoAnnotationResults(const VideoAnnotationResults& from);

  inline VideoAnnotationResults& operator=(const VideoAnnotationResults& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoAnnotationResults(VideoAnnotationResults&& from) noexcept
    : VideoAnnotationResults() {
    *this = ::std::move(from);
  }

  inline VideoAnnotationResults& operator=(VideoAnnotationResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoAnnotationResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoAnnotationResults* internal_default_instance() {
    return reinterpret_cast<const VideoAnnotationResults*>(
               &_VideoAnnotationResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(VideoAnnotationResults* other);
  friend void swap(VideoAnnotationResults& a, VideoAnnotationResults& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoAnnotationResults* New() const final {
    return CreateMaybeMessage<VideoAnnotationResults>(NULL);
  }

  VideoAnnotationResults* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoAnnotationResults>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VideoAnnotationResults& from);
  void MergeFrom(const VideoAnnotationResults& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoAnnotationResults* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation segment_label_annotations = 2;
  int segment_label_annotations_size() const;
  void clear_segment_label_annotations();
  static const int kSegmentLabelAnnotationsFieldNumber = 2;
  ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* mutable_segment_label_annotations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >*
      mutable_segment_label_annotations();
  const ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation& segment_label_annotations(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* add_segment_label_annotations();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >&
      segment_label_annotations() const;

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation shot_label_annotations = 3;
  int shot_label_annotations_size() const;
  void clear_shot_label_annotations();
  static const int kShotLabelAnnotationsFieldNumber = 3;
  ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* mutable_shot_label_annotations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >*
      mutable_shot_label_annotations();
  const ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation& shot_label_annotations(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* add_shot_label_annotations();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >&
      shot_label_annotations() const;

  // repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation frame_label_annotations = 4;
  int frame_label_annotations_size() const;
  void clear_frame_label_annotations();
  static const int kFrameLabelAnnotationsFieldNumber = 4;
  ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* mutable_frame_label_annotations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >*
      mutable_frame_label_annotations();
  const ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation& frame_label_annotations(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* add_frame_label_annotations();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >&
      frame_label_annotations() const;

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment shot_annotations = 6;
  int shot_annotations_size() const;
  void clear_shot_annotations();
  static const int kShotAnnotationsFieldNumber = 6;
  ::google::cloud::videointelligence::v1p1beta1::VideoSegment* mutable_shot_annotations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoSegment >*
      mutable_shot_annotations();
  const ::google::cloud::videointelligence::v1p1beta1::VideoSegment& shot_annotations(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::VideoSegment* add_shot_annotations();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoSegment >&
      shot_annotations() const;

  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechTranscription speech_transcriptions = 11;
  int speech_transcriptions_size() const;
  void clear_speech_transcriptions();
  static const int kSpeechTranscriptionsFieldNumber = 11;
  ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription* mutable_speech_transcriptions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription >*
      mutable_speech_transcriptions();
  const ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription& speech_transcriptions(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription* add_speech_transcriptions();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription >&
      speech_transcriptions() const;

  // string input_uri = 1;
  void clear_input_uri();
  static const int kInputUriFieldNumber = 1;
  const ::std::string& input_uri() const;
  void set_input_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_input_uri(::std::string&& value);
  #endif
  void set_input_uri(const char* value);
  void set_input_uri(const char* value, size_t size);
  ::std::string* mutable_input_uri();
  ::std::string* release_input_uri();
  void set_allocated_input_uri(::std::string* input_uri);

  // .google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation explicit_annotation = 7;
  bool has_explicit_annotation() const;
  void clear_explicit_annotation();
  static const int kExplicitAnnotationFieldNumber = 7;
  private:
  const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation& _internal_explicit_annotation() const;
  public:
  const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation& explicit_annotation() const;
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation* release_explicit_annotation();
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation* mutable_explicit_annotation();
  void set_allocated_explicit_annotation(::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation* explicit_annotation);

  // .google.rpc.Status error = 9;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 9;
  private:
  const ::google::rpc::Status& _internal_error() const;
  public:
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation > segment_label_annotations_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation > shot_label_annotations_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation > frame_label_annotations_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoSegment > shot_annotations_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription > speech_transcriptions_;
  ::google::protobuf::internal::ArenaStringPtr input_uri_;
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation* explicit_annotation_;
  ::google::rpc::Status* error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnnotateVideoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse) */ {
 public:
  AnnotateVideoResponse();
  virtual ~AnnotateVideoResponse();

  AnnotateVideoResponse(const AnnotateVideoResponse& from);

  inline AnnotateVideoResponse& operator=(const AnnotateVideoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnnotateVideoResponse(AnnotateVideoResponse&& from) noexcept
    : AnnotateVideoResponse() {
    *this = ::std::move(from);
  }

  inline AnnotateVideoResponse& operator=(AnnotateVideoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotateVideoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotateVideoResponse* internal_default_instance() {
    return reinterpret_cast<const AnnotateVideoResponse*>(
               &_AnnotateVideoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(AnnotateVideoResponse* other);
  friend void swap(AnnotateVideoResponse& a, AnnotateVideoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnnotateVideoResponse* New() const final {
    return CreateMaybeMessage<AnnotateVideoResponse>(NULL);
  }

  AnnotateVideoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnnotateVideoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnnotateVideoResponse& from);
  void MergeFrom(const AnnotateVideoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotateVideoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults annotation_results = 1;
  int annotation_results_size() const;
  void clear_annotation_results();
  static const int kAnnotationResultsFieldNumber = 1;
  ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults* mutable_annotation_results(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults >*
      mutable_annotation_results();
  const ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults& annotation_results(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults* add_annotation_results();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults >&
      annotation_results() const;

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults > annotation_results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoAnnotationProgress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress) */ {
 public:
  VideoAnnotationProgress();
  virtual ~VideoAnnotationProgress();

  VideoAnnotationProgress(const VideoAnnotationProgress& from);

  inline VideoAnnotationProgress& operator=(const VideoAnnotationProgress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoAnnotationProgress(VideoAnnotationProgress&& from) noexcept
    : VideoAnnotationProgress() {
    *this = ::std::move(from);
  }

  inline VideoAnnotationProgress& operator=(VideoAnnotationProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoAnnotationProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoAnnotationProgress* internal_default_instance() {
    return reinterpret_cast<const VideoAnnotationProgress*>(
               &_VideoAnnotationProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(VideoAnnotationProgress* other);
  friend void swap(VideoAnnotationProgress& a, VideoAnnotationProgress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoAnnotationProgress* New() const final {
    return CreateMaybeMessage<VideoAnnotationProgress>(NULL);
  }

  VideoAnnotationProgress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoAnnotationProgress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VideoAnnotationProgress& from);
  void MergeFrom(const VideoAnnotationProgress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoAnnotationProgress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string input_uri = 1;
  void clear_input_uri();
  static const int kInputUriFieldNumber = 1;
  const ::std::string& input_uri() const;
  void set_input_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_input_uri(::std::string&& value);
  #endif
  void set_input_uri(const char* value);
  void set_input_uri(const char* value, size_t size);
  ::std::string* mutable_input_uri();
  ::std::string* release_input_uri();
  void set_allocated_input_uri(::std::string* input_uri);

  // .google.protobuf.Timestamp start_time = 3;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  public:
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp update_time = 4;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // int32 progress_percent = 2;
  void clear_progress_percent();
  static const int kProgressPercentFieldNumber = 2;
  ::google::protobuf::int32 progress_percent() const;
  void set_progress_percent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr input_uri_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::protobuf::int32 progress_percent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnnotateVideoProgress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress) */ {
 public:
  AnnotateVideoProgress();
  virtual ~AnnotateVideoProgress();

  AnnotateVideoProgress(const AnnotateVideoProgress& from);

  inline AnnotateVideoProgress& operator=(const AnnotateVideoProgress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnnotateVideoProgress(AnnotateVideoProgress&& from) noexcept
    : AnnotateVideoProgress() {
    *this = ::std::move(from);
  }

  inline AnnotateVideoProgress& operator=(AnnotateVideoProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotateVideoProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotateVideoProgress* internal_default_instance() {
    return reinterpret_cast<const AnnotateVideoProgress*>(
               &_AnnotateVideoProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(AnnotateVideoProgress* other);
  friend void swap(AnnotateVideoProgress& a, AnnotateVideoProgress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnnotateVideoProgress* New() const final {
    return CreateMaybeMessage<AnnotateVideoProgress>(NULL);
  }

  AnnotateVideoProgress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnnotateVideoProgress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnnotateVideoProgress& from);
  void MergeFrom(const AnnotateVideoProgress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotateVideoProgress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress annotation_progress = 1;
  int annotation_progress_size() const;
  void clear_annotation_progress();
  static const int kAnnotationProgressFieldNumber = 1;
  ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress* mutable_annotation_progress(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress >*
      mutable_annotation_progress();
  const ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress& annotation_progress(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress* add_annotation_progress();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress >&
      annotation_progress() const;

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress > annotation_progress_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeechTranscriptionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig) */ {
 public:
  SpeechTranscriptionConfig();
  virtual ~SpeechTranscriptionConfig();

  SpeechTranscriptionConfig(const SpeechTranscriptionConfig& from);

  inline SpeechTranscriptionConfig& operator=(const SpeechTranscriptionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeechTranscriptionConfig(SpeechTranscriptionConfig&& from) noexcept
    : SpeechTranscriptionConfig() {
    *this = ::std::move(from);
  }

  inline SpeechTranscriptionConfig& operator=(SpeechTranscriptionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechTranscriptionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeechTranscriptionConfig* internal_default_instance() {
    return reinterpret_cast<const SpeechTranscriptionConfig*>(
               &_SpeechTranscriptionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SpeechTranscriptionConfig* other);
  friend void swap(SpeechTranscriptionConfig& a, SpeechTranscriptionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeechTranscriptionConfig* New() const final {
    return CreateMaybeMessage<SpeechTranscriptionConfig>(NULL);
  }

  SpeechTranscriptionConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeechTranscriptionConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeechTranscriptionConfig& from);
  void MergeFrom(const SpeechTranscriptionConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechTranscriptionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechContext speech_contexts = 4;
  int speech_contexts_size() const;
  void clear_speech_contexts();
  static const int kSpeechContextsFieldNumber = 4;
  ::google::cloud::videointelligence::v1p1beta1::SpeechContext* mutable_speech_contexts(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechContext >*
      mutable_speech_contexts();
  const ::google::cloud::videointelligence::v1p1beta1::SpeechContext& speech_contexts(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::SpeechContext* add_speech_contexts();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechContext >&
      speech_contexts() const;

  // repeated int32 audio_tracks = 6;
  int audio_tracks_size() const;
  void clear_audio_tracks();
  static const int kAudioTracksFieldNumber = 6;
  ::google::protobuf::int32 audio_tracks(int index) const;
  void set_audio_tracks(int index, ::google::protobuf::int32 value);
  void add_audio_tracks(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      audio_tracks() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_audio_tracks();

  // string language_code = 1;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 1;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // int32 max_alternatives = 2;
  void clear_max_alternatives();
  static const int kMaxAlternativesFieldNumber = 2;
  ::google::protobuf::int32 max_alternatives() const;
  void set_max_alternatives(::google::protobuf::int32 value);

  // bool filter_profanity = 3;
  void clear_filter_profanity();
  static const int kFilterProfanityFieldNumber = 3;
  bool filter_profanity() const;
  void set_filter_profanity(bool value);

  // bool enable_automatic_punctuation = 5;
  void clear_enable_automatic_punctuation();
  static const int kEnableAutomaticPunctuationFieldNumber = 5;
  bool enable_automatic_punctuation() const;
  void set_enable_automatic_punctuation(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechContext > speech_contexts_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > audio_tracks_;
  mutable int _audio_tracks_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  ::google::protobuf::int32 max_alternatives_;
  bool filter_profanity_;
  bool enable_automatic_punctuation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeechContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.SpeechContext) */ {
 public:
  SpeechContext();
  virtual ~SpeechContext();

  SpeechContext(const SpeechContext& from);

  inline SpeechContext& operator=(const SpeechContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeechContext(SpeechContext&& from) noexcept
    : SpeechContext() {
    *this = ::std::move(from);
  }

  inline SpeechContext& operator=(SpeechContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeechContext* internal_default_instance() {
    return reinterpret_cast<const SpeechContext*>(
               &_SpeechContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(SpeechContext* other);
  friend void swap(SpeechContext& a, SpeechContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeechContext* New() const final {
    return CreateMaybeMessage<SpeechContext>(NULL);
  }

  SpeechContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeechContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeechContext& from);
  void MergeFrom(const SpeechContext& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string phrases = 1;
  int phrases_size() const;
  void clear_phrases();
  static const int kPhrasesFieldNumber = 1;
  const ::std::string& phrases(int index) const;
  ::std::string* mutable_phrases(int index);
  void set_phrases(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_phrases(int index, ::std::string&& value);
  #endif
  void set_phrases(int index, const char* value);
  void set_phrases(int index, const char* value, size_t size);
  ::std::string* add_phrases();
  void add_phrases(const ::std::string& value);
  #if LANG_CXX11
  void add_phrases(::std::string&& value);
  #endif
  void add_phrases(const char* value);
  void add_phrases(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& phrases() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_phrases();

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.SpeechContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> phrases_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeechTranscription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.SpeechTranscription) */ {
 public:
  SpeechTranscription();
  virtual ~SpeechTranscription();

  SpeechTranscription(const SpeechTranscription& from);

  inline SpeechTranscription& operator=(const SpeechTranscription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeechTranscription(SpeechTranscription&& from) noexcept
    : SpeechTranscription() {
    *this = ::std::move(from);
  }

  inline SpeechTranscription& operator=(SpeechTranscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechTranscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeechTranscription* internal_default_instance() {
    return reinterpret_cast<const SpeechTranscription*>(
               &_SpeechTranscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(SpeechTranscription* other);
  friend void swap(SpeechTranscription& a, SpeechTranscription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeechTranscription* New() const final {
    return CreateMaybeMessage<SpeechTranscription>(NULL);
  }

  SpeechTranscription* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeechTranscription>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeechTranscription& from);
  void MergeFrom(const SpeechTranscription& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechTranscription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
  int alternatives_size() const;
  void clear_alternatives();
  static const int kAlternativesFieldNumber = 1;
  ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative* mutable_alternatives(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative >*
      mutable_alternatives();
  const ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative& alternatives(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative* add_alternatives();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative >&
      alternatives() const;

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative > alternatives_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeechRecognitionAlternative : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative) */ {
 public:
  SpeechRecognitionAlternative();
  virtual ~SpeechRecognitionAlternative();

  SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from);

  inline SpeechRecognitionAlternative& operator=(const SpeechRecognitionAlternative& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeechRecognitionAlternative(SpeechRecognitionAlternative&& from) noexcept
    : SpeechRecognitionAlternative() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionAlternative& operator=(SpeechRecognitionAlternative&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechRecognitionAlternative& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeechRecognitionAlternative* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionAlternative*>(
               &_SpeechRecognitionAlternative_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SpeechRecognitionAlternative* other);
  friend void swap(SpeechRecognitionAlternative& a, SpeechRecognitionAlternative& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeechRecognitionAlternative* New() const final {
    return CreateMaybeMessage<SpeechRecognitionAlternative>(NULL);
  }

  SpeechRecognitionAlternative* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeechRecognitionAlternative>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeechRecognitionAlternative& from);
  void MergeFrom(const SpeechRecognitionAlternative& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechRecognitionAlternative* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.videointelligence.v1p1beta1.WordInfo words = 3;
  int words_size() const;
  void clear_words();
  static const int kWordsFieldNumber = 3;
  ::google::cloud::videointelligence::v1p1beta1::WordInfo* mutable_words(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::WordInfo >*
      mutable_words();
  const ::google::cloud::videointelligence::v1p1beta1::WordInfo& words(int index) const;
  ::google::cloud::videointelligence::v1p1beta1::WordInfo* add_words();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::WordInfo >&
      words() const;

  // string transcript = 1;
  void clear_transcript();
  static const int kTranscriptFieldNumber = 1;
  const ::std::string& transcript() const;
  void set_transcript(const ::std::string& value);
  #if LANG_CXX11
  void set_transcript(::std::string&& value);
  #endif
  void set_transcript(const char* value);
  void set_transcript(const char* value, size_t size);
  ::std::string* mutable_transcript();
  ::std::string* release_transcript();
  void set_allocated_transcript(::std::string* transcript);

  // float confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::WordInfo > words_;
  ::google::protobuf::internal::ArenaStringPtr transcript_;
  float confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WordInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.videointelligence.v1p1beta1.WordInfo) */ {
 public:
  WordInfo();
  virtual ~WordInfo();

  WordInfo(const WordInfo& from);

  inline WordInfo& operator=(const WordInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WordInfo(WordInfo&& from) noexcept
    : WordInfo() {
    *this = ::std::move(from);
  }

  inline WordInfo& operator=(WordInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WordInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WordInfo* internal_default_instance() {
    return reinterpret_cast<const WordInfo*>(
               &_WordInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(WordInfo* other);
  friend void swap(WordInfo& a, WordInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WordInfo* New() const final {
    return CreateMaybeMessage<WordInfo>(NULL);
  }

  WordInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WordInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WordInfo& from);
  void MergeFrom(const WordInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WordInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string word = 3;
  void clear_word();
  static const int kWordFieldNumber = 3;
  const ::std::string& word() const;
  void set_word(const ::std::string& value);
  #if LANG_CXX11
  void set_word(::std::string&& value);
  #endif
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  ::std::string* mutable_word();
  ::std::string* release_word();
  void set_allocated_word(::std::string* word);

  // .google.protobuf.Duration start_time = 1;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  private:
  const ::google::protobuf::Duration& _internal_start_time() const;
  public:
  const ::google::protobuf::Duration& start_time() const;
  ::google::protobuf::Duration* release_start_time();
  ::google::protobuf::Duration* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Duration* start_time);

  // .google.protobuf.Duration end_time = 2;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Duration& _internal_end_time() const;
  public:
  const ::google::protobuf::Duration& end_time() const;
  ::google::protobuf::Duration* release_end_time();
  ::google::protobuf::Duration* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Duration* end_time);

  // @@protoc_insertion_point(class_scope:google.cloud.videointelligence.v1p1beta1.WordInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr word_;
  ::google::protobuf::Duration* start_time_;
  ::google::protobuf::Duration* end_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnnotateVideoRequest

// string input_uri = 1;
inline void AnnotateVideoRequest::clear_input_uri() {
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnnotateVideoRequest::input_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_uri)
  return input_uri_.GetNoArena();
}
inline void AnnotateVideoRequest::set_input_uri(const ::std::string& value) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_uri)
}
#if LANG_CXX11
inline void AnnotateVideoRequest::set_input_uri(::std::string&& value) {
  
  input_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_uri)
}
#endif
inline void AnnotateVideoRequest::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_uri)
}
inline void AnnotateVideoRequest::set_input_uri(const char* value, size_t size) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_uri)
}
inline ::std::string* AnnotateVideoRequest::mutable_input_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_uri)
  return input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnotateVideoRequest::release_input_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_uri)
  
  return input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotateVideoRequest::set_allocated_input_uri(::std::string* input_uri) {
  if (input_uri != NULL) {
    
  } else {
    
  }
  input_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_uri)
}

// bytes input_content = 6;
inline void AnnotateVideoRequest::clear_input_content() {
  input_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnnotateVideoRequest::input_content() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_content)
  return input_content_.GetNoArena();
}
inline void AnnotateVideoRequest::set_input_content(const ::std::string& value) {
  
  input_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_content)
}
#if LANG_CXX11
inline void AnnotateVideoRequest::set_input_content(::std::string&& value) {
  
  input_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_content)
}
#endif
inline void AnnotateVideoRequest::set_input_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_content)
}
inline void AnnotateVideoRequest::set_input_content(const void* value, size_t size) {
  
  input_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_content)
}
inline ::std::string* AnnotateVideoRequest::mutable_input_content() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_content)
  return input_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnotateVideoRequest::release_input_content() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_content)
  
  return input_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotateVideoRequest::set_allocated_input_content(::std::string* input_content) {
  if (input_content != NULL) {
    
  } else {
    
  }
  input_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_content);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.input_content)
}

// repeated .google.cloud.videointelligence.v1p1beta1.Feature features = 2;
inline int AnnotateVideoRequest::features_size() const {
  return features_.size();
}
inline void AnnotateVideoRequest::clear_features() {
  features_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::Feature AnnotateVideoRequest::features(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.features)
  return static_cast< ::google::cloud::videointelligence::v1p1beta1::Feature >(features_.Get(index));
}
inline void AnnotateVideoRequest::set_features(int index, ::google::cloud::videointelligence::v1p1beta1::Feature value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.features)
}
inline void AnnotateVideoRequest::add_features(::google::cloud::videointelligence::v1p1beta1::Feature value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.features)
}
inline const ::google::protobuf::RepeatedField<int>&
AnnotateVideoRequest::features() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.features)
  return features_;
}
inline ::google::protobuf::RepeatedField<int>*
AnnotateVideoRequest::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.features)
  return &features_;
}

// .google.cloud.videointelligence.v1p1beta1.VideoContext video_context = 3;
inline bool AnnotateVideoRequest::has_video_context() const {
  return this != internal_default_instance() && video_context_ != NULL;
}
inline void AnnotateVideoRequest::clear_video_context() {
  if (GetArenaNoVirtual() == NULL && video_context_ != NULL) {
    delete video_context_;
  }
  video_context_ = NULL;
}
inline const ::google::cloud::videointelligence::v1p1beta1::VideoContext& AnnotateVideoRequest::_internal_video_context() const {
  return *video_context_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::VideoContext& AnnotateVideoRequest::video_context() const {
  const ::google::cloud::videointelligence::v1p1beta1::VideoContext* p = video_context_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.video_context)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::videointelligence::v1p1beta1::VideoContext*>(
      &::google::cloud::videointelligence::v1p1beta1::_VideoContext_default_instance_);
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoContext* AnnotateVideoRequest::release_video_context() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.video_context)
  
  ::google::cloud::videointelligence::v1p1beta1::VideoContext* temp = video_context_;
  video_context_ = NULL;
  return temp;
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoContext* AnnotateVideoRequest::mutable_video_context() {
  
  if (video_context_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::VideoContext>(GetArenaNoVirtual());
    video_context_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.video_context)
  return video_context_;
}
inline void AnnotateVideoRequest::set_allocated_video_context(::google::cloud::videointelligence::v1p1beta1::VideoContext* video_context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_context_;
  }
  if (video_context) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      video_context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, video_context, submessage_arena);
    }
    
  } else {
    
  }
  video_context_ = video_context;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.video_context)
}

// string output_uri = 4;
inline void AnnotateVideoRequest::clear_output_uri() {
  output_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnnotateVideoRequest::output_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.output_uri)
  return output_uri_.GetNoArena();
}
inline void AnnotateVideoRequest::set_output_uri(const ::std::string& value) {
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.output_uri)
}
#if LANG_CXX11
inline void AnnotateVideoRequest::set_output_uri(::std::string&& value) {
  
  output_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.output_uri)
}
#endif
inline void AnnotateVideoRequest::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.output_uri)
}
inline void AnnotateVideoRequest::set_output_uri(const char* value, size_t size) {
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.output_uri)
}
inline ::std::string* AnnotateVideoRequest::mutable_output_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.output_uri)
  return output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnotateVideoRequest::release_output_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.output_uri)
  
  return output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotateVideoRequest::set_allocated_output_uri(::std::string* output_uri) {
  if (output_uri != NULL) {
    
  } else {
    
  }
  output_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.output_uri)
}

// string location_id = 5;
inline void AnnotateVideoRequest::clear_location_id() {
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnnotateVideoRequest::location_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.location_id)
  return location_id_.GetNoArena();
}
inline void AnnotateVideoRequest::set_location_id(const ::std::string& value) {
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.location_id)
}
#if LANG_CXX11
inline void AnnotateVideoRequest::set_location_id(::std::string&& value) {
  
  location_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.location_id)
}
#endif
inline void AnnotateVideoRequest::set_location_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.location_id)
}
inline void AnnotateVideoRequest::set_location_id(const char* value, size_t size) {
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.location_id)
}
inline ::std::string* AnnotateVideoRequest::mutable_location_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.location_id)
  return location_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnotateVideoRequest::release_location_id() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.location_id)
  
  return location_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotateVideoRequest::set_allocated_location_id(::std::string* location_id) {
  if (location_id != NULL) {
    
  } else {
    
  }
  location_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.location_id)
}

// -------------------------------------------------------------------

// VideoContext

// repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment segments = 1;
inline int VideoContext::segments_size() const {
  return segments_.size();
}
inline void VideoContext::clear_segments() {
  segments_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoSegment* VideoContext::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoContext.segments)
  return segments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoSegment >*
VideoContext::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.VideoContext.segments)
  return &segments_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::VideoSegment& VideoContext::segments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoContext.segments)
  return segments_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoSegment* VideoContext::add_segments() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.VideoContext.segments)
  return segments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoSegment >&
VideoContext::segments() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.VideoContext.segments)
  return segments_;
}

// .google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig label_detection_config = 2;
inline bool VideoContext::has_label_detection_config() const {
  return this != internal_default_instance() && label_detection_config_ != NULL;
}
inline void VideoContext::clear_label_detection_config() {
  if (GetArenaNoVirtual() == NULL && label_detection_config_ != NULL) {
    delete label_detection_config_;
  }
  label_detection_config_ = NULL;
}
inline const ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig& VideoContext::_internal_label_detection_config() const {
  return *label_detection_config_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig& VideoContext::label_detection_config() const {
  const ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig* p = label_detection_config_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoContext.label_detection_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig*>(
      &::google::cloud::videointelligence::v1p1beta1::_LabelDetectionConfig_default_instance_);
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig* VideoContext::release_label_detection_config() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoContext.label_detection_config)
  
  ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig* temp = label_detection_config_;
  label_detection_config_ = NULL;
  return temp;
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig* VideoContext::mutable_label_detection_config() {
  
  if (label_detection_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig>(GetArenaNoVirtual());
    label_detection_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoContext.label_detection_config)
  return label_detection_config_;
}
inline void VideoContext::set_allocated_label_detection_config(::google::cloud::videointelligence::v1p1beta1::LabelDetectionConfig* label_detection_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete label_detection_config_;
  }
  if (label_detection_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      label_detection_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label_detection_config, submessage_arena);
    }
    
  } else {
    
  }
  label_detection_config_ = label_detection_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoContext.label_detection_config)
}

// .google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig shot_change_detection_config = 3;
inline bool VideoContext::has_shot_change_detection_config() const {
  return this != internal_default_instance() && shot_change_detection_config_ != NULL;
}
inline void VideoContext::clear_shot_change_detection_config() {
  if (GetArenaNoVirtual() == NULL && shot_change_detection_config_ != NULL) {
    delete shot_change_detection_config_;
  }
  shot_change_detection_config_ = NULL;
}
inline const ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig& VideoContext::_internal_shot_change_detection_config() const {
  return *shot_change_detection_config_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig& VideoContext::shot_change_detection_config() const {
  const ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig* p = shot_change_detection_config_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoContext.shot_change_detection_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig*>(
      &::google::cloud::videointelligence::v1p1beta1::_ShotChangeDetectionConfig_default_instance_);
}
inline ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig* VideoContext::release_shot_change_detection_config() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoContext.shot_change_detection_config)
  
  ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig* temp = shot_change_detection_config_;
  shot_change_detection_config_ = NULL;
  return temp;
}
inline ::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig* VideoContext::mutable_shot_change_detection_config() {
  
  if (shot_change_detection_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig>(GetArenaNoVirtual());
    shot_change_detection_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoContext.shot_change_detection_config)
  return shot_change_detection_config_;
}
inline void VideoContext::set_allocated_shot_change_detection_config(::google::cloud::videointelligence::v1p1beta1::ShotChangeDetectionConfig* shot_change_detection_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shot_change_detection_config_;
  }
  if (shot_change_detection_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shot_change_detection_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shot_change_detection_config, submessage_arena);
    }
    
  } else {
    
  }
  shot_change_detection_config_ = shot_change_detection_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoContext.shot_change_detection_config)
}

// .google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig explicit_content_detection_config = 4;
inline bool VideoContext::has_explicit_content_detection_config() const {
  return this != internal_default_instance() && explicit_content_detection_config_ != NULL;
}
inline void VideoContext::clear_explicit_content_detection_config() {
  if (GetArenaNoVirtual() == NULL && explicit_content_detection_config_ != NULL) {
    delete explicit_content_detection_config_;
  }
  explicit_content_detection_config_ = NULL;
}
inline const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig& VideoContext::_internal_explicit_content_detection_config() const {
  return *explicit_content_detection_config_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig& VideoContext::explicit_content_detection_config() const {
  const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig* p = explicit_content_detection_config_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoContext.explicit_content_detection_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig*>(
      &::google::cloud::videointelligence::v1p1beta1::_ExplicitContentDetectionConfig_default_instance_);
}
inline ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig* VideoContext::release_explicit_content_detection_config() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoContext.explicit_content_detection_config)
  
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig* temp = explicit_content_detection_config_;
  explicit_content_detection_config_ = NULL;
  return temp;
}
inline ::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig* VideoContext::mutable_explicit_content_detection_config() {
  
  if (explicit_content_detection_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig>(GetArenaNoVirtual());
    explicit_content_detection_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoContext.explicit_content_detection_config)
  return explicit_content_detection_config_;
}
inline void VideoContext::set_allocated_explicit_content_detection_config(::google::cloud::videointelligence::v1p1beta1::ExplicitContentDetectionConfig* explicit_content_detection_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete explicit_content_detection_config_;
  }
  if (explicit_content_detection_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      explicit_content_detection_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, explicit_content_detection_config, submessage_arena);
    }
    
  } else {
    
  }
  explicit_content_detection_config_ = explicit_content_detection_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoContext.explicit_content_detection_config)
}

// .google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig speech_transcription_config = 6;
inline bool VideoContext::has_speech_transcription_config() const {
  return this != internal_default_instance() && speech_transcription_config_ != NULL;
}
inline void VideoContext::clear_speech_transcription_config() {
  if (GetArenaNoVirtual() == NULL && speech_transcription_config_ != NULL) {
    delete speech_transcription_config_;
  }
  speech_transcription_config_ = NULL;
}
inline const ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig& VideoContext::_internal_speech_transcription_config() const {
  return *speech_transcription_config_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig& VideoContext::speech_transcription_config() const {
  const ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig* p = speech_transcription_config_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoContext.speech_transcription_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig*>(
      &::google::cloud::videointelligence::v1p1beta1::_SpeechTranscriptionConfig_default_instance_);
}
inline ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig* VideoContext::release_speech_transcription_config() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoContext.speech_transcription_config)
  
  ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig* temp = speech_transcription_config_;
  speech_transcription_config_ = NULL;
  return temp;
}
inline ::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig* VideoContext::mutable_speech_transcription_config() {
  
  if (speech_transcription_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig>(GetArenaNoVirtual());
    speech_transcription_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoContext.speech_transcription_config)
  return speech_transcription_config_;
}
inline void VideoContext::set_allocated_speech_transcription_config(::google::cloud::videointelligence::v1p1beta1::SpeechTranscriptionConfig* speech_transcription_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete speech_transcription_config_;
  }
  if (speech_transcription_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speech_transcription_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speech_transcription_config, submessage_arena);
    }
    
  } else {
    
  }
  speech_transcription_config_ = speech_transcription_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoContext.speech_transcription_config)
}

// -------------------------------------------------------------------

// LabelDetectionConfig

// .google.cloud.videointelligence.v1p1beta1.LabelDetectionMode label_detection_mode = 1;
inline void LabelDetectionConfig::clear_label_detection_mode() {
  label_detection_mode_ = 0;
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelDetectionMode LabelDetectionConfig::label_detection_mode() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.label_detection_mode)
  return static_cast< ::google::cloud::videointelligence::v1p1beta1::LabelDetectionMode >(label_detection_mode_);
}
inline void LabelDetectionConfig::set_label_detection_mode(::google::cloud::videointelligence::v1p1beta1::LabelDetectionMode value) {
  
  label_detection_mode_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.label_detection_mode)
}

// bool stationary_camera = 2;
inline void LabelDetectionConfig::clear_stationary_camera() {
  stationary_camera_ = false;
}
inline bool LabelDetectionConfig::stationary_camera() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.stationary_camera)
  return stationary_camera_;
}
inline void LabelDetectionConfig::set_stationary_camera(bool value) {
  
  stationary_camera_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.stationary_camera)
}

// string model = 3;
inline void LabelDetectionConfig::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LabelDetectionConfig::model() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.model)
  return model_.GetNoArena();
}
inline void LabelDetectionConfig::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.model)
}
#if LANG_CXX11
inline void LabelDetectionConfig::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.model)
}
#endif
inline void LabelDetectionConfig::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.model)
}
inline void LabelDetectionConfig::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.model)
}
inline ::std::string* LabelDetectionConfig::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelDetectionConfig::release_model() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelDetectionConfig::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.model)
}

// -------------------------------------------------------------------

// ShotChangeDetectionConfig

// string model = 1;
inline void ShotChangeDetectionConfig::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShotChangeDetectionConfig::model() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.model)
  return model_.GetNoArena();
}
inline void ShotChangeDetectionConfig::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.model)
}
#if LANG_CXX11
inline void ShotChangeDetectionConfig::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.model)
}
#endif
inline void ShotChangeDetectionConfig::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.model)
}
inline void ShotChangeDetectionConfig::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.model)
}
inline ::std::string* ShotChangeDetectionConfig::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShotChangeDetectionConfig::release_model() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShotChangeDetectionConfig::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.model)
}

// -------------------------------------------------------------------

// ExplicitContentDetectionConfig

// string model = 1;
inline void ExplicitContentDetectionConfig::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExplicitContentDetectionConfig::model() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.model)
  return model_.GetNoArena();
}
inline void ExplicitContentDetectionConfig::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.model)
}
#if LANG_CXX11
inline void ExplicitContentDetectionConfig::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.model)
}
#endif
inline void ExplicitContentDetectionConfig::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.model)
}
inline void ExplicitContentDetectionConfig::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.model)
}
inline ::std::string* ExplicitContentDetectionConfig::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExplicitContentDetectionConfig::release_model() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplicitContentDetectionConfig::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.model)
}

// -------------------------------------------------------------------

// VideoSegment

// .google.protobuf.Duration start_time_offset = 1;
inline bool VideoSegment::has_start_time_offset() const {
  return this != internal_default_instance() && start_time_offset_ != NULL;
}
inline const ::google::protobuf::Duration& VideoSegment::_internal_start_time_offset() const {
  return *start_time_offset_;
}
inline const ::google::protobuf::Duration& VideoSegment::start_time_offset() const {
  const ::google::protobuf::Duration* p = start_time_offset_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoSegment.start_time_offset)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* VideoSegment::release_start_time_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoSegment.start_time_offset)
  
  ::google::protobuf::Duration* temp = start_time_offset_;
  start_time_offset_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* VideoSegment::mutable_start_time_offset() {
  
  if (start_time_offset_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    start_time_offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoSegment.start_time_offset)
  return start_time_offset_;
}
inline void VideoSegment::set_allocated_start_time_offset(::google::protobuf::Duration* start_time_offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_offset_);
  }
  if (start_time_offset) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time_offset)->GetArena();
    if (message_arena != submessage_arena) {
      start_time_offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time_offset, submessage_arena);
    }
    
  } else {
    
  }
  start_time_offset_ = start_time_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoSegment.start_time_offset)
}

// .google.protobuf.Duration end_time_offset = 2;
inline bool VideoSegment::has_end_time_offset() const {
  return this != internal_default_instance() && end_time_offset_ != NULL;
}
inline const ::google::protobuf::Duration& VideoSegment::_internal_end_time_offset() const {
  return *end_time_offset_;
}
inline const ::google::protobuf::Duration& VideoSegment::end_time_offset() const {
  const ::google::protobuf::Duration* p = end_time_offset_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoSegment.end_time_offset)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* VideoSegment::release_end_time_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoSegment.end_time_offset)
  
  ::google::protobuf::Duration* temp = end_time_offset_;
  end_time_offset_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* VideoSegment::mutable_end_time_offset() {
  
  if (end_time_offset_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    end_time_offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoSegment.end_time_offset)
  return end_time_offset_;
}
inline void VideoSegment::set_allocated_end_time_offset(::google::protobuf::Duration* end_time_offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_offset_);
  }
  if (end_time_offset) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end_time_offset)->GetArena();
    if (message_arena != submessage_arena) {
      end_time_offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time_offset, submessage_arena);
    }
    
  } else {
    
  }
  end_time_offset_ = end_time_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoSegment.end_time_offset)
}

// -------------------------------------------------------------------

// LabelSegment

// .google.cloud.videointelligence.v1p1beta1.VideoSegment segment = 1;
inline bool LabelSegment::has_segment() const {
  return this != internal_default_instance() && segment_ != NULL;
}
inline void LabelSegment::clear_segment() {
  if (GetArenaNoVirtual() == NULL && segment_ != NULL) {
    delete segment_;
  }
  segment_ = NULL;
}
inline const ::google::cloud::videointelligence::v1p1beta1::VideoSegment& LabelSegment::_internal_segment() const {
  return *segment_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::VideoSegment& LabelSegment::segment() const {
  const ::google::cloud::videointelligence::v1p1beta1::VideoSegment* p = segment_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.LabelSegment.segment)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::videointelligence::v1p1beta1::VideoSegment*>(
      &::google::cloud::videointelligence::v1p1beta1::_VideoSegment_default_instance_);
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoSegment* LabelSegment::release_segment() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.LabelSegment.segment)
  
  ::google::cloud::videointelligence::v1p1beta1::VideoSegment* temp = segment_;
  segment_ = NULL;
  return temp;
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoSegment* LabelSegment::mutable_segment() {
  
  if (segment_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::VideoSegment>(GetArenaNoVirtual());
    segment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.LabelSegment.segment)
  return segment_;
}
inline void LabelSegment::set_allocated_segment(::google::cloud::videointelligence::v1p1beta1::VideoSegment* segment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete segment_;
  }
  if (segment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      segment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, segment, submessage_arena);
    }
    
  } else {
    
  }
  segment_ = segment;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.LabelSegment.segment)
}

// float confidence = 2;
inline void LabelSegment::clear_confidence() {
  confidence_ = 0;
}
inline float LabelSegment::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.LabelSegment.confidence)
  return confidence_;
}
inline void LabelSegment::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.LabelSegment.confidence)
}

// -------------------------------------------------------------------

// LabelFrame

// .google.protobuf.Duration time_offset = 1;
inline bool LabelFrame::has_time_offset() const {
  return this != internal_default_instance() && time_offset_ != NULL;
}
inline const ::google::protobuf::Duration& LabelFrame::_internal_time_offset() const {
  return *time_offset_;
}
inline const ::google::protobuf::Duration& LabelFrame::time_offset() const {
  const ::google::protobuf::Duration* p = time_offset_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.LabelFrame.time_offset)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* LabelFrame::release_time_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.LabelFrame.time_offset)
  
  ::google::protobuf::Duration* temp = time_offset_;
  time_offset_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* LabelFrame::mutable_time_offset() {
  
  if (time_offset_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    time_offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.LabelFrame.time_offset)
  return time_offset_;
}
inline void LabelFrame::set_allocated_time_offset(::google::protobuf::Duration* time_offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_offset_);
  }
  if (time_offset) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time_offset)->GetArena();
    if (message_arena != submessage_arena) {
      time_offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_offset, submessage_arena);
    }
    
  } else {
    
  }
  time_offset_ = time_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.LabelFrame.time_offset)
}

// float confidence = 2;
inline void LabelFrame::clear_confidence() {
  confidence_ = 0;
}
inline float LabelFrame::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.LabelFrame.confidence)
  return confidence_;
}
inline void LabelFrame::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.LabelFrame.confidence)
}

// -------------------------------------------------------------------

// Entity

// string entity_id = 1;
inline void Entity::clear_entity_id() {
  entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entity::entity_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.Entity.entity_id)
  return entity_id_.GetNoArena();
}
inline void Entity::set_entity_id(const ::std::string& value) {
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.Entity.entity_id)
}
#if LANG_CXX11
inline void Entity::set_entity_id(::std::string&& value) {
  
  entity_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.Entity.entity_id)
}
#endif
inline void Entity::set_entity_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.Entity.entity_id)
}
inline void Entity::set_entity_id(const char* value, size_t size) {
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.Entity.entity_id)
}
inline ::std::string* Entity::mutable_entity_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.Entity.entity_id)
  return entity_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entity::release_entity_id() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.Entity.entity_id)
  
  return entity_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_entity_id(::std::string* entity_id) {
  if (entity_id != NULL) {
    
  } else {
    
  }
  entity_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.Entity.entity_id)
}

// string description = 2;
inline void Entity::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entity::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.Entity.description)
  return description_.GetNoArena();
}
inline void Entity::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.Entity.description)
}
#if LANG_CXX11
inline void Entity::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.Entity.description)
}
#endif
inline void Entity::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.Entity.description)
}
inline void Entity::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.Entity.description)
}
inline ::std::string* Entity::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.Entity.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entity::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.Entity.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.Entity.description)
}

// string language_code = 3;
inline void Entity::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entity::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.Entity.language_code)
  return language_code_.GetNoArena();
}
inline void Entity::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.Entity.language_code)
}
#if LANG_CXX11
inline void Entity::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.Entity.language_code)
}
#endif
inline void Entity::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.Entity.language_code)
}
inline void Entity::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.Entity.language_code)
}
inline ::std::string* Entity::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.Entity.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entity::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.Entity.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.Entity.language_code)
}

// -------------------------------------------------------------------

// LabelAnnotation

// .google.cloud.videointelligence.v1p1beta1.Entity entity = 1;
inline bool LabelAnnotation::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline void LabelAnnotation::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) {
    delete entity_;
  }
  entity_ = NULL;
}
inline const ::google::cloud::videointelligence::v1p1beta1::Entity& LabelAnnotation::_internal_entity() const {
  return *entity_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::Entity& LabelAnnotation::entity() const {
  const ::google::cloud::videointelligence::v1p1beta1::Entity* p = entity_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.entity)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::videointelligence::v1p1beta1::Entity*>(
      &::google::cloud::videointelligence::v1p1beta1::_Entity_default_instance_);
}
inline ::google::cloud::videointelligence::v1p1beta1::Entity* LabelAnnotation::release_entity() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.entity)
  
  ::google::cloud::videointelligence::v1p1beta1::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline ::google::cloud::videointelligence::v1p1beta1::Entity* LabelAnnotation::mutable_entity() {
  
  if (entity_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::Entity>(GetArenaNoVirtual());
    entity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.entity)
  return entity_;
}
inline void LabelAnnotation::set_allocated_entity(::google::cloud::videointelligence::v1p1beta1::Entity* entity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entity_;
  }
  if (entity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.entity)
}

// repeated .google.cloud.videointelligence.v1p1beta1.Entity category_entities = 2;
inline int LabelAnnotation::category_entities_size() const {
  return category_entities_.size();
}
inline void LabelAnnotation::clear_category_entities() {
  category_entities_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::Entity* LabelAnnotation::mutable_category_entities(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.category_entities)
  return category_entities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::Entity >*
LabelAnnotation::mutable_category_entities() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.category_entities)
  return &category_entities_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::Entity& LabelAnnotation::category_entities(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.category_entities)
  return category_entities_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::Entity* LabelAnnotation::add_category_entities() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.category_entities)
  return category_entities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::Entity >&
LabelAnnotation::category_entities() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.category_entities)
  return category_entities_;
}

// repeated .google.cloud.videointelligence.v1p1beta1.LabelSegment segments = 3;
inline int LabelAnnotation::segments_size() const {
  return segments_.size();
}
inline void LabelAnnotation::clear_segments() {
  segments_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelSegment* LabelAnnotation::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.segments)
  return segments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelSegment >*
LabelAnnotation::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.segments)
  return &segments_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::LabelSegment& LabelAnnotation::segments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.segments)
  return segments_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelSegment* LabelAnnotation::add_segments() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.segments)
  return segments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelSegment >&
LabelAnnotation::segments() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.segments)
  return segments_;
}

// repeated .google.cloud.videointelligence.v1p1beta1.LabelFrame frames = 4;
inline int LabelAnnotation::frames_size() const {
  return frames_.size();
}
inline void LabelAnnotation::clear_frames() {
  frames_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelFrame* LabelAnnotation::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.frames)
  return frames_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelFrame >*
LabelAnnotation::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.frames)
  return &frames_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::LabelFrame& LabelAnnotation::frames(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.frames)
  return frames_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelFrame* LabelAnnotation::add_frames() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.frames)
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelFrame >&
LabelAnnotation::frames() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.LabelAnnotation.frames)
  return frames_;
}

// -------------------------------------------------------------------

// ExplicitContentFrame

// .google.protobuf.Duration time_offset = 1;
inline bool ExplicitContentFrame::has_time_offset() const {
  return this != internal_default_instance() && time_offset_ != NULL;
}
inline const ::google::protobuf::Duration& ExplicitContentFrame::_internal_time_offset() const {
  return *time_offset_;
}
inline const ::google::protobuf::Duration& ExplicitContentFrame::time_offset() const {
  const ::google::protobuf::Duration* p = time_offset_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.time_offset)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* ExplicitContentFrame::release_time_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.time_offset)
  
  ::google::protobuf::Duration* temp = time_offset_;
  time_offset_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* ExplicitContentFrame::mutable_time_offset() {
  
  if (time_offset_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    time_offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.time_offset)
  return time_offset_;
}
inline void ExplicitContentFrame::set_allocated_time_offset(::google::protobuf::Duration* time_offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_offset_);
  }
  if (time_offset) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time_offset)->GetArena();
    if (message_arena != submessage_arena) {
      time_offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_offset, submessage_arena);
    }
    
  } else {
    
  }
  time_offset_ = time_offset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.time_offset)
}

// .google.cloud.videointelligence.v1p1beta1.Likelihood pornography_likelihood = 2;
inline void ExplicitContentFrame::clear_pornography_likelihood() {
  pornography_likelihood_ = 0;
}
inline ::google::cloud::videointelligence::v1p1beta1::Likelihood ExplicitContentFrame::pornography_likelihood() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.pornography_likelihood)
  return static_cast< ::google::cloud::videointelligence::v1p1beta1::Likelihood >(pornography_likelihood_);
}
inline void ExplicitContentFrame::set_pornography_likelihood(::google::cloud::videointelligence::v1p1beta1::Likelihood value) {
  
  pornography_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.pornography_likelihood)
}

// -------------------------------------------------------------------

// ExplicitContentAnnotation

// repeated .google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame frames = 1;
inline int ExplicitContentAnnotation::frames_size() const {
  return frames_.size();
}
inline void ExplicitContentAnnotation::clear_frames() {
  frames_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame* ExplicitContentAnnotation::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.frames)
  return frames_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame >*
ExplicitContentAnnotation::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.frames)
  return &frames_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame& ExplicitContentAnnotation::frames(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.frames)
  return frames_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame* ExplicitContentAnnotation::add_frames() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.frames)
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::ExplicitContentFrame >&
ExplicitContentAnnotation::frames() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.frames)
  return frames_;
}

// -------------------------------------------------------------------

// VideoAnnotationResults

// string input_uri = 1;
inline void VideoAnnotationResults::clear_input_uri() {
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAnnotationResults::input_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.input_uri)
  return input_uri_.GetNoArena();
}
inline void VideoAnnotationResults::set_input_uri(const ::std::string& value) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.input_uri)
}
#if LANG_CXX11
inline void VideoAnnotationResults::set_input_uri(::std::string&& value) {
  
  input_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.input_uri)
}
#endif
inline void VideoAnnotationResults::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.input_uri)
}
inline void VideoAnnotationResults::set_input_uri(const char* value, size_t size) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.input_uri)
}
inline ::std::string* VideoAnnotationResults::mutable_input_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.input_uri)
  return input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAnnotationResults::release_input_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.input_uri)
  
  return input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAnnotationResults::set_allocated_input_uri(::std::string* input_uri) {
  if (input_uri != NULL) {
    
  } else {
    
  }
  input_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.input_uri)
}

// repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation segment_label_annotations = 2;
inline int VideoAnnotationResults::segment_label_annotations_size() const {
  return segment_label_annotations_.size();
}
inline void VideoAnnotationResults::clear_segment_label_annotations() {
  segment_label_annotations_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* VideoAnnotationResults::mutable_segment_label_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.segment_label_annotations)
  return segment_label_annotations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >*
VideoAnnotationResults::mutable_segment_label_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.segment_label_annotations)
  return &segment_label_annotations_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation& VideoAnnotationResults::segment_label_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.segment_label_annotations)
  return segment_label_annotations_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* VideoAnnotationResults::add_segment_label_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.segment_label_annotations)
  return segment_label_annotations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >&
VideoAnnotationResults::segment_label_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.segment_label_annotations)
  return segment_label_annotations_;
}

// repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation shot_label_annotations = 3;
inline int VideoAnnotationResults::shot_label_annotations_size() const {
  return shot_label_annotations_.size();
}
inline void VideoAnnotationResults::clear_shot_label_annotations() {
  shot_label_annotations_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* VideoAnnotationResults::mutable_shot_label_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shot_label_annotations)
  return shot_label_annotations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >*
VideoAnnotationResults::mutable_shot_label_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shot_label_annotations)
  return &shot_label_annotations_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation& VideoAnnotationResults::shot_label_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shot_label_annotations)
  return shot_label_annotations_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* VideoAnnotationResults::add_shot_label_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shot_label_annotations)
  return shot_label_annotations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >&
VideoAnnotationResults::shot_label_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shot_label_annotations)
  return shot_label_annotations_;
}

// repeated .google.cloud.videointelligence.v1p1beta1.LabelAnnotation frame_label_annotations = 4;
inline int VideoAnnotationResults::frame_label_annotations_size() const {
  return frame_label_annotations_.size();
}
inline void VideoAnnotationResults::clear_frame_label_annotations() {
  frame_label_annotations_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* VideoAnnotationResults::mutable_frame_label_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.frame_label_annotations)
  return frame_label_annotations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >*
VideoAnnotationResults::mutable_frame_label_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.frame_label_annotations)
  return &frame_label_annotations_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation& VideoAnnotationResults::frame_label_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.frame_label_annotations)
  return frame_label_annotations_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation* VideoAnnotationResults::add_frame_label_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.frame_label_annotations)
  return frame_label_annotations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::LabelAnnotation >&
VideoAnnotationResults::frame_label_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.frame_label_annotations)
  return frame_label_annotations_;
}

// repeated .google.cloud.videointelligence.v1p1beta1.VideoSegment shot_annotations = 6;
inline int VideoAnnotationResults::shot_annotations_size() const {
  return shot_annotations_.size();
}
inline void VideoAnnotationResults::clear_shot_annotations() {
  shot_annotations_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoSegment* VideoAnnotationResults::mutable_shot_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shot_annotations)
  return shot_annotations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoSegment >*
VideoAnnotationResults::mutable_shot_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shot_annotations)
  return &shot_annotations_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::VideoSegment& VideoAnnotationResults::shot_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shot_annotations)
  return shot_annotations_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoSegment* VideoAnnotationResults::add_shot_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shot_annotations)
  return shot_annotations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoSegment >&
VideoAnnotationResults::shot_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shot_annotations)
  return shot_annotations_;
}

// .google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation explicit_annotation = 7;
inline bool VideoAnnotationResults::has_explicit_annotation() const {
  return this != internal_default_instance() && explicit_annotation_ != NULL;
}
inline void VideoAnnotationResults::clear_explicit_annotation() {
  if (GetArenaNoVirtual() == NULL && explicit_annotation_ != NULL) {
    delete explicit_annotation_;
  }
  explicit_annotation_ = NULL;
}
inline const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation& VideoAnnotationResults::_internal_explicit_annotation() const {
  return *explicit_annotation_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation& VideoAnnotationResults::explicit_annotation() const {
  const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation* p = explicit_annotation_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.explicit_annotation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation*>(
      &::google::cloud::videointelligence::v1p1beta1::_ExplicitContentAnnotation_default_instance_);
}
inline ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation* VideoAnnotationResults::release_explicit_annotation() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.explicit_annotation)
  
  ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation* temp = explicit_annotation_;
  explicit_annotation_ = NULL;
  return temp;
}
inline ::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation* VideoAnnotationResults::mutable_explicit_annotation() {
  
  if (explicit_annotation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation>(GetArenaNoVirtual());
    explicit_annotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.explicit_annotation)
  return explicit_annotation_;
}
inline void VideoAnnotationResults::set_allocated_explicit_annotation(::google::cloud::videointelligence::v1p1beta1::ExplicitContentAnnotation* explicit_annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete explicit_annotation_;
  }
  if (explicit_annotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      explicit_annotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, explicit_annotation, submessage_arena);
    }
    
  } else {
    
  }
  explicit_annotation_ = explicit_annotation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.explicit_annotation)
}

// repeated .google.cloud.videointelligence.v1p1beta1.SpeechTranscription speech_transcriptions = 11;
inline int VideoAnnotationResults::speech_transcriptions_size() const {
  return speech_transcriptions_.size();
}
inline void VideoAnnotationResults::clear_speech_transcriptions() {
  speech_transcriptions_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription* VideoAnnotationResults::mutable_speech_transcriptions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.speech_transcriptions)
  return speech_transcriptions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription >*
VideoAnnotationResults::mutable_speech_transcriptions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.speech_transcriptions)
  return &speech_transcriptions_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription& VideoAnnotationResults::speech_transcriptions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.speech_transcriptions)
  return speech_transcriptions_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription* VideoAnnotationResults::add_speech_transcriptions() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.speech_transcriptions)
  return speech_transcriptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechTranscription >&
VideoAnnotationResults::speech_transcriptions() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.speech_transcriptions)
  return speech_transcriptions_;
}

// .google.rpc.Status error = 9;
inline bool VideoAnnotationResults::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::google::rpc::Status& VideoAnnotationResults::_internal_error() const {
  return *error_;
}
inline const ::google::rpc::Status& VideoAnnotationResults::error() const {
  const ::google::rpc::Status* p = error_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.error)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* VideoAnnotationResults::release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::google::rpc::Status* VideoAnnotationResults::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.error)
  return error_;
}
inline void VideoAnnotationResults::set_allocated_error(::google::rpc::Status* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.error)
}

// -------------------------------------------------------------------

// AnnotateVideoResponse

// repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults annotation_results = 1;
inline int AnnotateVideoResponse::annotation_results_size() const {
  return annotation_results_.size();
}
inline void AnnotateVideoResponse::clear_annotation_results() {
  annotation_results_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults* AnnotateVideoResponse::mutable_annotation_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse.annotation_results)
  return annotation_results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults >*
AnnotateVideoResponse::mutable_annotation_results() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse.annotation_results)
  return &annotation_results_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults& AnnotateVideoResponse::annotation_results(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse.annotation_results)
  return annotation_results_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults* AnnotateVideoResponse::add_annotation_results() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse.annotation_results)
  return annotation_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationResults >&
AnnotateVideoResponse::annotation_results() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse.annotation_results)
  return annotation_results_;
}

// -------------------------------------------------------------------

// VideoAnnotationProgress

// string input_uri = 1;
inline void VideoAnnotationProgress::clear_input_uri() {
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAnnotationProgress::input_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.input_uri)
  return input_uri_.GetNoArena();
}
inline void VideoAnnotationProgress::set_input_uri(const ::std::string& value) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.input_uri)
}
#if LANG_CXX11
inline void VideoAnnotationProgress::set_input_uri(::std::string&& value) {
  
  input_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.input_uri)
}
#endif
inline void VideoAnnotationProgress::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.input_uri)
}
inline void VideoAnnotationProgress::set_input_uri(const char* value, size_t size) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.input_uri)
}
inline ::std::string* VideoAnnotationProgress::mutable_input_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.input_uri)
  return input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAnnotationProgress::release_input_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.input_uri)
  
  return input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAnnotationProgress::set_allocated_input_uri(::std::string* input_uri) {
  if (input_uri != NULL) {
    
  } else {
    
  }
  input_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.input_uri)
}

// int32 progress_percent = 2;
inline void VideoAnnotationProgress::clear_progress_percent() {
  progress_percent_ = 0;
}
inline ::google::protobuf::int32 VideoAnnotationProgress::progress_percent() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.progress_percent)
  return progress_percent_;
}
inline void VideoAnnotationProgress::set_progress_percent(::google::protobuf::int32 value) {
  
  progress_percent_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.progress_percent)
}

// .google.protobuf.Timestamp start_time = 3;
inline bool VideoAnnotationProgress::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& VideoAnnotationProgress::_internal_start_time() const {
  return *start_time_;
}
inline const ::google::protobuf::Timestamp& VideoAnnotationProgress::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* VideoAnnotationProgress::release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* VideoAnnotationProgress::mutable_start_time() {
  
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.start_time)
  return start_time_;
}
inline void VideoAnnotationProgress::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.start_time)
}

// .google.protobuf.Timestamp update_time = 4;
inline bool VideoAnnotationProgress::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& VideoAnnotationProgress::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& VideoAnnotationProgress::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* VideoAnnotationProgress::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* VideoAnnotationProgress::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.update_time)
  return update_time_;
}
inline void VideoAnnotationProgress::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.update_time)
}

// -------------------------------------------------------------------

// AnnotateVideoProgress

// repeated .google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress annotation_progress = 1;
inline int AnnotateVideoProgress::annotation_progress_size() const {
  return annotation_progress_.size();
}
inline void AnnotateVideoProgress::clear_annotation_progress() {
  annotation_progress_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress* AnnotateVideoProgress::mutable_annotation_progress(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress.annotation_progress)
  return annotation_progress_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress >*
AnnotateVideoProgress::mutable_annotation_progress() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress.annotation_progress)
  return &annotation_progress_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress& AnnotateVideoProgress::annotation_progress(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress.annotation_progress)
  return annotation_progress_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress* AnnotateVideoProgress::add_annotation_progress() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress.annotation_progress)
  return annotation_progress_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::VideoAnnotationProgress >&
AnnotateVideoProgress::annotation_progress() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress.annotation_progress)
  return annotation_progress_;
}

// -------------------------------------------------------------------

// SpeechTranscriptionConfig

// string language_code = 1;
inline void SpeechTranscriptionConfig::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpeechTranscriptionConfig::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.language_code)
  return language_code_.GetNoArena();
}
inline void SpeechTranscriptionConfig::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.language_code)
}
#if LANG_CXX11
inline void SpeechTranscriptionConfig::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.language_code)
}
#endif
inline void SpeechTranscriptionConfig::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.language_code)
}
inline void SpeechTranscriptionConfig::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.language_code)
}
inline ::std::string* SpeechTranscriptionConfig::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpeechTranscriptionConfig::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpeechTranscriptionConfig::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.language_code)
}

// int32 max_alternatives = 2;
inline void SpeechTranscriptionConfig::clear_max_alternatives() {
  max_alternatives_ = 0;
}
inline ::google::protobuf::int32 SpeechTranscriptionConfig::max_alternatives() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.max_alternatives)
  return max_alternatives_;
}
inline void SpeechTranscriptionConfig::set_max_alternatives(::google::protobuf::int32 value) {
  
  max_alternatives_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.max_alternatives)
}

// bool filter_profanity = 3;
inline void SpeechTranscriptionConfig::clear_filter_profanity() {
  filter_profanity_ = false;
}
inline bool SpeechTranscriptionConfig::filter_profanity() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.filter_profanity)
  return filter_profanity_;
}
inline void SpeechTranscriptionConfig::set_filter_profanity(bool value) {
  
  filter_profanity_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.filter_profanity)
}

// repeated .google.cloud.videointelligence.v1p1beta1.SpeechContext speech_contexts = 4;
inline int SpeechTranscriptionConfig::speech_contexts_size() const {
  return speech_contexts_.size();
}
inline void SpeechTranscriptionConfig::clear_speech_contexts() {
  speech_contexts_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::SpeechContext* SpeechTranscriptionConfig::mutable_speech_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.speech_contexts)
  return speech_contexts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechContext >*
SpeechTranscriptionConfig::mutable_speech_contexts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.speech_contexts)
  return &speech_contexts_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::SpeechContext& SpeechTranscriptionConfig::speech_contexts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.speech_contexts)
  return speech_contexts_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::SpeechContext* SpeechTranscriptionConfig::add_speech_contexts() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.speech_contexts)
  return speech_contexts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechContext >&
SpeechTranscriptionConfig::speech_contexts() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.speech_contexts)
  return speech_contexts_;
}

// bool enable_automatic_punctuation = 5;
inline void SpeechTranscriptionConfig::clear_enable_automatic_punctuation() {
  enable_automatic_punctuation_ = false;
}
inline bool SpeechTranscriptionConfig::enable_automatic_punctuation() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.enable_automatic_punctuation)
  return enable_automatic_punctuation_;
}
inline void SpeechTranscriptionConfig::set_enable_automatic_punctuation(bool value) {
  
  enable_automatic_punctuation_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.enable_automatic_punctuation)
}

// repeated int32 audio_tracks = 6;
inline int SpeechTranscriptionConfig::audio_tracks_size() const {
  return audio_tracks_.size();
}
inline void SpeechTranscriptionConfig::clear_audio_tracks() {
  audio_tracks_.Clear();
}
inline ::google::protobuf::int32 SpeechTranscriptionConfig::audio_tracks(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.audio_tracks)
  return audio_tracks_.Get(index);
}
inline void SpeechTranscriptionConfig::set_audio_tracks(int index, ::google::protobuf::int32 value) {
  audio_tracks_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.audio_tracks)
}
inline void SpeechTranscriptionConfig::add_audio_tracks(::google::protobuf::int32 value) {
  audio_tracks_.Add(value);
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.audio_tracks)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SpeechTranscriptionConfig::audio_tracks() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.audio_tracks)
  return audio_tracks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SpeechTranscriptionConfig::mutable_audio_tracks() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.audio_tracks)
  return &audio_tracks_;
}

// -------------------------------------------------------------------

// SpeechContext

// repeated string phrases = 1;
inline int SpeechContext::phrases_size() const {
  return phrases_.size();
}
inline void SpeechContext::clear_phrases() {
  phrases_.Clear();
}
inline const ::std::string& SpeechContext::phrases(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
  return phrases_.Get(index);
}
inline ::std::string* SpeechContext::mutable_phrases(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
  return phrases_.Mutable(index);
}
inline void SpeechContext::set_phrases(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
  phrases_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SpeechContext::set_phrases(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
  phrases_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SpeechContext::set_phrases(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phrases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
}
inline void SpeechContext::set_phrases(int index, const char* value, size_t size) {
  phrases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
}
inline ::std::string* SpeechContext::add_phrases() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
  return phrases_.Add();
}
inline void SpeechContext::add_phrases(const ::std::string& value) {
  phrases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
}
#if LANG_CXX11
inline void SpeechContext::add_phrases(::std::string&& value) {
  phrases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
}
#endif
inline void SpeechContext::add_phrases(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phrases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
}
inline void SpeechContext::add_phrases(const char* value, size_t size) {
  phrases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SpeechContext::phrases() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
  return phrases_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SpeechContext::mutable_phrases() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases)
  return &phrases_;
}

// -------------------------------------------------------------------

// SpeechTranscription

// repeated .google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative alternatives = 1;
inline int SpeechTranscription::alternatives_size() const {
  return alternatives_.size();
}
inline void SpeechTranscription::clear_alternatives() {
  alternatives_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative* SpeechTranscription::mutable_alternatives(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.SpeechTranscription.alternatives)
  return alternatives_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative >*
SpeechTranscription::mutable_alternatives() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.SpeechTranscription.alternatives)
  return &alternatives_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative& SpeechTranscription::alternatives(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.SpeechTranscription.alternatives)
  return alternatives_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative* SpeechTranscription::add_alternatives() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.SpeechTranscription.alternatives)
  return alternatives_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::SpeechRecognitionAlternative >&
SpeechTranscription::alternatives() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.SpeechTranscription.alternatives)
  return alternatives_;
}

// -------------------------------------------------------------------

// SpeechRecognitionAlternative

// string transcript = 1;
inline void SpeechRecognitionAlternative::clear_transcript() {
  transcript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpeechRecognitionAlternative::transcript() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.transcript)
  return transcript_.GetNoArena();
}
inline void SpeechRecognitionAlternative::set_transcript(const ::std::string& value) {
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.transcript)
}
#if LANG_CXX11
inline void SpeechRecognitionAlternative::set_transcript(::std::string&& value) {
  
  transcript_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.transcript)
}
#endif
inline void SpeechRecognitionAlternative::set_transcript(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.transcript)
}
inline void SpeechRecognitionAlternative::set_transcript(const char* value, size_t size) {
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.transcript)
}
inline ::std::string* SpeechRecognitionAlternative::mutable_transcript() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.transcript)
  return transcript_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpeechRecognitionAlternative::release_transcript() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.transcript)
  
  return transcript_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpeechRecognitionAlternative::set_allocated_transcript(::std::string* transcript) {
  if (transcript != NULL) {
    
  } else {
    
  }
  transcript_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transcript);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.transcript)
}

// float confidence = 2;
inline void SpeechRecognitionAlternative::clear_confidence() {
  confidence_ = 0;
}
inline float SpeechRecognitionAlternative::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.confidence)
  return confidence_;
}
inline void SpeechRecognitionAlternative::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.confidence)
}

// repeated .google.cloud.videointelligence.v1p1beta1.WordInfo words = 3;
inline int SpeechRecognitionAlternative::words_size() const {
  return words_.size();
}
inline void SpeechRecognitionAlternative::clear_words() {
  words_.Clear();
}
inline ::google::cloud::videointelligence::v1p1beta1::WordInfo* SpeechRecognitionAlternative::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.words)
  return words_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::WordInfo >*
SpeechRecognitionAlternative::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.words)
  return &words_;
}
inline const ::google::cloud::videointelligence::v1p1beta1::WordInfo& SpeechRecognitionAlternative::words(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.words)
  return words_.Get(index);
}
inline ::google::cloud::videointelligence::v1p1beta1::WordInfo* SpeechRecognitionAlternative::add_words() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.words)
  return words_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1p1beta1::WordInfo >&
SpeechRecognitionAlternative::words() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.words)
  return words_;
}

// -------------------------------------------------------------------

// WordInfo

// .google.protobuf.Duration start_time = 1;
inline bool WordInfo::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Duration& WordInfo::_internal_start_time() const {
  return *start_time_;
}
inline const ::google::protobuf::Duration& WordInfo::start_time() const {
  const ::google::protobuf::Duration* p = start_time_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.WordInfo.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* WordInfo::release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.WordInfo.start_time)
  
  ::google::protobuf::Duration* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* WordInfo::mutable_start_time() {
  
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.WordInfo.start_time)
  return start_time_;
}
inline void WordInfo::set_allocated_start_time(::google::protobuf::Duration* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.WordInfo.start_time)
}

// .google.protobuf.Duration end_time = 2;
inline bool WordInfo::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::google::protobuf::Duration& WordInfo::_internal_end_time() const {
  return *end_time_;
}
inline const ::google::protobuf::Duration& WordInfo::end_time() const {
  const ::google::protobuf::Duration* p = end_time_;
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.WordInfo.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* WordInfo::release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.WordInfo.end_time)
  
  ::google::protobuf::Duration* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* WordInfo::mutable_end_time() {
  
  if (end_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.WordInfo.end_time)
  return end_time_;
}
inline void WordInfo::set_allocated_end_time(::google::protobuf::Duration* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.WordInfo.end_time)
}

// string word = 3;
inline void WordInfo::clear_word() {
  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WordInfo::word() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1p1beta1.WordInfo.word)
  return word_.GetNoArena();
}
inline void WordInfo::set_word(const ::std::string& value) {
  
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1p1beta1.WordInfo.word)
}
#if LANG_CXX11
inline void WordInfo::set_word(::std::string&& value) {
  
  word_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1p1beta1.WordInfo.word)
}
#endif
inline void WordInfo::set_word(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1p1beta1.WordInfo.word)
}
inline void WordInfo::set_word(const char* value, size_t size) {
  
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1p1beta1.WordInfo.word)
}
inline ::std::string* WordInfo::mutable_word() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1p1beta1.WordInfo.word)
  return word_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WordInfo::release_word() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1p1beta1.WordInfo.word)
  
  return word_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WordInfo::set_allocated_word(::std::string* word) {
  if (word != NULL) {
    
  } else {
    
  }
  word_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1p1beta1.WordInfo.word)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1p1beta1
}  // namespace videointelligence
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::videointelligence::v1p1beta1::Feature> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::videointelligence::v1p1beta1::Feature>() {
  return ::google::cloud::videointelligence::v1p1beta1::Feature_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::videointelligence::v1p1beta1::LabelDetectionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::videointelligence::v1p1beta1::LabelDetectionMode>() {
  return ::google::cloud::videointelligence::v1p1beta1::LabelDetectionMode_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::videointelligence::v1p1beta1::Likelihood> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::videointelligence::v1p1beta1::Likelihood>() {
  return ::google::cloud::videointelligence::v1p1beta1::Likelihood_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2fvideointelligence_2fv1p1beta1_2fvideo_5fintelligence_2eproto
