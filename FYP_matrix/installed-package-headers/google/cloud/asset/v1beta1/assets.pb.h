// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/asset/v1beta1/assets.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2fasset_2fv1beta1_2fassets_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2fasset_2fv1beta1_2fassets_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fasset_2fv1beta1_2fassets_2eproto 

namespace protobuf_google_2fcloud_2fasset_2fv1beta1_2fassets_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2fasset_2fv1beta1_2fassets_2eproto
namespace google {
namespace cloud {
namespace asset {
namespace v1beta1 {
class Asset;
class AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class Resource;
class ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class TemporalAsset;
class TemporalAssetDefaultTypeInternal;
extern TemporalAssetDefaultTypeInternal _TemporalAsset_default_instance_;
class TimeWindow;
class TimeWindowDefaultTypeInternal;
extern TimeWindowDefaultTypeInternal _TimeWindow_default_instance_;
}  // namespace v1beta1
}  // namespace asset
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::asset::v1beta1::Asset* Arena::CreateMaybeMessage<::google::cloud::asset::v1beta1::Asset>(Arena*);
template<> ::google::cloud::asset::v1beta1::Resource* Arena::CreateMaybeMessage<::google::cloud::asset::v1beta1::Resource>(Arena*);
template<> ::google::cloud::asset::v1beta1::TemporalAsset* Arena::CreateMaybeMessage<::google::cloud::asset::v1beta1::TemporalAsset>(Arena*);
template<> ::google::cloud::asset::v1beta1::TimeWindow* Arena::CreateMaybeMessage<::google::cloud::asset::v1beta1::TimeWindow>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace asset {
namespace v1beta1 {

// ===================================================================

class TemporalAsset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.asset.v1beta1.TemporalAsset) */ {
 public:
  TemporalAsset();
  virtual ~TemporalAsset();

  TemporalAsset(const TemporalAsset& from);

  inline TemporalAsset& operator=(const TemporalAsset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TemporalAsset(TemporalAsset&& from) noexcept
    : TemporalAsset() {
    *this = ::std::move(from);
  }

  inline TemporalAsset& operator=(TemporalAsset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TemporalAsset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TemporalAsset* internal_default_instance() {
    return reinterpret_cast<const TemporalAsset*>(
               &_TemporalAsset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TemporalAsset* other);
  friend void swap(TemporalAsset& a, TemporalAsset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TemporalAsset* New() const final {
    return CreateMaybeMessage<TemporalAsset>(NULL);
  }

  TemporalAsset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TemporalAsset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TemporalAsset& from);
  void MergeFrom(const TemporalAsset& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemporalAsset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.asset.v1beta1.TimeWindow window = 1;
  bool has_window() const;
  void clear_window();
  static const int kWindowFieldNumber = 1;
  private:
  const ::google::cloud::asset::v1beta1::TimeWindow& _internal_window() const;
  public:
  const ::google::cloud::asset::v1beta1::TimeWindow& window() const;
  ::google::cloud::asset::v1beta1::TimeWindow* release_window();
  ::google::cloud::asset::v1beta1::TimeWindow* mutable_window();
  void set_allocated_window(::google::cloud::asset::v1beta1::TimeWindow* window);

  // .google.cloud.asset.v1beta1.Asset asset = 3;
  bool has_asset() const;
  void clear_asset();
  static const int kAssetFieldNumber = 3;
  private:
  const ::google::cloud::asset::v1beta1::Asset& _internal_asset() const;
  public:
  const ::google::cloud::asset::v1beta1::Asset& asset() const;
  ::google::cloud::asset::v1beta1::Asset* release_asset();
  ::google::cloud::asset::v1beta1::Asset* mutable_asset();
  void set_allocated_asset(::google::cloud::asset::v1beta1::Asset* asset);

  // bool deleted = 2;
  void clear_deleted();
  static const int kDeletedFieldNumber = 2;
  bool deleted() const;
  void set_deleted(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.asset.v1beta1.TemporalAsset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::asset::v1beta1::TimeWindow* window_;
  ::google::cloud::asset::v1beta1::Asset* asset_;
  bool deleted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fasset_2fv1beta1_2fassets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeWindow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.asset.v1beta1.TimeWindow) */ {
 public:
  TimeWindow();
  virtual ~TimeWindow();

  TimeWindow(const TimeWindow& from);

  inline TimeWindow& operator=(const TimeWindow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeWindow(TimeWindow&& from) noexcept
    : TimeWindow() {
    *this = ::std::move(from);
  }

  inline TimeWindow& operator=(TimeWindow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeWindow* internal_default_instance() {
    return reinterpret_cast<const TimeWindow*>(
               &_TimeWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TimeWindow* other);
  friend void swap(TimeWindow& a, TimeWindow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeWindow* New() const final {
    return CreateMaybeMessage<TimeWindow>(NULL);
  }

  TimeWindow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimeWindow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimeWindow& from);
  void MergeFrom(const TimeWindow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  public:
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_end_time() const;
  public:
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // @@protoc_insertion_point(class_scope:google.cloud.asset.v1beta1.TimeWindow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fasset_2fv1beta1_2fassets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Asset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.asset.v1beta1.Asset) */ {
 public:
  Asset();
  virtual ~Asset();

  Asset(const Asset& from);

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(Asset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Asset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Asset* other);
  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Asset* New() const final {
    return CreateMaybeMessage<Asset>(NULL);
  }

  Asset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Asset& from);
  void MergeFrom(const Asset& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string asset_type = 2;
  void clear_asset_type();
  static const int kAssetTypeFieldNumber = 2;
  const ::std::string& asset_type() const;
  void set_asset_type(const ::std::string& value);
  #if LANG_CXX11
  void set_asset_type(::std::string&& value);
  #endif
  void set_asset_type(const char* value);
  void set_asset_type(const char* value, size_t size);
  ::std::string* mutable_asset_type();
  ::std::string* release_asset_type();
  void set_allocated_asset_type(::std::string* asset_type);

  // .google.cloud.asset.v1beta1.Resource resource = 3;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 3;
  private:
  const ::google::cloud::asset::v1beta1::Resource& _internal_resource() const;
  public:
  const ::google::cloud::asset::v1beta1::Resource& resource() const;
  ::google::cloud::asset::v1beta1::Resource* release_resource();
  ::google::cloud::asset::v1beta1::Resource* mutable_resource();
  void set_allocated_resource(::google::cloud::asset::v1beta1::Resource* resource);

  // .google.iam.v1.Policy iam_policy = 4;
  bool has_iam_policy() const;
  void clear_iam_policy();
  static const int kIamPolicyFieldNumber = 4;
  private:
  const ::google::iam::v1::Policy& _internal_iam_policy() const;
  public:
  const ::google::iam::v1::Policy& iam_policy() const;
  ::google::iam::v1::Policy* release_iam_policy();
  ::google::iam::v1::Policy* mutable_iam_policy();
  void set_allocated_iam_policy(::google::iam::v1::Policy* iam_policy);

  // @@protoc_insertion_point(class_scope:google.cloud.asset.v1beta1.Asset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr asset_type_;
  ::google::cloud::asset::v1beta1::Resource* resource_;
  ::google::iam::v1::Policy* iam_policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fasset_2fv1beta1_2fassets_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Resource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.asset.v1beta1.Resource) */ {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(Resource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Resource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Resource* other);
  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Resource* New() const final {
    return CreateMaybeMessage<Resource>(NULL);
  }

  Resource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string discovery_document_uri = 2;
  void clear_discovery_document_uri();
  static const int kDiscoveryDocumentUriFieldNumber = 2;
  const ::std::string& discovery_document_uri() const;
  void set_discovery_document_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_discovery_document_uri(::std::string&& value);
  #endif
  void set_discovery_document_uri(const char* value);
  void set_discovery_document_uri(const char* value, size_t size);
  ::std::string* mutable_discovery_document_uri();
  ::std::string* release_discovery_document_uri();
  void set_allocated_discovery_document_uri(::std::string* discovery_document_uri);

  // string discovery_name = 3;
  void clear_discovery_name();
  static const int kDiscoveryNameFieldNumber = 3;
  const ::std::string& discovery_name() const;
  void set_discovery_name(const ::std::string& value);
  #if LANG_CXX11
  void set_discovery_name(::std::string&& value);
  #endif
  void set_discovery_name(const char* value);
  void set_discovery_name(const char* value, size_t size);
  ::std::string* mutable_discovery_name();
  ::std::string* release_discovery_name();
  void set_allocated_discovery_name(::std::string* discovery_name);

  // string resource_url = 4;
  void clear_resource_url();
  static const int kResourceUrlFieldNumber = 4;
  const ::std::string& resource_url() const;
  void set_resource_url(const ::std::string& value);
  #if LANG_CXX11
  void set_resource_url(::std::string&& value);
  #endif
  void set_resource_url(const char* value);
  void set_resource_url(const char* value, size_t size);
  ::std::string* mutable_resource_url();
  ::std::string* release_resource_url();
  void set_allocated_resource_url(::std::string* resource_url);

  // string parent = 5;
  void clear_parent();
  static const int kParentFieldNumber = 5;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.protobuf.Struct data = 6;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 6;
  private:
  const ::google::protobuf::Struct& _internal_data() const;
  public:
  const ::google::protobuf::Struct& data() const;
  ::google::protobuf::Struct* release_data();
  ::google::protobuf::Struct* mutable_data();
  void set_allocated_data(::google::protobuf::Struct* data);

  // @@protoc_insertion_point(class_scope:google.cloud.asset.v1beta1.Resource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr discovery_document_uri_;
  ::google::protobuf::internal::ArenaStringPtr discovery_name_;
  ::google::protobuf::internal::ArenaStringPtr resource_url_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::Struct* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fasset_2fv1beta1_2fassets_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TemporalAsset

// .google.cloud.asset.v1beta1.TimeWindow window = 1;
inline bool TemporalAsset::has_window() const {
  return this != internal_default_instance() && window_ != NULL;
}
inline void TemporalAsset::clear_window() {
  if (GetArenaNoVirtual() == NULL && window_ != NULL) {
    delete window_;
  }
  window_ = NULL;
}
inline const ::google::cloud::asset::v1beta1::TimeWindow& TemporalAsset::_internal_window() const {
  return *window_;
}
inline const ::google::cloud::asset::v1beta1::TimeWindow& TemporalAsset::window() const {
  const ::google::cloud::asset::v1beta1::TimeWindow* p = window_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.TemporalAsset.window)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::asset::v1beta1::TimeWindow*>(
      &::google::cloud::asset::v1beta1::_TimeWindow_default_instance_);
}
inline ::google::cloud::asset::v1beta1::TimeWindow* TemporalAsset::release_window() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.TemporalAsset.window)
  
  ::google::cloud::asset::v1beta1::TimeWindow* temp = window_;
  window_ = NULL;
  return temp;
}
inline ::google::cloud::asset::v1beta1::TimeWindow* TemporalAsset::mutable_window() {
  
  if (window_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::asset::v1beta1::TimeWindow>(GetArenaNoVirtual());
    window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.TemporalAsset.window)
  return window_;
}
inline void TemporalAsset::set_allocated_window(::google::cloud::asset::v1beta1::TimeWindow* window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_;
  }
  if (window) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      window = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  window_ = window;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.TemporalAsset.window)
}

// bool deleted = 2;
inline void TemporalAsset::clear_deleted() {
  deleted_ = false;
}
inline bool TemporalAsset::deleted() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.TemporalAsset.deleted)
  return deleted_;
}
inline void TemporalAsset::set_deleted(bool value) {
  
  deleted_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.TemporalAsset.deleted)
}

// .google.cloud.asset.v1beta1.Asset asset = 3;
inline bool TemporalAsset::has_asset() const {
  return this != internal_default_instance() && asset_ != NULL;
}
inline void TemporalAsset::clear_asset() {
  if (GetArenaNoVirtual() == NULL && asset_ != NULL) {
    delete asset_;
  }
  asset_ = NULL;
}
inline const ::google::cloud::asset::v1beta1::Asset& TemporalAsset::_internal_asset() const {
  return *asset_;
}
inline const ::google::cloud::asset::v1beta1::Asset& TemporalAsset::asset() const {
  const ::google::cloud::asset::v1beta1::Asset* p = asset_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.TemporalAsset.asset)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::asset::v1beta1::Asset*>(
      &::google::cloud::asset::v1beta1::_Asset_default_instance_);
}
inline ::google::cloud::asset::v1beta1::Asset* TemporalAsset::release_asset() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.TemporalAsset.asset)
  
  ::google::cloud::asset::v1beta1::Asset* temp = asset_;
  asset_ = NULL;
  return temp;
}
inline ::google::cloud::asset::v1beta1::Asset* TemporalAsset::mutable_asset() {
  
  if (asset_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::asset::v1beta1::Asset>(GetArenaNoVirtual());
    asset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.TemporalAsset.asset)
  return asset_;
}
inline void TemporalAsset::set_allocated_asset(::google::cloud::asset::v1beta1::Asset* asset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete asset_;
  }
  if (asset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      asset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    
  } else {
    
  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.TemporalAsset.asset)
}

// -------------------------------------------------------------------

// TimeWindow

// .google.protobuf.Timestamp start_time = 1;
inline bool TimeWindow::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimeWindow::_internal_start_time() const {
  return *start_time_;
}
inline const ::google::protobuf::Timestamp& TimeWindow::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.TimeWindow.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeWindow::release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.TimeWindow.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeWindow::mutable_start_time() {
  
  if (start_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.TimeWindow.start_time)
  return start_time_;
}
inline void TimeWindow::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.TimeWindow.start_time)
}

// .google.protobuf.Timestamp end_time = 2;
inline bool TimeWindow::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimeWindow::_internal_end_time() const {
  return *end_time_;
}
inline const ::google::protobuf::Timestamp& TimeWindow::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.TimeWindow.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeWindow::release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.TimeWindow.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeWindow::mutable_end_time() {
  
  if (end_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.TimeWindow.end_time)
  return end_time_;
}
inline void TimeWindow::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.TimeWindow.end_time)
}

// -------------------------------------------------------------------

// Asset

// string name = 1;
inline void Asset::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Asset::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.Asset.name)
  return name_.GetNoArena();
}
inline void Asset::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.Asset.name)
}
#if LANG_CXX11
inline void Asset::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.asset.v1beta1.Asset.name)
}
#endif
inline void Asset::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.Asset.name)
}
inline void Asset::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.Asset.name)
}
inline ::std::string* Asset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.Asset.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Asset::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.Asset.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Asset::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.Asset.name)
}

// string asset_type = 2;
inline void Asset::clear_asset_type() {
  asset_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Asset::asset_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.Asset.asset_type)
  return asset_type_.GetNoArena();
}
inline void Asset::set_asset_type(const ::std::string& value) {
  
  asset_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.Asset.asset_type)
}
#if LANG_CXX11
inline void Asset::set_asset_type(::std::string&& value) {
  
  asset_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.asset.v1beta1.Asset.asset_type)
}
#endif
inline void Asset::set_asset_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  asset_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.Asset.asset_type)
}
inline void Asset::set_asset_type(const char* value, size_t size) {
  
  asset_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.Asset.asset_type)
}
inline ::std::string* Asset::mutable_asset_type() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.Asset.asset_type)
  return asset_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Asset::release_asset_type() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.Asset.asset_type)
  
  return asset_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Asset::set_allocated_asset_type(::std::string* asset_type) {
  if (asset_type != NULL) {
    
  } else {
    
  }
  asset_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_type);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.Asset.asset_type)
}

// .google.cloud.asset.v1beta1.Resource resource = 3;
inline bool Asset::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void Asset::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::cloud::asset::v1beta1::Resource& Asset::_internal_resource() const {
  return *resource_;
}
inline const ::google::cloud::asset::v1beta1::Resource& Asset::resource() const {
  const ::google::cloud::asset::v1beta1::Resource* p = resource_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.Asset.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::asset::v1beta1::Resource*>(
      &::google::cloud::asset::v1beta1::_Resource_default_instance_);
}
inline ::google::cloud::asset::v1beta1::Resource* Asset::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.Asset.resource)
  
  ::google::cloud::asset::v1beta1::Resource* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::cloud::asset::v1beta1::Resource* Asset::mutable_resource() {
  
  if (resource_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::asset::v1beta1::Resource>(GetArenaNoVirtual());
    resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.Asset.resource)
  return resource_;
}
inline void Asset::set_allocated_resource(::google::cloud::asset::v1beta1::Resource* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.Asset.resource)
}

// .google.iam.v1.Policy iam_policy = 4;
inline bool Asset::has_iam_policy() const {
  return this != internal_default_instance() && iam_policy_ != NULL;
}
inline const ::google::iam::v1::Policy& Asset::_internal_iam_policy() const {
  return *iam_policy_;
}
inline const ::google::iam::v1::Policy& Asset::iam_policy() const {
  const ::google::iam::v1::Policy* p = iam_policy_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.Asset.iam_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::google::iam::v1::Policy*>(
      &::google::iam::v1::_Policy_default_instance_);
}
inline ::google::iam::v1::Policy* Asset::release_iam_policy() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.Asset.iam_policy)
  
  ::google::iam::v1::Policy* temp = iam_policy_;
  iam_policy_ = NULL;
  return temp;
}
inline ::google::iam::v1::Policy* Asset::mutable_iam_policy() {
  
  if (iam_policy_ == NULL) {
    auto* p = CreateMaybeMessage<::google::iam::v1::Policy>(GetArenaNoVirtual());
    iam_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.Asset.iam_policy)
  return iam_policy_;
}
inline void Asset::set_allocated_iam_policy(::google::iam::v1::Policy* iam_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(iam_policy_);
  }
  if (iam_policy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(iam_policy)->GetArena();
    if (message_arena != submessage_arena) {
      iam_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, iam_policy, submessage_arena);
    }
    
  } else {
    
  }
  iam_policy_ = iam_policy;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.Asset.iam_policy)
}

// -------------------------------------------------------------------

// Resource

// string version = 1;
inline void Resource::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Resource::version() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.Resource.version)
  return version_.GetNoArena();
}
inline void Resource::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.Resource.version)
}
#if LANG_CXX11
inline void Resource::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.asset.v1beta1.Resource.version)
}
#endif
inline void Resource::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.Resource.version)
}
inline void Resource::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.Resource.version)
}
inline ::std::string* Resource::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.Resource.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Resource::release_version() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.Resource.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resource::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.Resource.version)
}

// string discovery_document_uri = 2;
inline void Resource::clear_discovery_document_uri() {
  discovery_document_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Resource::discovery_document_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.Resource.discovery_document_uri)
  return discovery_document_uri_.GetNoArena();
}
inline void Resource::set_discovery_document_uri(const ::std::string& value) {
  
  discovery_document_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.Resource.discovery_document_uri)
}
#if LANG_CXX11
inline void Resource::set_discovery_document_uri(::std::string&& value) {
  
  discovery_document_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.asset.v1beta1.Resource.discovery_document_uri)
}
#endif
inline void Resource::set_discovery_document_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  discovery_document_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.Resource.discovery_document_uri)
}
inline void Resource::set_discovery_document_uri(const char* value, size_t size) {
  
  discovery_document_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.Resource.discovery_document_uri)
}
inline ::std::string* Resource::mutable_discovery_document_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.Resource.discovery_document_uri)
  return discovery_document_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Resource::release_discovery_document_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.Resource.discovery_document_uri)
  
  return discovery_document_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resource::set_allocated_discovery_document_uri(::std::string* discovery_document_uri) {
  if (discovery_document_uri != NULL) {
    
  } else {
    
  }
  discovery_document_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), discovery_document_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.Resource.discovery_document_uri)
}

// string discovery_name = 3;
inline void Resource::clear_discovery_name() {
  discovery_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Resource::discovery_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.Resource.discovery_name)
  return discovery_name_.GetNoArena();
}
inline void Resource::set_discovery_name(const ::std::string& value) {
  
  discovery_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.Resource.discovery_name)
}
#if LANG_CXX11
inline void Resource::set_discovery_name(::std::string&& value) {
  
  discovery_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.asset.v1beta1.Resource.discovery_name)
}
#endif
inline void Resource::set_discovery_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  discovery_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.Resource.discovery_name)
}
inline void Resource::set_discovery_name(const char* value, size_t size) {
  
  discovery_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.Resource.discovery_name)
}
inline ::std::string* Resource::mutable_discovery_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.Resource.discovery_name)
  return discovery_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Resource::release_discovery_name() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.Resource.discovery_name)
  
  return discovery_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resource::set_allocated_discovery_name(::std::string* discovery_name) {
  if (discovery_name != NULL) {
    
  } else {
    
  }
  discovery_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), discovery_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.Resource.discovery_name)
}

// string resource_url = 4;
inline void Resource::clear_resource_url() {
  resource_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Resource::resource_url() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.Resource.resource_url)
  return resource_url_.GetNoArena();
}
inline void Resource::set_resource_url(const ::std::string& value) {
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.Resource.resource_url)
}
#if LANG_CXX11
inline void Resource::set_resource_url(::std::string&& value) {
  
  resource_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.asset.v1beta1.Resource.resource_url)
}
#endif
inline void Resource::set_resource_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.Resource.resource_url)
}
inline void Resource::set_resource_url(const char* value, size_t size) {
  
  resource_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.Resource.resource_url)
}
inline ::std::string* Resource::mutable_resource_url() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.Resource.resource_url)
  return resource_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Resource::release_resource_url() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.Resource.resource_url)
  
  return resource_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resource::set_allocated_resource_url(::std::string* resource_url) {
  if (resource_url != NULL) {
    
  } else {
    
  }
  resource_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_url);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.Resource.resource_url)
}

// string parent = 5;
inline void Resource::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Resource::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.Resource.parent)
  return parent_.GetNoArena();
}
inline void Resource::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.Resource.parent)
}
#if LANG_CXX11
inline void Resource::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.asset.v1beta1.Resource.parent)
}
#endif
inline void Resource::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.Resource.parent)
}
inline void Resource::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.Resource.parent)
}
inline ::std::string* Resource::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.Resource.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Resource::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.Resource.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resource::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.Resource.parent)
}

// .google.protobuf.Struct data = 6;
inline bool Resource::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline const ::google::protobuf::Struct& Resource::_internal_data() const {
  return *data_;
}
inline const ::google::protobuf::Struct& Resource::data() const {
  const ::google::protobuf::Struct* p = data_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.Resource.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* Resource::release_data() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.Resource.data)
  
  ::google::protobuf::Struct* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* Resource::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.Resource.data)
  return data_;
}
inline void Resource::set_allocated_data(::google::protobuf::Struct* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.Resource.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace asset
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2fasset_2fv1beta1_2fassets_2eproto
