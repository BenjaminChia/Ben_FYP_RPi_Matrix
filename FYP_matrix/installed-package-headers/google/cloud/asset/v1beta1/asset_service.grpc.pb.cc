// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/asset/v1beta1/asset_service.proto

#include "google/cloud/asset/v1beta1/asset_service.pb.h"
#include "google/cloud/asset/v1beta1/asset_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace cloud {
namespace asset {
namespace v1beta1 {

static const char* AssetService_method_names[] = {
  "/google.cloud.asset.v1beta1.AssetService/ExportAssets",
  "/google.cloud.asset.v1beta1.AssetService/BatchGetAssetsHistory",
};

std::unique_ptr< AssetService::Stub> AssetService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AssetService::Stub> stub(new AssetService::Stub(channel));
  return stub;
}

AssetService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ExportAssets_(AssetService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchGetAssetsHistory_(AssetService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AssetService::Stub::ExportAssets(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExportAssets_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AssetService::Stub::AsyncExportAssetsRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_ExportAssets_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AssetService::Stub::PrepareAsyncExportAssetsRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_ExportAssets_, context, request, false);
}

::grpc::Status AssetService::Stub::BatchGetAssetsHistory(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BatchGetAssetsHistory_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>* AssetService::Stub::AsyncBatchGetAssetsHistoryRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>::Create(channel_.get(), cq, rpcmethod_BatchGetAssetsHistory_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>* AssetService::Stub::PrepareAsyncBatchGetAssetsHistoryRaw(::grpc::ClientContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>::Create(channel_.get(), cq, rpcmethod_BatchGetAssetsHistory_, context, request, false);
}

AssetService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AssetService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AssetService::Service, ::google::cloud::asset::v1beta1::ExportAssetsRequest, ::google::longrunning::Operation>(
          std::mem_fn(&AssetService::Service::ExportAssets), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AssetService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AssetService::Service, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>(
          std::mem_fn(&AssetService::Service::BatchGetAssetsHistory), this)));
}

AssetService::Service::~Service() {
}

::grpc::Status AssetService::Service::ExportAssets(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::ExportAssetsRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AssetService::Service::BatchGetAssetsHistory(::grpc::ServerContext* context, const ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest* request, ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace cloud
}  // namespace asset
}  // namespace v1beta1

