// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/asset/v1beta1/asset_service.proto

#ifndef PROTOBUF_INCLUDED_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto
#define PROTOBUF_INCLUDED_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/cloud/asset/v1beta1/assets.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto 

namespace protobuf_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto
namespace google {
namespace cloud {
namespace asset {
namespace v1beta1 {
class BatchGetAssetsHistoryRequest;
class BatchGetAssetsHistoryRequestDefaultTypeInternal;
extern BatchGetAssetsHistoryRequestDefaultTypeInternal _BatchGetAssetsHistoryRequest_default_instance_;
class BatchGetAssetsHistoryResponse;
class BatchGetAssetsHistoryResponseDefaultTypeInternal;
extern BatchGetAssetsHistoryResponseDefaultTypeInternal _BatchGetAssetsHistoryResponse_default_instance_;
class ExportAssetsRequest;
class ExportAssetsRequestDefaultTypeInternal;
extern ExportAssetsRequestDefaultTypeInternal _ExportAssetsRequest_default_instance_;
class ExportAssetsResponse;
class ExportAssetsResponseDefaultTypeInternal;
extern ExportAssetsResponseDefaultTypeInternal _ExportAssetsResponse_default_instance_;
class GcsDestination;
class GcsDestinationDefaultTypeInternal;
extern GcsDestinationDefaultTypeInternal _GcsDestination_default_instance_;
class OutputConfig;
class OutputConfigDefaultTypeInternal;
extern OutputConfigDefaultTypeInternal _OutputConfig_default_instance_;
}  // namespace v1beta1
}  // namespace asset
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest* Arena::CreateMaybeMessage<::google::cloud::asset::v1beta1::BatchGetAssetsHistoryRequest>(Arena*);
template<> ::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse* Arena::CreateMaybeMessage<::google::cloud::asset::v1beta1::BatchGetAssetsHistoryResponse>(Arena*);
template<> ::google::cloud::asset::v1beta1::ExportAssetsRequest* Arena::CreateMaybeMessage<::google::cloud::asset::v1beta1::ExportAssetsRequest>(Arena*);
template<> ::google::cloud::asset::v1beta1::ExportAssetsResponse* Arena::CreateMaybeMessage<::google::cloud::asset::v1beta1::ExportAssetsResponse>(Arena*);
template<> ::google::cloud::asset::v1beta1::GcsDestination* Arena::CreateMaybeMessage<::google::cloud::asset::v1beta1::GcsDestination>(Arena*);
template<> ::google::cloud::asset::v1beta1::OutputConfig* Arena::CreateMaybeMessage<::google::cloud::asset::v1beta1::OutputConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace asset {
namespace v1beta1 {

enum ContentType {
  CONTENT_TYPE_UNSPECIFIED = 0,
  RESOURCE = 1,
  IAM_POLICY = 2,
  ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ContentType_IsValid(int value);
const ContentType ContentType_MIN = CONTENT_TYPE_UNSPECIFIED;
const ContentType ContentType_MAX = IAM_POLICY;
const int ContentType_ARRAYSIZE = ContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContentType_descriptor();
inline const ::std::string& ContentType_Name(ContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContentType_descriptor(), value);
}
inline bool ContentType_Parse(
    const ::std::string& name, ContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContentType>(
    ContentType_descriptor(), name, value);
}
// ===================================================================

class ExportAssetsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.asset.v1beta1.ExportAssetsRequest) */ {
 public:
  ExportAssetsRequest();
  virtual ~ExportAssetsRequest();

  ExportAssetsRequest(const ExportAssetsRequest& from);

  inline ExportAssetsRequest& operator=(const ExportAssetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExportAssetsRequest(ExportAssetsRequest&& from) noexcept
    : ExportAssetsRequest() {
    *this = ::std::move(from);
  }

  inline ExportAssetsRequest& operator=(ExportAssetsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExportAssetsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportAssetsRequest* internal_default_instance() {
    return reinterpret_cast<const ExportAssetsRequest*>(
               &_ExportAssetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ExportAssetsRequest* other);
  friend void swap(ExportAssetsRequest& a, ExportAssetsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExportAssetsRequest* New() const final {
    return CreateMaybeMessage<ExportAssetsRequest>(NULL);
  }

  ExportAssetsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExportAssetsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExportAssetsRequest& from);
  void MergeFrom(const ExportAssetsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportAssetsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string asset_types = 3;
  int asset_types_size() const;
  void clear_asset_types();
  static const int kAssetTypesFieldNumber = 3;
  const ::std::string& asset_types(int index) const;
  ::std::string* mutable_asset_types(int index);
  void set_asset_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_asset_types(int index, ::std::string&& value);
  #endif
  void set_asset_types(int index, const char* value);
  void set_asset_types(int index, const char* value, size_t size);
  ::std::string* add_asset_types();
  void add_asset_types(const ::std::string& value);
  #if LANG_CXX11
  void add_asset_types(::std::string&& value);
  #endif
  void add_asset_types(const char* value);
  void add_asset_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& asset_types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_asset_types();

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.protobuf.Timestamp read_time = 2;
  bool has_read_time() const;
  void clear_read_time();
  static const int kReadTimeFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_read_time() const;
  public:
  const ::google::protobuf::Timestamp& read_time() const;
  ::google::protobuf::Timestamp* release_read_time();
  ::google::protobuf::Timestamp* mutable_read_time();
  void set_allocated_read_time(::google::protobuf::Timestamp* read_time);

  // .google.cloud.asset.v1beta1.OutputConfig output_config = 5;
  bool has_output_config() const;
  void clear_output_config();
  static const int kOutputConfigFieldNumber = 5;
  private:
  const ::google::cloud::asset::v1beta1::OutputConfig& _internal_output_config() const;
  public:
  const ::google::cloud::asset::v1beta1::OutputConfig& output_config() const;
  ::google::cloud::asset::v1beta1::OutputConfig* release_output_config();
  ::google::cloud::asset::v1beta1::OutputConfig* mutable_output_config();
  void set_allocated_output_config(::google::cloud::asset::v1beta1::OutputConfig* output_config);

  // .google.cloud.asset.v1beta1.ContentType content_type = 4;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 4;
  ::google::cloud::asset::v1beta1::ContentType content_type() const;
  void set_content_type(::google::cloud::asset::v1beta1::ContentType value);

  // @@protoc_insertion_point(class_scope:google.cloud.asset.v1beta1.ExportAssetsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> asset_types_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::Timestamp* read_time_;
  ::google::cloud::asset::v1beta1::OutputConfig* output_config_;
  int content_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExportAssetsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.asset.v1beta1.ExportAssetsResponse) */ {
 public:
  ExportAssetsResponse();
  virtual ~ExportAssetsResponse();

  ExportAssetsResponse(const ExportAssetsResponse& from);

  inline ExportAssetsResponse& operator=(const ExportAssetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExportAssetsResponse(ExportAssetsResponse&& from) noexcept
    : ExportAssetsResponse() {
    *this = ::std::move(from);
  }

  inline ExportAssetsResponse& operator=(ExportAssetsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExportAssetsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportAssetsResponse* internal_default_instance() {
    return reinterpret_cast<const ExportAssetsResponse*>(
               &_ExportAssetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ExportAssetsResponse* other);
  friend void swap(ExportAssetsResponse& a, ExportAssetsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExportAssetsResponse* New() const final {
    return CreateMaybeMessage<ExportAssetsResponse>(NULL);
  }

  ExportAssetsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExportAssetsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExportAssetsResponse& from);
  void MergeFrom(const ExportAssetsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportAssetsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp read_time = 1;
  bool has_read_time() const;
  void clear_read_time();
  static const int kReadTimeFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_read_time() const;
  public:
  const ::google::protobuf::Timestamp& read_time() const;
  ::google::protobuf::Timestamp* release_read_time();
  ::google::protobuf::Timestamp* mutable_read_time();
  void set_allocated_read_time(::google::protobuf::Timestamp* read_time);

  // .google.cloud.asset.v1beta1.OutputConfig output_config = 2;
  bool has_output_config() const;
  void clear_output_config();
  static const int kOutputConfigFieldNumber = 2;
  private:
  const ::google::cloud::asset::v1beta1::OutputConfig& _internal_output_config() const;
  public:
  const ::google::cloud::asset::v1beta1::OutputConfig& output_config() const;
  ::google::cloud::asset::v1beta1::OutputConfig* release_output_config();
  ::google::cloud::asset::v1beta1::OutputConfig* mutable_output_config();
  void set_allocated_output_config(::google::cloud::asset::v1beta1::OutputConfig* output_config);

  // @@protoc_insertion_point(class_scope:google.cloud.asset.v1beta1.ExportAssetsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* read_time_;
  ::google::cloud::asset::v1beta1::OutputConfig* output_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchGetAssetsHistoryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest) */ {
 public:
  BatchGetAssetsHistoryRequest();
  virtual ~BatchGetAssetsHistoryRequest();

  BatchGetAssetsHistoryRequest(const BatchGetAssetsHistoryRequest& from);

  inline BatchGetAssetsHistoryRequest& operator=(const BatchGetAssetsHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchGetAssetsHistoryRequest(BatchGetAssetsHistoryRequest&& from) noexcept
    : BatchGetAssetsHistoryRequest() {
    *this = ::std::move(from);
  }

  inline BatchGetAssetsHistoryRequest& operator=(BatchGetAssetsHistoryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetAssetsHistoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchGetAssetsHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const BatchGetAssetsHistoryRequest*>(
               &_BatchGetAssetsHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BatchGetAssetsHistoryRequest* other);
  friend void swap(BatchGetAssetsHistoryRequest& a, BatchGetAssetsHistoryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchGetAssetsHistoryRequest* New() const final {
    return CreateMaybeMessage<BatchGetAssetsHistoryRequest>(NULL);
  }

  BatchGetAssetsHistoryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchGetAssetsHistoryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchGetAssetsHistoryRequest& from);
  void MergeFrom(const BatchGetAssetsHistoryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchGetAssetsHistoryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string asset_names = 2;
  int asset_names_size() const;
  void clear_asset_names();
  static const int kAssetNamesFieldNumber = 2;
  const ::std::string& asset_names(int index) const;
  ::std::string* mutable_asset_names(int index);
  void set_asset_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_asset_names(int index, ::std::string&& value);
  #endif
  void set_asset_names(int index, const char* value);
  void set_asset_names(int index, const char* value, size_t size);
  ::std::string* add_asset_names();
  void add_asset_names(const ::std::string& value);
  #if LANG_CXX11
  void add_asset_names(::std::string&& value);
  #endif
  void add_asset_names(const char* value);
  void add_asset_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& asset_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_asset_names();

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.cloud.asset.v1beta1.TimeWindow read_time_window = 4;
  bool has_read_time_window() const;
  void clear_read_time_window();
  static const int kReadTimeWindowFieldNumber = 4;
  private:
  const ::google::cloud::asset::v1beta1::TimeWindow& _internal_read_time_window() const;
  public:
  const ::google::cloud::asset::v1beta1::TimeWindow& read_time_window() const;
  ::google::cloud::asset::v1beta1::TimeWindow* release_read_time_window();
  ::google::cloud::asset::v1beta1::TimeWindow* mutable_read_time_window();
  void set_allocated_read_time_window(::google::cloud::asset::v1beta1::TimeWindow* read_time_window);

  // .google.cloud.asset.v1beta1.ContentType content_type = 3;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 3;
  ::google::cloud::asset::v1beta1::ContentType content_type() const;
  void set_content_type(::google::cloud::asset::v1beta1::ContentType value);

  // @@protoc_insertion_point(class_scope:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> asset_names_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::cloud::asset::v1beta1::TimeWindow* read_time_window_;
  int content_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchGetAssetsHistoryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.asset.v1beta1.BatchGetAssetsHistoryResponse) */ {
 public:
  BatchGetAssetsHistoryResponse();
  virtual ~BatchGetAssetsHistoryResponse();

  BatchGetAssetsHistoryResponse(const BatchGetAssetsHistoryResponse& from);

  inline BatchGetAssetsHistoryResponse& operator=(const BatchGetAssetsHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchGetAssetsHistoryResponse(BatchGetAssetsHistoryResponse&& from) noexcept
    : BatchGetAssetsHistoryResponse() {
    *this = ::std::move(from);
  }

  inline BatchGetAssetsHistoryResponse& operator=(BatchGetAssetsHistoryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetAssetsHistoryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchGetAssetsHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const BatchGetAssetsHistoryResponse*>(
               &_BatchGetAssetsHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BatchGetAssetsHistoryResponse* other);
  friend void swap(BatchGetAssetsHistoryResponse& a, BatchGetAssetsHistoryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchGetAssetsHistoryResponse* New() const final {
    return CreateMaybeMessage<BatchGetAssetsHistoryResponse>(NULL);
  }

  BatchGetAssetsHistoryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchGetAssetsHistoryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchGetAssetsHistoryResponse& from);
  void MergeFrom(const BatchGetAssetsHistoryResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchGetAssetsHistoryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.asset.v1beta1.TemporalAsset assets = 1;
  int assets_size() const;
  void clear_assets();
  static const int kAssetsFieldNumber = 1;
  ::google::cloud::asset::v1beta1::TemporalAsset* mutable_assets(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::asset::v1beta1::TemporalAsset >*
      mutable_assets();
  const ::google::cloud::asset::v1beta1::TemporalAsset& assets(int index) const;
  ::google::cloud::asset::v1beta1::TemporalAsset* add_assets();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::asset::v1beta1::TemporalAsset >&
      assets() const;

  // @@protoc_insertion_point(class_scope:google.cloud.asset.v1beta1.BatchGetAssetsHistoryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::asset::v1beta1::TemporalAsset > assets_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OutputConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.asset.v1beta1.OutputConfig) */ {
 public:
  OutputConfig();
  virtual ~OutputConfig();

  OutputConfig(const OutputConfig& from);

  inline OutputConfig& operator=(const OutputConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutputConfig(OutputConfig&& from) noexcept
    : OutputConfig() {
    *this = ::std::move(from);
  }

  inline OutputConfig& operator=(OutputConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OutputConfig& default_instance();

  enum DestinationCase {
    kGcsDestination = 1,
    DESTINATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputConfig* internal_default_instance() {
    return reinterpret_cast<const OutputConfig*>(
               &_OutputConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(OutputConfig* other);
  friend void swap(OutputConfig& a, OutputConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutputConfig* New() const final {
    return CreateMaybeMessage<OutputConfig>(NULL);
  }

  OutputConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OutputConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OutputConfig& from);
  void MergeFrom(const OutputConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.asset.v1beta1.GcsDestination gcs_destination = 1;
  bool has_gcs_destination() const;
  void clear_gcs_destination();
  static const int kGcsDestinationFieldNumber = 1;
  private:
  const ::google::cloud::asset::v1beta1::GcsDestination& _internal_gcs_destination() const;
  public:
  const ::google::cloud::asset::v1beta1::GcsDestination& gcs_destination() const;
  ::google::cloud::asset::v1beta1::GcsDestination* release_gcs_destination();
  ::google::cloud::asset::v1beta1::GcsDestination* mutable_gcs_destination();
  void set_allocated_gcs_destination(::google::cloud::asset::v1beta1::GcsDestination* gcs_destination);

  void clear_destination();
  DestinationCase destination_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.asset.v1beta1.OutputConfig)
 private:
  void set_has_gcs_destination();

  inline bool has_destination() const;
  inline void clear_has_destination();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DestinationUnion {
    DestinationUnion() {}
    ::google::cloud::asset::v1beta1::GcsDestination* gcs_destination_;
  } destination_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GcsDestination : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.asset.v1beta1.GcsDestination) */ {
 public:
  GcsDestination();
  virtual ~GcsDestination();

  GcsDestination(const GcsDestination& from);

  inline GcsDestination& operator=(const GcsDestination& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GcsDestination(GcsDestination&& from) noexcept
    : GcsDestination() {
    *this = ::std::move(from);
  }

  inline GcsDestination& operator=(GcsDestination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GcsDestination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcsDestination* internal_default_instance() {
    return reinterpret_cast<const GcsDestination*>(
               &_GcsDestination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GcsDestination* other);
  friend void swap(GcsDestination& a, GcsDestination& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GcsDestination* New() const final {
    return CreateMaybeMessage<GcsDestination>(NULL);
  }

  GcsDestination* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GcsDestination>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GcsDestination& from);
  void MergeFrom(const GcsDestination& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcsDestination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:google.cloud.asset.v1beta1.GcsDestination)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExportAssetsRequest

// string parent = 1;
inline void ExportAssetsRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExportAssetsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.ExportAssetsRequest.parent)
  return parent_.GetNoArena();
}
inline void ExportAssetsRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.ExportAssetsRequest.parent)
}
#if LANG_CXX11
inline void ExportAssetsRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.asset.v1beta1.ExportAssetsRequest.parent)
}
#endif
inline void ExportAssetsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.ExportAssetsRequest.parent)
}
inline void ExportAssetsRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.ExportAssetsRequest.parent)
}
inline ::std::string* ExportAssetsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.ExportAssetsRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportAssetsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.ExportAssetsRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportAssetsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.ExportAssetsRequest.parent)
}

// .google.protobuf.Timestamp read_time = 2;
inline bool ExportAssetsRequest::has_read_time() const {
  return this != internal_default_instance() && read_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& ExportAssetsRequest::_internal_read_time() const {
  return *read_time_;
}
inline const ::google::protobuf::Timestamp& ExportAssetsRequest::read_time() const {
  const ::google::protobuf::Timestamp* p = read_time_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.ExportAssetsRequest.read_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ExportAssetsRequest::release_read_time() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.ExportAssetsRequest.read_time)
  
  ::google::protobuf::Timestamp* temp = read_time_;
  read_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ExportAssetsRequest::mutable_read_time() {
  
  if (read_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    read_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.ExportAssetsRequest.read_time)
  return read_time_;
}
inline void ExportAssetsRequest::set_allocated_read_time(::google::protobuf::Timestamp* read_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(read_time_);
  }
  if (read_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(read_time)->GetArena();
    if (message_arena != submessage_arena) {
      read_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    
  } else {
    
  }
  read_time_ = read_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.ExportAssetsRequest.read_time)
}

// repeated string asset_types = 3;
inline int ExportAssetsRequest::asset_types_size() const {
  return asset_types_.size();
}
inline void ExportAssetsRequest::clear_asset_types() {
  asset_types_.Clear();
}
inline const ::std::string& ExportAssetsRequest::asset_types(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
  return asset_types_.Get(index);
}
inline ::std::string* ExportAssetsRequest::mutable_asset_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
  return asset_types_.Mutable(index);
}
inline void ExportAssetsRequest::set_asset_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
  asset_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ExportAssetsRequest::set_asset_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
  asset_types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ExportAssetsRequest::set_asset_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  asset_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
}
inline void ExportAssetsRequest::set_asset_types(int index, const char* value, size_t size) {
  asset_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
}
inline ::std::string* ExportAssetsRequest::add_asset_types() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
  return asset_types_.Add();
}
inline void ExportAssetsRequest::add_asset_types(const ::std::string& value) {
  asset_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
}
#if LANG_CXX11
inline void ExportAssetsRequest::add_asset_types(::std::string&& value) {
  asset_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
}
#endif
inline void ExportAssetsRequest::add_asset_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  asset_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
}
inline void ExportAssetsRequest::add_asset_types(const char* value, size_t size) {
  asset_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExportAssetsRequest::asset_types() const {
  // @@protoc_insertion_point(field_list:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
  return asset_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExportAssetsRequest::mutable_asset_types() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.asset.v1beta1.ExportAssetsRequest.asset_types)
  return &asset_types_;
}

// .google.cloud.asset.v1beta1.ContentType content_type = 4;
inline void ExportAssetsRequest::clear_content_type() {
  content_type_ = 0;
}
inline ::google::cloud::asset::v1beta1::ContentType ExportAssetsRequest::content_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.ExportAssetsRequest.content_type)
  return static_cast< ::google::cloud::asset::v1beta1::ContentType >(content_type_);
}
inline void ExportAssetsRequest::set_content_type(::google::cloud::asset::v1beta1::ContentType value) {
  
  content_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.ExportAssetsRequest.content_type)
}

// .google.cloud.asset.v1beta1.OutputConfig output_config = 5;
inline bool ExportAssetsRequest::has_output_config() const {
  return this != internal_default_instance() && output_config_ != NULL;
}
inline void ExportAssetsRequest::clear_output_config() {
  if (GetArenaNoVirtual() == NULL && output_config_ != NULL) {
    delete output_config_;
  }
  output_config_ = NULL;
}
inline const ::google::cloud::asset::v1beta1::OutputConfig& ExportAssetsRequest::_internal_output_config() const {
  return *output_config_;
}
inline const ::google::cloud::asset::v1beta1::OutputConfig& ExportAssetsRequest::output_config() const {
  const ::google::cloud::asset::v1beta1::OutputConfig* p = output_config_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.ExportAssetsRequest.output_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::asset::v1beta1::OutputConfig*>(
      &::google::cloud::asset::v1beta1::_OutputConfig_default_instance_);
}
inline ::google::cloud::asset::v1beta1::OutputConfig* ExportAssetsRequest::release_output_config() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.ExportAssetsRequest.output_config)
  
  ::google::cloud::asset::v1beta1::OutputConfig* temp = output_config_;
  output_config_ = NULL;
  return temp;
}
inline ::google::cloud::asset::v1beta1::OutputConfig* ExportAssetsRequest::mutable_output_config() {
  
  if (output_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::asset::v1beta1::OutputConfig>(GetArenaNoVirtual());
    output_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.ExportAssetsRequest.output_config)
  return output_config_;
}
inline void ExportAssetsRequest::set_allocated_output_config(::google::cloud::asset::v1beta1::OutputConfig* output_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete output_config_;
  }
  if (output_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_config, submessage_arena);
    }
    
  } else {
    
  }
  output_config_ = output_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.ExportAssetsRequest.output_config)
}

// -------------------------------------------------------------------

// ExportAssetsResponse

// .google.protobuf.Timestamp read_time = 1;
inline bool ExportAssetsResponse::has_read_time() const {
  return this != internal_default_instance() && read_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& ExportAssetsResponse::_internal_read_time() const {
  return *read_time_;
}
inline const ::google::protobuf::Timestamp& ExportAssetsResponse::read_time() const {
  const ::google::protobuf::Timestamp* p = read_time_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.ExportAssetsResponse.read_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ExportAssetsResponse::release_read_time() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.ExportAssetsResponse.read_time)
  
  ::google::protobuf::Timestamp* temp = read_time_;
  read_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ExportAssetsResponse::mutable_read_time() {
  
  if (read_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    read_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.ExportAssetsResponse.read_time)
  return read_time_;
}
inline void ExportAssetsResponse::set_allocated_read_time(::google::protobuf::Timestamp* read_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(read_time_);
  }
  if (read_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(read_time)->GetArena();
    if (message_arena != submessage_arena) {
      read_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    
  } else {
    
  }
  read_time_ = read_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.ExportAssetsResponse.read_time)
}

// .google.cloud.asset.v1beta1.OutputConfig output_config = 2;
inline bool ExportAssetsResponse::has_output_config() const {
  return this != internal_default_instance() && output_config_ != NULL;
}
inline void ExportAssetsResponse::clear_output_config() {
  if (GetArenaNoVirtual() == NULL && output_config_ != NULL) {
    delete output_config_;
  }
  output_config_ = NULL;
}
inline const ::google::cloud::asset::v1beta1::OutputConfig& ExportAssetsResponse::_internal_output_config() const {
  return *output_config_;
}
inline const ::google::cloud::asset::v1beta1::OutputConfig& ExportAssetsResponse::output_config() const {
  const ::google::cloud::asset::v1beta1::OutputConfig* p = output_config_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.ExportAssetsResponse.output_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::asset::v1beta1::OutputConfig*>(
      &::google::cloud::asset::v1beta1::_OutputConfig_default_instance_);
}
inline ::google::cloud::asset::v1beta1::OutputConfig* ExportAssetsResponse::release_output_config() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.ExportAssetsResponse.output_config)
  
  ::google::cloud::asset::v1beta1::OutputConfig* temp = output_config_;
  output_config_ = NULL;
  return temp;
}
inline ::google::cloud::asset::v1beta1::OutputConfig* ExportAssetsResponse::mutable_output_config() {
  
  if (output_config_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::asset::v1beta1::OutputConfig>(GetArenaNoVirtual());
    output_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.ExportAssetsResponse.output_config)
  return output_config_;
}
inline void ExportAssetsResponse::set_allocated_output_config(::google::cloud::asset::v1beta1::OutputConfig* output_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete output_config_;
  }
  if (output_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_config, submessage_arena);
    }
    
  } else {
    
  }
  output_config_ = output_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.ExportAssetsResponse.output_config)
}

// -------------------------------------------------------------------

// BatchGetAssetsHistoryRequest

// string parent = 1;
inline void BatchGetAssetsHistoryRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchGetAssetsHistoryRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.parent)
  return parent_.GetNoArena();
}
inline void BatchGetAssetsHistoryRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.parent)
}
#if LANG_CXX11
inline void BatchGetAssetsHistoryRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.parent)
}
#endif
inline void BatchGetAssetsHistoryRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.parent)
}
inline void BatchGetAssetsHistoryRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.parent)
}
inline ::std::string* BatchGetAssetsHistoryRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchGetAssetsHistoryRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchGetAssetsHistoryRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.parent)
}

// repeated string asset_names = 2;
inline int BatchGetAssetsHistoryRequest::asset_names_size() const {
  return asset_names_.size();
}
inline void BatchGetAssetsHistoryRequest::clear_asset_names() {
  asset_names_.Clear();
}
inline const ::std::string& BatchGetAssetsHistoryRequest::asset_names(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
  return asset_names_.Get(index);
}
inline ::std::string* BatchGetAssetsHistoryRequest::mutable_asset_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
  return asset_names_.Mutable(index);
}
inline void BatchGetAssetsHistoryRequest::set_asset_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
  asset_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BatchGetAssetsHistoryRequest::set_asset_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
  asset_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BatchGetAssetsHistoryRequest::set_asset_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  asset_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
}
inline void BatchGetAssetsHistoryRequest::set_asset_names(int index, const char* value, size_t size) {
  asset_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
}
inline ::std::string* BatchGetAssetsHistoryRequest::add_asset_names() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
  return asset_names_.Add();
}
inline void BatchGetAssetsHistoryRequest::add_asset_names(const ::std::string& value) {
  asset_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
}
#if LANG_CXX11
inline void BatchGetAssetsHistoryRequest::add_asset_names(::std::string&& value) {
  asset_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
}
#endif
inline void BatchGetAssetsHistoryRequest::add_asset_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  asset_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
}
inline void BatchGetAssetsHistoryRequest::add_asset_names(const char* value, size_t size) {
  asset_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchGetAssetsHistoryRequest::asset_names() const {
  // @@protoc_insertion_point(field_list:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
  return asset_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BatchGetAssetsHistoryRequest::mutable_asset_names() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.asset_names)
  return &asset_names_;
}

// .google.cloud.asset.v1beta1.ContentType content_type = 3;
inline void BatchGetAssetsHistoryRequest::clear_content_type() {
  content_type_ = 0;
}
inline ::google::cloud::asset::v1beta1::ContentType BatchGetAssetsHistoryRequest::content_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.content_type)
  return static_cast< ::google::cloud::asset::v1beta1::ContentType >(content_type_);
}
inline void BatchGetAssetsHistoryRequest::set_content_type(::google::cloud::asset::v1beta1::ContentType value) {
  
  content_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.content_type)
}

// .google.cloud.asset.v1beta1.TimeWindow read_time_window = 4;
inline bool BatchGetAssetsHistoryRequest::has_read_time_window() const {
  return this != internal_default_instance() && read_time_window_ != NULL;
}
inline const ::google::cloud::asset::v1beta1::TimeWindow& BatchGetAssetsHistoryRequest::_internal_read_time_window() const {
  return *read_time_window_;
}
inline const ::google::cloud::asset::v1beta1::TimeWindow& BatchGetAssetsHistoryRequest::read_time_window() const {
  const ::google::cloud::asset::v1beta1::TimeWindow* p = read_time_window_;
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.read_time_window)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::asset::v1beta1::TimeWindow*>(
      &::google::cloud::asset::v1beta1::_TimeWindow_default_instance_);
}
inline ::google::cloud::asset::v1beta1::TimeWindow* BatchGetAssetsHistoryRequest::release_read_time_window() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.read_time_window)
  
  ::google::cloud::asset::v1beta1::TimeWindow* temp = read_time_window_;
  read_time_window_ = NULL;
  return temp;
}
inline ::google::cloud::asset::v1beta1::TimeWindow* BatchGetAssetsHistoryRequest::mutable_read_time_window() {
  
  if (read_time_window_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::asset::v1beta1::TimeWindow>(GetArenaNoVirtual());
    read_time_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.read_time_window)
  return read_time_window_;
}
inline void BatchGetAssetsHistoryRequest::set_allocated_read_time_window(::google::cloud::asset::v1beta1::TimeWindow* read_time_window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(read_time_window_);
  }
  if (read_time_window) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      read_time_window = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_time_window, submessage_arena);
    }
    
  } else {
    
  }
  read_time_window_ = read_time_window;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.BatchGetAssetsHistoryRequest.read_time_window)
}

// -------------------------------------------------------------------

// BatchGetAssetsHistoryResponse

// repeated .google.cloud.asset.v1beta1.TemporalAsset assets = 1;
inline int BatchGetAssetsHistoryResponse::assets_size() const {
  return assets_.size();
}
inline ::google::cloud::asset::v1beta1::TemporalAsset* BatchGetAssetsHistoryResponse::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.BatchGetAssetsHistoryResponse.assets)
  return assets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::asset::v1beta1::TemporalAsset >*
BatchGetAssetsHistoryResponse::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.asset.v1beta1.BatchGetAssetsHistoryResponse.assets)
  return &assets_;
}
inline const ::google::cloud::asset::v1beta1::TemporalAsset& BatchGetAssetsHistoryResponse::assets(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.BatchGetAssetsHistoryResponse.assets)
  return assets_.Get(index);
}
inline ::google::cloud::asset::v1beta1::TemporalAsset* BatchGetAssetsHistoryResponse::add_assets() {
  // @@protoc_insertion_point(field_add:google.cloud.asset.v1beta1.BatchGetAssetsHistoryResponse.assets)
  return assets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::asset::v1beta1::TemporalAsset >&
BatchGetAssetsHistoryResponse::assets() const {
  // @@protoc_insertion_point(field_list:google.cloud.asset.v1beta1.BatchGetAssetsHistoryResponse.assets)
  return assets_;
}

// -------------------------------------------------------------------

// OutputConfig

// .google.cloud.asset.v1beta1.GcsDestination gcs_destination = 1;
inline bool OutputConfig::has_gcs_destination() const {
  return destination_case() == kGcsDestination;
}
inline void OutputConfig::set_has_gcs_destination() {
  _oneof_case_[0] = kGcsDestination;
}
inline void OutputConfig::clear_gcs_destination() {
  if (has_gcs_destination()) {
    delete destination_.gcs_destination_;
    clear_has_destination();
  }
}
inline const ::google::cloud::asset::v1beta1::GcsDestination& OutputConfig::_internal_gcs_destination() const {
  return *destination_.gcs_destination_;
}
inline ::google::cloud::asset::v1beta1::GcsDestination* OutputConfig::release_gcs_destination() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.OutputConfig.gcs_destination)
  if (has_gcs_destination()) {
    clear_has_destination();
      ::google::cloud::asset::v1beta1::GcsDestination* temp = destination_.gcs_destination_;
    destination_.gcs_destination_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::asset::v1beta1::GcsDestination& OutputConfig::gcs_destination() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.OutputConfig.gcs_destination)
  return has_gcs_destination()
      ? *destination_.gcs_destination_
      : *reinterpret_cast< ::google::cloud::asset::v1beta1::GcsDestination*>(&::google::cloud::asset::v1beta1::_GcsDestination_default_instance_);
}
inline ::google::cloud::asset::v1beta1::GcsDestination* OutputConfig::mutable_gcs_destination() {
  if (!has_gcs_destination()) {
    clear_destination();
    set_has_gcs_destination();
    destination_.gcs_destination_ = CreateMaybeMessage< ::google::cloud::asset::v1beta1::GcsDestination >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.OutputConfig.gcs_destination)
  return destination_.gcs_destination_;
}

inline bool OutputConfig::has_destination() const {
  return destination_case() != DESTINATION_NOT_SET;
}
inline void OutputConfig::clear_has_destination() {
  _oneof_case_[0] = DESTINATION_NOT_SET;
}
inline OutputConfig::DestinationCase OutputConfig::destination_case() const {
  return OutputConfig::DestinationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GcsDestination

// string uri = 1;
inline void GcsDestination::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GcsDestination::uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.asset.v1beta1.GcsDestination.uri)
  return uri_.GetNoArena();
}
inline void GcsDestination::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.asset.v1beta1.GcsDestination.uri)
}
#if LANG_CXX11
inline void GcsDestination::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.asset.v1beta1.GcsDestination.uri)
}
#endif
inline void GcsDestination::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.asset.v1beta1.GcsDestination.uri)
}
inline void GcsDestination::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.asset.v1beta1.GcsDestination.uri)
}
inline ::std::string* GcsDestination::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.asset.v1beta1.GcsDestination.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GcsDestination::release_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.asset.v1beta1.GcsDestination.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GcsDestination::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.asset.v1beta1.GcsDestination.uri)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace asset
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::asset::v1beta1::ContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::asset::v1beta1::ContentType>() {
  return ::google::cloud::asset::v1beta1::ContentType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fcloud_2fasset_2fv1beta1_2fasset_5fservice_2eproto
